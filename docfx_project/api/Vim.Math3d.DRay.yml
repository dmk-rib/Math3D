### YamlMime:ManagedReference
items:
- uid: Vim.Math3d.DRay
  commentId: T:Vim.Math3d.DRay
  id: DRay
  parent: Vim.Math3d
  children:
  - Vim.Math3d.DRay.#ctor(System.ValueTuple{Vim.Math3d.DVector3,Vim.Math3d.DVector3})
  - Vim.Math3d.DRay.#ctor(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  - Vim.Math3d.DRay.AlmostEquals(Vim.Math3d.DRay,System.Single)
  - Vim.Math3d.DRay.Create(System.ValueTuple{Vim.Math3d.DVector3,Vim.Math3d.DVector3})
  - Vim.Math3d.DRay.Create(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  - Vim.Math3d.DRay.Deconstruct(Vim.Math3d.DVector3@,Vim.Math3d.DVector3@)
  - Vim.Math3d.DRay.Direction
  - Vim.Math3d.DRay.Equals(System.Object)
  - Vim.Math3d.DRay.Equals(Vim.Math3d.DRay)
  - Vim.Math3d.DRay.GetHashCode
  - Vim.Math3d.DRay.MaxValue
  - Vim.Math3d.DRay.MinValue
  - Vim.Math3d.DRay.op_Equality(Vim.Math3d.DRay,Vim.Math3d.DRay)
  - Vim.Math3d.DRay.op_Implicit(System.ValueTuple{Vim.Math3d.DVector3,Vim.Math3d.DVector3})~Vim.Math3d.DRay
  - Vim.Math3d.DRay.op_Implicit(Vim.Math3d.DRay)~System.ValueTuple{Vim.Math3d.DVector3,Vim.Math3d.DVector3}
  - Vim.Math3d.DRay.op_Inequality(Vim.Math3d.DRay,Vim.Math3d.DRay)
  - Vim.Math3d.DRay.Position
  - Vim.Math3d.DRay.SetDirection(Vim.Math3d.DVector3)
  - Vim.Math3d.DRay.SetPosition(Vim.Math3d.DVector3)
  - Vim.Math3d.DRay.ToString
  - Vim.Math3d.DRay.Zero
  langs:
  - csharp
  - vb
  name: DRay
  nameWithType: DRay
  fullName: Vim.Math3d.DRay
  type: Struct
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: DRay
    path: ../src/Structs.cs
    startLine: 1071
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataContract]

      public readonly struct DRay : IEquatable<DRay>
    content.vb: >-
      <DataContract>

      Public Structure DRay
          Implements IEquatable(Of DRay)
  implements:
  - System.IEquatable{Vim.Math3d.DRay}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Vim.Math3d.DRay.Position
  commentId: F:Vim.Math3d.DRay.Position
  id: Position
  parent: Vim.Math3d.DRay
  langs:
  - csharp
  - vb
  name: Position
  nameWithType: DRay.Position
  fullName: Vim.Math3d.DRay.Position
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Position
    path: ../src/Structs.cs
    startLine: 1077
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataMember]

      public readonly DVector3 Position
    return:
      type: Vim.Math3d.DVector3
    content.vb: >-
      <DataMember>

      Public ReadOnly Position As DVector3
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.DRay.Direction
  commentId: F:Vim.Math3d.DRay.Direction
  id: Direction
  parent: Vim.Math3d.DRay
  langs:
  - csharp
  - vb
  name: Direction
  nameWithType: DRay.Direction
  fullName: Vim.Math3d.DRay.Direction
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Direction
    path: ../src/Structs.cs
    startLine: 1079
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataMember]

      public readonly DVector3 Direction
    return:
      type: Vim.Math3d.DVector3
    content.vb: >-
      <DataMember>

      Public ReadOnly Direction As DVector3
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.DRay.#ctor(System.ValueTuple{Vim.Math3d.DVector3,Vim.Math3d.DVector3})
  commentId: M:Vim.Math3d.DRay.#ctor(System.ValueTuple{Vim.Math3d.DVector3,Vim.Math3d.DVector3})
  id: '#ctor(System.ValueTuple{Vim.Math3d.DVector3,Vim.Math3d.DVector3})'
  parent: Vim.Math3d.DRay
  langs:
  - csharp
  - vb
  name: DRay((DVector3 position, DVector3 direction))
  nameWithType: DRay.DRay((DVector3 position, DVector3 direction))
  fullName: Vim.Math3d.DRay.DRay(System.ValueTuple<Vim.Math3d.DVector3, Vim.Math3d.DVector3>)
  type: Constructor
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: .ctor
    path: ../src/Structs.cs
    startLine: 1080
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public DRay((DVector3 position, DVector3 direction) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{Vim.Math3d.DVector3,Vim.Math3d.DVector3}
    content.vb: Public Sub New(tuple As(position As DVector3, direction As DVector3)(Of DVector3 , DVector3))
  overload: Vim.Math3d.DRay.#ctor*
  nameWithType.vb: DRay.DRay((position As DVector3, direction As DVector3)(Of DVector3, DVector3))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Vim.Math3d.DRay.DRay(System.ValueTuple(Of Vim.Math3d.DVector3, Vim.Math3d.DVector3))
  name.vb: DRay((position As DVector3, direction As DVector3)(Of DVector3, DVector3))
- uid: Vim.Math3d.DRay.#ctor(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  commentId: M:Vim.Math3d.DRay.#ctor(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  id: '#ctor(Vim.Math3d.DVector3,Vim.Math3d.DVector3)'
  parent: Vim.Math3d.DRay
  langs:
  - csharp
  - vb
  name: DRay(DVector3, DVector3)
  nameWithType: DRay.DRay(DVector3, DVector3)
  fullName: Vim.Math3d.DRay.DRay(Vim.Math3d.DVector3, Vim.Math3d.DVector3)
  type: Constructor
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: .ctor
    path: ../src/Structs.cs
    startLine: 1081
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public DRay(DVector3 position, DVector3 direction)
    parameters:
    - id: position
      type: Vim.Math3d.DVector3
    - id: direction
      type: Vim.Math3d.DVector3
    content.vb: Public Sub New(position As DVector3, direction As DVector3)
  overload: Vim.Math3d.DRay.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Vim.Math3d.DRay.Create(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  commentId: M:Vim.Math3d.DRay.Create(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  id: Create(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  parent: Vim.Math3d.DRay
  langs:
  - csharp
  - vb
  name: Create(DVector3, DVector3)
  nameWithType: DRay.Create(DVector3, DVector3)
  fullName: Vim.Math3d.DRay.Create(Vim.Math3d.DVector3, Vim.Math3d.DVector3)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Create
    path: ../src/Structs.cs
    startLine: 1082
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DRay Create(DVector3 position, DVector3 direction)
    parameters:
    - id: position
      type: Vim.Math3d.DVector3
    - id: direction
      type: Vim.Math3d.DVector3
    return:
      type: Vim.Math3d.DRay
    content.vb: Public Shared Function Create(position As DVector3, direction As DVector3) As DRay
  overload: Vim.Math3d.DRay.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.DRay.Create(System.ValueTuple{Vim.Math3d.DVector3,Vim.Math3d.DVector3})
  commentId: M:Vim.Math3d.DRay.Create(System.ValueTuple{Vim.Math3d.DVector3,Vim.Math3d.DVector3})
  id: Create(System.ValueTuple{Vim.Math3d.DVector3,Vim.Math3d.DVector3})
  parent: Vim.Math3d.DRay
  langs:
  - csharp
  - vb
  name: Create((DVector3 position, DVector3 direction))
  nameWithType: DRay.Create((DVector3 position, DVector3 direction))
  fullName: Vim.Math3d.DRay.Create(System.ValueTuple<Vim.Math3d.DVector3, Vim.Math3d.DVector3>)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Create
    path: ../src/Structs.cs
    startLine: 1083
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DRay Create((DVector3 position, DVector3 direction) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{Vim.Math3d.DVector3,Vim.Math3d.DVector3}
    return:
      type: Vim.Math3d.DRay
    content.vb: Public Shared Function Create(tuple As(position As DVector3, direction As DVector3)(Of DVector3 , DVector3)) As DRay
  overload: Vim.Math3d.DRay.Create*
  nameWithType.vb: DRay.Create((position As DVector3, direction As DVector3)(Of DVector3, DVector3))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.DRay.Create(System.ValueTuple(Of Vim.Math3d.DVector3, Vim.Math3d.DVector3))
  name.vb: Create((position As DVector3, direction As DVector3)(Of DVector3, DVector3))
- uid: Vim.Math3d.DRay.Equals(System.Object)
  commentId: M:Vim.Math3d.DRay.Equals(System.Object)
  id: Equals(System.Object)
  parent: Vim.Math3d.DRay
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: DRay.Equals(Object)
  fullName: Vim.Math3d.DRay.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Equals
    path: ../src/Structs.cs
    startLine: 1084
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: Vim.Math3d.DRay.Equals*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.DRay.GetHashCode
  commentId: M:Vim.Math3d.DRay.GetHashCode
  id: GetHashCode
  parent: Vim.Math3d.DRay
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: DRay.GetHashCode()
  fullName: Vim.Math3d.DRay.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: GetHashCode
    path: ../src/Structs.cs
    startLine: 1085
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: Vim.Math3d.DRay.GetHashCode*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.DRay.ToString
  commentId: M:Vim.Math3d.DRay.ToString
  id: ToString
  parent: Vim.Math3d.DRay
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: DRay.ToString()
  fullName: Vim.Math3d.DRay.ToString()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToString
    path: ../src/Structs.cs
    startLine: 1086
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: Vim.Math3d.DRay.ToString*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.DRay.Deconstruct(Vim.Math3d.DVector3@,Vim.Math3d.DVector3@)
  commentId: M:Vim.Math3d.DRay.Deconstruct(Vim.Math3d.DVector3@,Vim.Math3d.DVector3@)
  id: Deconstruct(Vim.Math3d.DVector3@,Vim.Math3d.DVector3@)
  parent: Vim.Math3d.DRay
  langs:
  - csharp
  - vb
  name: Deconstruct(out DVector3, out DVector3)
  nameWithType: DRay.Deconstruct(out DVector3, out DVector3)
  fullName: Vim.Math3d.DRay.Deconstruct(out Vim.Math3d.DVector3, out Vim.Math3d.DVector3)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Deconstruct
    path: ../src/Structs.cs
    startLine: 1087
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly void Deconstruct(out DVector3 position, out DVector3 direction)
    parameters:
    - id: position
      type: Vim.Math3d.DVector3
    - id: direction
      type: Vim.Math3d.DVector3
    content.vb: Public Sub Deconstruct(ByRef position As DVector3, ByRef direction As DVector3)
  overload: Vim.Math3d.DRay.Deconstruct*
  nameWithType.vb: DRay.Deconstruct(ByRef DVector3, ByRef DVector3)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  fullName.vb: Vim.Math3d.DRay.Deconstruct(ByRef Vim.Math3d.DVector3, ByRef Vim.Math3d.DVector3)
  name.vb: Deconstruct(ByRef DVector3, ByRef DVector3)
- uid: Vim.Math3d.DRay.Equals(Vim.Math3d.DRay)
  commentId: M:Vim.Math3d.DRay.Equals(Vim.Math3d.DRay)
  id: Equals(Vim.Math3d.DRay)
  parent: Vim.Math3d.DRay
  langs:
  - csharp
  - vb
  name: Equals(DRay)
  nameWithType: DRay.Equals(DRay)
  fullName: Vim.Math3d.DRay.Equals(Vim.Math3d.DRay)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Equals
    path: ../src/Structs.cs
    startLine: 1088
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool Equals(DRay x)
    parameters:
    - id: x
      type: Vim.Math3d.DRay
    return:
      type: System.Boolean
    content.vb: Public Function Equals(x As DRay) As Boolean
  overload: Vim.Math3d.DRay.Equals*
  implements:
  - System.IEquatable{Vim.Math3d.DRay}.Equals(Vim.Math3d.DRay)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.DRay.op_Equality(Vim.Math3d.DRay,Vim.Math3d.DRay)
  commentId: M:Vim.Math3d.DRay.op_Equality(Vim.Math3d.DRay,Vim.Math3d.DRay)
  id: op_Equality(Vim.Math3d.DRay,Vim.Math3d.DRay)
  parent: Vim.Math3d.DRay
  langs:
  - csharp
  - vb
  name: Equality(DRay, DRay)
  nameWithType: DRay.Equality(DRay, DRay)
  fullName: Vim.Math3d.DRay.Equality(Vim.Math3d.DRay, Vim.Math3d.DRay)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Equality
    path: ../src/Structs.cs
    startLine: 1089
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator ==(DRay x0, DRay x1)
    parameters:
    - id: x0
      type: Vim.Math3d.DRay
    - id: x1
      type: Vim.Math3d.DRay
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(x0 As DRay, x1 As DRay) As Boolean
  overload: Vim.Math3d.DRay.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.DRay.op_Inequality(Vim.Math3d.DRay,Vim.Math3d.DRay)
  commentId: M:Vim.Math3d.DRay.op_Inequality(Vim.Math3d.DRay,Vim.Math3d.DRay)
  id: op_Inequality(Vim.Math3d.DRay,Vim.Math3d.DRay)
  parent: Vim.Math3d.DRay
  langs:
  - csharp
  - vb
  name: Inequality(DRay, DRay)
  nameWithType: DRay.Inequality(DRay, DRay)
  fullName: Vim.Math3d.DRay.Inequality(Vim.Math3d.DRay, Vim.Math3d.DRay)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Inequality
    path: ../src/Structs.cs
    startLine: 1090
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator !=(DRay x0, DRay x1)
    parameters:
    - id: x0
      type: Vim.Math3d.DRay
    - id: x1
      type: Vim.Math3d.DRay
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(x0 As DRay, x1 As DRay) As Boolean
  overload: Vim.Math3d.DRay.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.DRay.op_Implicit(System.ValueTuple{Vim.Math3d.DVector3,Vim.Math3d.DVector3})~Vim.Math3d.DRay
  commentId: M:Vim.Math3d.DRay.op_Implicit(System.ValueTuple{Vim.Math3d.DVector3,Vim.Math3d.DVector3})~Vim.Math3d.DRay
  id: op_Implicit(System.ValueTuple{Vim.Math3d.DVector3,Vim.Math3d.DVector3})~Vim.Math3d.DRay
  parent: Vim.Math3d.DRay
  langs:
  - csharp
  - vb
  name: Implicit((DVector3 position, DVector3 direction) to DRay)
  nameWithType: DRay.Implicit((DVector3 position, DVector3 direction) to DRay)
  fullName: Vim.Math3d.DRay.Implicit(System.ValueTuple<Vim.Math3d.DVector3, Vim.Math3d.DVector3> to Vim.Math3d.DRay)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Implicit
    path: ../src/Structs.cs
    startLine: 1091
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static implicit operator DRay((DVector3 position, DVector3 direction) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{Vim.Math3d.DVector3,Vim.Math3d.DVector3}
    return:
      type: Vim.Math3d.DRay
    content.vb: Public Shared Widening Operator CType(tuple As(position As DVector3, direction As DVector3)(Of DVector3 , DVector3)) As DRay
  overload: Vim.Math3d.DRay.op_Implicit*
  nameWithType.vb: DRay.Widening((position As DVector3, direction As DVector3)(Of DVector3, DVector3) to DRay)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.DRay.Widening(System.ValueTuple(Of Vim.Math3d.DVector3, Vim.Math3d.DVector3) to Vim.Math3d.DRay)
  name.vb: Widening((position As DVector3, direction As DVector3)(Of DVector3, DVector3) to DRay)
- uid: Vim.Math3d.DRay.op_Implicit(Vim.Math3d.DRay)~System.ValueTuple{Vim.Math3d.DVector3,Vim.Math3d.DVector3}
  commentId: M:Vim.Math3d.DRay.op_Implicit(Vim.Math3d.DRay)~System.ValueTuple{Vim.Math3d.DVector3,Vim.Math3d.DVector3}
  id: op_Implicit(Vim.Math3d.DRay)~System.ValueTuple{Vim.Math3d.DVector3,Vim.Math3d.DVector3}
  parent: Vim.Math3d.DRay
  langs:
  - csharp
  - vb
  name: Implicit(DRay to (DVector3 position, DVector3 direction))
  nameWithType: DRay.Implicit(DRay to (DVector3 position, DVector3 direction))
  fullName: Vim.Math3d.DRay.Implicit(Vim.Math3d.DRay to System.ValueTuple<Vim.Math3d.DVector3, Vim.Math3d.DVector3>)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Implicit
    path: ../src/Structs.cs
    startLine: 1092
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static implicit operator (DVector3 position, DVector3 direction)(DRay self)
    parameters:
    - id: self
      type: Vim.Math3d.DRay
    return:
      type: System.ValueTuple{Vim.Math3d.DVector3,Vim.Math3d.DVector3}
    content.vb: Public Shared Widening Operator CType(self As DRay) As(position As DVector3, direction As DVector3)(Of DVector3 , DVector3)
  overload: Vim.Math3d.DRay.op_Implicit*
  nameWithType.vb: DRay.Widening(DRay to (position As DVector3, direction As DVector3)(Of DVector3, DVector3))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.DRay.Widening(Vim.Math3d.DRay to System.ValueTuple(Of Vim.Math3d.DVector3, Vim.Math3d.DVector3))
  name.vb: Widening(DRay to (position As DVector3, direction As DVector3)(Of DVector3, DVector3))
- uid: Vim.Math3d.DRay.AlmostEquals(Vim.Math3d.DRay,System.Single)
  commentId: M:Vim.Math3d.DRay.AlmostEquals(Vim.Math3d.DRay,System.Single)
  id: AlmostEquals(Vim.Math3d.DRay,System.Single)
  parent: Vim.Math3d.DRay
  langs:
  - csharp
  - vb
  name: AlmostEquals(DRay, Single)
  nameWithType: DRay.AlmostEquals(DRay, Single)
  fullName: Vim.Math3d.DRay.AlmostEquals(Vim.Math3d.DRay, System.Single)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: AlmostEquals
    path: ../src/Structs.cs
    startLine: 1094
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool AlmostEquals(DRay x, float tolerance = 1E-07F)
    parameters:
    - id: x
      type: Vim.Math3d.DRay
    - id: tolerance
      type: System.Single
    return:
      type: System.Boolean
    content.vb: Public Function AlmostEquals(x As DRay, tolerance As Single = 1E-07F) As Boolean
  overload: Vim.Math3d.DRay.AlmostEquals*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.DRay.Zero
  commentId: F:Vim.Math3d.DRay.Zero
  id: Zero
  parent: Vim.Math3d.DRay
  langs:
  - csharp
  - vb
  name: Zero
  nameWithType: DRay.Zero
  fullName: Vim.Math3d.DRay.Zero
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Zero
    path: ../src/Structs.cs
    startLine: 1095
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DRay Zero
    return:
      type: Vim.Math3d.DRay
    content.vb: Public Shared Zero As DRay
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.DRay.MinValue
  commentId: F:Vim.Math3d.DRay.MinValue
  id: MinValue
  parent: Vim.Math3d.DRay
  langs:
  - csharp
  - vb
  name: MinValue
  nameWithType: DRay.MinValue
  fullName: Vim.Math3d.DRay.MinValue
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MinValue
    path: ../src/Structs.cs
    startLine: 1096
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DRay MinValue
    return:
      type: Vim.Math3d.DRay
    content.vb: Public Shared MinValue As DRay
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.DRay.MaxValue
  commentId: F:Vim.Math3d.DRay.MaxValue
  id: MaxValue
  parent: Vim.Math3d.DRay
  langs:
  - csharp
  - vb
  name: MaxValue
  nameWithType: DRay.MaxValue
  fullName: Vim.Math3d.DRay.MaxValue
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MaxValue
    path: ../src/Structs.cs
    startLine: 1097
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DRay MaxValue
    return:
      type: Vim.Math3d.DRay
    content.vb: Public Shared MaxValue As DRay
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.DRay.SetPosition(Vim.Math3d.DVector3)
  commentId: M:Vim.Math3d.DRay.SetPosition(Vim.Math3d.DVector3)
  id: SetPosition(Vim.Math3d.DVector3)
  parent: Vim.Math3d.DRay
  langs:
  - csharp
  - vb
  name: SetPosition(DVector3)
  nameWithType: DRay.SetPosition(DVector3)
  fullName: Vim.Math3d.DRay.SetPosition(Vim.Math3d.DVector3)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SetPosition
    path: ../src/Structs.cs
    startLine: 1098
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly DRay SetPosition(DVector3 x)
    parameters:
    - id: x
      type: Vim.Math3d.DVector3
    return:
      type: Vim.Math3d.DRay
    content.vb: Public Function SetPosition(x As DVector3) As DRay
  overload: Vim.Math3d.DRay.SetPosition*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.DRay.SetDirection(Vim.Math3d.DVector3)
  commentId: M:Vim.Math3d.DRay.SetDirection(Vim.Math3d.DVector3)
  id: SetDirection(Vim.Math3d.DVector3)
  parent: Vim.Math3d.DRay
  langs:
  - csharp
  - vb
  name: SetDirection(DVector3)
  nameWithType: DRay.SetDirection(DVector3)
  fullName: Vim.Math3d.DRay.SetDirection(Vim.Math3d.DVector3)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SetDirection
    path: ../src/Structs.cs
    startLine: 1099
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly DRay SetDirection(DVector3 x)
    parameters:
    - id: x
      type: Vim.Math3d.DVector3
    return:
      type: Vim.Math3d.DRay
    content.vb: Public Function SetDirection(x As DVector3) As DRay
  overload: Vim.Math3d.DRay.SetDirection*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
references:
- uid: Vim.Math3d
  commentId: N:Vim.Math3d
  name: Vim.Math3d
  nameWithType: Vim.Math3d
  fullName: Vim.Math3d
- uid: System.IEquatable{Vim.Math3d.DRay}
  commentId: T:System.IEquatable{Vim.Math3d.DRay}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<DRay>
  nameWithType: IEquatable<DRay>
  fullName: System.IEquatable<Vim.Math3d.DRay>
  nameWithType.vb: IEquatable(Of DRay)
  fullName.vb: System.IEquatable(Of Vim.Math3d.DRay)
  name.vb: IEquatable(Of DRay)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.DRay
    name: DRay
    nameWithType: DRay
    fullName: Vim.Math3d.DRay
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.DRay
    name: DRay
    nameWithType: DRay
    fullName: Vim.Math3d.DRay
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Vim.Math3d.DVector3
  commentId: T:Vim.Math3d.DVector3
  parent: Vim.Math3d
  name: DVector3
  nameWithType: DVector3
  fullName: Vim.Math3d.DVector3
- uid: Vim.Math3d.DRay.#ctor*
  commentId: Overload:Vim.Math3d.DRay.#ctor
  name: DRay
  nameWithType: DRay.DRay
  fullName: Vim.Math3d.DRay.DRay
- uid: System.ValueTuple{Vim.Math3d.DVector3,Vim.Math3d.DVector3}
  commentId: T:System.ValueTuple{Vim.Math3d.DVector3,Vim.Math3d.DVector3}
  parent: System
  definition: System.ValueTuple`2
  name: (T1, T2)<DVector3, DVector3>
  nameWithType: (T1, T2)<DVector3, DVector3>
  fullName: System.ValueTuple<Vim.Math3d.DVector3, Vim.Math3d.DVector3>
  nameWithType.vb: (T1, T2)(Of DVector3, DVector3)
  fullName.vb: System.ValueTuple(Of Vim.Math3d.DVector3, Vim.Math3d.DVector3)
  name.vb: (T1, T2)(Of DVector3, DVector3)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.DVector3
    name: DVector3
    nameWithType: DVector3
    fullName: Vim.Math3d.DVector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.DVector3
    name: DVector3
    nameWithType: DVector3
    fullName: Vim.Math3d.DVector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.DVector3
    name: DVector3
    nameWithType: DVector3
    fullName: Vim.Math3d.DVector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.DVector3
    name: DVector3
    nameWithType: DVector3
    fullName: Vim.Math3d.DVector3
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple`2
  commentId: T:System.ValueTuple`2
  isExternal: true
  name: (T1, T2)<T1, T2>
  nameWithType: (T1, T2)<T1, T2>
  fullName: System.ValueTuple<T1, T2>
  nameWithType.vb: (T1, T2)(Of T1, T2)
  fullName.vb: System.ValueTuple(Of T1, T2)
  name.vb: (T1, T2)(Of T1, T2)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.DRay.Create*
  commentId: Overload:Vim.Math3d.DRay.Create
  name: Create
  nameWithType: DRay.Create
  fullName: Vim.Math3d.DRay.Create
- uid: Vim.Math3d.DRay
  commentId: T:Vim.Math3d.DRay
  parent: Vim.Math3d
  name: DRay
  nameWithType: DRay
  fullName: Vim.Math3d.DRay
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.DRay.Equals*
  commentId: Overload:Vim.Math3d.DRay.Equals
  name: Equals
  nameWithType: DRay.Equals
  fullName: Vim.Math3d.DRay.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.DRay.GetHashCode*
  commentId: Overload:Vim.Math3d.DRay.GetHashCode
  name: GetHashCode
  nameWithType: DRay.GetHashCode
  fullName: Vim.Math3d.DRay.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.DRay.ToString*
  commentId: Overload:Vim.Math3d.DRay.ToString
  name: ToString
  nameWithType: DRay.ToString
  fullName: Vim.Math3d.DRay.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Vim.Math3d.DRay.Deconstruct*
  commentId: Overload:Vim.Math3d.DRay.Deconstruct
  name: Deconstruct
  nameWithType: DRay.Deconstruct
  fullName: Vim.Math3d.DRay.Deconstruct
- uid: System.IEquatable{Vim.Math3d.DRay}.Equals(Vim.Math3d.DRay)
  commentId: M:System.IEquatable{Vim.Math3d.DRay}.Equals(Vim.Math3d.DRay)
  parent: System.IEquatable{Vim.Math3d.DRay}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(DRay)
  nameWithType: IEquatable<DRay>.Equals(DRay)
  fullName: System.IEquatable<Vim.Math3d.DRay>.Equals(Vim.Math3d.DRay)
  nameWithType.vb: IEquatable(Of DRay).Equals(DRay)
  fullName.vb: System.IEquatable(Of Vim.Math3d.DRay).Equals(Vim.Math3d.DRay)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<DRay>.Equals
    fullName: System.IEquatable<Vim.Math3d.DRay>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.DRay
    name: DRay
    nameWithType: DRay
    fullName: Vim.Math3d.DRay
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of DRay).Equals
    fullName: System.IEquatable(Of Vim.Math3d.DRay).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.DRay
    name: DRay
    nameWithType: DRay
    fullName: Vim.Math3d.DRay
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.DRay.op_Equality*
  commentId: Overload:Vim.Math3d.DRay.op_Equality
  name: Equality
  nameWithType: DRay.Equality
  fullName: Vim.Math3d.DRay.Equality
- uid: Vim.Math3d.DRay.op_Inequality*
  commentId: Overload:Vim.Math3d.DRay.op_Inequality
  name: Inequality
  nameWithType: DRay.Inequality
  fullName: Vim.Math3d.DRay.Inequality
- uid: Vim.Math3d.DRay.op_Implicit*
  commentId: Overload:Vim.Math3d.DRay.op_Implicit
  name: Implicit
  nameWithType: DRay.Implicit
  fullName: Vim.Math3d.DRay.Implicit
  nameWithType.vb: DRay.Widening
  fullName.vb: Vim.Math3d.DRay.Widening
  name.vb: Widening
- uid: Vim.Math3d.DRay.AlmostEquals*
  commentId: Overload:Vim.Math3d.DRay.AlmostEquals
  name: AlmostEquals
  nameWithType: DRay.AlmostEquals
  fullName: Vim.Math3d.DRay.AlmostEquals
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Vim.Math3d.DRay.SetPosition*
  commentId: Overload:Vim.Math3d.DRay.SetPosition
  name: SetPosition
  nameWithType: DRay.SetPosition
  fullName: Vim.Math3d.DRay.SetPosition
- uid: Vim.Math3d.DRay.SetDirection*
  commentId: Overload:Vim.Math3d.DRay.SetDirection
  name: SetDirection
  nameWithType: DRay.SetDirection
  fullName: Vim.Math3d.DRay.SetDirection

### YamlMime:ManagedReference
items:
- uid: Vim.Math3d.Int2
  commentId: T:Vim.Math3d.Int2
  id: Int2
  parent: Vim.Math3d
  children:
  - Vim.Math3d.Int2.#ctor(System.Int32)
  - Vim.Math3d.Int2.#ctor(System.Int32,System.Int32)
  - Vim.Math3d.Int2.#ctor(System.ValueTuple{System.Int32,System.Int32})
  - Vim.Math3d.Int2.AlmostZero(System.Single)
  - Vim.Math3d.Int2.AnyComponentNegative
  - Vim.Math3d.Int2.CompareTo(Vim.Math3d.Int2)
  - Vim.Math3d.Int2.Create(System.Int32,System.Int32)
  - Vim.Math3d.Int2.Create(System.ValueTuple{System.Int32,System.Int32})
  - Vim.Math3d.Int2.Deconstruct(System.Int32@,System.Int32@)
  - Vim.Math3d.Int2.Dot(Vim.Math3d.Int2)
  - Vim.Math3d.Int2.Dot(Vim.Math3d.Int2,Vim.Math3d.Int2)
  - Vim.Math3d.Int2.Equals(System.Object)
  - Vim.Math3d.Int2.Equals(Vim.Math3d.Int2)
  - Vim.Math3d.Int2.GetComponent(System.Int32)
  - Vim.Math3d.Int2.GetHashCode
  - Vim.Math3d.Int2.IsInfinity
  - Vim.Math3d.Int2.IsNaN
  - Vim.Math3d.Int2.Magnitude
  - Vim.Math3d.Int2.MagnitudeSquared
  - Vim.Math3d.Int2.MaxComponent
  - Vim.Math3d.Int2.MaxValue
  - Vim.Math3d.Int2.MinComponent
  - Vim.Math3d.Int2.MinValue
  - Vim.Math3d.Int2.NumComponents
  - Vim.Math3d.Int2.One
  - Vim.Math3d.Int2.op_Addition(System.Int32,Vim.Math3d.Int2)
  - Vim.Math3d.Int2.op_Addition(Vim.Math3d.Int2,System.Int32)
  - Vim.Math3d.Int2.op_Addition(Vim.Math3d.Int2,Vim.Math3d.Int2)
  - Vim.Math3d.Int2.op_Division(System.Int32,Vim.Math3d.Int2)
  - Vim.Math3d.Int2.op_Division(Vim.Math3d.Int2,System.Int32)
  - Vim.Math3d.Int2.op_Division(Vim.Math3d.Int2,Vim.Math3d.Int2)
  - Vim.Math3d.Int2.op_Equality(Vim.Math3d.Int2,Vim.Math3d.Int2)
  - Vim.Math3d.Int2.op_GreaterThan(Vim.Math3d.Int2,Vim.Math3d.Int2)
  - Vim.Math3d.Int2.op_GreaterThanOrEqual(Vim.Math3d.Int2,Vim.Math3d.Int2)
  - Vim.Math3d.Int2.op_Implicit(System.ValueTuple{System.Int32,System.Int32})~Vim.Math3d.Int2
  - Vim.Math3d.Int2.op_Implicit(Vim.Math3d.Int2)~System.ValueTuple{System.Int32,System.Int32}
  - Vim.Math3d.Int2.op_Inequality(Vim.Math3d.Int2,Vim.Math3d.Int2)
  - Vim.Math3d.Int2.op_LessThan(Vim.Math3d.Int2,Vim.Math3d.Int2)
  - Vim.Math3d.Int2.op_LessThanOrEqual(Vim.Math3d.Int2,Vim.Math3d.Int2)
  - Vim.Math3d.Int2.op_Multiply(System.Int32,Vim.Math3d.Int2)
  - Vim.Math3d.Int2.op_Multiply(Vim.Math3d.Int2,System.Int32)
  - Vim.Math3d.Int2.op_Multiply(Vim.Math3d.Int2,Vim.Math3d.Int2)
  - Vim.Math3d.Int2.op_Subtraction(System.Int32,Vim.Math3d.Int2)
  - Vim.Math3d.Int2.op_Subtraction(Vim.Math3d.Int2,System.Int32)
  - Vim.Math3d.Int2.op_Subtraction(Vim.Math3d.Int2,Vim.Math3d.Int2)
  - Vim.Math3d.Int2.op_UnaryNegation(Vim.Math3d.Int2)
  - Vim.Math3d.Int2.ProductComponents
  - Vim.Math3d.Int2.SetX(System.Int32)
  - Vim.Math3d.Int2.SetY(System.Int32)
  - Vim.Math3d.Int2.SumComponents
  - Vim.Math3d.Int2.SumSqrComponents
  - Vim.Math3d.Int2.ToString
  - Vim.Math3d.Int2.UnitX
  - Vim.Math3d.Int2.UnitY
  - Vim.Math3d.Int2.X
  - Vim.Math3d.Int2.Y
  - Vim.Math3d.Int2.Zero
  langs:
  - csharp
  - vb
  name: Int2
  nameWithType: Int2
  fullName: Vim.Math3d.Int2
  type: Struct
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Int2
    path: ../src/Structs.cs
    startLine: 1389
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataContract]

      public readonly struct Int2 : IEquatable<Int2>, IComparable<Int2>
    content.vb: >-
      <DataContract>

      Public Structure Int2
          Implements IEquatable(Of Int2), IComparable(Of Int2)
  implements:
  - System.IEquatable{Vim.Math3d.Int2}
  - System.IComparable{Vim.Math3d.Int2}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - Vim.Math3d.Int2.Vim.Math3d.MathOps.ToVector2
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Vim.Math3d.Int2.X
  commentId: F:Vim.Math3d.Int2.X
  id: X
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: X
  nameWithType: Int2.X
  fullName: Vim.Math3d.Int2.X
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: X
    path: ../src/Structs.cs
    startLine: 1396
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataMember]

      public readonly int X
    return:
      type: System.Int32
    content.vb: >-
      <DataMember>

      Public ReadOnly X As Integer
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.Int2.Y
  commentId: F:Vim.Math3d.Int2.Y
  id: Y
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: Y
  nameWithType: Int2.Y
  fullName: Vim.Math3d.Int2.Y
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Y
    path: ../src/Structs.cs
    startLine: 1398
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataMember]

      public readonly int Y
    return:
      type: System.Int32
    content.vb: >-
      <DataMember>

      Public ReadOnly Y As Integer
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.Int2.#ctor(System.ValueTuple{System.Int32,System.Int32})
  commentId: M:Vim.Math3d.Int2.#ctor(System.ValueTuple{System.Int32,System.Int32})
  id: '#ctor(System.ValueTuple{System.Int32,System.Int32})'
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: Int2((Int32 x, Int32 y))
  nameWithType: Int2.Int2((Int32 x, Int32 y))
  fullName: Vim.Math3d.Int2.Int2(System.ValueTuple<System.Int32, System.Int32>)
  type: Constructor
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: .ctor
    path: ../src/Structs.cs
    startLine: 1399
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public Int2((int x, int y) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{System.Int32,System.Int32}
    content.vb: Public Sub New(tuple As(x As Integer, y As Integer)(Of Integer , Integer))
  overload: Vim.Math3d.Int2.#ctor*
  nameWithType.vb: Int2.Int2((x As Int32, y As Int32)(Of Int32, Int32))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Vim.Math3d.Int2.Int2(System.ValueTuple(Of System.Int32, System.Int32))
  name.vb: Int2((x As Int32, y As Int32)(Of Int32, Int32))
- uid: Vim.Math3d.Int2.#ctor(System.Int32,System.Int32)
  commentId: M:Vim.Math3d.Int2.#ctor(System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32)'
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: Int2(Int32, Int32)
  nameWithType: Int2.Int2(Int32, Int32)
  fullName: Vim.Math3d.Int2.Int2(System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: .ctor
    path: ../src/Structs.cs
    startLine: 1400
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public Int2(int x, int y)
    parameters:
    - id: x
      type: System.Int32
    - id: y
      type: System.Int32
    content.vb: Public Sub New(x As Integer, y As Integer)
  overload: Vim.Math3d.Int2.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Int2.Create(System.Int32,System.Int32)
  commentId: M:Vim.Math3d.Int2.Create(System.Int32,System.Int32)
  id: Create(System.Int32,System.Int32)
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: Create(Int32, Int32)
  nameWithType: Int2.Create(Int32, Int32)
  fullName: Vim.Math3d.Int2.Create(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Create
    path: ../src/Structs.cs
    startLine: 1401
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Int2 Create(int x, int y)
    parameters:
    - id: x
      type: System.Int32
    - id: y
      type: System.Int32
    return:
      type: Vim.Math3d.Int2
    content.vb: Public Shared Function Create(x As Integer, y As Integer) As Int2
  overload: Vim.Math3d.Int2.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Int2.Create(System.ValueTuple{System.Int32,System.Int32})
  commentId: M:Vim.Math3d.Int2.Create(System.ValueTuple{System.Int32,System.Int32})
  id: Create(System.ValueTuple{System.Int32,System.Int32})
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: Create((Int32 x, Int32 y))
  nameWithType: Int2.Create((Int32 x, Int32 y))
  fullName: Vim.Math3d.Int2.Create(System.ValueTuple<System.Int32, System.Int32>)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Create
    path: ../src/Structs.cs
    startLine: 1402
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Int2 Create((int x, int y) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{System.Int32,System.Int32}
    return:
      type: Vim.Math3d.Int2
    content.vb: Public Shared Function Create(tuple As(x As Integer, y As Integer)(Of Integer , Integer)) As Int2
  overload: Vim.Math3d.Int2.Create*
  nameWithType.vb: Int2.Create((x As Int32, y As Int32)(Of Int32, Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.Int2.Create(System.ValueTuple(Of System.Int32, System.Int32))
  name.vb: Create((x As Int32, y As Int32)(Of Int32, Int32))
- uid: Vim.Math3d.Int2.Equals(System.Object)
  commentId: M:Vim.Math3d.Int2.Equals(System.Object)
  id: Equals(System.Object)
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Int2.Equals(Object)
  fullName: Vim.Math3d.Int2.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Equals
    path: ../src/Structs.cs
    startLine: 1403
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: Vim.Math3d.Int2.Equals*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.Int2.GetHashCode
  commentId: M:Vim.Math3d.Int2.GetHashCode
  id: GetHashCode
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Int2.GetHashCode()
  fullName: Vim.Math3d.Int2.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: GetHashCode
    path: ../src/Structs.cs
    startLine: 1404
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: Vim.Math3d.Int2.GetHashCode*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.Int2.ToString
  commentId: M:Vim.Math3d.Int2.ToString
  id: ToString
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Int2.ToString()
  fullName: Vim.Math3d.Int2.ToString()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToString
    path: ../src/Structs.cs
    startLine: 1405
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: Vim.Math3d.Int2.ToString*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.Int2.Deconstruct(System.Int32@,System.Int32@)
  commentId: M:Vim.Math3d.Int2.Deconstruct(System.Int32@,System.Int32@)
  id: Deconstruct(System.Int32@,System.Int32@)
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: Deconstruct(out Int32, out Int32)
  nameWithType: Int2.Deconstruct(out Int32, out Int32)
  fullName: Vim.Math3d.Int2.Deconstruct(out System.Int32, out System.Int32)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Deconstruct
    path: ../src/Structs.cs
    startLine: 1406
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly void Deconstruct(out int x, out int y)
    parameters:
    - id: x
      type: System.Int32
    - id: y
      type: System.Int32
    content.vb: Public Sub Deconstruct(ByRef x As Integer, ByRef y As Integer)
  overload: Vim.Math3d.Int2.Deconstruct*
  nameWithType.vb: Int2.Deconstruct(ByRef Int32, ByRef Int32)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  fullName.vb: Vim.Math3d.Int2.Deconstruct(ByRef System.Int32, ByRef System.Int32)
  name.vb: Deconstruct(ByRef Int32, ByRef Int32)
- uid: Vim.Math3d.Int2.Equals(Vim.Math3d.Int2)
  commentId: M:Vim.Math3d.Int2.Equals(Vim.Math3d.Int2)
  id: Equals(Vim.Math3d.Int2)
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: Equals(Int2)
  nameWithType: Int2.Equals(Int2)
  fullName: Vim.Math3d.Int2.Equals(Vim.Math3d.Int2)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Equals
    path: ../src/Structs.cs
    startLine: 1407
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool Equals(Int2 x)
    parameters:
    - id: x
      type: Vim.Math3d.Int2
    return:
      type: System.Boolean
    content.vb: Public Function Equals(x As Int2) As Boolean
  overload: Vim.Math3d.Int2.Equals*
  implements:
  - System.IEquatable{Vim.Math3d.Int2}.Equals(Vim.Math3d.Int2)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Int2.op_Equality(Vim.Math3d.Int2,Vim.Math3d.Int2)
  commentId: M:Vim.Math3d.Int2.op_Equality(Vim.Math3d.Int2,Vim.Math3d.Int2)
  id: op_Equality(Vim.Math3d.Int2,Vim.Math3d.Int2)
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: Equality(Int2, Int2)
  nameWithType: Int2.Equality(Int2, Int2)
  fullName: Vim.Math3d.Int2.Equality(Vim.Math3d.Int2, Vim.Math3d.Int2)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Equality
    path: ../src/Structs.cs
    startLine: 1408
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator ==(Int2 x0, Int2 x1)
    parameters:
    - id: x0
      type: Vim.Math3d.Int2
    - id: x1
      type: Vim.Math3d.Int2
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(x0 As Int2, x1 As Int2) As Boolean
  overload: Vim.Math3d.Int2.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Int2.op_Inequality(Vim.Math3d.Int2,Vim.Math3d.Int2)
  commentId: M:Vim.Math3d.Int2.op_Inequality(Vim.Math3d.Int2,Vim.Math3d.Int2)
  id: op_Inequality(Vim.Math3d.Int2,Vim.Math3d.Int2)
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: Inequality(Int2, Int2)
  nameWithType: Int2.Inequality(Int2, Int2)
  fullName: Vim.Math3d.Int2.Inequality(Vim.Math3d.Int2, Vim.Math3d.Int2)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Inequality
    path: ../src/Structs.cs
    startLine: 1409
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator !=(Int2 x0, Int2 x1)
    parameters:
    - id: x0
      type: Vim.Math3d.Int2
    - id: x1
      type: Vim.Math3d.Int2
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(x0 As Int2, x1 As Int2) As Boolean
  overload: Vim.Math3d.Int2.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Int2.op_Implicit(System.ValueTuple{System.Int32,System.Int32})~Vim.Math3d.Int2
  commentId: M:Vim.Math3d.Int2.op_Implicit(System.ValueTuple{System.Int32,System.Int32})~Vim.Math3d.Int2
  id: op_Implicit(System.ValueTuple{System.Int32,System.Int32})~Vim.Math3d.Int2
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: Implicit((Int32 x, Int32 y) to Int2)
  nameWithType: Int2.Implicit((Int32 x, Int32 y) to Int2)
  fullName: Vim.Math3d.Int2.Implicit(System.ValueTuple<System.Int32, System.Int32> to Vim.Math3d.Int2)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Implicit
    path: ../src/Structs.cs
    startLine: 1410
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static implicit operator Int2((int x, int y) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{System.Int32,System.Int32}
    return:
      type: Vim.Math3d.Int2
    content.vb: Public Shared Widening Operator CType(tuple As(x As Integer, y As Integer)(Of Integer , Integer)) As Int2
  overload: Vim.Math3d.Int2.op_Implicit*
  nameWithType.vb: Int2.Widening((x As Int32, y As Int32)(Of Int32, Int32) to Int2)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.Int2.Widening(System.ValueTuple(Of System.Int32, System.Int32) to Vim.Math3d.Int2)
  name.vb: Widening((x As Int32, y As Int32)(Of Int32, Int32) to Int2)
- uid: Vim.Math3d.Int2.op_Implicit(Vim.Math3d.Int2)~System.ValueTuple{System.Int32,System.Int32}
  commentId: M:Vim.Math3d.Int2.op_Implicit(Vim.Math3d.Int2)~System.ValueTuple{System.Int32,System.Int32}
  id: op_Implicit(Vim.Math3d.Int2)~System.ValueTuple{System.Int32,System.Int32}
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: Implicit(Int2 to (Int32 x, Int32 y))
  nameWithType: Int2.Implicit(Int2 to (Int32 x, Int32 y))
  fullName: Vim.Math3d.Int2.Implicit(Vim.Math3d.Int2 to System.ValueTuple<System.Int32, System.Int32>)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Implicit
    path: ../src/Structs.cs
    startLine: 1411
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static implicit operator (int x, int y)(Int2 self)
    parameters:
    - id: self
      type: Vim.Math3d.Int2
    return:
      type: System.ValueTuple{System.Int32,System.Int32}
    content.vb: Public Shared Widening Operator CType(self As Int2) As(x As Integer, y As Integer)(Of Integer , Integer)
  overload: Vim.Math3d.Int2.op_Implicit*
  nameWithType.vb: Int2.Widening(Int2 to (x As Int32, y As Int32)(Of Int32, Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.Int2.Widening(Vim.Math3d.Int2 to System.ValueTuple(Of System.Int32, System.Int32))
  name.vb: Widening(Int2 to (x As Int32, y As Int32)(Of Int32, Int32))
- uid: Vim.Math3d.Int2.Zero
  commentId: F:Vim.Math3d.Int2.Zero
  id: Zero
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: Zero
  nameWithType: Int2.Zero
  fullName: Vim.Math3d.Int2.Zero
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Zero
    path: ../src/Structs.cs
    startLine: 1413
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Int2 Zero
    return:
      type: Vim.Math3d.Int2
    content.vb: Public Shared Zero As Int2
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Int2.MinValue
  commentId: F:Vim.Math3d.Int2.MinValue
  id: MinValue
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: MinValue
  nameWithType: Int2.MinValue
  fullName: Vim.Math3d.Int2.MinValue
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MinValue
    path: ../src/Structs.cs
    startLine: 1414
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Int2 MinValue
    return:
      type: Vim.Math3d.Int2
    content.vb: Public Shared MinValue As Int2
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Int2.MaxValue
  commentId: F:Vim.Math3d.Int2.MaxValue
  id: MaxValue
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: MaxValue
  nameWithType: Int2.MaxValue
  fullName: Vim.Math3d.Int2.MaxValue
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MaxValue
    path: ../src/Structs.cs
    startLine: 1415
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Int2 MaxValue
    return:
      type: Vim.Math3d.Int2
    content.vb: Public Shared MaxValue As Int2
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Int2.SetX(System.Int32)
  commentId: M:Vim.Math3d.Int2.SetX(System.Int32)
  id: SetX(System.Int32)
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: SetX(Int32)
  nameWithType: Int2.SetX(Int32)
  fullName: Vim.Math3d.Int2.SetX(System.Int32)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SetX
    path: ../src/Structs.cs
    startLine: 1416
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly Int2 SetX(int x)
    parameters:
    - id: x
      type: System.Int32
    return:
      type: Vim.Math3d.Int2
    content.vb: Public Function SetX(x As Integer) As Int2
  overload: Vim.Math3d.Int2.SetX*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Int2.SetY(System.Int32)
  commentId: M:Vim.Math3d.Int2.SetY(System.Int32)
  id: SetY(System.Int32)
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: SetY(Int32)
  nameWithType: Int2.SetY(Int32)
  fullName: Vim.Math3d.Int2.SetY(System.Int32)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SetY
    path: ../src/Structs.cs
    startLine: 1417
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly Int2 SetY(int x)
    parameters:
    - id: x
      type: System.Int32
    return:
      type: Vim.Math3d.Int2
    content.vb: Public Function SetY(x As Integer) As Int2
  overload: Vim.Math3d.Int2.SetY*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Int2.op_Addition(Vim.Math3d.Int2,Vim.Math3d.Int2)
  commentId: M:Vim.Math3d.Int2.op_Addition(Vim.Math3d.Int2,Vim.Math3d.Int2)
  id: op_Addition(Vim.Math3d.Int2,Vim.Math3d.Int2)
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: Addition(Int2, Int2)
  nameWithType: Int2.Addition(Int2, Int2)
  fullName: Vim.Math3d.Int2.Addition(Vim.Math3d.Int2, Vim.Math3d.Int2)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Addition
    path: ../src/Structs.cs
    startLine: 1418
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Int2 operator +(Int2 value1, Int2 value2)
    parameters:
    - id: value1
      type: Vim.Math3d.Int2
    - id: value2
      type: Vim.Math3d.Int2
    return:
      type: Vim.Math3d.Int2
    content.vb: Public Shared Operator +(value1 As Int2, value2 As Int2) As Int2
  overload: Vim.Math3d.Int2.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Int2.op_Addition(Vim.Math3d.Int2,System.Int32)
  commentId: M:Vim.Math3d.Int2.op_Addition(Vim.Math3d.Int2,System.Int32)
  id: op_Addition(Vim.Math3d.Int2,System.Int32)
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: Addition(Int2, Int32)
  nameWithType: Int2.Addition(Int2, Int32)
  fullName: Vim.Math3d.Int2.Addition(Vim.Math3d.Int2, System.Int32)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Addition
    path: ../src/Structs.cs
    startLine: 1419
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Int2 operator +(Int2 value1, int value2)
    parameters:
    - id: value1
      type: Vim.Math3d.Int2
    - id: value2
      type: System.Int32
    return:
      type: Vim.Math3d.Int2
    content.vb: Public Shared Operator +(value1 As Int2, value2 As Integer) As Int2
  overload: Vim.Math3d.Int2.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Int2.op_Addition(System.Int32,Vim.Math3d.Int2)
  commentId: M:Vim.Math3d.Int2.op_Addition(System.Int32,Vim.Math3d.Int2)
  id: op_Addition(System.Int32,Vim.Math3d.Int2)
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: Addition(Int32, Int2)
  nameWithType: Int2.Addition(Int32, Int2)
  fullName: Vim.Math3d.Int2.Addition(System.Int32, Vim.Math3d.Int2)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Addition
    path: ../src/Structs.cs
    startLine: 1420
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Int2 operator +(int value1, Int2 value2)
    parameters:
    - id: value1
      type: System.Int32
    - id: value2
      type: Vim.Math3d.Int2
    return:
      type: Vim.Math3d.Int2
    content.vb: Public Shared Operator +(value1 As Integer, value2 As Int2) As Int2
  overload: Vim.Math3d.Int2.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Int2.op_Subtraction(Vim.Math3d.Int2,Vim.Math3d.Int2)
  commentId: M:Vim.Math3d.Int2.op_Subtraction(Vim.Math3d.Int2,Vim.Math3d.Int2)
  id: op_Subtraction(Vim.Math3d.Int2,Vim.Math3d.Int2)
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: Subtraction(Int2, Int2)
  nameWithType: Int2.Subtraction(Int2, Int2)
  fullName: Vim.Math3d.Int2.Subtraction(Vim.Math3d.Int2, Vim.Math3d.Int2)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Subtraction
    path: ../src/Structs.cs
    startLine: 1421
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Int2 operator -(Int2 value1, Int2 value2)
    parameters:
    - id: value1
      type: Vim.Math3d.Int2
    - id: value2
      type: Vim.Math3d.Int2
    return:
      type: Vim.Math3d.Int2
    content.vb: Public Shared Operator -(value1 As Int2, value2 As Int2) As Int2
  overload: Vim.Math3d.Int2.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Int2.op_Subtraction(Vim.Math3d.Int2,System.Int32)
  commentId: M:Vim.Math3d.Int2.op_Subtraction(Vim.Math3d.Int2,System.Int32)
  id: op_Subtraction(Vim.Math3d.Int2,System.Int32)
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: Subtraction(Int2, Int32)
  nameWithType: Int2.Subtraction(Int2, Int32)
  fullName: Vim.Math3d.Int2.Subtraction(Vim.Math3d.Int2, System.Int32)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Subtraction
    path: ../src/Structs.cs
    startLine: 1422
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Int2 operator -(Int2 value1, int value2)
    parameters:
    - id: value1
      type: Vim.Math3d.Int2
    - id: value2
      type: System.Int32
    return:
      type: Vim.Math3d.Int2
    content.vb: Public Shared Operator -(value1 As Int2, value2 As Integer) As Int2
  overload: Vim.Math3d.Int2.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Int2.op_Subtraction(System.Int32,Vim.Math3d.Int2)
  commentId: M:Vim.Math3d.Int2.op_Subtraction(System.Int32,Vim.Math3d.Int2)
  id: op_Subtraction(System.Int32,Vim.Math3d.Int2)
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: Subtraction(Int32, Int2)
  nameWithType: Int2.Subtraction(Int32, Int2)
  fullName: Vim.Math3d.Int2.Subtraction(System.Int32, Vim.Math3d.Int2)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Subtraction
    path: ../src/Structs.cs
    startLine: 1423
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Int2 operator -(int value1, Int2 value2)
    parameters:
    - id: value1
      type: System.Int32
    - id: value2
      type: Vim.Math3d.Int2
    return:
      type: Vim.Math3d.Int2
    content.vb: Public Shared Operator -(value1 As Integer, value2 As Int2) As Int2
  overload: Vim.Math3d.Int2.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Int2.op_Multiply(Vim.Math3d.Int2,Vim.Math3d.Int2)
  commentId: M:Vim.Math3d.Int2.op_Multiply(Vim.Math3d.Int2,Vim.Math3d.Int2)
  id: op_Multiply(Vim.Math3d.Int2,Vim.Math3d.Int2)
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: Multiply(Int2, Int2)
  nameWithType: Int2.Multiply(Int2, Int2)
  fullName: Vim.Math3d.Int2.Multiply(Vim.Math3d.Int2, Vim.Math3d.Int2)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Multiply
    path: ../src/Structs.cs
    startLine: 1424
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Int2 operator *(Int2 value1, Int2 value2)
    parameters:
    - id: value1
      type: Vim.Math3d.Int2
    - id: value2
      type: Vim.Math3d.Int2
    return:
      type: Vim.Math3d.Int2
    content.vb: Public Shared Operator *(value1 As Int2, value2 As Int2) As Int2
  overload: Vim.Math3d.Int2.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Int2.op_Multiply(Vim.Math3d.Int2,System.Int32)
  commentId: M:Vim.Math3d.Int2.op_Multiply(Vim.Math3d.Int2,System.Int32)
  id: op_Multiply(Vim.Math3d.Int2,System.Int32)
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: Multiply(Int2, Int32)
  nameWithType: Int2.Multiply(Int2, Int32)
  fullName: Vim.Math3d.Int2.Multiply(Vim.Math3d.Int2, System.Int32)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Multiply
    path: ../src/Structs.cs
    startLine: 1425
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Int2 operator *(Int2 value1, int value2)
    parameters:
    - id: value1
      type: Vim.Math3d.Int2
    - id: value2
      type: System.Int32
    return:
      type: Vim.Math3d.Int2
    content.vb: Public Shared Operator *(value1 As Int2, value2 As Integer) As Int2
  overload: Vim.Math3d.Int2.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Int2.op_Multiply(System.Int32,Vim.Math3d.Int2)
  commentId: M:Vim.Math3d.Int2.op_Multiply(System.Int32,Vim.Math3d.Int2)
  id: op_Multiply(System.Int32,Vim.Math3d.Int2)
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: Multiply(Int32, Int2)
  nameWithType: Int2.Multiply(Int32, Int2)
  fullName: Vim.Math3d.Int2.Multiply(System.Int32, Vim.Math3d.Int2)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Multiply
    path: ../src/Structs.cs
    startLine: 1426
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Int2 operator *(int value1, Int2 value2)
    parameters:
    - id: value1
      type: System.Int32
    - id: value2
      type: Vim.Math3d.Int2
    return:
      type: Vim.Math3d.Int2
    content.vb: Public Shared Operator *(value1 As Integer, value2 As Int2) As Int2
  overload: Vim.Math3d.Int2.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Int2.op_Division(Vim.Math3d.Int2,Vim.Math3d.Int2)
  commentId: M:Vim.Math3d.Int2.op_Division(Vim.Math3d.Int2,Vim.Math3d.Int2)
  id: op_Division(Vim.Math3d.Int2,Vim.Math3d.Int2)
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: Division(Int2, Int2)
  nameWithType: Int2.Division(Int2, Int2)
  fullName: Vim.Math3d.Int2.Division(Vim.Math3d.Int2, Vim.Math3d.Int2)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Division
    path: ../src/Structs.cs
    startLine: 1427
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Int2 operator /(Int2 value1, Int2 value2)
    parameters:
    - id: value1
      type: Vim.Math3d.Int2
    - id: value2
      type: Vim.Math3d.Int2
    return:
      type: Vim.Math3d.Int2
    content.vb: Public Shared Operator /(value1 As Int2, value2 As Int2) As Int2
  overload: Vim.Math3d.Int2.op_Division*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Int2.op_Division(Vim.Math3d.Int2,System.Int32)
  commentId: M:Vim.Math3d.Int2.op_Division(Vim.Math3d.Int2,System.Int32)
  id: op_Division(Vim.Math3d.Int2,System.Int32)
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: Division(Int2, Int32)
  nameWithType: Int2.Division(Int2, Int32)
  fullName: Vim.Math3d.Int2.Division(Vim.Math3d.Int2, System.Int32)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Division
    path: ../src/Structs.cs
    startLine: 1428
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Int2 operator /(Int2 value1, int value2)
    parameters:
    - id: value1
      type: Vim.Math3d.Int2
    - id: value2
      type: System.Int32
    return:
      type: Vim.Math3d.Int2
    content.vb: Public Shared Operator /(value1 As Int2, value2 As Integer) As Int2
  overload: Vim.Math3d.Int2.op_Division*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Int2.op_Division(System.Int32,Vim.Math3d.Int2)
  commentId: M:Vim.Math3d.Int2.op_Division(System.Int32,Vim.Math3d.Int2)
  id: op_Division(System.Int32,Vim.Math3d.Int2)
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: Division(Int32, Int2)
  nameWithType: Int2.Division(Int32, Int2)
  fullName: Vim.Math3d.Int2.Division(System.Int32, Vim.Math3d.Int2)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Division
    path: ../src/Structs.cs
    startLine: 1429
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Int2 operator /(int value1, Int2 value2)
    parameters:
    - id: value1
      type: System.Int32
    - id: value2
      type: Vim.Math3d.Int2
    return:
      type: Vim.Math3d.Int2
    content.vb: Public Shared Operator /(value1 As Integer, value2 As Int2) As Int2
  overload: Vim.Math3d.Int2.op_Division*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Int2.One
  commentId: F:Vim.Math3d.Int2.One
  id: One
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: One
  nameWithType: Int2.One
  fullName: Vim.Math3d.Int2.One
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: One
    path: ../src/Structs.cs
    startLine: 1430
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Int2 One
    return:
      type: Vim.Math3d.Int2
    content.vb: Public Shared One As Int2
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Int2.UnitX
  commentId: F:Vim.Math3d.Int2.UnitX
  id: UnitX
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: UnitX
  nameWithType: Int2.UnitX
  fullName: Vim.Math3d.Int2.UnitX
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: UnitX
    path: ../src/Structs.cs
    startLine: 1431
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Int2 UnitX
    return:
      type: Vim.Math3d.Int2
    content.vb: Public Shared UnitX As Int2
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Int2.UnitY
  commentId: F:Vim.Math3d.Int2.UnitY
  id: UnitY
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: UnitY
  nameWithType: Int2.UnitY
  fullName: Vim.Math3d.Int2.UnitY
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: UnitY
    path: ../src/Structs.cs
    startLine: 1432
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Int2 UnitY
    return:
      type: Vim.Math3d.Int2
    content.vb: Public Shared UnitY As Int2
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Int2.#ctor(System.Int32)
  commentId: M:Vim.Math3d.Int2.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: Int2(Int32)
  nameWithType: Int2.Int2(Int32)
  fullName: Vim.Math3d.Int2.Int2(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: .ctor
    path: ../src/Structs.cs
    startLine: 1433
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public Int2(int value)
    parameters:
    - id: value
      type: System.Int32
    content.vb: Public Sub New(value As Integer)
  overload: Vim.Math3d.Int2.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Int2.op_UnaryNegation(Vim.Math3d.Int2)
  commentId: M:Vim.Math3d.Int2.op_UnaryNegation(Vim.Math3d.Int2)
  id: op_UnaryNegation(Vim.Math3d.Int2)
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: UnaryNegation(Int2)
  nameWithType: Int2.UnaryNegation(Int2)
  fullName: Vim.Math3d.Int2.UnaryNegation(Vim.Math3d.Int2)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_UnaryNegation
    path: ../src/Structs.cs
    startLine: 1434
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Int2 operator -(Int2 value)
    parameters:
    - id: value
      type: Vim.Math3d.Int2
    return:
      type: Vim.Math3d.Int2
    content.vb: Public Shared Operator -(value As Int2) As Int2
  overload: Vim.Math3d.Int2.op_UnaryNegation*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Int2.Dot(Vim.Math3d.Int2,Vim.Math3d.Int2)
  commentId: M:Vim.Math3d.Int2.Dot(Vim.Math3d.Int2,Vim.Math3d.Int2)
  id: Dot(Vim.Math3d.Int2,Vim.Math3d.Int2)
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: Dot(Int2, Int2)
  nameWithType: Int2.Dot(Int2, Int2)
  fullName: Vim.Math3d.Int2.Dot(Vim.Math3d.Int2, Vim.Math3d.Int2)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Dot
    path: ../src/Structs.cs
    startLine: 1435
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static int Dot(Int2 value1, Int2 value2)
    parameters:
    - id: value1
      type: Vim.Math3d.Int2
    - id: value2
      type: Vim.Math3d.Int2
    return:
      type: System.Int32
    content.vb: Public Shared Function Dot(value1 As Int2, value2 As Int2) As Integer
  overload: Vim.Math3d.Int2.Dot*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Int2.Dot(Vim.Math3d.Int2)
  commentId: M:Vim.Math3d.Int2.Dot(Vim.Math3d.Int2)
  id: Dot(Vim.Math3d.Int2)
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: Dot(Int2)
  nameWithType: Int2.Dot(Int2)
  fullName: Vim.Math3d.Int2.Dot(Vim.Math3d.Int2)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Dot
    path: ../src/Structs.cs
    startLine: 1436
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly int Dot(Int2 value)
    parameters:
    - id: value
      type: Vim.Math3d.Int2
    return:
      type: System.Int32
    content.vb: Public Function Dot(value As Int2) As Integer
  overload: Vim.Math3d.Int2.Dot*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Int2.AlmostZero(System.Single)
  commentId: M:Vim.Math3d.Int2.AlmostZero(System.Single)
  id: AlmostZero(System.Single)
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: AlmostZero(Single)
  nameWithType: Int2.AlmostZero(Single)
  fullName: Vim.Math3d.Int2.AlmostZero(System.Single)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: AlmostZero
    path: ../src/Structs.cs
    startLine: 1437
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool AlmostZero(float tolerance = 1E-07F)
    parameters:
    - id: tolerance
      type: System.Single
    return:
      type: System.Boolean
    content.vb: Public Function AlmostZero(tolerance As Single = 1E-07F) As Boolean
  overload: Vim.Math3d.Int2.AlmostZero*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Int2.AnyComponentNegative
  commentId: M:Vim.Math3d.Int2.AnyComponentNegative
  id: AnyComponentNegative
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: AnyComponentNegative()
  nameWithType: Int2.AnyComponentNegative()
  fullName: Vim.Math3d.Int2.AnyComponentNegative()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: AnyComponentNegative
    path: ../src/Structs.cs
    startLine: 1438
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool AnyComponentNegative()
    return:
      type: System.Boolean
    content.vb: Public Function AnyComponentNegative As Boolean
  overload: Vim.Math3d.Int2.AnyComponentNegative*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Int2.MinComponent
  commentId: M:Vim.Math3d.Int2.MinComponent
  id: MinComponent
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: MinComponent()
  nameWithType: Int2.MinComponent()
  fullName: Vim.Math3d.Int2.MinComponent()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MinComponent
    path: ../src/Structs.cs
    startLine: 1439
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly int MinComponent()
    return:
      type: System.Int32
    content.vb: Public Function MinComponent As Integer
  overload: Vim.Math3d.Int2.MinComponent*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Int2.MaxComponent
  commentId: M:Vim.Math3d.Int2.MaxComponent
  id: MaxComponent
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: MaxComponent()
  nameWithType: Int2.MaxComponent()
  fullName: Vim.Math3d.Int2.MaxComponent()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MaxComponent
    path: ../src/Structs.cs
    startLine: 1440
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly int MaxComponent()
    return:
      type: System.Int32
    content.vb: Public Function MaxComponent As Integer
  overload: Vim.Math3d.Int2.MaxComponent*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Int2.SumComponents
  commentId: M:Vim.Math3d.Int2.SumComponents
  id: SumComponents
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: SumComponents()
  nameWithType: Int2.SumComponents()
  fullName: Vim.Math3d.Int2.SumComponents()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SumComponents
    path: ../src/Structs.cs
    startLine: 1441
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly int SumComponents()
    return:
      type: System.Int32
    content.vb: Public Function SumComponents As Integer
  overload: Vim.Math3d.Int2.SumComponents*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Int2.SumSqrComponents
  commentId: M:Vim.Math3d.Int2.SumSqrComponents
  id: SumSqrComponents
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: SumSqrComponents()
  nameWithType: Int2.SumSqrComponents()
  fullName: Vim.Math3d.Int2.SumSqrComponents()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SumSqrComponents
    path: ../src/Structs.cs
    startLine: 1442
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly int SumSqrComponents()
    return:
      type: System.Int32
    content.vb: Public Function SumSqrComponents As Integer
  overload: Vim.Math3d.Int2.SumSqrComponents*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Int2.ProductComponents
  commentId: M:Vim.Math3d.Int2.ProductComponents
  id: ProductComponents
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: ProductComponents()
  nameWithType: Int2.ProductComponents()
  fullName: Vim.Math3d.Int2.ProductComponents()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ProductComponents
    path: ../src/Structs.cs
    startLine: 1443
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly int ProductComponents()
    return:
      type: System.Int32
    content.vb: Public Function ProductComponents As Integer
  overload: Vim.Math3d.Int2.ProductComponents*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Int2.GetComponent(System.Int32)
  commentId: M:Vim.Math3d.Int2.GetComponent(System.Int32)
  id: GetComponent(System.Int32)
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: GetComponent(Int32)
  nameWithType: Int2.GetComponent(Int32)
  fullName: Vim.Math3d.Int2.GetComponent(System.Int32)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: GetComponent
    path: ../src/Structs.cs
    startLine: 1444
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly int GetComponent(int n)
    parameters:
    - id: n
      type: System.Int32
    return:
      type: System.Int32
    content.vb: Public Function GetComponent(n As Integer) As Integer
  overload: Vim.Math3d.Int2.GetComponent*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Int2.MagnitudeSquared
  commentId: M:Vim.Math3d.Int2.MagnitudeSquared
  id: MagnitudeSquared
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: MagnitudeSquared()
  nameWithType: Int2.MagnitudeSquared()
  fullName: Vim.Math3d.Int2.MagnitudeSquared()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MagnitudeSquared
    path: ../src/Structs.cs
    startLine: 1445
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly double MagnitudeSquared()
    return:
      type: System.Double
    content.vb: Public Function MagnitudeSquared As Double
  overload: Vim.Math3d.Int2.MagnitudeSquared*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Int2.Magnitude
  commentId: M:Vim.Math3d.Int2.Magnitude
  id: Magnitude
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: Magnitude()
  nameWithType: Int2.Magnitude()
  fullName: Vim.Math3d.Int2.Magnitude()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Magnitude
    path: ../src/Structs.cs
    startLine: 1446
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly double Magnitude()
    return:
      type: System.Double
    content.vb: Public Function Magnitude As Double
  overload: Vim.Math3d.Int2.Magnitude*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Int2.NumComponents
  commentId: F:Vim.Math3d.Int2.NumComponents
  id: NumComponents
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: NumComponents
  nameWithType: Int2.NumComponents
  fullName: Vim.Math3d.Int2.NumComponents
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: NumComponents
    path: ../src/Structs.cs
    startLine: 1447
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public const int NumComponents = 2
    return:
      type: System.Int32
    content.vb: Public Const NumComponents As Integer = 2
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Vim.Math3d.Int2.IsNaN
  commentId: M:Vim.Math3d.Int2.IsNaN
  id: IsNaN
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: IsNaN()
  nameWithType: Int2.IsNaN()
  fullName: Vim.Math3d.Int2.IsNaN()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: IsNaN
    path: ../src/Structs.cs
    startLine: 1449
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool IsNaN()
    return:
      type: System.Boolean
    content.vb: Public Function IsNaN As Boolean
  overload: Vim.Math3d.Int2.IsNaN*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Int2.IsInfinity
  commentId: M:Vim.Math3d.Int2.IsInfinity
  id: IsInfinity
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: IsInfinity()
  nameWithType: Int2.IsInfinity()
  fullName: Vim.Math3d.Int2.IsInfinity()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: IsInfinity
    path: ../src/Structs.cs
    startLine: 1450
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool IsInfinity()
    return:
      type: System.Boolean
    content.vb: Public Function IsInfinity As Boolean
  overload: Vim.Math3d.Int2.IsInfinity*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Int2.CompareTo(Vim.Math3d.Int2)
  commentId: M:Vim.Math3d.Int2.CompareTo(Vim.Math3d.Int2)
  id: CompareTo(Vim.Math3d.Int2)
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: CompareTo(Int2)
  nameWithType: Int2.CompareTo(Int2)
  fullName: Vim.Math3d.Int2.CompareTo(Vim.Math3d.Int2)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: CompareTo
    path: ../src/Structs.cs
    startLine: 1451
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly int CompareTo(Int2 x)
    parameters:
    - id: x
      type: Vim.Math3d.Int2
    return:
      type: System.Int32
    content.vb: Public Function CompareTo(x As Int2) As Integer
  overload: Vim.Math3d.Int2.CompareTo*
  implements:
  - System.IComparable{Vim.Math3d.Int2}.CompareTo(Vim.Math3d.Int2)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Int2.op_LessThan(Vim.Math3d.Int2,Vim.Math3d.Int2)
  commentId: M:Vim.Math3d.Int2.op_LessThan(Vim.Math3d.Int2,Vim.Math3d.Int2)
  id: op_LessThan(Vim.Math3d.Int2,Vim.Math3d.Int2)
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: LessThan(Int2, Int2)
  nameWithType: Int2.LessThan(Int2, Int2)
  fullName: Vim.Math3d.Int2.LessThan(Vim.Math3d.Int2, Vim.Math3d.Int2)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_LessThan
    path: ../src/Structs.cs
    startLine: 1452
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator <(Int2 x0, Int2 x1)
    parameters:
    - id: x0
      type: Vim.Math3d.Int2
    - id: x1
      type: Vim.Math3d.Int2
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <(x0 As Int2, x1 As Int2) As Boolean
  overload: Vim.Math3d.Int2.op_LessThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Int2.op_LessThanOrEqual(Vim.Math3d.Int2,Vim.Math3d.Int2)
  commentId: M:Vim.Math3d.Int2.op_LessThanOrEqual(Vim.Math3d.Int2,Vim.Math3d.Int2)
  id: op_LessThanOrEqual(Vim.Math3d.Int2,Vim.Math3d.Int2)
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(Int2, Int2)
  nameWithType: Int2.LessThanOrEqual(Int2, Int2)
  fullName: Vim.Math3d.Int2.LessThanOrEqual(Vim.Math3d.Int2, Vim.Math3d.Int2)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_LessThanOrEqual
    path: ../src/Structs.cs
    startLine: 1453
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator <=(Int2 x0, Int2 x1)
    parameters:
    - id: x0
      type: Vim.Math3d.Int2
    - id: x1
      type: Vim.Math3d.Int2
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <=(x0 As Int2, x1 As Int2) As Boolean
  overload: Vim.Math3d.Int2.op_LessThanOrEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Int2.op_GreaterThan(Vim.Math3d.Int2,Vim.Math3d.Int2)
  commentId: M:Vim.Math3d.Int2.op_GreaterThan(Vim.Math3d.Int2,Vim.Math3d.Int2)
  id: op_GreaterThan(Vim.Math3d.Int2,Vim.Math3d.Int2)
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: GreaterThan(Int2, Int2)
  nameWithType: Int2.GreaterThan(Int2, Int2)
  fullName: Vim.Math3d.Int2.GreaterThan(Vim.Math3d.Int2, Vim.Math3d.Int2)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_GreaterThan
    path: ../src/Structs.cs
    startLine: 1454
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator>(Int2 x0, Int2 x1)
    parameters:
    - id: x0
      type: Vim.Math3d.Int2
    - id: x1
      type: Vim.Math3d.Int2
    return:
      type: System.Boolean
    content.vb: Public Shared Operator>(x0 As Int2, x1 As Int2) As Boolean
  overload: Vim.Math3d.Int2.op_GreaterThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Int2.op_GreaterThanOrEqual(Vim.Math3d.Int2,Vim.Math3d.Int2)
  commentId: M:Vim.Math3d.Int2.op_GreaterThanOrEqual(Vim.Math3d.Int2,Vim.Math3d.Int2)
  id: op_GreaterThanOrEqual(Vim.Math3d.Int2,Vim.Math3d.Int2)
  parent: Vim.Math3d.Int2
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(Int2, Int2)
  nameWithType: Int2.GreaterThanOrEqual(Int2, Int2)
  fullName: Vim.Math3d.Int2.GreaterThanOrEqual(Vim.Math3d.Int2, Vim.Math3d.Int2)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_GreaterThanOrEqual
    path: ../src/Structs.cs
    startLine: 1455
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator >=(Int2 x0, Int2 x1)
    parameters:
    - id: x0
      type: Vim.Math3d.Int2
    - id: x1
      type: Vim.Math3d.Int2
    return:
      type: System.Boolean
    content.vb: Public Shared Operator >=(x0 As Int2, x1 As Int2) As Boolean
  overload: Vim.Math3d.Int2.op_GreaterThanOrEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Vim.Math3d
  commentId: N:Vim.Math3d
  name: Vim.Math3d
  nameWithType: Vim.Math3d
  fullName: Vim.Math3d
- uid: System.IEquatable{Vim.Math3d.Int2}
  commentId: T:System.IEquatable{Vim.Math3d.Int2}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Int2>
  nameWithType: IEquatable<Int2>
  fullName: System.IEquatable<Vim.Math3d.Int2>
  nameWithType.vb: IEquatable(Of Int2)
  fullName.vb: System.IEquatable(Of Vim.Math3d.Int2)
  name.vb: IEquatable(Of Int2)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.Int2
    name: Int2
    nameWithType: Int2
    fullName: Vim.Math3d.Int2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.Int2
    name: Int2
    nameWithType: Int2
    fullName: Vim.Math3d.Int2
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable{Vim.Math3d.Int2}
  commentId: T:System.IComparable{Vim.Math3d.Int2}
  parent: System
  definition: System.IComparable`1
  name: IComparable<Int2>
  nameWithType: IComparable<Int2>
  fullName: System.IComparable<Vim.Math3d.Int2>
  nameWithType.vb: IComparable(Of Int2)
  fullName.vb: System.IComparable(Of Vim.Math3d.Int2)
  name.vb: IComparable(Of Int2)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.Int2
    name: Int2
    nameWithType: Int2
    fullName: Vim.Math3d.Int2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.Int2
    name: Int2
    nameWithType: Int2
    fullName: Vim.Math3d.Int2
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Int2.Vim.Math3d.MathOps.ToVector2
  commentId: M:Vim.Math3d.MathOps.ToVector2(Vim.Math3d.Int2)
  parent: Vim.Math3d.MathOps
  definition: Vim.Math3d.MathOps.ToVector2(Vim.Math3d.Int2)
  name: ToVector2()
  nameWithType: MathOps.ToVector2()
  fullName: Vim.Math3d.MathOps.ToVector2()
  spec.csharp:
  - uid: Vim.Math3d.MathOps.ToVector2
    name: ToVector2
    nameWithType: MathOps.ToVector2
    fullName: Vim.Math3d.MathOps.ToVector2
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.MathOps.ToVector2
    name: ToVector2
    nameWithType: MathOps.ToVector2
    fullName: Vim.Math3d.MathOps.ToVector2
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Vim.Math3d.MathOps.ToVector2(Vim.Math3d.Int2)
  commentId: M:Vim.Math3d.MathOps.ToVector2(Vim.Math3d.Int2)
  name: ToVector2(Int2)
  nameWithType: MathOps.ToVector2(Int2)
  fullName: Vim.Math3d.MathOps.ToVector2(Vim.Math3d.Int2)
  spec.csharp:
  - uid: Vim.Math3d.MathOps.ToVector2(Vim.Math3d.Int2)
    name: ToVector2
    nameWithType: MathOps.ToVector2
    fullName: Vim.Math3d.MathOps.ToVector2
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Int2
    name: Int2
    nameWithType: Int2
    fullName: Vim.Math3d.Int2
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.MathOps.ToVector2(Vim.Math3d.Int2)
    name: ToVector2
    nameWithType: MathOps.ToVector2
    fullName: Vim.Math3d.MathOps.ToVector2
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Int2
    name: Int2
    nameWithType: Int2
    fullName: Vim.Math3d.Int2
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.MathOps
  commentId: T:Vim.Math3d.MathOps
  parent: Vim.Math3d
  name: MathOps
  nameWithType: MathOps
  fullName: Vim.Math3d.MathOps
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Vim.Math3d.Int2.#ctor*
  commentId: Overload:Vim.Math3d.Int2.#ctor
  name: Int2
  nameWithType: Int2.Int2
  fullName: Vim.Math3d.Int2.Int2
- uid: System.ValueTuple{System.Int32,System.Int32}
  commentId: T:System.ValueTuple{System.Int32,System.Int32}
  parent: System
  definition: System.ValueTuple`2
  name: (T1, T2)<Int32, Int32>
  nameWithType: (T1, T2)<Int32, Int32>
  fullName: System.ValueTuple<System.Int32, System.Int32>
  nameWithType.vb: (T1, T2)(Of Int32, Int32)
  fullName.vb: System.ValueTuple(Of System.Int32, System.Int32)
  name.vb: (T1, T2)(Of Int32, Int32)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple`2
  commentId: T:System.ValueTuple`2
  isExternal: true
  name: (T1, T2)<T1, T2>
  nameWithType: (T1, T2)<T1, T2>
  fullName: System.ValueTuple<T1, T2>
  nameWithType.vb: (T1, T2)(Of T1, T2)
  fullName.vb: System.ValueTuple(Of T1, T2)
  name.vb: (T1, T2)(Of T1, T2)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Int2.Create*
  commentId: Overload:Vim.Math3d.Int2.Create
  name: Create
  nameWithType: Int2.Create
  fullName: Vim.Math3d.Int2.Create
- uid: Vim.Math3d.Int2
  commentId: T:Vim.Math3d.Int2
  parent: Vim.Math3d
  name: Int2
  nameWithType: Int2
  fullName: Vim.Math3d.Int2
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Int2.Equals*
  commentId: Overload:Vim.Math3d.Int2.Equals
  name: Equals
  nameWithType: Int2.Equals
  fullName: Vim.Math3d.Int2.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Int2.GetHashCode*
  commentId: Overload:Vim.Math3d.Int2.GetHashCode
  name: GetHashCode
  nameWithType: Int2.GetHashCode
  fullName: Vim.Math3d.Int2.GetHashCode
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Int2.ToString*
  commentId: Overload:Vim.Math3d.Int2.ToString
  name: ToString
  nameWithType: Int2.ToString
  fullName: Vim.Math3d.Int2.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Vim.Math3d.Int2.Deconstruct*
  commentId: Overload:Vim.Math3d.Int2.Deconstruct
  name: Deconstruct
  nameWithType: Int2.Deconstruct
  fullName: Vim.Math3d.Int2.Deconstruct
- uid: System.IEquatable{Vim.Math3d.Int2}.Equals(Vim.Math3d.Int2)
  commentId: M:System.IEquatable{Vim.Math3d.Int2}.Equals(Vim.Math3d.Int2)
  parent: System.IEquatable{Vim.Math3d.Int2}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(Int2)
  nameWithType: IEquatable<Int2>.Equals(Int2)
  fullName: System.IEquatable<Vim.Math3d.Int2>.Equals(Vim.Math3d.Int2)
  nameWithType.vb: IEquatable(Of Int2).Equals(Int2)
  fullName.vb: System.IEquatable(Of Vim.Math3d.Int2).Equals(Vim.Math3d.Int2)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<Int2>.Equals
    fullName: System.IEquatable<Vim.Math3d.Int2>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Int2
    name: Int2
    nameWithType: Int2
    fullName: Vim.Math3d.Int2
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of Int2).Equals
    fullName: System.IEquatable(Of Vim.Math3d.Int2).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Int2
    name: Int2
    nameWithType: Int2
    fullName: Vim.Math3d.Int2
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Int2.op_Equality*
  commentId: Overload:Vim.Math3d.Int2.op_Equality
  name: Equality
  nameWithType: Int2.Equality
  fullName: Vim.Math3d.Int2.Equality
- uid: Vim.Math3d.Int2.op_Inequality*
  commentId: Overload:Vim.Math3d.Int2.op_Inequality
  name: Inequality
  nameWithType: Int2.Inequality
  fullName: Vim.Math3d.Int2.Inequality
- uid: Vim.Math3d.Int2.op_Implicit*
  commentId: Overload:Vim.Math3d.Int2.op_Implicit
  name: Implicit
  nameWithType: Int2.Implicit
  fullName: Vim.Math3d.Int2.Implicit
  nameWithType.vb: Int2.Widening
  fullName.vb: Vim.Math3d.Int2.Widening
  name.vb: Widening
- uid: Vim.Math3d.Int2.SetX*
  commentId: Overload:Vim.Math3d.Int2.SetX
  name: SetX
  nameWithType: Int2.SetX
  fullName: Vim.Math3d.Int2.SetX
- uid: Vim.Math3d.Int2.SetY*
  commentId: Overload:Vim.Math3d.Int2.SetY
  name: SetY
  nameWithType: Int2.SetY
  fullName: Vim.Math3d.Int2.SetY
- uid: Vim.Math3d.Int2.op_Addition*
  commentId: Overload:Vim.Math3d.Int2.op_Addition
  name: Addition
  nameWithType: Int2.Addition
  fullName: Vim.Math3d.Int2.Addition
- uid: Vim.Math3d.Int2.op_Subtraction*
  commentId: Overload:Vim.Math3d.Int2.op_Subtraction
  name: Subtraction
  nameWithType: Int2.Subtraction
  fullName: Vim.Math3d.Int2.Subtraction
- uid: Vim.Math3d.Int2.op_Multiply*
  commentId: Overload:Vim.Math3d.Int2.op_Multiply
  name: Multiply
  nameWithType: Int2.Multiply
  fullName: Vim.Math3d.Int2.Multiply
- uid: Vim.Math3d.Int2.op_Division*
  commentId: Overload:Vim.Math3d.Int2.op_Division
  name: Division
  nameWithType: Int2.Division
  fullName: Vim.Math3d.Int2.Division
- uid: Vim.Math3d.Int2.op_UnaryNegation*
  commentId: Overload:Vim.Math3d.Int2.op_UnaryNegation
  name: UnaryNegation
  nameWithType: Int2.UnaryNegation
  fullName: Vim.Math3d.Int2.UnaryNegation
- uid: Vim.Math3d.Int2.Dot*
  commentId: Overload:Vim.Math3d.Int2.Dot
  name: Dot
  nameWithType: Int2.Dot
  fullName: Vim.Math3d.Int2.Dot
- uid: Vim.Math3d.Int2.AlmostZero*
  commentId: Overload:Vim.Math3d.Int2.AlmostZero
  name: AlmostZero
  nameWithType: Int2.AlmostZero
  fullName: Vim.Math3d.Int2.AlmostZero
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Vim.Math3d.Int2.AnyComponentNegative*
  commentId: Overload:Vim.Math3d.Int2.AnyComponentNegative
  name: AnyComponentNegative
  nameWithType: Int2.AnyComponentNegative
  fullName: Vim.Math3d.Int2.AnyComponentNegative
- uid: Vim.Math3d.Int2.MinComponent*
  commentId: Overload:Vim.Math3d.Int2.MinComponent
  name: MinComponent
  nameWithType: Int2.MinComponent
  fullName: Vim.Math3d.Int2.MinComponent
- uid: Vim.Math3d.Int2.MaxComponent*
  commentId: Overload:Vim.Math3d.Int2.MaxComponent
  name: MaxComponent
  nameWithType: Int2.MaxComponent
  fullName: Vim.Math3d.Int2.MaxComponent
- uid: Vim.Math3d.Int2.SumComponents*
  commentId: Overload:Vim.Math3d.Int2.SumComponents
  name: SumComponents
  nameWithType: Int2.SumComponents
  fullName: Vim.Math3d.Int2.SumComponents
- uid: Vim.Math3d.Int2.SumSqrComponents*
  commentId: Overload:Vim.Math3d.Int2.SumSqrComponents
  name: SumSqrComponents
  nameWithType: Int2.SumSqrComponents
  fullName: Vim.Math3d.Int2.SumSqrComponents
- uid: Vim.Math3d.Int2.ProductComponents*
  commentId: Overload:Vim.Math3d.Int2.ProductComponents
  name: ProductComponents
  nameWithType: Int2.ProductComponents
  fullName: Vim.Math3d.Int2.ProductComponents
- uid: Vim.Math3d.Int2.GetComponent*
  commentId: Overload:Vim.Math3d.Int2.GetComponent
  name: GetComponent
  nameWithType: Int2.GetComponent
  fullName: Vim.Math3d.Int2.GetComponent
- uid: Vim.Math3d.Int2.MagnitudeSquared*
  commentId: Overload:Vim.Math3d.Int2.MagnitudeSquared
  name: MagnitudeSquared
  nameWithType: Int2.MagnitudeSquared
  fullName: Vim.Math3d.Int2.MagnitudeSquared
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Vim.Math3d.Int2.Magnitude*
  commentId: Overload:Vim.Math3d.Int2.Magnitude
  name: Magnitude
  nameWithType: Int2.Magnitude
  fullName: Vim.Math3d.Int2.Magnitude
- uid: Vim.Math3d.Int2.IsNaN*
  commentId: Overload:Vim.Math3d.Int2.IsNaN
  name: IsNaN
  nameWithType: Int2.IsNaN
  fullName: Vim.Math3d.Int2.IsNaN
- uid: Vim.Math3d.Int2.IsInfinity*
  commentId: Overload:Vim.Math3d.Int2.IsInfinity
  name: IsInfinity
  nameWithType: Int2.IsInfinity
  fullName: Vim.Math3d.Int2.IsInfinity
- uid: Vim.Math3d.Int2.CompareTo*
  commentId: Overload:Vim.Math3d.Int2.CompareTo
  name: CompareTo
  nameWithType: Int2.CompareTo
  fullName: Vim.Math3d.Int2.CompareTo
- uid: System.IComparable{Vim.Math3d.Int2}.CompareTo(Vim.Math3d.Int2)
  commentId: M:System.IComparable{Vim.Math3d.Int2}.CompareTo(Vim.Math3d.Int2)
  parent: System.IComparable{Vim.Math3d.Int2}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(Int2)
  nameWithType: IComparable<Int2>.CompareTo(Int2)
  fullName: System.IComparable<Vim.Math3d.Int2>.CompareTo(Vim.Math3d.Int2)
  nameWithType.vb: IComparable(Of Int2).CompareTo(Int2)
  fullName.vb: System.IComparable(Of Vim.Math3d.Int2).CompareTo(Vim.Math3d.Int2)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<Int2>.CompareTo
    fullName: System.IComparable<Vim.Math3d.Int2>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Int2
    name: Int2
    nameWithType: Int2
    fullName: Vim.Math3d.Int2
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of Int2).CompareTo
    fullName: System.IComparable(Of Vim.Math3d.Int2).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Int2
    name: Int2
    nameWithType: Int2
    fullName: Vim.Math3d.Int2
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable`1.CompareTo(`0)
  commentId: M:System.IComparable`1.CompareTo(`0)
  isExternal: true
  name: CompareTo(T)
  nameWithType: IComparable<T>.CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
  fullName.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<T>.CompareTo
    fullName: System.IComparable<T>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of T).CompareTo
    fullName: System.IComparable(Of T).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Int2.op_LessThan*
  commentId: Overload:Vim.Math3d.Int2.op_LessThan
  name: LessThan
  nameWithType: Int2.LessThan
  fullName: Vim.Math3d.Int2.LessThan
- uid: Vim.Math3d.Int2.op_LessThanOrEqual*
  commentId: Overload:Vim.Math3d.Int2.op_LessThanOrEqual
  name: LessThanOrEqual
  nameWithType: Int2.LessThanOrEqual
  fullName: Vim.Math3d.Int2.LessThanOrEqual
- uid: Vim.Math3d.Int2.op_GreaterThan*
  commentId: Overload:Vim.Math3d.Int2.op_GreaterThan
  name: GreaterThan
  nameWithType: Int2.GreaterThan
  fullName: Vim.Math3d.Int2.GreaterThan
- uid: Vim.Math3d.Int2.op_GreaterThanOrEqual*
  commentId: Overload:Vim.Math3d.Int2.op_GreaterThanOrEqual
  name: GreaterThanOrEqual
  nameWithType: Int2.GreaterThanOrEqual
  fullName: Vim.Math3d.Int2.GreaterThanOrEqual

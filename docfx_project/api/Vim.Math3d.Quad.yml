### YamlMime:ManagedReference
items:
- uid: Vim.Math3d.Quad
  commentId: T:Vim.Math3d.Quad
  id: Quad
  parent: Vim.Math3d
  children:
  - Vim.Math3d.Quad.#ctor(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3})
  - Vim.Math3d.Quad.#ctor(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  - Vim.Math3d.Quad.A
  - Vim.Math3d.Quad.AlmostEquals(Vim.Math3d.Quad,System.Single)
  - Vim.Math3d.Quad.B
  - Vim.Math3d.Quad.C
  - Vim.Math3d.Quad.Create(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3})
  - Vim.Math3d.Quad.Create(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  - Vim.Math3d.Quad.D
  - Vim.Math3d.Quad.Deconstruct(Vim.Math3d.Vector3@,Vim.Math3d.Vector3@,Vim.Math3d.Vector3@,Vim.Math3d.Vector3@)
  - Vim.Math3d.Quad.Equals(System.Object)
  - Vim.Math3d.Quad.Equals(Vim.Math3d.Quad)
  - Vim.Math3d.Quad.GetHashCode
  - Vim.Math3d.Quad.GetPoint(System.Int32)
  - Vim.Math3d.Quad.Map(System.Func{Vim.Math3d.Vector3,Vim.Math3d.Vector3})
  - Vim.Math3d.Quad.MaxValue
  - Vim.Math3d.Quad.MinValue
  - Vim.Math3d.Quad.NumPoints
  - Vim.Math3d.Quad.op_Equality(Vim.Math3d.Quad,Vim.Math3d.Quad)
  - Vim.Math3d.Quad.op_Implicit(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3})~Vim.Math3d.Quad
  - Vim.Math3d.Quad.op_Implicit(Vim.Math3d.Quad)~System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3}
  - Vim.Math3d.Quad.op_Inequality(Vim.Math3d.Quad,Vim.Math3d.Quad)
  - Vim.Math3d.Quad.SetA(Vim.Math3d.Vector3)
  - Vim.Math3d.Quad.SetB(Vim.Math3d.Vector3)
  - Vim.Math3d.Quad.SetC(Vim.Math3d.Vector3)
  - Vim.Math3d.Quad.SetD(Vim.Math3d.Vector3)
  - Vim.Math3d.Quad.ToString
  - Vim.Math3d.Quad.Transform(Vim.Math3d.Matrix4x4)
  - Vim.Math3d.Quad.Zero
  langs:
  - csharp
  - vb
  name: Quad
  nameWithType: Quad
  fullName: Vim.Math3d.Quad
  type: Struct
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Quad
    path: ../src/Structs.cs
    startLine: 1317
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataContract]

      public readonly struct Quad : ITransformable3D<Quad>, IPoints, IMappable<Quad, Vector3>, IEquatable<Quad>
    content.vb: >-
      <DataContract>

      Public Structure Quad
          Implements ITransformable3D(Of Quad), IPoints, IMappable(Of Quad, Vector3), IEquatable(Of Quad)
  implements:
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Quad}
  - Vim.Math3d.IPoints
  - Vim.Math3d.IMappable{Vim.Math3d.Quad,Vim.Math3d.Vector3}
  - System.IEquatable{Vim.Math3d.Quad}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Quad}.Vim.Math3d.Transformable3D.Transform``1(Vim.Math3d.Matrix4x4[])
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Quad}.Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.Vector3)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Quad}.Vim.Math3d.Transformable3D.Translate``1(System.Single,System.Single,System.Single)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Quad}.Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.Quaternion)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Quad}.Vim.Math3d.Transformable3D.Scale``1(System.Single)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Quad}.Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.Vector3)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Quad}.Vim.Math3d.Transformable3D.Scale``1(System.Single,System.Single,System.Single)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Quad}.Vim.Math3d.Transformable3D.ScaleX``1(System.Single)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Quad}.Vim.Math3d.Transformable3D.ScaleY``1(System.Single)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Quad}.Vim.Math3d.Transformable3D.ScaleZ``1(System.Single)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Quad}.Vim.Math3d.Transformable3D.LookAt``1(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Quad}.Vim.Math3d.Transformable3D.RotateAround``1(Vim.Math3d.Vector3,System.Single)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Quad}.Vim.Math3d.Transformable3D.Rotate``1(System.Single,System.Single,System.Single)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Quad}.Vim.Math3d.Transformable3D.Reflect``1(Vim.Math3d.Plane)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Quad}.Vim.Math3d.Transformable3D.RotateX``1(System.Single)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Quad}.Vim.Math3d.Transformable3D.RotateY``1(System.Single)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Quad}.Vim.Math3d.Transformable3D.RotateZ``1(System.Single)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Quad}.Vim.Math3d.Transformable3D.TranslateRotateScale``1(Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Vim.Math3d.Quad.Transform(Vim.Math3d.Matrix4x4)
  commentId: M:Vim.Math3d.Quad.Transform(Vim.Math3d.Matrix4x4)
  id: Transform(Vim.Math3d.Matrix4x4)
  parent: Vim.Math3d.Quad
  langs:
  - csharp
  - vb
  name: Transform(Matrix4x4)
  nameWithType: Quad.Transform(Matrix4x4)
  fullName: Vim.Math3d.Quad.Transform(Vim.Math3d.Matrix4x4)
  type: Method
  source:
    remote:
      path: src/Quad.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Transform
    path: ../src/Quad.cs
    startLine: 11
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly Quad Transform(Matrix4x4 mat)
    parameters:
    - id: mat
      type: Vim.Math3d.Matrix4x4
    return:
      type: Vim.Math3d.Quad
    content.vb: Public Function Transform(mat As Matrix4x4) As Quad
  overload: Vim.Math3d.Quad.Transform*
  implements:
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Quad}.Transform(Vim.Math3d.Matrix4x4)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Quad.NumPoints
  commentId: P:Vim.Math3d.Quad.NumPoints
  id: NumPoints
  parent: Vim.Math3d.Quad
  langs:
  - csharp
  - vb
  name: NumPoints
  nameWithType: Quad.NumPoints
  fullName: Vim.Math3d.Quad.NumPoints
  type: Property
  source:
    remote:
      path: src/Quad.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: NumPoints
    path: ../src/Quad.cs
    startLine: 12
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly int NumPoints { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property NumPoints As Integer
  overload: Vim.Math3d.Quad.NumPoints*
  implements:
  - Vim.Math3d.IPoints.NumPoints
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.Quad.GetPoint(System.Int32)
  commentId: M:Vim.Math3d.Quad.GetPoint(System.Int32)
  id: GetPoint(System.Int32)
  parent: Vim.Math3d.Quad
  langs:
  - csharp
  - vb
  name: GetPoint(Int32)
  nameWithType: Quad.GetPoint(Int32)
  fullName: Vim.Math3d.Quad.GetPoint(System.Int32)
  type: Method
  source:
    remote:
      path: src/Quad.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: GetPoint
    path: ../src/Quad.cs
    startLine: 13
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly Vector3 GetPoint(int n)
    parameters:
    - id: n
      type: System.Int32
    return:
      type: Vim.Math3d.Vector3
    content.vb: Public Function GetPoint(n As Integer) As Vector3
  overload: Vim.Math3d.Quad.GetPoint*
  implements:
  - Vim.Math3d.IPoints.GetPoint(System.Int32)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Quad.Map(System.Func{Vim.Math3d.Vector3,Vim.Math3d.Vector3})
  commentId: M:Vim.Math3d.Quad.Map(System.Func{Vim.Math3d.Vector3,Vim.Math3d.Vector3})
  id: Map(System.Func{Vim.Math3d.Vector3,Vim.Math3d.Vector3})
  parent: Vim.Math3d.Quad
  langs:
  - csharp
  - vb
  name: Map(Func<Vector3, Vector3>)
  nameWithType: Quad.Map(Func<Vector3, Vector3>)
  fullName: Vim.Math3d.Quad.Map(System.Func<Vim.Math3d.Vector3, Vim.Math3d.Vector3>)
  type: Method
  source:
    remote:
      path: src/Quad.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Map
    path: ../src/Quad.cs
    startLine: 14
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly Quad Map(Func<Vector3, Vector3> f)
    parameters:
    - id: f
      type: System.Func{Vim.Math3d.Vector3,Vim.Math3d.Vector3}
    return:
      type: Vim.Math3d.Quad
    content.vb: Public Function Map(f As Func(Of Vector3, Vector3)) As Quad
  overload: Vim.Math3d.Quad.Map*
  implements:
  - Vim.Math3d.IMappable{Vim.Math3d.Quad,Vim.Math3d.Vector3}.Map(System.Func{Vim.Math3d.Vector3,Vim.Math3d.Vector3})
  nameWithType.vb: Quad.Map(Func(Of Vector3, Vector3))
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  fullName.vb: Vim.Math3d.Quad.Map(System.Func(Of Vim.Math3d.Vector3, Vim.Math3d.Vector3))
  name.vb: Map(Func(Of Vector3, Vector3))
- uid: Vim.Math3d.Quad.A
  commentId: F:Vim.Math3d.Quad.A
  id: A
  parent: Vim.Math3d.Quad
  langs:
  - csharp
  - vb
  name: A
  nameWithType: Quad.A
  fullName: Vim.Math3d.Quad.A
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: A
    path: ../src/Structs.cs
    startLine: 1323
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataMember]

      public readonly Vector3 A
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <DataMember>

      Public ReadOnly A As Vector3
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.Quad.B
  commentId: F:Vim.Math3d.Quad.B
  id: B
  parent: Vim.Math3d.Quad
  langs:
  - csharp
  - vb
  name: B
  nameWithType: Quad.B
  fullName: Vim.Math3d.Quad.B
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: B
    path: ../src/Structs.cs
    startLine: 1325
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataMember]

      public readonly Vector3 B
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <DataMember>

      Public ReadOnly B As Vector3
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.Quad.C
  commentId: F:Vim.Math3d.Quad.C
  id: C
  parent: Vim.Math3d.Quad
  langs:
  - csharp
  - vb
  name: C
  nameWithType: Quad.C
  fullName: Vim.Math3d.Quad.C
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: C
    path: ../src/Structs.cs
    startLine: 1327
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataMember]

      public readonly Vector3 C
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <DataMember>

      Public ReadOnly C As Vector3
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.Quad.D
  commentId: F:Vim.Math3d.Quad.D
  id: D
  parent: Vim.Math3d.Quad
  langs:
  - csharp
  - vb
  name: D
  nameWithType: Quad.D
  fullName: Vim.Math3d.Quad.D
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: D
    path: ../src/Structs.cs
    startLine: 1329
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataMember]

      public readonly Vector3 D
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <DataMember>

      Public ReadOnly D As Vector3
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.Quad.#ctor(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3})
  commentId: M:Vim.Math3d.Quad.#ctor(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3})
  id: '#ctor(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3})'
  parent: Vim.Math3d.Quad
  langs:
  - csharp
  - vb
  name: Quad((Vector3 a, Vector3 b, Vector3 c, Vector3 d))
  nameWithType: Quad.Quad((Vector3 a, Vector3 b, Vector3 c, Vector3 d))
  fullName: Vim.Math3d.Quad.Quad(System.ValueTuple<Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3>)
  type: Constructor
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: .ctor
    path: ../src/Structs.cs
    startLine: 1330
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public Quad((Vector3 a, Vector3 b, Vector3 c, Vector3 d) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3}
    content.vb: Public Sub New(tuple As(a As Vector3, b As Vector3, c As Vector3, d As Vector3)(Of Vector3 , Vector3, Vector3, Vector3))
  overload: Vim.Math3d.Quad.#ctor*
  nameWithType.vb: Quad.Quad((a As Vector3, b As Vector3, c As Vector3, d As Vector3)(Of Vector3, Vector3, Vector3, Vector3))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Vim.Math3d.Quad.Quad(System.ValueTuple(Of Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3))
  name.vb: Quad((a As Vector3, b As Vector3, c As Vector3, d As Vector3)(Of Vector3, Vector3, Vector3, Vector3))
- uid: Vim.Math3d.Quad.#ctor(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Quad.#ctor(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  id: '#ctor(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)'
  parent: Vim.Math3d.Quad
  langs:
  - csharp
  - vb
  name: Quad(Vector3, Vector3, Vector3, Vector3)
  nameWithType: Quad.Quad(Vector3, Vector3, Vector3, Vector3)
  fullName: Vim.Math3d.Quad.Quad(Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  type: Constructor
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: .ctor
    path: ../src/Structs.cs
    startLine: 1331
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public Quad(Vector3 a, Vector3 b, Vector3 c, Vector3 d)
    parameters:
    - id: a
      type: Vim.Math3d.Vector3
    - id: b
      type: Vim.Math3d.Vector3
    - id: c
      type: Vim.Math3d.Vector3
    - id: d
      type: Vim.Math3d.Vector3
    content.vb: Public Sub New(a As Vector3, b As Vector3, c As Vector3, d As Vector3)
  overload: Vim.Math3d.Quad.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Quad.Create(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Quad.Create(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  id: Create(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  parent: Vim.Math3d.Quad
  langs:
  - csharp
  - vb
  name: Create(Vector3, Vector3, Vector3, Vector3)
  nameWithType: Quad.Create(Vector3, Vector3, Vector3, Vector3)
  fullName: Vim.Math3d.Quad.Create(Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Create
    path: ../src/Structs.cs
    startLine: 1332
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Quad Create(Vector3 a, Vector3 b, Vector3 c, Vector3 d)
    parameters:
    - id: a
      type: Vim.Math3d.Vector3
    - id: b
      type: Vim.Math3d.Vector3
    - id: c
      type: Vim.Math3d.Vector3
    - id: d
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Quad
    content.vb: Public Shared Function Create(a As Vector3, b As Vector3, c As Vector3, d As Vector3) As Quad
  overload: Vim.Math3d.Quad.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Quad.Create(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3})
  commentId: M:Vim.Math3d.Quad.Create(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3})
  id: Create(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3})
  parent: Vim.Math3d.Quad
  langs:
  - csharp
  - vb
  name: Create((Vector3 a, Vector3 b, Vector3 c, Vector3 d))
  nameWithType: Quad.Create((Vector3 a, Vector3 b, Vector3 c, Vector3 d))
  fullName: Vim.Math3d.Quad.Create(System.ValueTuple<Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3>)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Create
    path: ../src/Structs.cs
    startLine: 1333
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Quad Create((Vector3 a, Vector3 b, Vector3 c, Vector3 d) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3}
    return:
      type: Vim.Math3d.Quad
    content.vb: Public Shared Function Create(tuple As(a As Vector3, b As Vector3, c As Vector3, d As Vector3)(Of Vector3 , Vector3, Vector3, Vector3)) As Quad
  overload: Vim.Math3d.Quad.Create*
  nameWithType.vb: Quad.Create((a As Vector3, b As Vector3, c As Vector3, d As Vector3)(Of Vector3, Vector3, Vector3, Vector3))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.Quad.Create(System.ValueTuple(Of Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3))
  name.vb: Create((a As Vector3, b As Vector3, c As Vector3, d As Vector3)(Of Vector3, Vector3, Vector3, Vector3))
- uid: Vim.Math3d.Quad.Equals(System.Object)
  commentId: M:Vim.Math3d.Quad.Equals(System.Object)
  id: Equals(System.Object)
  parent: Vim.Math3d.Quad
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Quad.Equals(Object)
  fullName: Vim.Math3d.Quad.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Equals
    path: ../src/Structs.cs
    startLine: 1334
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: Vim.Math3d.Quad.Equals*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.Quad.GetHashCode
  commentId: M:Vim.Math3d.Quad.GetHashCode
  id: GetHashCode
  parent: Vim.Math3d.Quad
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Quad.GetHashCode()
  fullName: Vim.Math3d.Quad.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: GetHashCode
    path: ../src/Structs.cs
    startLine: 1335
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: Vim.Math3d.Quad.GetHashCode*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.Quad.ToString
  commentId: M:Vim.Math3d.Quad.ToString
  id: ToString
  parent: Vim.Math3d.Quad
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Quad.ToString()
  fullName: Vim.Math3d.Quad.ToString()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToString
    path: ../src/Structs.cs
    startLine: 1336
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: Vim.Math3d.Quad.ToString*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.Quad.Deconstruct(Vim.Math3d.Vector3@,Vim.Math3d.Vector3@,Vim.Math3d.Vector3@,Vim.Math3d.Vector3@)
  commentId: M:Vim.Math3d.Quad.Deconstruct(Vim.Math3d.Vector3@,Vim.Math3d.Vector3@,Vim.Math3d.Vector3@,Vim.Math3d.Vector3@)
  id: Deconstruct(Vim.Math3d.Vector3@,Vim.Math3d.Vector3@,Vim.Math3d.Vector3@,Vim.Math3d.Vector3@)
  parent: Vim.Math3d.Quad
  langs:
  - csharp
  - vb
  name: Deconstruct(out Vector3, out Vector3, out Vector3, out Vector3)
  nameWithType: Quad.Deconstruct(out Vector3, out Vector3, out Vector3, out Vector3)
  fullName: Vim.Math3d.Quad.Deconstruct(out Vim.Math3d.Vector3, out Vim.Math3d.Vector3, out Vim.Math3d.Vector3, out Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Deconstruct
    path: ../src/Structs.cs
    startLine: 1337
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly void Deconstruct(out Vector3 a, out Vector3 b, out Vector3 c, out Vector3 d)
    parameters:
    - id: a
      type: Vim.Math3d.Vector3
    - id: b
      type: Vim.Math3d.Vector3
    - id: c
      type: Vim.Math3d.Vector3
    - id: d
      type: Vim.Math3d.Vector3
    content.vb: Public Sub Deconstruct(ByRef a As Vector3, ByRef b As Vector3, ByRef c As Vector3, ByRef d As Vector3)
  overload: Vim.Math3d.Quad.Deconstruct*
  nameWithType.vb: Quad.Deconstruct(ByRef Vector3, ByRef Vector3, ByRef Vector3, ByRef Vector3)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  fullName.vb: Vim.Math3d.Quad.Deconstruct(ByRef Vim.Math3d.Vector3, ByRef Vim.Math3d.Vector3, ByRef Vim.Math3d.Vector3, ByRef Vim.Math3d.Vector3)
  name.vb: Deconstruct(ByRef Vector3, ByRef Vector3, ByRef Vector3, ByRef Vector3)
- uid: Vim.Math3d.Quad.Equals(Vim.Math3d.Quad)
  commentId: M:Vim.Math3d.Quad.Equals(Vim.Math3d.Quad)
  id: Equals(Vim.Math3d.Quad)
  parent: Vim.Math3d.Quad
  langs:
  - csharp
  - vb
  name: Equals(Quad)
  nameWithType: Quad.Equals(Quad)
  fullName: Vim.Math3d.Quad.Equals(Vim.Math3d.Quad)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Equals
    path: ../src/Structs.cs
    startLine: 1338
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool Equals(Quad x)
    parameters:
    - id: x
      type: Vim.Math3d.Quad
    return:
      type: System.Boolean
    content.vb: Public Function Equals(x As Quad) As Boolean
  overload: Vim.Math3d.Quad.Equals*
  implements:
  - System.IEquatable{Vim.Math3d.Quad}.Equals(Vim.Math3d.Quad)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Quad.op_Equality(Vim.Math3d.Quad,Vim.Math3d.Quad)
  commentId: M:Vim.Math3d.Quad.op_Equality(Vim.Math3d.Quad,Vim.Math3d.Quad)
  id: op_Equality(Vim.Math3d.Quad,Vim.Math3d.Quad)
  parent: Vim.Math3d.Quad
  langs:
  - csharp
  - vb
  name: Equality(Quad, Quad)
  nameWithType: Quad.Equality(Quad, Quad)
  fullName: Vim.Math3d.Quad.Equality(Vim.Math3d.Quad, Vim.Math3d.Quad)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Equality
    path: ../src/Structs.cs
    startLine: 1339
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator ==(Quad x0, Quad x1)
    parameters:
    - id: x0
      type: Vim.Math3d.Quad
    - id: x1
      type: Vim.Math3d.Quad
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(x0 As Quad, x1 As Quad) As Boolean
  overload: Vim.Math3d.Quad.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Quad.op_Inequality(Vim.Math3d.Quad,Vim.Math3d.Quad)
  commentId: M:Vim.Math3d.Quad.op_Inequality(Vim.Math3d.Quad,Vim.Math3d.Quad)
  id: op_Inequality(Vim.Math3d.Quad,Vim.Math3d.Quad)
  parent: Vim.Math3d.Quad
  langs:
  - csharp
  - vb
  name: Inequality(Quad, Quad)
  nameWithType: Quad.Inequality(Quad, Quad)
  fullName: Vim.Math3d.Quad.Inequality(Vim.Math3d.Quad, Vim.Math3d.Quad)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Inequality
    path: ../src/Structs.cs
    startLine: 1340
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator !=(Quad x0, Quad x1)
    parameters:
    - id: x0
      type: Vim.Math3d.Quad
    - id: x1
      type: Vim.Math3d.Quad
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(x0 As Quad, x1 As Quad) As Boolean
  overload: Vim.Math3d.Quad.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Quad.op_Implicit(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3})~Vim.Math3d.Quad
  commentId: M:Vim.Math3d.Quad.op_Implicit(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3})~Vim.Math3d.Quad
  id: op_Implicit(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3})~Vim.Math3d.Quad
  parent: Vim.Math3d.Quad
  langs:
  - csharp
  - vb
  name: Implicit((Vector3 a, Vector3 b, Vector3 c, Vector3 d) to Quad)
  nameWithType: Quad.Implicit((Vector3 a, Vector3 b, Vector3 c, Vector3 d) to Quad)
  fullName: Vim.Math3d.Quad.Implicit(System.ValueTuple<Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3> to Vim.Math3d.Quad)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Implicit
    path: ../src/Structs.cs
    startLine: 1341
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static implicit operator Quad((Vector3 a, Vector3 b, Vector3 c, Vector3 d) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3}
    return:
      type: Vim.Math3d.Quad
    content.vb: Public Shared Widening Operator CType(tuple As(a As Vector3, b As Vector3, c As Vector3, d As Vector3)(Of Vector3 , Vector3, Vector3, Vector3)) As Quad
  overload: Vim.Math3d.Quad.op_Implicit*
  nameWithType.vb: Quad.Widening((a As Vector3, b As Vector3, c As Vector3, d As Vector3)(Of Vector3, Vector3, Vector3, Vector3) to Quad)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.Quad.Widening(System.ValueTuple(Of Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3) to Vim.Math3d.Quad)
  name.vb: Widening((a As Vector3, b As Vector3, c As Vector3, d As Vector3)(Of Vector3, Vector3, Vector3, Vector3) to Quad)
- uid: Vim.Math3d.Quad.op_Implicit(Vim.Math3d.Quad)~System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3}
  commentId: M:Vim.Math3d.Quad.op_Implicit(Vim.Math3d.Quad)~System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3}
  id: op_Implicit(Vim.Math3d.Quad)~System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3}
  parent: Vim.Math3d.Quad
  langs:
  - csharp
  - vb
  name: Implicit(Quad to (Vector3 a, Vector3 b, Vector3 c, Vector3 d))
  nameWithType: Quad.Implicit(Quad to (Vector3 a, Vector3 b, Vector3 c, Vector3 d))
  fullName: Vim.Math3d.Quad.Implicit(Vim.Math3d.Quad to System.ValueTuple<Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3>)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Implicit
    path: ../src/Structs.cs
    startLine: 1342
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static implicit operator (Vector3 a, Vector3 b, Vector3 c, Vector3 d)(Quad self)
    parameters:
    - id: self
      type: Vim.Math3d.Quad
    return:
      type: System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3}
    content.vb: Public Shared Widening Operator CType(self As Quad) As(a As Vector3, b As Vector3, c As Vector3, d As Vector3)(Of Vector3 , Vector3, Vector3, Vector3)
  overload: Vim.Math3d.Quad.op_Implicit*
  nameWithType.vb: Quad.Widening(Quad to (a As Vector3, b As Vector3, c As Vector3, d As Vector3)(Of Vector3, Vector3, Vector3, Vector3))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.Quad.Widening(Vim.Math3d.Quad to System.ValueTuple(Of Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3))
  name.vb: Widening(Quad to (a As Vector3, b As Vector3, c As Vector3, d As Vector3)(Of Vector3, Vector3, Vector3, Vector3))
- uid: Vim.Math3d.Quad.AlmostEquals(Vim.Math3d.Quad,System.Single)
  commentId: M:Vim.Math3d.Quad.AlmostEquals(Vim.Math3d.Quad,System.Single)
  id: AlmostEquals(Vim.Math3d.Quad,System.Single)
  parent: Vim.Math3d.Quad
  langs:
  - csharp
  - vb
  name: AlmostEquals(Quad, Single)
  nameWithType: Quad.AlmostEquals(Quad, Single)
  fullName: Vim.Math3d.Quad.AlmostEquals(Vim.Math3d.Quad, System.Single)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: AlmostEquals
    path: ../src/Structs.cs
    startLine: 1344
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool AlmostEquals(Quad x, float tolerance = 1E-07F)
    parameters:
    - id: x
      type: Vim.Math3d.Quad
    - id: tolerance
      type: System.Single
    return:
      type: System.Boolean
    content.vb: Public Function AlmostEquals(x As Quad, tolerance As Single = 1E-07F) As Boolean
  overload: Vim.Math3d.Quad.AlmostEquals*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Quad.Zero
  commentId: F:Vim.Math3d.Quad.Zero
  id: Zero
  parent: Vim.Math3d.Quad
  langs:
  - csharp
  - vb
  name: Zero
  nameWithType: Quad.Zero
  fullName: Vim.Math3d.Quad.Zero
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Zero
    path: ../src/Structs.cs
    startLine: 1345
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Quad Zero
    return:
      type: Vim.Math3d.Quad
    content.vb: Public Shared Zero As Quad
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Quad.MinValue
  commentId: F:Vim.Math3d.Quad.MinValue
  id: MinValue
  parent: Vim.Math3d.Quad
  langs:
  - csharp
  - vb
  name: MinValue
  nameWithType: Quad.MinValue
  fullName: Vim.Math3d.Quad.MinValue
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MinValue
    path: ../src/Structs.cs
    startLine: 1346
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Quad MinValue
    return:
      type: Vim.Math3d.Quad
    content.vb: Public Shared MinValue As Quad
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Quad.MaxValue
  commentId: F:Vim.Math3d.Quad.MaxValue
  id: MaxValue
  parent: Vim.Math3d.Quad
  langs:
  - csharp
  - vb
  name: MaxValue
  nameWithType: Quad.MaxValue
  fullName: Vim.Math3d.Quad.MaxValue
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MaxValue
    path: ../src/Structs.cs
    startLine: 1347
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Quad MaxValue
    return:
      type: Vim.Math3d.Quad
    content.vb: Public Shared MaxValue As Quad
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Quad.SetA(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Quad.SetA(Vim.Math3d.Vector3)
  id: SetA(Vim.Math3d.Vector3)
  parent: Vim.Math3d.Quad
  langs:
  - csharp
  - vb
  name: SetA(Vector3)
  nameWithType: Quad.SetA(Vector3)
  fullName: Vim.Math3d.Quad.SetA(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SetA
    path: ../src/Structs.cs
    startLine: 1348
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly Quad SetA(Vector3 x)
    parameters:
    - id: x
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Quad
    content.vb: Public Function SetA(x As Vector3) As Quad
  overload: Vim.Math3d.Quad.SetA*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Quad.SetB(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Quad.SetB(Vim.Math3d.Vector3)
  id: SetB(Vim.Math3d.Vector3)
  parent: Vim.Math3d.Quad
  langs:
  - csharp
  - vb
  name: SetB(Vector3)
  nameWithType: Quad.SetB(Vector3)
  fullName: Vim.Math3d.Quad.SetB(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SetB
    path: ../src/Structs.cs
    startLine: 1349
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly Quad SetB(Vector3 x)
    parameters:
    - id: x
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Quad
    content.vb: Public Function SetB(x As Vector3) As Quad
  overload: Vim.Math3d.Quad.SetB*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Quad.SetC(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Quad.SetC(Vim.Math3d.Vector3)
  id: SetC(Vim.Math3d.Vector3)
  parent: Vim.Math3d.Quad
  langs:
  - csharp
  - vb
  name: SetC(Vector3)
  nameWithType: Quad.SetC(Vector3)
  fullName: Vim.Math3d.Quad.SetC(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SetC
    path: ../src/Structs.cs
    startLine: 1350
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly Quad SetC(Vector3 x)
    parameters:
    - id: x
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Quad
    content.vb: Public Function SetC(x As Vector3) As Quad
  overload: Vim.Math3d.Quad.SetC*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Quad.SetD(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Quad.SetD(Vim.Math3d.Vector3)
  id: SetD(Vim.Math3d.Vector3)
  parent: Vim.Math3d.Quad
  langs:
  - csharp
  - vb
  name: SetD(Vector3)
  nameWithType: Quad.SetD(Vector3)
  fullName: Vim.Math3d.Quad.SetD(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SetD
    path: ../src/Structs.cs
    startLine: 1351
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly Quad SetD(Vector3 x)
    parameters:
    - id: x
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Quad
    content.vb: Public Function SetD(x As Vector3) As Quad
  overload: Vim.Math3d.Quad.SetD*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
references:
- uid: Vim.Math3d
  commentId: N:Vim.Math3d
  name: Vim.Math3d
  nameWithType: Vim.Math3d
  fullName: Vim.Math3d
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Quad}
  commentId: T:Vim.Math3d.ITransformable3D{Vim.Math3d.Quad}
  parent: Vim.Math3d
  definition: Vim.Math3d.ITransformable3D`1
  name: ITransformable3D<Quad>
  nameWithType: ITransformable3D<Quad>
  fullName: Vim.Math3d.ITransformable3D<Vim.Math3d.Quad>
  nameWithType.vb: ITransformable3D(Of Quad)
  fullName.vb: Vim.Math3d.ITransformable3D(Of Vim.Math3d.Quad)
  name.vb: ITransformable3D(Of Quad)
  spec.csharp:
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.Quad
    name: Quad
    nameWithType: Quad
    fullName: Vim.Math3d.Quad
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.Quad
    name: Quad
    nameWithType: Quad
    fullName: Vim.Math3d.Quad
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.IPoints
  commentId: T:Vim.Math3d.IPoints
  parent: Vim.Math3d
  name: IPoints
  nameWithType: IPoints
  fullName: Vim.Math3d.IPoints
- uid: Vim.Math3d.IMappable{Vim.Math3d.Quad,Vim.Math3d.Vector3}
  commentId: T:Vim.Math3d.IMappable{Vim.Math3d.Quad,Vim.Math3d.Vector3}
  parent: Vim.Math3d
  definition: Vim.Math3d.IMappable`2
  name: IMappable<Quad, Vector3>
  nameWithType: IMappable<Quad, Vector3>
  fullName: Vim.Math3d.IMappable<Vim.Math3d.Quad, Vim.Math3d.Vector3>
  nameWithType.vb: IMappable(Of Quad, Vector3)
  fullName.vb: Vim.Math3d.IMappable(Of Vim.Math3d.Quad, Vim.Math3d.Vector3)
  name.vb: IMappable(Of Quad, Vector3)
  spec.csharp:
  - uid: Vim.Math3d.IMappable`2
    name: IMappable
    nameWithType: IMappable
    fullName: Vim.Math3d.IMappable
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.Quad
    name: Quad
    nameWithType: Quad
    fullName: Vim.Math3d.Quad
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Vim.Math3d.IMappable`2
    name: IMappable
    nameWithType: IMappable
    fullName: Vim.Math3d.IMappable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.Quad
    name: Quad
    nameWithType: Quad
    fullName: Vim.Math3d.Quad
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable{Vim.Math3d.Quad}
  commentId: T:System.IEquatable{Vim.Math3d.Quad}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Quad>
  nameWithType: IEquatable<Quad>
  fullName: System.IEquatable<Vim.Math3d.Quad>
  nameWithType.vb: IEquatable(Of Quad)
  fullName.vb: System.IEquatable(Of Vim.Math3d.Quad)
  name.vb: IEquatable(Of Quad)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.Quad
    name: Quad
    nameWithType: Quad
    fullName: Vim.Math3d.Quad
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.Quad
    name: Quad
    nameWithType: Quad
    fullName: Vim.Math3d.Quad
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Quad}.Vim.Math3d.Transformable3D.Transform``1(Vim.Math3d.Matrix4x4[])
  commentId: M:Vim.Math3d.Transformable3D.Transform``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Matrix4x4[])
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.Transform``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Matrix4x4[])
  name: Transform<Quad>(Matrix4x4[])
  nameWithType: Transformable3D.Transform<Quad>(Matrix4x4[])
  fullName: Vim.Math3d.Transformable3D.Transform<Vim.Math3d.Quad>(Vim.Math3d.Matrix4x4[])
  nameWithType.vb: Transformable3D.Transform(Of Quad)(Matrix4x4())
  fullName.vb: Vim.Math3d.Transformable3D.Transform(Of Vim.Math3d.Quad)(Vim.Math3d.Matrix4x4())
  name.vb: Transform(Of Quad)(Matrix4x4())
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Transform``1(Vim.Math3d.Matrix4x4[])
    name: Transform<Quad>
    nameWithType: Transformable3D.Transform<Quad>
    fullName: Vim.Math3d.Transformable3D.Transform<Vim.Math3d.Quad>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Matrix4x4
    name: Matrix4x4
    nameWithType: Matrix4x4
    fullName: Vim.Math3d.Matrix4x4
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Transform``1(Vim.Math3d.Matrix4x4[])
    name: Transform(Of Quad)
    nameWithType: Transformable3D.Transform(Of Quad)
    fullName: Vim.Math3d.Transformable3D.Transform(Of Vim.Math3d.Quad)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Matrix4x4
    name: Matrix4x4
    nameWithType: Matrix4x4
    fullName: Vim.Math3d.Matrix4x4
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Quad}.Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
  name: Translate<Quad>(Vector3)
  nameWithType: Transformable3D.Translate<Quad>(Vector3)
  fullName: Vim.Math3d.Transformable3D.Translate<Vim.Math3d.Quad>(Vim.Math3d.Vector3)
  nameWithType.vb: Transformable3D.Translate(Of Quad)(Vector3)
  fullName.vb: Vim.Math3d.Transformable3D.Translate(Of Vim.Math3d.Quad)(Vim.Math3d.Vector3)
  name.vb: Translate(Of Quad)(Vector3)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.Vector3)
    name: Translate<Quad>
    nameWithType: Transformable3D.Translate<Quad>
    fullName: Vim.Math3d.Transformable3D.Translate<Vim.Math3d.Quad>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.Vector3)
    name: Translate(Of Quad)
    nameWithType: Transformable3D.Translate(Of Quad)
    fullName: Vim.Math3d.Transformable3D.Translate(Of Vim.Math3d.Quad)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Quad}.Vim.Math3d.Transformable3D.Translate``1(System.Single,System.Single,System.Single)
  commentId: M:Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  name: Translate<Quad>(Single, Single, Single)
  nameWithType: Transformable3D.Translate<Quad>(Single, Single, Single)
  fullName: Vim.Math3d.Transformable3D.Translate<Vim.Math3d.Quad>(System.Single, System.Single, System.Single)
  nameWithType.vb: Transformable3D.Translate(Of Quad)(Single, Single, Single)
  fullName.vb: Vim.Math3d.Transformable3D.Translate(Of Vim.Math3d.Quad)(System.Single, System.Single, System.Single)
  name.vb: Translate(Of Quad)(Single, Single, Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Translate``1(System.Single,System.Single,System.Single)
    name: Translate<Quad>
    nameWithType: Transformable3D.Translate<Quad>
    fullName: Vim.Math3d.Transformable3D.Translate<Vim.Math3d.Quad>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Translate``1(System.Single,System.Single,System.Single)
    name: Translate(Of Quad)
    nameWithType: Transformable3D.Translate(Of Quad)
    fullName: Vim.Math3d.Transformable3D.Translate(Of Vim.Math3d.Quad)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Quad}.Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.Quaternion)
  commentId: M:Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Quaternion)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Quaternion)
  name: Rotate<Quad>(Quaternion)
  nameWithType: Transformable3D.Rotate<Quad>(Quaternion)
  fullName: Vim.Math3d.Transformable3D.Rotate<Vim.Math3d.Quad>(Vim.Math3d.Quaternion)
  nameWithType.vb: Transformable3D.Rotate(Of Quad)(Quaternion)
  fullName.vb: Vim.Math3d.Transformable3D.Rotate(Of Vim.Math3d.Quad)(Vim.Math3d.Quaternion)
  name.vb: Rotate(Of Quad)(Quaternion)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.Quaternion)
    name: Rotate<Quad>
    nameWithType: Transformable3D.Rotate<Quad>
    fullName: Vim.Math3d.Transformable3D.Rotate<Vim.Math3d.Quad>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Quaternion
    name: Quaternion
    nameWithType: Quaternion
    fullName: Vim.Math3d.Quaternion
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.Quaternion)
    name: Rotate(Of Quad)
    nameWithType: Transformable3D.Rotate(Of Quad)
    fullName: Vim.Math3d.Transformable3D.Rotate(Of Vim.Math3d.Quad)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Quaternion
    name: Quaternion
    nameWithType: Quaternion
    fullName: Vim.Math3d.Quaternion
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Quad}.Vim.Math3d.Transformable3D.Scale``1(System.Single)
  commentId: M:Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  name: Scale<Quad>(Single)
  nameWithType: Transformable3D.Scale<Quad>(Single)
  fullName: Vim.Math3d.Transformable3D.Scale<Vim.Math3d.Quad>(System.Single)
  nameWithType.vb: Transformable3D.Scale(Of Quad)(Single)
  fullName.vb: Vim.Math3d.Transformable3D.Scale(Of Vim.Math3d.Quad)(System.Single)
  name.vb: Scale(Of Quad)(Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Scale``1(System.Single)
    name: Scale<Quad>
    nameWithType: Transformable3D.Scale<Quad>
    fullName: Vim.Math3d.Transformable3D.Scale<Vim.Math3d.Quad>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Scale``1(System.Single)
    name: Scale(Of Quad)
    nameWithType: Transformable3D.Scale(Of Quad)
    fullName: Vim.Math3d.Transformable3D.Scale(Of Vim.Math3d.Quad)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Quad}.Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
  name: Scale<Quad>(Vector3)
  nameWithType: Transformable3D.Scale<Quad>(Vector3)
  fullName: Vim.Math3d.Transformable3D.Scale<Vim.Math3d.Quad>(Vim.Math3d.Vector3)
  nameWithType.vb: Transformable3D.Scale(Of Quad)(Vector3)
  fullName.vb: Vim.Math3d.Transformable3D.Scale(Of Vim.Math3d.Quad)(Vim.Math3d.Vector3)
  name.vb: Scale(Of Quad)(Vector3)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.Vector3)
    name: Scale<Quad>
    nameWithType: Transformable3D.Scale<Quad>
    fullName: Vim.Math3d.Transformable3D.Scale<Vim.Math3d.Quad>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.Vector3)
    name: Scale(Of Quad)
    nameWithType: Transformable3D.Scale(Of Quad)
    fullName: Vim.Math3d.Transformable3D.Scale(Of Vim.Math3d.Quad)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Quad}.Vim.Math3d.Transformable3D.Scale``1(System.Single,System.Single,System.Single)
  commentId: M:Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  name: Scale<Quad>(Single, Single, Single)
  nameWithType: Transformable3D.Scale<Quad>(Single, Single, Single)
  fullName: Vim.Math3d.Transformable3D.Scale<Vim.Math3d.Quad>(System.Single, System.Single, System.Single)
  nameWithType.vb: Transformable3D.Scale(Of Quad)(Single, Single, Single)
  fullName.vb: Vim.Math3d.Transformable3D.Scale(Of Vim.Math3d.Quad)(System.Single, System.Single, System.Single)
  name.vb: Scale(Of Quad)(Single, Single, Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Scale``1(System.Single,System.Single,System.Single)
    name: Scale<Quad>
    nameWithType: Transformable3D.Scale<Quad>
    fullName: Vim.Math3d.Transformable3D.Scale<Vim.Math3d.Quad>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Scale``1(System.Single,System.Single,System.Single)
    name: Scale(Of Quad)
    nameWithType: Transformable3D.Scale(Of Quad)
    fullName: Vim.Math3d.Transformable3D.Scale(Of Vim.Math3d.Quad)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Quad}.Vim.Math3d.Transformable3D.ScaleX``1(System.Single)
  commentId: M:Vim.Math3d.Transformable3D.ScaleX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.ScaleX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  name: ScaleX<Quad>(Single)
  nameWithType: Transformable3D.ScaleX<Quad>(Single)
  fullName: Vim.Math3d.Transformable3D.ScaleX<Vim.Math3d.Quad>(System.Single)
  nameWithType.vb: Transformable3D.ScaleX(Of Quad)(Single)
  fullName.vb: Vim.Math3d.Transformable3D.ScaleX(Of Vim.Math3d.Quad)(System.Single)
  name.vb: ScaleX(Of Quad)(Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.ScaleX``1(System.Single)
    name: ScaleX<Quad>
    nameWithType: Transformable3D.ScaleX<Quad>
    fullName: Vim.Math3d.Transformable3D.ScaleX<Vim.Math3d.Quad>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.ScaleX``1(System.Single)
    name: ScaleX(Of Quad)
    nameWithType: Transformable3D.ScaleX(Of Quad)
    fullName: Vim.Math3d.Transformable3D.ScaleX(Of Vim.Math3d.Quad)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Quad}.Vim.Math3d.Transformable3D.ScaleY``1(System.Single)
  commentId: M:Vim.Math3d.Transformable3D.ScaleY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.ScaleY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  name: ScaleY<Quad>(Single)
  nameWithType: Transformable3D.ScaleY<Quad>(Single)
  fullName: Vim.Math3d.Transformable3D.ScaleY<Vim.Math3d.Quad>(System.Single)
  nameWithType.vb: Transformable3D.ScaleY(Of Quad)(Single)
  fullName.vb: Vim.Math3d.Transformable3D.ScaleY(Of Vim.Math3d.Quad)(System.Single)
  name.vb: ScaleY(Of Quad)(Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.ScaleY``1(System.Single)
    name: ScaleY<Quad>
    nameWithType: Transformable3D.ScaleY<Quad>
    fullName: Vim.Math3d.Transformable3D.ScaleY<Vim.Math3d.Quad>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.ScaleY``1(System.Single)
    name: ScaleY(Of Quad)
    nameWithType: Transformable3D.ScaleY(Of Quad)
    fullName: Vim.Math3d.Transformable3D.ScaleY(Of Vim.Math3d.Quad)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Quad}.Vim.Math3d.Transformable3D.ScaleZ``1(System.Single)
  commentId: M:Vim.Math3d.Transformable3D.ScaleZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.ScaleZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  name: ScaleZ<Quad>(Single)
  nameWithType: Transformable3D.ScaleZ<Quad>(Single)
  fullName: Vim.Math3d.Transformable3D.ScaleZ<Vim.Math3d.Quad>(System.Single)
  nameWithType.vb: Transformable3D.ScaleZ(Of Quad)(Single)
  fullName.vb: Vim.Math3d.Transformable3D.ScaleZ(Of Vim.Math3d.Quad)(System.Single)
  name.vb: ScaleZ(Of Quad)(Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.ScaleZ``1(System.Single)
    name: ScaleZ<Quad>
    nameWithType: Transformable3D.ScaleZ<Quad>
    fullName: Vim.Math3d.Transformable3D.ScaleZ<Vim.Math3d.Quad>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.ScaleZ``1(System.Single)
    name: ScaleZ(Of Quad)
    nameWithType: Transformable3D.ScaleZ(Of Quad)
    fullName: Vim.Math3d.Transformable3D.ScaleZ(Of Vim.Math3d.Quad)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Quad}.Vim.Math3d.Transformable3D.LookAt``1(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Transformable3D.LookAt``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.LookAt``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  name: LookAt<Quad>(Vector3, Vector3, Vector3)
  nameWithType: Transformable3D.LookAt<Quad>(Vector3, Vector3, Vector3)
  fullName: Vim.Math3d.Transformable3D.LookAt<Vim.Math3d.Quad>(Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  nameWithType.vb: Transformable3D.LookAt(Of Quad)(Vector3, Vector3, Vector3)
  fullName.vb: Vim.Math3d.Transformable3D.LookAt(Of Vim.Math3d.Quad)(Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  name.vb: LookAt(Of Quad)(Vector3, Vector3, Vector3)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.LookAt``1(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
    name: LookAt<Quad>
    nameWithType: Transformable3D.LookAt<Quad>
    fullName: Vim.Math3d.Transformable3D.LookAt<Vim.Math3d.Quad>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.LookAt``1(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
    name: LookAt(Of Quad)
    nameWithType: Transformable3D.LookAt(Of Quad)
    fullName: Vim.Math3d.Transformable3D.LookAt(Of Vim.Math3d.Quad)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Quad}.Vim.Math3d.Transformable3D.RotateAround``1(Vim.Math3d.Vector3,System.Single)
  commentId: M:Vim.Math3d.Transformable3D.RotateAround``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,System.Single)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.RotateAround``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,System.Single)
  name: RotateAround<Quad>(Vector3, Single)
  nameWithType: Transformable3D.RotateAround<Quad>(Vector3, Single)
  fullName: Vim.Math3d.Transformable3D.RotateAround<Vim.Math3d.Quad>(Vim.Math3d.Vector3, System.Single)
  nameWithType.vb: Transformable3D.RotateAround(Of Quad)(Vector3, Single)
  fullName.vb: Vim.Math3d.Transformable3D.RotateAround(Of Vim.Math3d.Quad)(Vim.Math3d.Vector3, System.Single)
  name.vb: RotateAround(Of Quad)(Vector3, Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.RotateAround``1(Vim.Math3d.Vector3,System.Single)
    name: RotateAround<Quad>
    nameWithType: Transformable3D.RotateAround<Quad>
    fullName: Vim.Math3d.Transformable3D.RotateAround<Vim.Math3d.Quad>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.RotateAround``1(Vim.Math3d.Vector3,System.Single)
    name: RotateAround(Of Quad)
    nameWithType: Transformable3D.RotateAround(Of Quad)
    fullName: Vim.Math3d.Transformable3D.RotateAround(Of Vim.Math3d.Quad)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Quad}.Vim.Math3d.Transformable3D.Rotate``1(System.Single,System.Single,System.Single)
  commentId: M:Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  name: Rotate<Quad>(Single, Single, Single)
  nameWithType: Transformable3D.Rotate<Quad>(Single, Single, Single)
  fullName: Vim.Math3d.Transformable3D.Rotate<Vim.Math3d.Quad>(System.Single, System.Single, System.Single)
  nameWithType.vb: Transformable3D.Rotate(Of Quad)(Single, Single, Single)
  fullName.vb: Vim.Math3d.Transformable3D.Rotate(Of Vim.Math3d.Quad)(System.Single, System.Single, System.Single)
  name.vb: Rotate(Of Quad)(Single, Single, Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Rotate``1(System.Single,System.Single,System.Single)
    name: Rotate<Quad>
    nameWithType: Transformable3D.Rotate<Quad>
    fullName: Vim.Math3d.Transformable3D.Rotate<Vim.Math3d.Quad>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Rotate``1(System.Single,System.Single,System.Single)
    name: Rotate(Of Quad)
    nameWithType: Transformable3D.Rotate(Of Quad)
    fullName: Vim.Math3d.Transformable3D.Rotate(Of Vim.Math3d.Quad)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Quad}.Vim.Math3d.Transformable3D.Reflect``1(Vim.Math3d.Plane)
  commentId: M:Vim.Math3d.Transformable3D.Reflect``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Plane)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.Reflect``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Plane)
  name: Reflect<Quad>(Plane)
  nameWithType: Transformable3D.Reflect<Quad>(Plane)
  fullName: Vim.Math3d.Transformable3D.Reflect<Vim.Math3d.Quad>(Vim.Math3d.Plane)
  nameWithType.vb: Transformable3D.Reflect(Of Quad)(Plane)
  fullName.vb: Vim.Math3d.Transformable3D.Reflect(Of Vim.Math3d.Quad)(Vim.Math3d.Plane)
  name.vb: Reflect(Of Quad)(Plane)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Reflect``1(Vim.Math3d.Plane)
    name: Reflect<Quad>
    nameWithType: Transformable3D.Reflect<Quad>
    fullName: Vim.Math3d.Transformable3D.Reflect<Vim.Math3d.Quad>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Plane
    name: Plane
    nameWithType: Plane
    fullName: Vim.Math3d.Plane
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Reflect``1(Vim.Math3d.Plane)
    name: Reflect(Of Quad)
    nameWithType: Transformable3D.Reflect(Of Quad)
    fullName: Vim.Math3d.Transformable3D.Reflect(Of Vim.Math3d.Quad)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Plane
    name: Plane
    nameWithType: Plane
    fullName: Vim.Math3d.Plane
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Quad}.Vim.Math3d.Transformable3D.RotateX``1(System.Single)
  commentId: M:Vim.Math3d.Transformable3D.RotateX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.RotateX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  name: RotateX<Quad>(Single)
  nameWithType: Transformable3D.RotateX<Quad>(Single)
  fullName: Vim.Math3d.Transformable3D.RotateX<Vim.Math3d.Quad>(System.Single)
  nameWithType.vb: Transformable3D.RotateX(Of Quad)(Single)
  fullName.vb: Vim.Math3d.Transformable3D.RotateX(Of Vim.Math3d.Quad)(System.Single)
  name.vb: RotateX(Of Quad)(Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.RotateX``1(System.Single)
    name: RotateX<Quad>
    nameWithType: Transformable3D.RotateX<Quad>
    fullName: Vim.Math3d.Transformable3D.RotateX<Vim.Math3d.Quad>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.RotateX``1(System.Single)
    name: RotateX(Of Quad)
    nameWithType: Transformable3D.RotateX(Of Quad)
    fullName: Vim.Math3d.Transformable3D.RotateX(Of Vim.Math3d.Quad)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Quad}.Vim.Math3d.Transformable3D.RotateY``1(System.Single)
  commentId: M:Vim.Math3d.Transformable3D.RotateY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.RotateY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  name: RotateY<Quad>(Single)
  nameWithType: Transformable3D.RotateY<Quad>(Single)
  fullName: Vim.Math3d.Transformable3D.RotateY<Vim.Math3d.Quad>(System.Single)
  nameWithType.vb: Transformable3D.RotateY(Of Quad)(Single)
  fullName.vb: Vim.Math3d.Transformable3D.RotateY(Of Vim.Math3d.Quad)(System.Single)
  name.vb: RotateY(Of Quad)(Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.RotateY``1(System.Single)
    name: RotateY<Quad>
    nameWithType: Transformable3D.RotateY<Quad>
    fullName: Vim.Math3d.Transformable3D.RotateY<Vim.Math3d.Quad>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.RotateY``1(System.Single)
    name: RotateY(Of Quad)
    nameWithType: Transformable3D.RotateY(Of Quad)
    fullName: Vim.Math3d.Transformable3D.RotateY(Of Vim.Math3d.Quad)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Quad}.Vim.Math3d.Transformable3D.RotateZ``1(System.Single)
  commentId: M:Vim.Math3d.Transformable3D.RotateZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.RotateZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  name: RotateZ<Quad>(Single)
  nameWithType: Transformable3D.RotateZ<Quad>(Single)
  fullName: Vim.Math3d.Transformable3D.RotateZ<Vim.Math3d.Quad>(System.Single)
  nameWithType.vb: Transformable3D.RotateZ(Of Quad)(Single)
  fullName.vb: Vim.Math3d.Transformable3D.RotateZ(Of Vim.Math3d.Quad)(System.Single)
  name.vb: RotateZ(Of Quad)(Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.RotateZ``1(System.Single)
    name: RotateZ<Quad>
    nameWithType: Transformable3D.RotateZ<Quad>
    fullName: Vim.Math3d.Transformable3D.RotateZ<Vim.Math3d.Quad>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.RotateZ``1(System.Single)
    name: RotateZ(Of Quad)
    nameWithType: Transformable3D.RotateZ(Of Quad)
    fullName: Vim.Math3d.Transformable3D.RotateZ(Of Vim.Math3d.Quad)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Quad}.Vim.Math3d.Transformable3D.TranslateRotateScale``1(Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Transformable3D.TranslateRotateScale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.TranslateRotateScale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
  name: TranslateRotateScale<Quad>(Vector3, Quaternion, Vector3)
  nameWithType: Transformable3D.TranslateRotateScale<Quad>(Vector3, Quaternion, Vector3)
  fullName: Vim.Math3d.Transformable3D.TranslateRotateScale<Vim.Math3d.Quad>(Vim.Math3d.Vector3, Vim.Math3d.Quaternion, Vim.Math3d.Vector3)
  nameWithType.vb: Transformable3D.TranslateRotateScale(Of Quad)(Vector3, Quaternion, Vector3)
  fullName.vb: Vim.Math3d.Transformable3D.TranslateRotateScale(Of Vim.Math3d.Quad)(Vim.Math3d.Vector3, Vim.Math3d.Quaternion, Vim.Math3d.Vector3)
  name.vb: TranslateRotateScale(Of Quad)(Vector3, Quaternion, Vector3)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.TranslateRotateScale``1(Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
    name: TranslateRotateScale<Quad>
    nameWithType: Transformable3D.TranslateRotateScale<Quad>
    fullName: Vim.Math3d.Transformable3D.TranslateRotateScale<Vim.Math3d.Quad>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Quaternion
    name: Quaternion
    nameWithType: Quaternion
    fullName: Vim.Math3d.Quaternion
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.TranslateRotateScale``1(Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
    name: TranslateRotateScale(Of Quad)
    nameWithType: Transformable3D.TranslateRotateScale(Of Quad)
    fullName: Vim.Math3d.Transformable3D.TranslateRotateScale(Of Vim.Math3d.Quad)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Quaternion
    name: Quaternion
    nameWithType: Quaternion
    fullName: Vim.Math3d.Quaternion
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D`1
  commentId: T:Vim.Math3d.ITransformable3D`1
  name: ITransformable3D<TSelf>
  nameWithType: ITransformable3D<TSelf>
  fullName: Vim.Math3d.ITransformable3D<TSelf>
  nameWithType.vb: ITransformable3D(Of TSelf)
  fullName.vb: Vim.Math3d.ITransformable3D(Of TSelf)
  name.vb: ITransformable3D(Of TSelf)
  spec.csharp:
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: TSelf
    nameWithType: TSelf
    fullName: TSelf
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSelf
    nameWithType: TSelf
    fullName: TSelf
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.IMappable`2
  commentId: T:Vim.Math3d.IMappable`2
  name: IMappable<TContainer, TPart>
  nameWithType: IMappable<TContainer, TPart>
  fullName: Vim.Math3d.IMappable<TContainer, TPart>
  nameWithType.vb: IMappable(Of TContainer, TPart)
  fullName.vb: Vim.Math3d.IMappable(Of TContainer, TPart)
  name.vb: IMappable(Of TContainer, TPart)
  spec.csharp:
  - uid: Vim.Math3d.IMappable`2
    name: IMappable
    nameWithType: IMappable
    fullName: Vim.Math3d.IMappable
  - name: <
    nameWithType: <
    fullName: <
  - name: TContainer
    nameWithType: TContainer
    fullName: TContainer
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPart
    nameWithType: TPart
    fullName: TPart
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Vim.Math3d.IMappable`2
    name: IMappable
    nameWithType: IMappable
    fullName: Vim.Math3d.IMappable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TContainer
    nameWithType: TContainer
    fullName: TContainer
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPart
    nameWithType: TPart
    fullName: TPart
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Vim.Math3d.Transformable3D.Transform``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Matrix4x4[])
  commentId: M:Vim.Math3d.Transformable3D.Transform``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Matrix4x4[])
  name: Transform<T>(ITransformable3D<T>, Matrix4x4[])
  nameWithType: Transformable3D.Transform<T>(ITransformable3D<T>, Matrix4x4[])
  fullName: Vim.Math3d.Transformable3D.Transform<T>(Vim.Math3d.ITransformable3D<T>, Vim.Math3d.Matrix4x4[])
  nameWithType.vb: Transformable3D.Transform(Of T)(ITransformable3D(Of T), Matrix4x4())
  fullName.vb: Vim.Math3d.Transformable3D.Transform(Of T)(Vim.Math3d.ITransformable3D(Of T), Vim.Math3d.Matrix4x4())
  name.vb: Transform(Of T)(ITransformable3D(Of T), Matrix4x4())
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Transform``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Matrix4x4[])
    name: Transform<T>
    nameWithType: Transformable3D.Transform<T>
    fullName: Vim.Math3d.Transformable3D.Transform<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Matrix4x4
    name: Matrix4x4
    nameWithType: Matrix4x4
    fullName: Vim.Math3d.Matrix4x4
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Transform``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Matrix4x4[])
    name: Transform(Of T)
    nameWithType: Transformable3D.Transform(Of T)
    fullName: Vim.Math3d.Transformable3D.Transform(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Matrix4x4
    name: Matrix4x4
    nameWithType: Matrix4x4
    fullName: Vim.Math3d.Matrix4x4
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D
  commentId: T:Vim.Math3d.Transformable3D
  parent: Vim.Math3d
  name: Transformable3D
  nameWithType: Transformable3D
  fullName: Vim.Math3d.Transformable3D
- uid: Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
  name: Translate<T>(ITransformable3D<T>, Vector3)
  nameWithType: Transformable3D.Translate<T>(ITransformable3D<T>, Vector3)
  fullName: Vim.Math3d.Transformable3D.Translate<T>(Vim.Math3d.ITransformable3D<T>, Vim.Math3d.Vector3)
  nameWithType.vb: Transformable3D.Translate(Of T)(ITransformable3D(Of T), Vector3)
  fullName.vb: Vim.Math3d.Transformable3D.Translate(Of T)(Vim.Math3d.ITransformable3D(Of T), Vim.Math3d.Vector3)
  name.vb: Translate(Of T)(ITransformable3D(Of T), Vector3)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
    name: Translate<T>
    nameWithType: Transformable3D.Translate<T>
    fullName: Vim.Math3d.Transformable3D.Translate<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
    name: Translate(Of T)
    nameWithType: Transformable3D.Translate(Of T)
    fullName: Vim.Math3d.Transformable3D.Translate(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  commentId: M:Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  isExternal: true
  name: Translate<T>(ITransformable3D<T>, Single, Single, Single)
  nameWithType: Transformable3D.Translate<T>(ITransformable3D<T>, Single, Single, Single)
  fullName: Vim.Math3d.Transformable3D.Translate<T>(Vim.Math3d.ITransformable3D<T>, System.Single, System.Single, System.Single)
  nameWithType.vb: Transformable3D.Translate(Of T)(ITransformable3D(Of T), Single, Single, Single)
  fullName.vb: Vim.Math3d.Transformable3D.Translate(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single, System.Single, System.Single)
  name.vb: Translate(Of T)(ITransformable3D(Of T), Single, Single, Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
    name: Translate<T>
    nameWithType: Transformable3D.Translate<T>
    fullName: Vim.Math3d.Transformable3D.Translate<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
    name: Translate(Of T)
    nameWithType: Transformable3D.Translate(Of T)
    fullName: Vim.Math3d.Transformable3D.Translate(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Quaternion)
  commentId: M:Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Quaternion)
  name: Rotate<T>(ITransformable3D<T>, Quaternion)
  nameWithType: Transformable3D.Rotate<T>(ITransformable3D<T>, Quaternion)
  fullName: Vim.Math3d.Transformable3D.Rotate<T>(Vim.Math3d.ITransformable3D<T>, Vim.Math3d.Quaternion)
  nameWithType.vb: Transformable3D.Rotate(Of T)(ITransformable3D(Of T), Quaternion)
  fullName.vb: Vim.Math3d.Transformable3D.Rotate(Of T)(Vim.Math3d.ITransformable3D(Of T), Vim.Math3d.Quaternion)
  name.vb: Rotate(Of T)(ITransformable3D(Of T), Quaternion)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Quaternion)
    name: Rotate<T>
    nameWithType: Transformable3D.Rotate<T>
    fullName: Vim.Math3d.Transformable3D.Rotate<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Quaternion
    name: Quaternion
    nameWithType: Quaternion
    fullName: Vim.Math3d.Quaternion
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Quaternion)
    name: Rotate(Of T)
    nameWithType: Transformable3D.Rotate(Of T)
    fullName: Vim.Math3d.Transformable3D.Rotate(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Quaternion
    name: Quaternion
    nameWithType: Quaternion
    fullName: Vim.Math3d.Quaternion
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  commentId: M:Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  isExternal: true
  name: Scale<T>(ITransformable3D<T>, Single)
  nameWithType: Transformable3D.Scale<T>(ITransformable3D<T>, Single)
  fullName: Vim.Math3d.Transformable3D.Scale<T>(Vim.Math3d.ITransformable3D<T>, System.Single)
  nameWithType.vb: Transformable3D.Scale(Of T)(ITransformable3D(Of T), Single)
  fullName.vb: Vim.Math3d.Transformable3D.Scale(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single)
  name.vb: Scale(Of T)(ITransformable3D(Of T), Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: Scale<T>
    nameWithType: Transformable3D.Scale<T>
    fullName: Vim.Math3d.Transformable3D.Scale<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: Scale(Of T)
    nameWithType: Transformable3D.Scale(Of T)
    fullName: Vim.Math3d.Transformable3D.Scale(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
  name: Scale<T>(ITransformable3D<T>, Vector3)
  nameWithType: Transformable3D.Scale<T>(ITransformable3D<T>, Vector3)
  fullName: Vim.Math3d.Transformable3D.Scale<T>(Vim.Math3d.ITransformable3D<T>, Vim.Math3d.Vector3)
  nameWithType.vb: Transformable3D.Scale(Of T)(ITransformable3D(Of T), Vector3)
  fullName.vb: Vim.Math3d.Transformable3D.Scale(Of T)(Vim.Math3d.ITransformable3D(Of T), Vim.Math3d.Vector3)
  name.vb: Scale(Of T)(ITransformable3D(Of T), Vector3)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
    name: Scale<T>
    nameWithType: Transformable3D.Scale<T>
    fullName: Vim.Math3d.Transformable3D.Scale<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
    name: Scale(Of T)
    nameWithType: Transformable3D.Scale(Of T)
    fullName: Vim.Math3d.Transformable3D.Scale(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  commentId: M:Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  isExternal: true
  name: Scale<T>(ITransformable3D<T>, Single, Single, Single)
  nameWithType: Transformable3D.Scale<T>(ITransformable3D<T>, Single, Single, Single)
  fullName: Vim.Math3d.Transformable3D.Scale<T>(Vim.Math3d.ITransformable3D<T>, System.Single, System.Single, System.Single)
  nameWithType.vb: Transformable3D.Scale(Of T)(ITransformable3D(Of T), Single, Single, Single)
  fullName.vb: Vim.Math3d.Transformable3D.Scale(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single, System.Single, System.Single)
  name.vb: Scale(Of T)(ITransformable3D(Of T), Single, Single, Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
    name: Scale<T>
    nameWithType: Transformable3D.Scale<T>
    fullName: Vim.Math3d.Transformable3D.Scale<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
    name: Scale(Of T)
    nameWithType: Transformable3D.Scale(Of T)
    fullName: Vim.Math3d.Transformable3D.Scale(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.ScaleX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  commentId: M:Vim.Math3d.Transformable3D.ScaleX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  isExternal: true
  name: ScaleX<T>(ITransformable3D<T>, Single)
  nameWithType: Transformable3D.ScaleX<T>(ITransformable3D<T>, Single)
  fullName: Vim.Math3d.Transformable3D.ScaleX<T>(Vim.Math3d.ITransformable3D<T>, System.Single)
  nameWithType.vb: Transformable3D.ScaleX(Of T)(ITransformable3D(Of T), Single)
  fullName.vb: Vim.Math3d.Transformable3D.ScaleX(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single)
  name.vb: ScaleX(Of T)(ITransformable3D(Of T), Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.ScaleX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: ScaleX<T>
    nameWithType: Transformable3D.ScaleX<T>
    fullName: Vim.Math3d.Transformable3D.ScaleX<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.ScaleX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: ScaleX(Of T)
    nameWithType: Transformable3D.ScaleX(Of T)
    fullName: Vim.Math3d.Transformable3D.ScaleX(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.ScaleY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  commentId: M:Vim.Math3d.Transformable3D.ScaleY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  isExternal: true
  name: ScaleY<T>(ITransformable3D<T>, Single)
  nameWithType: Transformable3D.ScaleY<T>(ITransformable3D<T>, Single)
  fullName: Vim.Math3d.Transformable3D.ScaleY<T>(Vim.Math3d.ITransformable3D<T>, System.Single)
  nameWithType.vb: Transformable3D.ScaleY(Of T)(ITransformable3D(Of T), Single)
  fullName.vb: Vim.Math3d.Transformable3D.ScaleY(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single)
  name.vb: ScaleY(Of T)(ITransformable3D(Of T), Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.ScaleY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: ScaleY<T>
    nameWithType: Transformable3D.ScaleY<T>
    fullName: Vim.Math3d.Transformable3D.ScaleY<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.ScaleY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: ScaleY(Of T)
    nameWithType: Transformable3D.ScaleY(Of T)
    fullName: Vim.Math3d.Transformable3D.ScaleY(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.ScaleZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  commentId: M:Vim.Math3d.Transformable3D.ScaleZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  isExternal: true
  name: ScaleZ<T>(ITransformable3D<T>, Single)
  nameWithType: Transformable3D.ScaleZ<T>(ITransformable3D<T>, Single)
  fullName: Vim.Math3d.Transformable3D.ScaleZ<T>(Vim.Math3d.ITransformable3D<T>, System.Single)
  nameWithType.vb: Transformable3D.ScaleZ(Of T)(ITransformable3D(Of T), Single)
  fullName.vb: Vim.Math3d.Transformable3D.ScaleZ(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single)
  name.vb: ScaleZ(Of T)(ITransformable3D(Of T), Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.ScaleZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: ScaleZ<T>
    nameWithType: Transformable3D.ScaleZ<T>
    fullName: Vim.Math3d.Transformable3D.ScaleZ<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.ScaleZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: ScaleZ(Of T)
    nameWithType: Transformable3D.ScaleZ(Of T)
    fullName: Vim.Math3d.Transformable3D.ScaleZ(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.LookAt``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Transformable3D.LookAt``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  name: LookAt<T>(ITransformable3D<T>, Vector3, Vector3, Vector3)
  nameWithType: Transformable3D.LookAt<T>(ITransformable3D<T>, Vector3, Vector3, Vector3)
  fullName: Vim.Math3d.Transformable3D.LookAt<T>(Vim.Math3d.ITransformable3D<T>, Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  nameWithType.vb: Transformable3D.LookAt(Of T)(ITransformable3D(Of T), Vector3, Vector3, Vector3)
  fullName.vb: Vim.Math3d.Transformable3D.LookAt(Of T)(Vim.Math3d.ITransformable3D(Of T), Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  name.vb: LookAt(Of T)(ITransformable3D(Of T), Vector3, Vector3, Vector3)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.LookAt``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
    name: LookAt<T>
    nameWithType: Transformable3D.LookAt<T>
    fullName: Vim.Math3d.Transformable3D.LookAt<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.LookAt``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
    name: LookAt(Of T)
    nameWithType: Transformable3D.LookAt(Of T)
    fullName: Vim.Math3d.Transformable3D.LookAt(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.RotateAround``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,System.Single)
  commentId: M:Vim.Math3d.Transformable3D.RotateAround``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,System.Single)
  isExternal: true
  name: RotateAround<T>(ITransformable3D<T>, Vector3, Single)
  nameWithType: Transformable3D.RotateAround<T>(ITransformable3D<T>, Vector3, Single)
  fullName: Vim.Math3d.Transformable3D.RotateAround<T>(Vim.Math3d.ITransformable3D<T>, Vim.Math3d.Vector3, System.Single)
  nameWithType.vb: Transformable3D.RotateAround(Of T)(ITransformable3D(Of T), Vector3, Single)
  fullName.vb: Vim.Math3d.Transformable3D.RotateAround(Of T)(Vim.Math3d.ITransformable3D(Of T), Vim.Math3d.Vector3, System.Single)
  name.vb: RotateAround(Of T)(ITransformable3D(Of T), Vector3, Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.RotateAround``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,System.Single)
    name: RotateAround<T>
    nameWithType: Transformable3D.RotateAround<T>
    fullName: Vim.Math3d.Transformable3D.RotateAround<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.RotateAround``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,System.Single)
    name: RotateAround(Of T)
    nameWithType: Transformable3D.RotateAround(Of T)
    fullName: Vim.Math3d.Transformable3D.RotateAround(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  commentId: M:Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  isExternal: true
  name: Rotate<T>(ITransformable3D<T>, Single, Single, Single)
  nameWithType: Transformable3D.Rotate<T>(ITransformable3D<T>, Single, Single, Single)
  fullName: Vim.Math3d.Transformable3D.Rotate<T>(Vim.Math3d.ITransformable3D<T>, System.Single, System.Single, System.Single)
  nameWithType.vb: Transformable3D.Rotate(Of T)(ITransformable3D(Of T), Single, Single, Single)
  fullName.vb: Vim.Math3d.Transformable3D.Rotate(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single, System.Single, System.Single)
  name.vb: Rotate(Of T)(ITransformable3D(Of T), Single, Single, Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
    name: Rotate<T>
    nameWithType: Transformable3D.Rotate<T>
    fullName: Vim.Math3d.Transformable3D.Rotate<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
    name: Rotate(Of T)
    nameWithType: Transformable3D.Rotate(Of T)
    fullName: Vim.Math3d.Transformable3D.Rotate(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.Reflect``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Plane)
  commentId: M:Vim.Math3d.Transformable3D.Reflect``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Plane)
  name: Reflect<T>(ITransformable3D<T>, Plane)
  nameWithType: Transformable3D.Reflect<T>(ITransformable3D<T>, Plane)
  fullName: Vim.Math3d.Transformable3D.Reflect<T>(Vim.Math3d.ITransformable3D<T>, Vim.Math3d.Plane)
  nameWithType.vb: Transformable3D.Reflect(Of T)(ITransformable3D(Of T), Plane)
  fullName.vb: Vim.Math3d.Transformable3D.Reflect(Of T)(Vim.Math3d.ITransformable3D(Of T), Vim.Math3d.Plane)
  name.vb: Reflect(Of T)(ITransformable3D(Of T), Plane)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Reflect``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Plane)
    name: Reflect<T>
    nameWithType: Transformable3D.Reflect<T>
    fullName: Vim.Math3d.Transformable3D.Reflect<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Plane
    name: Plane
    nameWithType: Plane
    fullName: Vim.Math3d.Plane
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Reflect``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Plane)
    name: Reflect(Of T)
    nameWithType: Transformable3D.Reflect(Of T)
    fullName: Vim.Math3d.Transformable3D.Reflect(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Plane
    name: Plane
    nameWithType: Plane
    fullName: Vim.Math3d.Plane
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.RotateX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  commentId: M:Vim.Math3d.Transformable3D.RotateX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  isExternal: true
  name: RotateX<T>(ITransformable3D<T>, Single)
  nameWithType: Transformable3D.RotateX<T>(ITransformable3D<T>, Single)
  fullName: Vim.Math3d.Transformable3D.RotateX<T>(Vim.Math3d.ITransformable3D<T>, System.Single)
  nameWithType.vb: Transformable3D.RotateX(Of T)(ITransformable3D(Of T), Single)
  fullName.vb: Vim.Math3d.Transformable3D.RotateX(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single)
  name.vb: RotateX(Of T)(ITransformable3D(Of T), Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.RotateX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: RotateX<T>
    nameWithType: Transformable3D.RotateX<T>
    fullName: Vim.Math3d.Transformable3D.RotateX<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.RotateX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: RotateX(Of T)
    nameWithType: Transformable3D.RotateX(Of T)
    fullName: Vim.Math3d.Transformable3D.RotateX(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.RotateY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  commentId: M:Vim.Math3d.Transformable3D.RotateY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  isExternal: true
  name: RotateY<T>(ITransformable3D<T>, Single)
  nameWithType: Transformable3D.RotateY<T>(ITransformable3D<T>, Single)
  fullName: Vim.Math3d.Transformable3D.RotateY<T>(Vim.Math3d.ITransformable3D<T>, System.Single)
  nameWithType.vb: Transformable3D.RotateY(Of T)(ITransformable3D(Of T), Single)
  fullName.vb: Vim.Math3d.Transformable3D.RotateY(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single)
  name.vb: RotateY(Of T)(ITransformable3D(Of T), Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.RotateY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: RotateY<T>
    nameWithType: Transformable3D.RotateY<T>
    fullName: Vim.Math3d.Transformable3D.RotateY<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.RotateY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: RotateY(Of T)
    nameWithType: Transformable3D.RotateY(Of T)
    fullName: Vim.Math3d.Transformable3D.RotateY(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.RotateZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  commentId: M:Vim.Math3d.Transformable3D.RotateZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  isExternal: true
  name: RotateZ<T>(ITransformable3D<T>, Single)
  nameWithType: Transformable3D.RotateZ<T>(ITransformable3D<T>, Single)
  fullName: Vim.Math3d.Transformable3D.RotateZ<T>(Vim.Math3d.ITransformable3D<T>, System.Single)
  nameWithType.vb: Transformable3D.RotateZ(Of T)(ITransformable3D(Of T), Single)
  fullName.vb: Vim.Math3d.Transformable3D.RotateZ(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single)
  name.vb: RotateZ(Of T)(ITransformable3D(Of T), Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.RotateZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: RotateZ<T>
    nameWithType: Transformable3D.RotateZ<T>
    fullName: Vim.Math3d.Transformable3D.RotateZ<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.RotateZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: RotateZ(Of T)
    nameWithType: Transformable3D.RotateZ(Of T)
    fullName: Vim.Math3d.Transformable3D.RotateZ(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.TranslateRotateScale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Transformable3D.TranslateRotateScale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
  name: TranslateRotateScale<T>(ITransformable3D<T>, Vector3, Quaternion, Vector3)
  nameWithType: Transformable3D.TranslateRotateScale<T>(ITransformable3D<T>, Vector3, Quaternion, Vector3)
  fullName: Vim.Math3d.Transformable3D.TranslateRotateScale<T>(Vim.Math3d.ITransformable3D<T>, Vim.Math3d.Vector3, Vim.Math3d.Quaternion, Vim.Math3d.Vector3)
  nameWithType.vb: Transformable3D.TranslateRotateScale(Of T)(ITransformable3D(Of T), Vector3, Quaternion, Vector3)
  fullName.vb: Vim.Math3d.Transformable3D.TranslateRotateScale(Of T)(Vim.Math3d.ITransformable3D(Of T), Vim.Math3d.Vector3, Vim.Math3d.Quaternion, Vim.Math3d.Vector3)
  name.vb: TranslateRotateScale(Of T)(ITransformable3D(Of T), Vector3, Quaternion, Vector3)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.TranslateRotateScale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
    name: TranslateRotateScale<T>
    nameWithType: Transformable3D.TranslateRotateScale<T>
    fullName: Vim.Math3d.Transformable3D.TranslateRotateScale<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Quaternion
    name: Quaternion
    nameWithType: Quaternion
    fullName: Vim.Math3d.Quaternion
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.TranslateRotateScale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
    name: TranslateRotateScale(Of T)
    nameWithType: Transformable3D.TranslateRotateScale(Of T)
    fullName: Vim.Math3d.Transformable3D.TranslateRotateScale(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Quaternion
    name: Quaternion
    nameWithType: Quaternion
    fullName: Vim.Math3d.Quaternion
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Quad.Transform*
  commentId: Overload:Vim.Math3d.Quad.Transform
  name: Transform
  nameWithType: Quad.Transform
  fullName: Vim.Math3d.Quad.Transform
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Quad}.Transform(Vim.Math3d.Matrix4x4)
  commentId: M:Vim.Math3d.ITransformable3D{Vim.Math3d.Quad}.Transform(Vim.Math3d.Matrix4x4)
  parent: Vim.Math3d.ITransformable3D{Vim.Math3d.Quad}
  definition: Vim.Math3d.ITransformable3D`1.Transform(Vim.Math3d.Matrix4x4)
  name: Transform(Matrix4x4)
  nameWithType: ITransformable3D<Quad>.Transform(Matrix4x4)
  fullName: Vim.Math3d.ITransformable3D<Vim.Math3d.Quad>.Transform(Vim.Math3d.Matrix4x4)
  nameWithType.vb: ITransformable3D(Of Quad).Transform(Matrix4x4)
  fullName.vb: Vim.Math3d.ITransformable3D(Of Vim.Math3d.Quad).Transform(Vim.Math3d.Matrix4x4)
  spec.csharp:
  - uid: Vim.Math3d.ITransformable3D`1.Transform(Vim.Math3d.Matrix4x4)
    name: Transform
    nameWithType: ITransformable3D<Quad>.Transform
    fullName: Vim.Math3d.ITransformable3D<Vim.Math3d.Quad>.Transform
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Matrix4x4
    name: Matrix4x4
    nameWithType: Matrix4x4
    fullName: Vim.Math3d.Matrix4x4
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.ITransformable3D`1.Transform(Vim.Math3d.Matrix4x4)
    name: Transform
    nameWithType: ITransformable3D(Of Quad).Transform
    fullName: Vim.Math3d.ITransformable3D(Of Vim.Math3d.Quad).Transform
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Matrix4x4
    name: Matrix4x4
    nameWithType: Matrix4x4
    fullName: Vim.Math3d.Matrix4x4
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Matrix4x4
  commentId: T:Vim.Math3d.Matrix4x4
  parent: Vim.Math3d
  name: Matrix4x4
  nameWithType: Matrix4x4
  fullName: Vim.Math3d.Matrix4x4
- uid: Vim.Math3d.Quad
  commentId: T:Vim.Math3d.Quad
  parent: Vim.Math3d
  name: Quad
  nameWithType: Quad
  fullName: Vim.Math3d.Quad
- uid: Vim.Math3d.ITransformable3D`1.Transform(Vim.Math3d.Matrix4x4)
  commentId: M:Vim.Math3d.ITransformable3D`1.Transform(Vim.Math3d.Matrix4x4)
  name: Transform(Matrix4x4)
  nameWithType: ITransformable3D<TSelf>.Transform(Matrix4x4)
  fullName: Vim.Math3d.ITransformable3D<TSelf>.Transform(Vim.Math3d.Matrix4x4)
  nameWithType.vb: ITransformable3D(Of TSelf).Transform(Matrix4x4)
  fullName.vb: Vim.Math3d.ITransformable3D(Of TSelf).Transform(Vim.Math3d.Matrix4x4)
  spec.csharp:
  - uid: Vim.Math3d.ITransformable3D`1.Transform(Vim.Math3d.Matrix4x4)
    name: Transform
    nameWithType: ITransformable3D<TSelf>.Transform
    fullName: Vim.Math3d.ITransformable3D<TSelf>.Transform
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Matrix4x4
    name: Matrix4x4
    nameWithType: Matrix4x4
    fullName: Vim.Math3d.Matrix4x4
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.ITransformable3D`1.Transform(Vim.Math3d.Matrix4x4)
    name: Transform
    nameWithType: ITransformable3D(Of TSelf).Transform
    fullName: Vim.Math3d.ITransformable3D(Of TSelf).Transform
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Matrix4x4
    name: Matrix4x4
    nameWithType: Matrix4x4
    fullName: Vim.Math3d.Matrix4x4
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Quad.NumPoints*
  commentId: Overload:Vim.Math3d.Quad.NumPoints
  name: NumPoints
  nameWithType: Quad.NumPoints
  fullName: Vim.Math3d.Quad.NumPoints
- uid: Vim.Math3d.IPoints.NumPoints
  commentId: P:Vim.Math3d.IPoints.NumPoints
  parent: Vim.Math3d.IPoints
  name: NumPoints
  nameWithType: IPoints.NumPoints
  fullName: Vim.Math3d.IPoints.NumPoints
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Vim.Math3d.Quad.GetPoint*
  commentId: Overload:Vim.Math3d.Quad.GetPoint
  name: GetPoint
  nameWithType: Quad.GetPoint
  fullName: Vim.Math3d.Quad.GetPoint
- uid: Vim.Math3d.IPoints.GetPoint(System.Int32)
  commentId: M:Vim.Math3d.IPoints.GetPoint(System.Int32)
  parent: Vim.Math3d.IPoints
  isExternal: true
  name: GetPoint(Int32)
  nameWithType: IPoints.GetPoint(Int32)
  fullName: Vim.Math3d.IPoints.GetPoint(System.Int32)
  spec.csharp:
  - uid: Vim.Math3d.IPoints.GetPoint(System.Int32)
    name: GetPoint
    nameWithType: IPoints.GetPoint
    fullName: Vim.Math3d.IPoints.GetPoint
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.IPoints.GetPoint(System.Int32)
    name: GetPoint
    nameWithType: IPoints.GetPoint
    fullName: Vim.Math3d.IPoints.GetPoint
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Vector3
  commentId: T:Vim.Math3d.Vector3
  parent: Vim.Math3d
  name: Vector3
  nameWithType: Vector3
  fullName: Vim.Math3d.Vector3
- uid: Vim.Math3d.Quad.Map*
  commentId: Overload:Vim.Math3d.Quad.Map
  name: Map
  nameWithType: Quad.Map
  fullName: Vim.Math3d.Quad.Map
- uid: Vim.Math3d.IMappable{Vim.Math3d.Quad,Vim.Math3d.Vector3}.Map(System.Func{Vim.Math3d.Vector3,Vim.Math3d.Vector3})
  commentId: M:Vim.Math3d.IMappable{Vim.Math3d.Quad,Vim.Math3d.Vector3}.Map(System.Func{Vim.Math3d.Vector3,Vim.Math3d.Vector3})
  parent: Vim.Math3d.IMappable{Vim.Math3d.Quad,Vim.Math3d.Vector3}
  definition: Vim.Math3d.IMappable`2.Map(System.Func{`1,`1})
  name: Map(Func<Vector3, Vector3>)
  nameWithType: IMappable<Quad, Vector3>.Map(Func<Vector3, Vector3>)
  fullName: Vim.Math3d.IMappable<Vim.Math3d.Quad, Vim.Math3d.Vector3>.Map(System.Func<Vim.Math3d.Vector3, Vim.Math3d.Vector3>)
  nameWithType.vb: IMappable(Of Quad, Vector3).Map(Func(Of Vector3, Vector3))
  fullName.vb: Vim.Math3d.IMappable(Of Vim.Math3d.Quad, Vim.Math3d.Vector3).Map(System.Func(Of Vim.Math3d.Vector3, Vim.Math3d.Vector3))
  name.vb: Map(Func(Of Vector3, Vector3))
  spec.csharp:
  - uid: Vim.Math3d.IMappable`2.Map(System.Func{`1,`1})
    name: Map
    nameWithType: IMappable<Quad, Vector3>.Map
    fullName: Vim.Math3d.IMappable<Vim.Math3d.Quad, Vim.Math3d.Vector3>.Map
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.IMappable`2.Map(System.Func{`1,`1})
    name: Map
    nameWithType: IMappable(Of Quad, Vector3).Map
    fullName: Vim.Math3d.IMappable(Of Vim.Math3d.Quad, Vim.Math3d.Vector3).Map
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{Vim.Math3d.Vector3,Vim.Math3d.Vector3}
  commentId: T:System.Func{Vim.Math3d.Vector3,Vim.Math3d.Vector3}
  parent: System
  definition: System.Func`2
  name: Func<Vector3, Vector3>
  nameWithType: Func<Vector3, Vector3>
  fullName: System.Func<Vim.Math3d.Vector3, Vim.Math3d.Vector3>
  nameWithType.vb: Func(Of Vector3, Vector3)
  fullName.vb: System.Func(Of Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  name.vb: Func(Of Vector3, Vector3)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.IMappable`2.Map(System.Func{`1,`1})
  commentId: M:Vim.Math3d.IMappable`2.Map(System.Func{`1,`1})
  isExternal: true
  name: Map(Func<TPart, TPart>)
  nameWithType: IMappable<TContainer, TPart>.Map(Func<TPart, TPart>)
  fullName: Vim.Math3d.IMappable<TContainer, TPart>.Map(System.Func<TPart, TPart>)
  nameWithType.vb: IMappable(Of TContainer, TPart).Map(Func(Of TPart, TPart))
  fullName.vb: Vim.Math3d.IMappable(Of TContainer, TPart).Map(System.Func(Of TPart, TPart))
  name.vb: Map(Func(Of TPart, TPart))
  spec.csharp:
  - uid: Vim.Math3d.IMappable`2.Map(System.Func{`1,`1})
    name: Map
    nameWithType: IMappable<TContainer, TPart>.Map
    fullName: Vim.Math3d.IMappable<TContainer, TPart>.Map
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TPart
    nameWithType: TPart
    fullName: TPart
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPart
    nameWithType: TPart
    fullName: TPart
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.IMappable`2.Map(System.Func{`1,`1})
    name: Map
    nameWithType: IMappable(Of TContainer, TPart).Map
    fullName: Vim.Math3d.IMappable(Of TContainer, TPart).Map
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TPart
    nameWithType: TPart
    fullName: TPart
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPart
    nameWithType: TPart
    fullName: TPart
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Quad.#ctor*
  commentId: Overload:Vim.Math3d.Quad.#ctor
  name: Quad
  nameWithType: Quad.Quad
  fullName: Vim.Math3d.Quad.Quad
- uid: System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3}
  commentId: T:System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3}
  parent: System
  definition: System.ValueTuple`4
  name: (T1, T2, T3, T4)<Vector3, Vector3, Vector3, Vector3>
  nameWithType: (T1, T2, T3, T4)<Vector3, Vector3, Vector3, Vector3>
  fullName: System.ValueTuple<Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3>
  nameWithType.vb: (T1, T2, T3, T4)(Of Vector3, Vector3, Vector3, Vector3)
  fullName.vb: System.ValueTuple(Of Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  name.vb: (T1, T2, T3, T4)(Of Vector3, Vector3, Vector3, Vector3)
  spec.csharp:
  - uid: System.ValueTuple`4
    name: (T1, T2, T3, T4)
    nameWithType: (T1, T2, T3, T4)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`4
    name: (T1, T2, T3, T4)
    nameWithType: (T1, T2, T3, T4)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple`4
  commentId: T:System.ValueTuple`4
  isExternal: true
  name: (T1, T2, T3, T4)<T1, T2, T3, T4>
  nameWithType: (T1, T2, T3, T4)<T1, T2, T3, T4>
  fullName: System.ValueTuple<T1, T2, T3, T4>
  nameWithType.vb: (T1, T2, T3, T4)(Of T1, T2, T3, T4)
  fullName.vb: System.ValueTuple(Of T1, T2, T3, T4)
  name.vb: (T1, T2, T3, T4)(Of T1, T2, T3, T4)
  spec.csharp:
  - uid: System.ValueTuple`4
    name: (T1, T2, T3, T4)
    nameWithType: (T1, T2, T3, T4)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`4
    name: (T1, T2, T3, T4)
    nameWithType: (T1, T2, T3, T4)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Quad.Create*
  commentId: Overload:Vim.Math3d.Quad.Create
  name: Create
  nameWithType: Quad.Create
  fullName: Vim.Math3d.Quad.Create
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Quad.Equals*
  commentId: Overload:Vim.Math3d.Quad.Equals
  name: Equals
  nameWithType: Quad.Equals
  fullName: Vim.Math3d.Quad.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Quad.GetHashCode*
  commentId: Overload:Vim.Math3d.Quad.GetHashCode
  name: GetHashCode
  nameWithType: Quad.GetHashCode
  fullName: Vim.Math3d.Quad.GetHashCode
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Quad.ToString*
  commentId: Overload:Vim.Math3d.Quad.ToString
  name: ToString
  nameWithType: Quad.ToString
  fullName: Vim.Math3d.Quad.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Vim.Math3d.Quad.Deconstruct*
  commentId: Overload:Vim.Math3d.Quad.Deconstruct
  name: Deconstruct
  nameWithType: Quad.Deconstruct
  fullName: Vim.Math3d.Quad.Deconstruct
- uid: System.IEquatable{Vim.Math3d.Quad}.Equals(Vim.Math3d.Quad)
  commentId: M:System.IEquatable{Vim.Math3d.Quad}.Equals(Vim.Math3d.Quad)
  parent: System.IEquatable{Vim.Math3d.Quad}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(Quad)
  nameWithType: IEquatable<Quad>.Equals(Quad)
  fullName: System.IEquatable<Vim.Math3d.Quad>.Equals(Vim.Math3d.Quad)
  nameWithType.vb: IEquatable(Of Quad).Equals(Quad)
  fullName.vb: System.IEquatable(Of Vim.Math3d.Quad).Equals(Vim.Math3d.Quad)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<Quad>.Equals
    fullName: System.IEquatable<Vim.Math3d.Quad>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Quad
    name: Quad
    nameWithType: Quad
    fullName: Vim.Math3d.Quad
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of Quad).Equals
    fullName: System.IEquatable(Of Vim.Math3d.Quad).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Quad
    name: Quad
    nameWithType: Quad
    fullName: Vim.Math3d.Quad
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Quad.op_Equality*
  commentId: Overload:Vim.Math3d.Quad.op_Equality
  name: Equality
  nameWithType: Quad.Equality
  fullName: Vim.Math3d.Quad.Equality
- uid: Vim.Math3d.Quad.op_Inequality*
  commentId: Overload:Vim.Math3d.Quad.op_Inequality
  name: Inequality
  nameWithType: Quad.Inequality
  fullName: Vim.Math3d.Quad.Inequality
- uid: Vim.Math3d.Quad.op_Implicit*
  commentId: Overload:Vim.Math3d.Quad.op_Implicit
  name: Implicit
  nameWithType: Quad.Implicit
  fullName: Vim.Math3d.Quad.Implicit
  nameWithType.vb: Quad.Widening
  fullName.vb: Vim.Math3d.Quad.Widening
  name.vb: Widening
- uid: Vim.Math3d.Quad.AlmostEquals*
  commentId: Overload:Vim.Math3d.Quad.AlmostEquals
  name: AlmostEquals
  nameWithType: Quad.AlmostEquals
  fullName: Vim.Math3d.Quad.AlmostEquals
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Vim.Math3d.Quad.SetA*
  commentId: Overload:Vim.Math3d.Quad.SetA
  name: SetA
  nameWithType: Quad.SetA
  fullName: Vim.Math3d.Quad.SetA
- uid: Vim.Math3d.Quad.SetB*
  commentId: Overload:Vim.Math3d.Quad.SetB
  name: SetB
  nameWithType: Quad.SetB
  fullName: Vim.Math3d.Quad.SetB
- uid: Vim.Math3d.Quad.SetC*
  commentId: Overload:Vim.Math3d.Quad.SetC
  name: SetC
  nameWithType: Quad.SetC
  fullName: Vim.Math3d.Quad.SetC
- uid: Vim.Math3d.Quad.SetD*
  commentId: Overload:Vim.Math3d.Quad.SetD
  name: SetD
  nameWithType: Quad.SetD
  fullName: Vim.Math3d.Quad.SetD

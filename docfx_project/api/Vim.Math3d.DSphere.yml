### YamlMime:ManagedReference
items:
- uid: Vim.Math3d.DSphere
  commentId: T:Vim.Math3d.DSphere
  id: DSphere
  parent: Vim.Math3d
  children:
  - Vim.Math3d.DSphere.#ctor(System.ValueTuple{Vim.Math3d.DVector3,System.Double})
  - Vim.Math3d.DSphere.#ctor(Vim.Math3d.DVector3,System.Double)
  - Vim.Math3d.DSphere.AlmostEquals(Vim.Math3d.DSphere,System.Single)
  - Vim.Math3d.DSphere.Center
  - Vim.Math3d.DSphere.Create(System.ValueTuple{Vim.Math3d.DVector3,System.Double})
  - Vim.Math3d.DSphere.Create(Vim.Math3d.DVector3,System.Double)
  - Vim.Math3d.DSphere.Deconstruct(Vim.Math3d.DVector3@,System.Double@)
  - Vim.Math3d.DSphere.Equals(System.Object)
  - Vim.Math3d.DSphere.Equals(Vim.Math3d.DSphere)
  - Vim.Math3d.DSphere.GetHashCode
  - Vim.Math3d.DSphere.MaxValue
  - Vim.Math3d.DSphere.MinValue
  - Vim.Math3d.DSphere.op_Equality(Vim.Math3d.DSphere,Vim.Math3d.DSphere)
  - Vim.Math3d.DSphere.op_Implicit(System.ValueTuple{Vim.Math3d.DVector3,System.Double})~Vim.Math3d.DSphere
  - Vim.Math3d.DSphere.op_Implicit(Vim.Math3d.DSphere)~System.ValueTuple{Vim.Math3d.DVector3,System.Double}
  - Vim.Math3d.DSphere.op_Inequality(Vim.Math3d.DSphere,Vim.Math3d.DSphere)
  - Vim.Math3d.DSphere.Radius
  - Vim.Math3d.DSphere.SetCenter(Vim.Math3d.DVector3)
  - Vim.Math3d.DSphere.SetRadius(System.Double)
  - Vim.Math3d.DSphere.ToString
  - Vim.Math3d.DSphere.Zero
  langs:
  - csharp
  - vb
  name: DSphere
  nameWithType: DSphere
  fullName: Vim.Math3d.DSphere
  type: Struct
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: DSphere
    path: ../src/Structs.cs
    startLine: 1131
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataContract]

      public readonly struct DSphere : IEquatable<DSphere>
    content.vb: >-
      <DataContract>

      Public Structure DSphere
          Implements IEquatable(Of DSphere)
  implements:
  - System.IEquatable{Vim.Math3d.DSphere}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Vim.Math3d.DSphere.Center
  commentId: F:Vim.Math3d.DSphere.Center
  id: Center
  parent: Vim.Math3d.DSphere
  langs:
  - csharp
  - vb
  name: Center
  nameWithType: DSphere.Center
  fullName: Vim.Math3d.DSphere.Center
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Center
    path: ../src/Structs.cs
    startLine: 1137
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataMember]

      public readonly DVector3 Center
    return:
      type: Vim.Math3d.DVector3
    content.vb: >-
      <DataMember>

      Public ReadOnly Center As DVector3
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.DSphere.Radius
  commentId: F:Vim.Math3d.DSphere.Radius
  id: Radius
  parent: Vim.Math3d.DSphere
  langs:
  - csharp
  - vb
  name: Radius
  nameWithType: DSphere.Radius
  fullName: Vim.Math3d.DSphere.Radius
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Radius
    path: ../src/Structs.cs
    startLine: 1139
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataMember]

      public readonly double Radius
    return:
      type: System.Double
    content.vb: >-
      <DataMember>

      Public ReadOnly Radius As Double
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.DSphere.#ctor(System.ValueTuple{Vim.Math3d.DVector3,System.Double})
  commentId: M:Vim.Math3d.DSphere.#ctor(System.ValueTuple{Vim.Math3d.DVector3,System.Double})
  id: '#ctor(System.ValueTuple{Vim.Math3d.DVector3,System.Double})'
  parent: Vim.Math3d.DSphere
  langs:
  - csharp
  - vb
  name: DSphere((DVector3 center, Double radius))
  nameWithType: DSphere.DSphere((DVector3 center, Double radius))
  fullName: Vim.Math3d.DSphere.DSphere(System.ValueTuple<Vim.Math3d.DVector3, System.Double>)
  type: Constructor
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: .ctor
    path: ../src/Structs.cs
    startLine: 1140
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public DSphere((DVector3 center, double radius) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{Vim.Math3d.DVector3,System.Double}
    content.vb: Public Sub New(tuple As(center As DVector3, radius As Double)(Of DVector3 , Double))
  overload: Vim.Math3d.DSphere.#ctor*
  nameWithType.vb: DSphere.DSphere((center As DVector3, radius As Double)(Of DVector3, Double))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Vim.Math3d.DSphere.DSphere(System.ValueTuple(Of Vim.Math3d.DVector3, System.Double))
  name.vb: DSphere((center As DVector3, radius As Double)(Of DVector3, Double))
- uid: Vim.Math3d.DSphere.#ctor(Vim.Math3d.DVector3,System.Double)
  commentId: M:Vim.Math3d.DSphere.#ctor(Vim.Math3d.DVector3,System.Double)
  id: '#ctor(Vim.Math3d.DVector3,System.Double)'
  parent: Vim.Math3d.DSphere
  langs:
  - csharp
  - vb
  name: DSphere(DVector3, Double)
  nameWithType: DSphere.DSphere(DVector3, Double)
  fullName: Vim.Math3d.DSphere.DSphere(Vim.Math3d.DVector3, System.Double)
  type: Constructor
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: .ctor
    path: ../src/Structs.cs
    startLine: 1141
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public DSphere(DVector3 center, double radius)
    parameters:
    - id: center
      type: Vim.Math3d.DVector3
    - id: radius
      type: System.Double
    content.vb: Public Sub New(center As DVector3, radius As Double)
  overload: Vim.Math3d.DSphere.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Vim.Math3d.DSphere.Create(Vim.Math3d.DVector3,System.Double)
  commentId: M:Vim.Math3d.DSphere.Create(Vim.Math3d.DVector3,System.Double)
  id: Create(Vim.Math3d.DVector3,System.Double)
  parent: Vim.Math3d.DSphere
  langs:
  - csharp
  - vb
  name: Create(DVector3, Double)
  nameWithType: DSphere.Create(DVector3, Double)
  fullName: Vim.Math3d.DSphere.Create(Vim.Math3d.DVector3, System.Double)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Create
    path: ../src/Structs.cs
    startLine: 1142
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DSphere Create(DVector3 center, double radius)
    parameters:
    - id: center
      type: Vim.Math3d.DVector3
    - id: radius
      type: System.Double
    return:
      type: Vim.Math3d.DSphere
    content.vb: Public Shared Function Create(center As DVector3, radius As Double) As DSphere
  overload: Vim.Math3d.DSphere.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.DSphere.Create(System.ValueTuple{Vim.Math3d.DVector3,System.Double})
  commentId: M:Vim.Math3d.DSphere.Create(System.ValueTuple{Vim.Math3d.DVector3,System.Double})
  id: Create(System.ValueTuple{Vim.Math3d.DVector3,System.Double})
  parent: Vim.Math3d.DSphere
  langs:
  - csharp
  - vb
  name: Create((DVector3 center, Double radius))
  nameWithType: DSphere.Create((DVector3 center, Double radius))
  fullName: Vim.Math3d.DSphere.Create(System.ValueTuple<Vim.Math3d.DVector3, System.Double>)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Create
    path: ../src/Structs.cs
    startLine: 1143
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DSphere Create((DVector3 center, double radius) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{Vim.Math3d.DVector3,System.Double}
    return:
      type: Vim.Math3d.DSphere
    content.vb: Public Shared Function Create(tuple As(center As DVector3, radius As Double)(Of DVector3 , Double)) As DSphere
  overload: Vim.Math3d.DSphere.Create*
  nameWithType.vb: DSphere.Create((center As DVector3, radius As Double)(Of DVector3, Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.DSphere.Create(System.ValueTuple(Of Vim.Math3d.DVector3, System.Double))
  name.vb: Create((center As DVector3, radius As Double)(Of DVector3, Double))
- uid: Vim.Math3d.DSphere.Equals(System.Object)
  commentId: M:Vim.Math3d.DSphere.Equals(System.Object)
  id: Equals(System.Object)
  parent: Vim.Math3d.DSphere
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: DSphere.Equals(Object)
  fullName: Vim.Math3d.DSphere.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Equals
    path: ../src/Structs.cs
    startLine: 1144
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: Vim.Math3d.DSphere.Equals*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.DSphere.GetHashCode
  commentId: M:Vim.Math3d.DSphere.GetHashCode
  id: GetHashCode
  parent: Vim.Math3d.DSphere
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: DSphere.GetHashCode()
  fullName: Vim.Math3d.DSphere.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: GetHashCode
    path: ../src/Structs.cs
    startLine: 1145
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: Vim.Math3d.DSphere.GetHashCode*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.DSphere.ToString
  commentId: M:Vim.Math3d.DSphere.ToString
  id: ToString
  parent: Vim.Math3d.DSphere
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: DSphere.ToString()
  fullName: Vim.Math3d.DSphere.ToString()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToString
    path: ../src/Structs.cs
    startLine: 1146
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: Vim.Math3d.DSphere.ToString*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.DSphere.Deconstruct(Vim.Math3d.DVector3@,System.Double@)
  commentId: M:Vim.Math3d.DSphere.Deconstruct(Vim.Math3d.DVector3@,System.Double@)
  id: Deconstruct(Vim.Math3d.DVector3@,System.Double@)
  parent: Vim.Math3d.DSphere
  langs:
  - csharp
  - vb
  name: Deconstruct(out DVector3, out Double)
  nameWithType: DSphere.Deconstruct(out DVector3, out Double)
  fullName: Vim.Math3d.DSphere.Deconstruct(out Vim.Math3d.DVector3, out System.Double)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Deconstruct
    path: ../src/Structs.cs
    startLine: 1147
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly void Deconstruct(out DVector3 center, out double radius)
    parameters:
    - id: center
      type: Vim.Math3d.DVector3
    - id: radius
      type: System.Double
    content.vb: Public Sub Deconstruct(ByRef center As DVector3, ByRef radius As Double)
  overload: Vim.Math3d.DSphere.Deconstruct*
  nameWithType.vb: DSphere.Deconstruct(ByRef DVector3, ByRef Double)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  fullName.vb: Vim.Math3d.DSphere.Deconstruct(ByRef Vim.Math3d.DVector3, ByRef System.Double)
  name.vb: Deconstruct(ByRef DVector3, ByRef Double)
- uid: Vim.Math3d.DSphere.Equals(Vim.Math3d.DSphere)
  commentId: M:Vim.Math3d.DSphere.Equals(Vim.Math3d.DSphere)
  id: Equals(Vim.Math3d.DSphere)
  parent: Vim.Math3d.DSphere
  langs:
  - csharp
  - vb
  name: Equals(DSphere)
  nameWithType: DSphere.Equals(DSphere)
  fullName: Vim.Math3d.DSphere.Equals(Vim.Math3d.DSphere)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Equals
    path: ../src/Structs.cs
    startLine: 1148
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool Equals(DSphere x)
    parameters:
    - id: x
      type: Vim.Math3d.DSphere
    return:
      type: System.Boolean
    content.vb: Public Function Equals(x As DSphere) As Boolean
  overload: Vim.Math3d.DSphere.Equals*
  implements:
  - System.IEquatable{Vim.Math3d.DSphere}.Equals(Vim.Math3d.DSphere)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.DSphere.op_Equality(Vim.Math3d.DSphere,Vim.Math3d.DSphere)
  commentId: M:Vim.Math3d.DSphere.op_Equality(Vim.Math3d.DSphere,Vim.Math3d.DSphere)
  id: op_Equality(Vim.Math3d.DSphere,Vim.Math3d.DSphere)
  parent: Vim.Math3d.DSphere
  langs:
  - csharp
  - vb
  name: Equality(DSphere, DSphere)
  nameWithType: DSphere.Equality(DSphere, DSphere)
  fullName: Vim.Math3d.DSphere.Equality(Vim.Math3d.DSphere, Vim.Math3d.DSphere)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Equality
    path: ../src/Structs.cs
    startLine: 1149
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator ==(DSphere x0, DSphere x1)
    parameters:
    - id: x0
      type: Vim.Math3d.DSphere
    - id: x1
      type: Vim.Math3d.DSphere
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(x0 As DSphere, x1 As DSphere) As Boolean
  overload: Vim.Math3d.DSphere.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.DSphere.op_Inequality(Vim.Math3d.DSphere,Vim.Math3d.DSphere)
  commentId: M:Vim.Math3d.DSphere.op_Inequality(Vim.Math3d.DSphere,Vim.Math3d.DSphere)
  id: op_Inequality(Vim.Math3d.DSphere,Vim.Math3d.DSphere)
  parent: Vim.Math3d.DSphere
  langs:
  - csharp
  - vb
  name: Inequality(DSphere, DSphere)
  nameWithType: DSphere.Inequality(DSphere, DSphere)
  fullName: Vim.Math3d.DSphere.Inequality(Vim.Math3d.DSphere, Vim.Math3d.DSphere)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Inequality
    path: ../src/Structs.cs
    startLine: 1150
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator !=(DSphere x0, DSphere x1)
    parameters:
    - id: x0
      type: Vim.Math3d.DSphere
    - id: x1
      type: Vim.Math3d.DSphere
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(x0 As DSphere, x1 As DSphere) As Boolean
  overload: Vim.Math3d.DSphere.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.DSphere.op_Implicit(System.ValueTuple{Vim.Math3d.DVector3,System.Double})~Vim.Math3d.DSphere
  commentId: M:Vim.Math3d.DSphere.op_Implicit(System.ValueTuple{Vim.Math3d.DVector3,System.Double})~Vim.Math3d.DSphere
  id: op_Implicit(System.ValueTuple{Vim.Math3d.DVector3,System.Double})~Vim.Math3d.DSphere
  parent: Vim.Math3d.DSphere
  langs:
  - csharp
  - vb
  name: Implicit((DVector3 center, Double radius) to DSphere)
  nameWithType: DSphere.Implicit((DVector3 center, Double radius) to DSphere)
  fullName: Vim.Math3d.DSphere.Implicit(System.ValueTuple<Vim.Math3d.DVector3, System.Double> to Vim.Math3d.DSphere)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Implicit
    path: ../src/Structs.cs
    startLine: 1151
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static implicit operator DSphere((DVector3 center, double radius) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{Vim.Math3d.DVector3,System.Double}
    return:
      type: Vim.Math3d.DSphere
    content.vb: Public Shared Widening Operator CType(tuple As(center As DVector3, radius As Double)(Of DVector3 , Double)) As DSphere
  overload: Vim.Math3d.DSphere.op_Implicit*
  nameWithType.vb: DSphere.Widening((center As DVector3, radius As Double)(Of DVector3, Double) to DSphere)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.DSphere.Widening(System.ValueTuple(Of Vim.Math3d.DVector3, System.Double) to Vim.Math3d.DSphere)
  name.vb: Widening((center As DVector3, radius As Double)(Of DVector3, Double) to DSphere)
- uid: Vim.Math3d.DSphere.op_Implicit(Vim.Math3d.DSphere)~System.ValueTuple{Vim.Math3d.DVector3,System.Double}
  commentId: M:Vim.Math3d.DSphere.op_Implicit(Vim.Math3d.DSphere)~System.ValueTuple{Vim.Math3d.DVector3,System.Double}
  id: op_Implicit(Vim.Math3d.DSphere)~System.ValueTuple{Vim.Math3d.DVector3,System.Double}
  parent: Vim.Math3d.DSphere
  langs:
  - csharp
  - vb
  name: Implicit(DSphere to (DVector3 center, Double radius))
  nameWithType: DSphere.Implicit(DSphere to (DVector3 center, Double radius))
  fullName: Vim.Math3d.DSphere.Implicit(Vim.Math3d.DSphere to System.ValueTuple<Vim.Math3d.DVector3, System.Double>)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Implicit
    path: ../src/Structs.cs
    startLine: 1152
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static implicit operator (DVector3 center, double radius)(DSphere self)
    parameters:
    - id: self
      type: Vim.Math3d.DSphere
    return:
      type: System.ValueTuple{Vim.Math3d.DVector3,System.Double}
    content.vb: Public Shared Widening Operator CType(self As DSphere) As(center As DVector3, radius As Double)(Of DVector3 , Double)
  overload: Vim.Math3d.DSphere.op_Implicit*
  nameWithType.vb: DSphere.Widening(DSphere to (center As DVector3, radius As Double)(Of DVector3, Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.DSphere.Widening(Vim.Math3d.DSphere to System.ValueTuple(Of Vim.Math3d.DVector3, System.Double))
  name.vb: Widening(DSphere to (center As DVector3, radius As Double)(Of DVector3, Double))
- uid: Vim.Math3d.DSphere.AlmostEquals(Vim.Math3d.DSphere,System.Single)
  commentId: M:Vim.Math3d.DSphere.AlmostEquals(Vim.Math3d.DSphere,System.Single)
  id: AlmostEquals(Vim.Math3d.DSphere,System.Single)
  parent: Vim.Math3d.DSphere
  langs:
  - csharp
  - vb
  name: AlmostEquals(DSphere, Single)
  nameWithType: DSphere.AlmostEquals(DSphere, Single)
  fullName: Vim.Math3d.DSphere.AlmostEquals(Vim.Math3d.DSphere, System.Single)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: AlmostEquals
    path: ../src/Structs.cs
    startLine: 1154
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool AlmostEquals(DSphere x, float tolerance = 1E-07F)
    parameters:
    - id: x
      type: Vim.Math3d.DSphere
    - id: tolerance
      type: System.Single
    return:
      type: System.Boolean
    content.vb: Public Function AlmostEquals(x As DSphere, tolerance As Single = 1E-07F) As Boolean
  overload: Vim.Math3d.DSphere.AlmostEquals*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.DSphere.Zero
  commentId: F:Vim.Math3d.DSphere.Zero
  id: Zero
  parent: Vim.Math3d.DSphere
  langs:
  - csharp
  - vb
  name: Zero
  nameWithType: DSphere.Zero
  fullName: Vim.Math3d.DSphere.Zero
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Zero
    path: ../src/Structs.cs
    startLine: 1155
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DSphere Zero
    return:
      type: Vim.Math3d.DSphere
    content.vb: Public Shared Zero As DSphere
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.DSphere.MinValue
  commentId: F:Vim.Math3d.DSphere.MinValue
  id: MinValue
  parent: Vim.Math3d.DSphere
  langs:
  - csharp
  - vb
  name: MinValue
  nameWithType: DSphere.MinValue
  fullName: Vim.Math3d.DSphere.MinValue
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MinValue
    path: ../src/Structs.cs
    startLine: 1156
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DSphere MinValue
    return:
      type: Vim.Math3d.DSphere
    content.vb: Public Shared MinValue As DSphere
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.DSphere.MaxValue
  commentId: F:Vim.Math3d.DSphere.MaxValue
  id: MaxValue
  parent: Vim.Math3d.DSphere
  langs:
  - csharp
  - vb
  name: MaxValue
  nameWithType: DSphere.MaxValue
  fullName: Vim.Math3d.DSphere.MaxValue
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MaxValue
    path: ../src/Structs.cs
    startLine: 1157
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DSphere MaxValue
    return:
      type: Vim.Math3d.DSphere
    content.vb: Public Shared MaxValue As DSphere
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.DSphere.SetCenter(Vim.Math3d.DVector3)
  commentId: M:Vim.Math3d.DSphere.SetCenter(Vim.Math3d.DVector3)
  id: SetCenter(Vim.Math3d.DVector3)
  parent: Vim.Math3d.DSphere
  langs:
  - csharp
  - vb
  name: SetCenter(DVector3)
  nameWithType: DSphere.SetCenter(DVector3)
  fullName: Vim.Math3d.DSphere.SetCenter(Vim.Math3d.DVector3)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SetCenter
    path: ../src/Structs.cs
    startLine: 1158
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly DSphere SetCenter(DVector3 x)
    parameters:
    - id: x
      type: Vim.Math3d.DVector3
    return:
      type: Vim.Math3d.DSphere
    content.vb: Public Function SetCenter(x As DVector3) As DSphere
  overload: Vim.Math3d.DSphere.SetCenter*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.DSphere.SetRadius(System.Double)
  commentId: M:Vim.Math3d.DSphere.SetRadius(System.Double)
  id: SetRadius(System.Double)
  parent: Vim.Math3d.DSphere
  langs:
  - csharp
  - vb
  name: SetRadius(Double)
  nameWithType: DSphere.SetRadius(Double)
  fullName: Vim.Math3d.DSphere.SetRadius(System.Double)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SetRadius
    path: ../src/Structs.cs
    startLine: 1159
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly DSphere SetRadius(double x)
    parameters:
    - id: x
      type: System.Double
    return:
      type: Vim.Math3d.DSphere
    content.vb: Public Function SetRadius(x As Double) As DSphere
  overload: Vim.Math3d.DSphere.SetRadius*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
references:
- uid: Vim.Math3d
  commentId: N:Vim.Math3d
  name: Vim.Math3d
  nameWithType: Vim.Math3d
  fullName: Vim.Math3d
- uid: System.IEquatable{Vim.Math3d.DSphere}
  commentId: T:System.IEquatable{Vim.Math3d.DSphere}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<DSphere>
  nameWithType: IEquatable<DSphere>
  fullName: System.IEquatable<Vim.Math3d.DSphere>
  nameWithType.vb: IEquatable(Of DSphere)
  fullName.vb: System.IEquatable(Of Vim.Math3d.DSphere)
  name.vb: IEquatable(Of DSphere)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.DSphere
    name: DSphere
    nameWithType: DSphere
    fullName: Vim.Math3d.DSphere
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.DSphere
    name: DSphere
    nameWithType: DSphere
    fullName: Vim.Math3d.DSphere
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Vim.Math3d.DVector3
  commentId: T:Vim.Math3d.DVector3
  parent: Vim.Math3d
  name: DVector3
  nameWithType: DVector3
  fullName: Vim.Math3d.DVector3
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Vim.Math3d.DSphere.#ctor*
  commentId: Overload:Vim.Math3d.DSphere.#ctor
  name: DSphere
  nameWithType: DSphere.DSphere
  fullName: Vim.Math3d.DSphere.DSphere
- uid: System.ValueTuple{Vim.Math3d.DVector3,System.Double}
  commentId: T:System.ValueTuple{Vim.Math3d.DVector3,System.Double}
  parent: System
  definition: System.ValueTuple`2
  name: (T1, T2)<DVector3, Double>
  nameWithType: (T1, T2)<DVector3, Double>
  fullName: System.ValueTuple<Vim.Math3d.DVector3, System.Double>
  nameWithType.vb: (T1, T2)(Of DVector3, Double)
  fullName.vb: System.ValueTuple(Of Vim.Math3d.DVector3, System.Double)
  name.vb: (T1, T2)(Of DVector3, Double)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.DVector3
    name: DVector3
    nameWithType: DVector3
    fullName: Vim.Math3d.DVector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.DVector3
    name: DVector3
    nameWithType: DVector3
    fullName: Vim.Math3d.DVector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple`2
  commentId: T:System.ValueTuple`2
  isExternal: true
  name: (T1, T2)<T1, T2>
  nameWithType: (T1, T2)<T1, T2>
  fullName: System.ValueTuple<T1, T2>
  nameWithType.vb: (T1, T2)(Of T1, T2)
  fullName.vb: System.ValueTuple(Of T1, T2)
  name.vb: (T1, T2)(Of T1, T2)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.DSphere.Create*
  commentId: Overload:Vim.Math3d.DSphere.Create
  name: Create
  nameWithType: DSphere.Create
  fullName: Vim.Math3d.DSphere.Create
- uid: Vim.Math3d.DSphere
  commentId: T:Vim.Math3d.DSphere
  parent: Vim.Math3d
  name: DSphere
  nameWithType: DSphere
  fullName: Vim.Math3d.DSphere
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.DSphere.Equals*
  commentId: Overload:Vim.Math3d.DSphere.Equals
  name: Equals
  nameWithType: DSphere.Equals
  fullName: Vim.Math3d.DSphere.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.DSphere.GetHashCode*
  commentId: Overload:Vim.Math3d.DSphere.GetHashCode
  name: GetHashCode
  nameWithType: DSphere.GetHashCode
  fullName: Vim.Math3d.DSphere.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.DSphere.ToString*
  commentId: Overload:Vim.Math3d.DSphere.ToString
  name: ToString
  nameWithType: DSphere.ToString
  fullName: Vim.Math3d.DSphere.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Vim.Math3d.DSphere.Deconstruct*
  commentId: Overload:Vim.Math3d.DSphere.Deconstruct
  name: Deconstruct
  nameWithType: DSphere.Deconstruct
  fullName: Vim.Math3d.DSphere.Deconstruct
- uid: System.IEquatable{Vim.Math3d.DSphere}.Equals(Vim.Math3d.DSphere)
  commentId: M:System.IEquatable{Vim.Math3d.DSphere}.Equals(Vim.Math3d.DSphere)
  parent: System.IEquatable{Vim.Math3d.DSphere}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(DSphere)
  nameWithType: IEquatable<DSphere>.Equals(DSphere)
  fullName: System.IEquatable<Vim.Math3d.DSphere>.Equals(Vim.Math3d.DSphere)
  nameWithType.vb: IEquatable(Of DSphere).Equals(DSphere)
  fullName.vb: System.IEquatable(Of Vim.Math3d.DSphere).Equals(Vim.Math3d.DSphere)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<DSphere>.Equals
    fullName: System.IEquatable<Vim.Math3d.DSphere>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.DSphere
    name: DSphere
    nameWithType: DSphere
    fullName: Vim.Math3d.DSphere
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of DSphere).Equals
    fullName: System.IEquatable(Of Vim.Math3d.DSphere).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.DSphere
    name: DSphere
    nameWithType: DSphere
    fullName: Vim.Math3d.DSphere
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.DSphere.op_Equality*
  commentId: Overload:Vim.Math3d.DSphere.op_Equality
  name: Equality
  nameWithType: DSphere.Equality
  fullName: Vim.Math3d.DSphere.Equality
- uid: Vim.Math3d.DSphere.op_Inequality*
  commentId: Overload:Vim.Math3d.DSphere.op_Inequality
  name: Inequality
  nameWithType: DSphere.Inequality
  fullName: Vim.Math3d.DSphere.Inequality
- uid: Vim.Math3d.DSphere.op_Implicit*
  commentId: Overload:Vim.Math3d.DSphere.op_Implicit
  name: Implicit
  nameWithType: DSphere.Implicit
  fullName: Vim.Math3d.DSphere.Implicit
  nameWithType.vb: DSphere.Widening
  fullName.vb: Vim.Math3d.DSphere.Widening
  name.vb: Widening
- uid: Vim.Math3d.DSphere.AlmostEquals*
  commentId: Overload:Vim.Math3d.DSphere.AlmostEquals
  name: AlmostEquals
  nameWithType: DSphere.AlmostEquals
  fullName: Vim.Math3d.DSphere.AlmostEquals
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Vim.Math3d.DSphere.SetCenter*
  commentId: Overload:Vim.Math3d.DSphere.SetCenter
  name: SetCenter
  nameWithType: DSphere.SetCenter
  fullName: Vim.Math3d.DSphere.SetCenter
- uid: Vim.Math3d.DSphere.SetRadius*
  commentId: Overload:Vim.Math3d.DSphere.SetRadius
  name: SetRadius
  nameWithType: DSphere.SetRadius
  fullName: Vim.Math3d.DSphere.SetRadius

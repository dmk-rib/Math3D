### YamlMime:ManagedReference
items:
- uid: Vim.Math3d.Line2D
  commentId: T:Vim.Math3d.Line2D
  id: Line2D
  parent: Vim.Math3d
  children:
  - Vim.Math3d.Line2D.#ctor(System.ValueTuple{Vim.Math3d.Vector2,Vim.Math3d.Vector2})
  - Vim.Math3d.Line2D.#ctor(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  - Vim.Math3d.Line2D.A
  - Vim.Math3d.Line2D.AlmostEquals(Vim.Math3d.Line2D,System.Single)
  - Vim.Math3d.Line2D.B
  - Vim.Math3d.Line2D.BoundingBox
  - Vim.Math3d.Line2D.Create(System.ValueTuple{Vim.Math3d.Vector2,Vim.Math3d.Vector2})
  - Vim.Math3d.Line2D.Create(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  - Vim.Math3d.Line2D.Deconstruct(Vim.Math3d.Vector2@,Vim.Math3d.Vector2@)
  - Vim.Math3d.Line2D.Equals(System.Object)
  - Vim.Math3d.Line2D.Equals(Vim.Math3d.Line2D)
  - Vim.Math3d.Line2D.GetHashCode
  - Vim.Math3d.Line2D.Intersects(Vim.Math3d.AABox2D,Vim.Math3d.Line2D,Vim.Math3d.AABox2D)
  - Vim.Math3d.Line2D.Intersects(Vim.Math3d.Line2D)
  - Vim.Math3d.Line2D.IsPointOnLine(Vim.Math3d.Vector2)
  - Vim.Math3d.Line2D.IsPointRightOfLine(Vim.Math3d.Vector2)
  - Vim.Math3d.Line2D.LinePointCrossProduct(Vim.Math3d.Vector2)
  - Vim.Math3d.Line2D.MaxValue
  - Vim.Math3d.Line2D.MinValue
  - Vim.Math3d.Line2D.op_Equality(Vim.Math3d.Line2D,Vim.Math3d.Line2D)
  - Vim.Math3d.Line2D.op_Implicit(System.ValueTuple{Vim.Math3d.Vector2,Vim.Math3d.Vector2})~Vim.Math3d.Line2D
  - Vim.Math3d.Line2D.op_Implicit(Vim.Math3d.Line2D)~System.ValueTuple{Vim.Math3d.Vector2,Vim.Math3d.Vector2}
  - Vim.Math3d.Line2D.op_Inequality(Vim.Math3d.Line2D,Vim.Math3d.Line2D)
  - Vim.Math3d.Line2D.SetA(Vim.Math3d.Vector2)
  - Vim.Math3d.Line2D.SetB(Vim.Math3d.Vector2)
  - Vim.Math3d.Line2D.ToString
  - Vim.Math3d.Line2D.TouchesOrCrosses(Vim.Math3d.Line2D)
  - Vim.Math3d.Line2D.Zero
  langs:
  - csharp
  - vb
  name: Line2D
  nameWithType: Line2D
  fullName: Vim.Math3d.Line2D
  type: Struct
  source:
    remote:
      path: src/StructsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Line2D
    path: ../src/StructsPartial.cs
    startLine: 151
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataContract]

      public readonly struct Line2D : IEquatable<Line2D>
    content.vb: >-
      <DataContract>

      Public Structure Line2D
          Implements IEquatable(Of Line2D)
  implements:
  - System.IEquatable{Vim.Math3d.Line2D}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Vim.Math3d.Line2D.A
  commentId: F:Vim.Math3d.Line2D.A
  id: A
  parent: Vim.Math3d.Line2D
  langs:
  - csharp
  - vb
  name: A
  nameWithType: Line2D.A
  fullName: Vim.Math3d.Line2D.A
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: A
    path: ../src/Structs.cs
    startLine: 1227
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataMember]

      public readonly Vector2 A
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <DataMember>

      Public ReadOnly A As Vector2
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.Line2D.B
  commentId: F:Vim.Math3d.Line2D.B
  id: B
  parent: Vim.Math3d.Line2D
  langs:
  - csharp
  - vb
  name: B
  nameWithType: Line2D.B
  fullName: Vim.Math3d.Line2D.B
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: B
    path: ../src/Structs.cs
    startLine: 1229
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataMember]

      public readonly Vector2 B
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <DataMember>

      Public ReadOnly B As Vector2
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.Line2D.#ctor(System.ValueTuple{Vim.Math3d.Vector2,Vim.Math3d.Vector2})
  commentId: M:Vim.Math3d.Line2D.#ctor(System.ValueTuple{Vim.Math3d.Vector2,Vim.Math3d.Vector2})
  id: '#ctor(System.ValueTuple{Vim.Math3d.Vector2,Vim.Math3d.Vector2})'
  parent: Vim.Math3d.Line2D
  langs:
  - csharp
  - vb
  name: Line2D((Vector2 a, Vector2 b))
  nameWithType: Line2D.Line2D((Vector2 a, Vector2 b))
  fullName: Vim.Math3d.Line2D.Line2D(System.ValueTuple<Vim.Math3d.Vector2, Vim.Math3d.Vector2>)
  type: Constructor
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: .ctor
    path: ../src/Structs.cs
    startLine: 1230
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public Line2D((Vector2 a, Vector2 b) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{Vim.Math3d.Vector2,Vim.Math3d.Vector2}
    content.vb: Public Sub New(tuple As(a As Vector2, b As Vector2)(Of Vector2 , Vector2))
  overload: Vim.Math3d.Line2D.#ctor*
  nameWithType.vb: Line2D.Line2D((a As Vector2, b As Vector2)(Of Vector2, Vector2))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Vim.Math3d.Line2D.Line2D(System.ValueTuple(Of Vim.Math3d.Vector2, Vim.Math3d.Vector2))
  name.vb: Line2D((a As Vector2, b As Vector2)(Of Vector2, Vector2))
- uid: Vim.Math3d.Line2D.#ctor(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.Line2D.#ctor(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  id: '#ctor(Vim.Math3d.Vector2,Vim.Math3d.Vector2)'
  parent: Vim.Math3d.Line2D
  langs:
  - csharp
  - vb
  name: Line2D(Vector2, Vector2)
  nameWithType: Line2D.Line2D(Vector2, Vector2)
  fullName: Vim.Math3d.Line2D.Line2D(Vim.Math3d.Vector2, Vim.Math3d.Vector2)
  type: Constructor
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: .ctor
    path: ../src/Structs.cs
    startLine: 1231
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public Line2D(Vector2 a, Vector2 b)
    parameters:
    - id: a
      type: Vim.Math3d.Vector2
    - id: b
      type: Vim.Math3d.Vector2
    content.vb: Public Sub New(a As Vector2, b As Vector2)
  overload: Vim.Math3d.Line2D.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Line2D.Create(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.Line2D.Create(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  id: Create(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  parent: Vim.Math3d.Line2D
  langs:
  - csharp
  - vb
  name: Create(Vector2, Vector2)
  nameWithType: Line2D.Create(Vector2, Vector2)
  fullName: Vim.Math3d.Line2D.Create(Vim.Math3d.Vector2, Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Create
    path: ../src/Structs.cs
    startLine: 1232
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Line2D Create(Vector2 a, Vector2 b)
    parameters:
    - id: a
      type: Vim.Math3d.Vector2
    - id: b
      type: Vim.Math3d.Vector2
    return:
      type: Vim.Math3d.Line2D
    content.vb: Public Shared Function Create(a As Vector2, b As Vector2) As Line2D
  overload: Vim.Math3d.Line2D.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Line2D.Create(System.ValueTuple{Vim.Math3d.Vector2,Vim.Math3d.Vector2})
  commentId: M:Vim.Math3d.Line2D.Create(System.ValueTuple{Vim.Math3d.Vector2,Vim.Math3d.Vector2})
  id: Create(System.ValueTuple{Vim.Math3d.Vector2,Vim.Math3d.Vector2})
  parent: Vim.Math3d.Line2D
  langs:
  - csharp
  - vb
  name: Create((Vector2 a, Vector2 b))
  nameWithType: Line2D.Create((Vector2 a, Vector2 b))
  fullName: Vim.Math3d.Line2D.Create(System.ValueTuple<Vim.Math3d.Vector2, Vim.Math3d.Vector2>)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Create
    path: ../src/Structs.cs
    startLine: 1233
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Line2D Create((Vector2 a, Vector2 b) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{Vim.Math3d.Vector2,Vim.Math3d.Vector2}
    return:
      type: Vim.Math3d.Line2D
    content.vb: Public Shared Function Create(tuple As(a As Vector2, b As Vector2)(Of Vector2 , Vector2)) As Line2D
  overload: Vim.Math3d.Line2D.Create*
  nameWithType.vb: Line2D.Create((a As Vector2, b As Vector2)(Of Vector2, Vector2))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.Line2D.Create(System.ValueTuple(Of Vim.Math3d.Vector2, Vim.Math3d.Vector2))
  name.vb: Create((a As Vector2, b As Vector2)(Of Vector2, Vector2))
- uid: Vim.Math3d.Line2D.Equals(System.Object)
  commentId: M:Vim.Math3d.Line2D.Equals(System.Object)
  id: Equals(System.Object)
  parent: Vim.Math3d.Line2D
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Line2D.Equals(Object)
  fullName: Vim.Math3d.Line2D.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Equals
    path: ../src/Structs.cs
    startLine: 1234
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: Vim.Math3d.Line2D.Equals*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.Line2D.GetHashCode
  commentId: M:Vim.Math3d.Line2D.GetHashCode
  id: GetHashCode
  parent: Vim.Math3d.Line2D
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Line2D.GetHashCode()
  fullName: Vim.Math3d.Line2D.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: GetHashCode
    path: ../src/Structs.cs
    startLine: 1235
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: Vim.Math3d.Line2D.GetHashCode*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.Line2D.ToString
  commentId: M:Vim.Math3d.Line2D.ToString
  id: ToString
  parent: Vim.Math3d.Line2D
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Line2D.ToString()
  fullName: Vim.Math3d.Line2D.ToString()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToString
    path: ../src/Structs.cs
    startLine: 1236
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: Vim.Math3d.Line2D.ToString*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.Line2D.Deconstruct(Vim.Math3d.Vector2@,Vim.Math3d.Vector2@)
  commentId: M:Vim.Math3d.Line2D.Deconstruct(Vim.Math3d.Vector2@,Vim.Math3d.Vector2@)
  id: Deconstruct(Vim.Math3d.Vector2@,Vim.Math3d.Vector2@)
  parent: Vim.Math3d.Line2D
  langs:
  - csharp
  - vb
  name: Deconstruct(out Vector2, out Vector2)
  nameWithType: Line2D.Deconstruct(out Vector2, out Vector2)
  fullName: Vim.Math3d.Line2D.Deconstruct(out Vim.Math3d.Vector2, out Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Deconstruct
    path: ../src/Structs.cs
    startLine: 1237
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly void Deconstruct(out Vector2 a, out Vector2 b)
    parameters:
    - id: a
      type: Vim.Math3d.Vector2
    - id: b
      type: Vim.Math3d.Vector2
    content.vb: Public Sub Deconstruct(ByRef a As Vector2, ByRef b As Vector2)
  overload: Vim.Math3d.Line2D.Deconstruct*
  nameWithType.vb: Line2D.Deconstruct(ByRef Vector2, ByRef Vector2)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  fullName.vb: Vim.Math3d.Line2D.Deconstruct(ByRef Vim.Math3d.Vector2, ByRef Vim.Math3d.Vector2)
  name.vb: Deconstruct(ByRef Vector2, ByRef Vector2)
- uid: Vim.Math3d.Line2D.Equals(Vim.Math3d.Line2D)
  commentId: M:Vim.Math3d.Line2D.Equals(Vim.Math3d.Line2D)
  id: Equals(Vim.Math3d.Line2D)
  parent: Vim.Math3d.Line2D
  langs:
  - csharp
  - vb
  name: Equals(Line2D)
  nameWithType: Line2D.Equals(Line2D)
  fullName: Vim.Math3d.Line2D.Equals(Vim.Math3d.Line2D)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Equals
    path: ../src/Structs.cs
    startLine: 1238
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool Equals(Line2D x)
    parameters:
    - id: x
      type: Vim.Math3d.Line2D
    return:
      type: System.Boolean
    content.vb: Public Function Equals(x As Line2D) As Boolean
  overload: Vim.Math3d.Line2D.Equals*
  implements:
  - System.IEquatable{Vim.Math3d.Line2D}.Equals(Vim.Math3d.Line2D)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Line2D.op_Equality(Vim.Math3d.Line2D,Vim.Math3d.Line2D)
  commentId: M:Vim.Math3d.Line2D.op_Equality(Vim.Math3d.Line2D,Vim.Math3d.Line2D)
  id: op_Equality(Vim.Math3d.Line2D,Vim.Math3d.Line2D)
  parent: Vim.Math3d.Line2D
  langs:
  - csharp
  - vb
  name: Equality(Line2D, Line2D)
  nameWithType: Line2D.Equality(Line2D, Line2D)
  fullName: Vim.Math3d.Line2D.Equality(Vim.Math3d.Line2D, Vim.Math3d.Line2D)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Equality
    path: ../src/Structs.cs
    startLine: 1239
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator ==(Line2D x0, Line2D x1)
    parameters:
    - id: x0
      type: Vim.Math3d.Line2D
    - id: x1
      type: Vim.Math3d.Line2D
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(x0 As Line2D, x1 As Line2D) As Boolean
  overload: Vim.Math3d.Line2D.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Line2D.op_Inequality(Vim.Math3d.Line2D,Vim.Math3d.Line2D)
  commentId: M:Vim.Math3d.Line2D.op_Inequality(Vim.Math3d.Line2D,Vim.Math3d.Line2D)
  id: op_Inequality(Vim.Math3d.Line2D,Vim.Math3d.Line2D)
  parent: Vim.Math3d.Line2D
  langs:
  - csharp
  - vb
  name: Inequality(Line2D, Line2D)
  nameWithType: Line2D.Inequality(Line2D, Line2D)
  fullName: Vim.Math3d.Line2D.Inequality(Vim.Math3d.Line2D, Vim.Math3d.Line2D)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Inequality
    path: ../src/Structs.cs
    startLine: 1240
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator !=(Line2D x0, Line2D x1)
    parameters:
    - id: x0
      type: Vim.Math3d.Line2D
    - id: x1
      type: Vim.Math3d.Line2D
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(x0 As Line2D, x1 As Line2D) As Boolean
  overload: Vim.Math3d.Line2D.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Line2D.op_Implicit(System.ValueTuple{Vim.Math3d.Vector2,Vim.Math3d.Vector2})~Vim.Math3d.Line2D
  commentId: M:Vim.Math3d.Line2D.op_Implicit(System.ValueTuple{Vim.Math3d.Vector2,Vim.Math3d.Vector2})~Vim.Math3d.Line2D
  id: op_Implicit(System.ValueTuple{Vim.Math3d.Vector2,Vim.Math3d.Vector2})~Vim.Math3d.Line2D
  parent: Vim.Math3d.Line2D
  langs:
  - csharp
  - vb
  name: Implicit((Vector2 a, Vector2 b) to Line2D)
  nameWithType: Line2D.Implicit((Vector2 a, Vector2 b) to Line2D)
  fullName: Vim.Math3d.Line2D.Implicit(System.ValueTuple<Vim.Math3d.Vector2, Vim.Math3d.Vector2> to Vim.Math3d.Line2D)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Implicit
    path: ../src/Structs.cs
    startLine: 1241
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static implicit operator Line2D((Vector2 a, Vector2 b) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{Vim.Math3d.Vector2,Vim.Math3d.Vector2}
    return:
      type: Vim.Math3d.Line2D
    content.vb: Public Shared Widening Operator CType(tuple As(a As Vector2, b As Vector2)(Of Vector2 , Vector2)) As Line2D
  overload: Vim.Math3d.Line2D.op_Implicit*
  nameWithType.vb: Line2D.Widening((a As Vector2, b As Vector2)(Of Vector2, Vector2) to Line2D)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.Line2D.Widening(System.ValueTuple(Of Vim.Math3d.Vector2, Vim.Math3d.Vector2) to Vim.Math3d.Line2D)
  name.vb: Widening((a As Vector2, b As Vector2)(Of Vector2, Vector2) to Line2D)
- uid: Vim.Math3d.Line2D.op_Implicit(Vim.Math3d.Line2D)~System.ValueTuple{Vim.Math3d.Vector2,Vim.Math3d.Vector2}
  commentId: M:Vim.Math3d.Line2D.op_Implicit(Vim.Math3d.Line2D)~System.ValueTuple{Vim.Math3d.Vector2,Vim.Math3d.Vector2}
  id: op_Implicit(Vim.Math3d.Line2D)~System.ValueTuple{Vim.Math3d.Vector2,Vim.Math3d.Vector2}
  parent: Vim.Math3d.Line2D
  langs:
  - csharp
  - vb
  name: Implicit(Line2D to (Vector2 a, Vector2 b))
  nameWithType: Line2D.Implicit(Line2D to (Vector2 a, Vector2 b))
  fullName: Vim.Math3d.Line2D.Implicit(Vim.Math3d.Line2D to System.ValueTuple<Vim.Math3d.Vector2, Vim.Math3d.Vector2>)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Implicit
    path: ../src/Structs.cs
    startLine: 1242
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static implicit operator (Vector2 a, Vector2 b)(Line2D self)
    parameters:
    - id: self
      type: Vim.Math3d.Line2D
    return:
      type: System.ValueTuple{Vim.Math3d.Vector2,Vim.Math3d.Vector2}
    content.vb: Public Shared Widening Operator CType(self As Line2D) As(a As Vector2, b As Vector2)(Of Vector2 , Vector2)
  overload: Vim.Math3d.Line2D.op_Implicit*
  nameWithType.vb: Line2D.Widening(Line2D to (a As Vector2, b As Vector2)(Of Vector2, Vector2))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.Line2D.Widening(Vim.Math3d.Line2D to System.ValueTuple(Of Vim.Math3d.Vector2, Vim.Math3d.Vector2))
  name.vb: Widening(Line2D to (a As Vector2, b As Vector2)(Of Vector2, Vector2))
- uid: Vim.Math3d.Line2D.AlmostEquals(Vim.Math3d.Line2D,System.Single)
  commentId: M:Vim.Math3d.Line2D.AlmostEquals(Vim.Math3d.Line2D,System.Single)
  id: AlmostEquals(Vim.Math3d.Line2D,System.Single)
  parent: Vim.Math3d.Line2D
  langs:
  - csharp
  - vb
  name: AlmostEquals(Line2D, Single)
  nameWithType: Line2D.AlmostEquals(Line2D, Single)
  fullName: Vim.Math3d.Line2D.AlmostEquals(Vim.Math3d.Line2D, System.Single)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: AlmostEquals
    path: ../src/Structs.cs
    startLine: 1244
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool AlmostEquals(Line2D x, float tolerance = 1E-07F)
    parameters:
    - id: x
      type: Vim.Math3d.Line2D
    - id: tolerance
      type: System.Single
    return:
      type: System.Boolean
    content.vb: Public Function AlmostEquals(x As Line2D, tolerance As Single = 1E-07F) As Boolean
  overload: Vim.Math3d.Line2D.AlmostEquals*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Line2D.Zero
  commentId: F:Vim.Math3d.Line2D.Zero
  id: Zero
  parent: Vim.Math3d.Line2D
  langs:
  - csharp
  - vb
  name: Zero
  nameWithType: Line2D.Zero
  fullName: Vim.Math3d.Line2D.Zero
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Zero
    path: ../src/Structs.cs
    startLine: 1245
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Line2D Zero
    return:
      type: Vim.Math3d.Line2D
    content.vb: Public Shared Zero As Line2D
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Line2D.MinValue
  commentId: F:Vim.Math3d.Line2D.MinValue
  id: MinValue
  parent: Vim.Math3d.Line2D
  langs:
  - csharp
  - vb
  name: MinValue
  nameWithType: Line2D.MinValue
  fullName: Vim.Math3d.Line2D.MinValue
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MinValue
    path: ../src/Structs.cs
    startLine: 1246
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Line2D MinValue
    return:
      type: Vim.Math3d.Line2D
    content.vb: Public Shared MinValue As Line2D
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Line2D.MaxValue
  commentId: F:Vim.Math3d.Line2D.MaxValue
  id: MaxValue
  parent: Vim.Math3d.Line2D
  langs:
  - csharp
  - vb
  name: MaxValue
  nameWithType: Line2D.MaxValue
  fullName: Vim.Math3d.Line2D.MaxValue
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MaxValue
    path: ../src/Structs.cs
    startLine: 1247
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Line2D MaxValue
    return:
      type: Vim.Math3d.Line2D
    content.vb: Public Shared MaxValue As Line2D
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Line2D.SetA(Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.Line2D.SetA(Vim.Math3d.Vector2)
  id: SetA(Vim.Math3d.Vector2)
  parent: Vim.Math3d.Line2D
  langs:
  - csharp
  - vb
  name: SetA(Vector2)
  nameWithType: Line2D.SetA(Vector2)
  fullName: Vim.Math3d.Line2D.SetA(Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SetA
    path: ../src/Structs.cs
    startLine: 1248
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly Line2D SetA(Vector2 x)
    parameters:
    - id: x
      type: Vim.Math3d.Vector2
    return:
      type: Vim.Math3d.Line2D
    content.vb: Public Function SetA(x As Vector2) As Line2D
  overload: Vim.Math3d.Line2D.SetA*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Line2D.SetB(Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.Line2D.SetB(Vim.Math3d.Vector2)
  id: SetB(Vim.Math3d.Vector2)
  parent: Vim.Math3d.Line2D
  langs:
  - csharp
  - vb
  name: SetB(Vector2)
  nameWithType: Line2D.SetB(Vector2)
  fullName: Vim.Math3d.Line2D.SetB(Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SetB
    path: ../src/Structs.cs
    startLine: 1249
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly Line2D SetB(Vector2 x)
    parameters:
    - id: x
      type: Vim.Math3d.Vector2
    return:
      type: Vim.Math3d.Line2D
    content.vb: Public Function SetB(x As Vector2) As Line2D
  overload: Vim.Math3d.Line2D.SetB*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Line2D.BoundingBox
  commentId: M:Vim.Math3d.Line2D.BoundingBox
  id: BoundingBox
  parent: Vim.Math3d.Line2D
  langs:
  - csharp
  - vb
  name: BoundingBox()
  nameWithType: Line2D.BoundingBox()
  fullName: Vim.Math3d.Line2D.BoundingBox()
  type: Method
  source:
    remote:
      path: src/StructsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: BoundingBox
    path: ../src/StructsPartial.cs
    startLine: 153
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly AABox2D BoundingBox()
    return:
      type: Vim.Math3d.AABox2D
    content.vb: Public Function BoundingBox As AABox2D
  overload: Vim.Math3d.Line2D.BoundingBox*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Line2D.LinePointCrossProduct(Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.Line2D.LinePointCrossProduct(Vim.Math3d.Vector2)
  id: LinePointCrossProduct(Vim.Math3d.Vector2)
  parent: Vim.Math3d.Line2D
  langs:
  - csharp
  - vb
  name: LinePointCrossProduct(Vector2)
  nameWithType: Line2D.LinePointCrossProduct(Vector2)
  fullName: Vim.Math3d.Line2D.LinePointCrossProduct(Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/StructsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: LinePointCrossProduct
    path: ../src/StructsPartial.cs
    startLine: 156
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly double LinePointCrossProduct(Vector2 point)
    parameters:
    - id: point
      type: Vim.Math3d.Vector2
    return:
      type: System.Double
    content.vb: Public Function LinePointCrossProduct(point As Vector2) As Double
  overload: Vim.Math3d.Line2D.LinePointCrossProduct*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Line2D.IsPointOnLine(Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.Line2D.IsPointOnLine(Vim.Math3d.Vector2)
  id: IsPointOnLine(Vim.Math3d.Vector2)
  parent: Vim.Math3d.Line2D
  langs:
  - csharp
  - vb
  name: IsPointOnLine(Vector2)
  nameWithType: Line2D.IsPointOnLine(Vector2)
  fullName: Vim.Math3d.Line2D.IsPointOnLine(Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/StructsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: IsPointOnLine
    path: ../src/StructsPartial.cs
    startLine: 164
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool IsPointOnLine(Vector2 point)
    parameters:
    - id: point
      type: Vim.Math3d.Vector2
    return:
      type: System.Boolean
    content.vb: Public Function IsPointOnLine(point As Vector2) As Boolean
  overload: Vim.Math3d.Line2D.IsPointOnLine*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Line2D.IsPointRightOfLine(Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.Line2D.IsPointRightOfLine(Vim.Math3d.Vector2)
  id: IsPointRightOfLine(Vim.Math3d.Vector2)
  parent: Vim.Math3d.Line2D
  langs:
  - csharp
  - vb
  name: IsPointRightOfLine(Vector2)
  nameWithType: Line2D.IsPointRightOfLine(Vector2)
  fullName: Vim.Math3d.Line2D.IsPointRightOfLine(Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/StructsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: IsPointRightOfLine
    path: ../src/StructsPartial.cs
    startLine: 168
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool IsPointRightOfLine(Vector2 point)
    parameters:
    - id: point
      type: Vim.Math3d.Vector2
    return:
      type: System.Boolean
    content.vb: Public Function IsPointRightOfLine(point As Vector2) As Boolean
  overload: Vim.Math3d.Line2D.IsPointRightOfLine*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Line2D.TouchesOrCrosses(Vim.Math3d.Line2D)
  commentId: M:Vim.Math3d.Line2D.TouchesOrCrosses(Vim.Math3d.Line2D)
  id: TouchesOrCrosses(Vim.Math3d.Line2D)
  parent: Vim.Math3d.Line2D
  langs:
  - csharp
  - vb
  name: TouchesOrCrosses(Line2D)
  nameWithType: Line2D.TouchesOrCrosses(Line2D)
  fullName: Vim.Math3d.Line2D.TouchesOrCrosses(Vim.Math3d.Line2D)
  type: Method
  source:
    remote:
      path: src/StructsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: TouchesOrCrosses
    path: ../src/StructsPartial.cs
    startLine: 172
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool TouchesOrCrosses(Line2D other)
    parameters:
    - id: other
      type: Vim.Math3d.Line2D
    return:
      type: System.Boolean
    content.vb: Public Function TouchesOrCrosses(other As Line2D) As Boolean
  overload: Vim.Math3d.Line2D.TouchesOrCrosses*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Line2D.Intersects(Vim.Math3d.AABox2D,Vim.Math3d.Line2D,Vim.Math3d.AABox2D)
  commentId: M:Vim.Math3d.Line2D.Intersects(Vim.Math3d.AABox2D,Vim.Math3d.Line2D,Vim.Math3d.AABox2D)
  id: Intersects(Vim.Math3d.AABox2D,Vim.Math3d.Line2D,Vim.Math3d.AABox2D)
  parent: Vim.Math3d.Line2D
  langs:
  - csharp
  - vb
  name: Intersects(AABox2D, Line2D, AABox2D)
  nameWithType: Line2D.Intersects(AABox2D, Line2D, AABox2D)
  fullName: Vim.Math3d.Line2D.Intersects(Vim.Math3d.AABox2D, Vim.Math3d.Line2D, Vim.Math3d.AABox2D)
  type: Method
  source:
    remote:
      path: src/StructsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Intersects
    path: ../src/StructsPartial.cs
    startLine: 178
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool Intersects(AABox2D thisBox, Line2D otherLine, AABox2D otherBox)
    parameters:
    - id: thisBox
      type: Vim.Math3d.AABox2D
    - id: otherLine
      type: Vim.Math3d.Line2D
    - id: otherBox
      type: Vim.Math3d.AABox2D
    return:
      type: System.Boolean
    content.vb: Public Function Intersects(thisBox As AABox2D, otherLine As Line2D, otherBox As AABox2D) As Boolean
  overload: Vim.Math3d.Line2D.Intersects*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Line2D.Intersects(Vim.Math3d.Line2D)
  commentId: M:Vim.Math3d.Line2D.Intersects(Vim.Math3d.Line2D)
  id: Intersects(Vim.Math3d.Line2D)
  parent: Vim.Math3d.Line2D
  langs:
  - csharp
  - vb
  name: Intersects(Line2D)
  nameWithType: Line2D.Intersects(Line2D)
  fullName: Vim.Math3d.Line2D.Intersects(Vim.Math3d.Line2D)
  type: Method
  source:
    remote:
      path: src/StructsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Intersects
    path: ../src/StructsPartial.cs
    startLine: 184
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool Intersects(Line2D other)
    parameters:
    - id: other
      type: Vim.Math3d.Line2D
    return:
      type: System.Boolean
    content.vb: Public Function Intersects(other As Line2D) As Boolean
  overload: Vim.Math3d.Line2D.Intersects*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
references:
- uid: Vim.Math3d
  commentId: N:Vim.Math3d
  name: Vim.Math3d
  nameWithType: Vim.Math3d
  fullName: Vim.Math3d
- uid: System.IEquatable{Vim.Math3d.Line2D}
  commentId: T:System.IEquatable{Vim.Math3d.Line2D}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Line2D>
  nameWithType: IEquatable<Line2D>
  fullName: System.IEquatable<Vim.Math3d.Line2D>
  nameWithType.vb: IEquatable(Of Line2D)
  fullName.vb: System.IEquatable(Of Vim.Math3d.Line2D)
  name.vb: IEquatable(Of Line2D)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.Line2D
    name: Line2D
    nameWithType: Line2D
    fullName: Vim.Math3d.Line2D
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.Line2D
    name: Line2D
    nameWithType: Line2D
    fullName: Vim.Math3d.Line2D
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Vim.Math3d.Vector2
  commentId: T:Vim.Math3d.Vector2
  parent: Vim.Math3d
  name: Vector2
  nameWithType: Vector2
  fullName: Vim.Math3d.Vector2
- uid: Vim.Math3d.Line2D.#ctor*
  commentId: Overload:Vim.Math3d.Line2D.#ctor
  name: Line2D
  nameWithType: Line2D.Line2D
  fullName: Vim.Math3d.Line2D.Line2D
- uid: System.ValueTuple{Vim.Math3d.Vector2,Vim.Math3d.Vector2}
  commentId: T:System.ValueTuple{Vim.Math3d.Vector2,Vim.Math3d.Vector2}
  parent: System
  definition: System.ValueTuple`2
  name: (T1, T2)<Vector2, Vector2>
  nameWithType: (T1, T2)<Vector2, Vector2>
  fullName: System.ValueTuple<Vim.Math3d.Vector2, Vim.Math3d.Vector2>
  nameWithType.vb: (T1, T2)(Of Vector2, Vector2)
  fullName.vb: System.ValueTuple(Of Vim.Math3d.Vector2, Vim.Math3d.Vector2)
  name.vb: (T1, T2)(Of Vector2, Vector2)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Vim.Math3d.Vector2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Vim.Math3d.Vector2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Vim.Math3d.Vector2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Vim.Math3d.Vector2
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple`2
  commentId: T:System.ValueTuple`2
  isExternal: true
  name: (T1, T2)<T1, T2>
  nameWithType: (T1, T2)<T1, T2>
  fullName: System.ValueTuple<T1, T2>
  nameWithType.vb: (T1, T2)(Of T1, T2)
  fullName.vb: System.ValueTuple(Of T1, T2)
  name.vb: (T1, T2)(Of T1, T2)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Line2D.Create*
  commentId: Overload:Vim.Math3d.Line2D.Create
  name: Create
  nameWithType: Line2D.Create
  fullName: Vim.Math3d.Line2D.Create
- uid: Vim.Math3d.Line2D
  commentId: T:Vim.Math3d.Line2D
  parent: Vim.Math3d
  name: Line2D
  nameWithType: Line2D
  fullName: Vim.Math3d.Line2D
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Line2D.Equals*
  commentId: Overload:Vim.Math3d.Line2D.Equals
  name: Equals
  nameWithType: Line2D.Equals
  fullName: Vim.Math3d.Line2D.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Line2D.GetHashCode*
  commentId: Overload:Vim.Math3d.Line2D.GetHashCode
  name: GetHashCode
  nameWithType: Line2D.GetHashCode
  fullName: Vim.Math3d.Line2D.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Line2D.ToString*
  commentId: Overload:Vim.Math3d.Line2D.ToString
  name: ToString
  nameWithType: Line2D.ToString
  fullName: Vim.Math3d.Line2D.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Vim.Math3d.Line2D.Deconstruct*
  commentId: Overload:Vim.Math3d.Line2D.Deconstruct
  name: Deconstruct
  nameWithType: Line2D.Deconstruct
  fullName: Vim.Math3d.Line2D.Deconstruct
- uid: System.IEquatable{Vim.Math3d.Line2D}.Equals(Vim.Math3d.Line2D)
  commentId: M:System.IEquatable{Vim.Math3d.Line2D}.Equals(Vim.Math3d.Line2D)
  parent: System.IEquatable{Vim.Math3d.Line2D}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(Line2D)
  nameWithType: IEquatable<Line2D>.Equals(Line2D)
  fullName: System.IEquatable<Vim.Math3d.Line2D>.Equals(Vim.Math3d.Line2D)
  nameWithType.vb: IEquatable(Of Line2D).Equals(Line2D)
  fullName.vb: System.IEquatable(Of Vim.Math3d.Line2D).Equals(Vim.Math3d.Line2D)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<Line2D>.Equals
    fullName: System.IEquatable<Vim.Math3d.Line2D>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Line2D
    name: Line2D
    nameWithType: Line2D
    fullName: Vim.Math3d.Line2D
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of Line2D).Equals
    fullName: System.IEquatable(Of Vim.Math3d.Line2D).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Line2D
    name: Line2D
    nameWithType: Line2D
    fullName: Vim.Math3d.Line2D
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Line2D.op_Equality*
  commentId: Overload:Vim.Math3d.Line2D.op_Equality
  name: Equality
  nameWithType: Line2D.Equality
  fullName: Vim.Math3d.Line2D.Equality
- uid: Vim.Math3d.Line2D.op_Inequality*
  commentId: Overload:Vim.Math3d.Line2D.op_Inequality
  name: Inequality
  nameWithType: Line2D.Inequality
  fullName: Vim.Math3d.Line2D.Inequality
- uid: Vim.Math3d.Line2D.op_Implicit*
  commentId: Overload:Vim.Math3d.Line2D.op_Implicit
  name: Implicit
  nameWithType: Line2D.Implicit
  fullName: Vim.Math3d.Line2D.Implicit
  nameWithType.vb: Line2D.Widening
  fullName.vb: Vim.Math3d.Line2D.Widening
  name.vb: Widening
- uid: Vim.Math3d.Line2D.AlmostEquals*
  commentId: Overload:Vim.Math3d.Line2D.AlmostEquals
  name: AlmostEquals
  nameWithType: Line2D.AlmostEquals
  fullName: Vim.Math3d.Line2D.AlmostEquals
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Vim.Math3d.Line2D.SetA*
  commentId: Overload:Vim.Math3d.Line2D.SetA
  name: SetA
  nameWithType: Line2D.SetA
  fullName: Vim.Math3d.Line2D.SetA
- uid: Vim.Math3d.Line2D.SetB*
  commentId: Overload:Vim.Math3d.Line2D.SetB
  name: SetB
  nameWithType: Line2D.SetB
  fullName: Vim.Math3d.Line2D.SetB
- uid: Vim.Math3d.Line2D.BoundingBox*
  commentId: Overload:Vim.Math3d.Line2D.BoundingBox
  name: BoundingBox
  nameWithType: Line2D.BoundingBox
  fullName: Vim.Math3d.Line2D.BoundingBox
- uid: Vim.Math3d.AABox2D
  commentId: T:Vim.Math3d.AABox2D
  parent: Vim.Math3d
  name: AABox2D
  nameWithType: AABox2D
  fullName: Vim.Math3d.AABox2D
- uid: Vim.Math3d.Line2D.LinePointCrossProduct*
  commentId: Overload:Vim.Math3d.Line2D.LinePointCrossProduct
  name: LinePointCrossProduct
  nameWithType: Line2D.LinePointCrossProduct
  fullName: Vim.Math3d.Line2D.LinePointCrossProduct
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Vim.Math3d.Line2D.IsPointOnLine*
  commentId: Overload:Vim.Math3d.Line2D.IsPointOnLine
  name: IsPointOnLine
  nameWithType: Line2D.IsPointOnLine
  fullName: Vim.Math3d.Line2D.IsPointOnLine
- uid: Vim.Math3d.Line2D.IsPointRightOfLine*
  commentId: Overload:Vim.Math3d.Line2D.IsPointRightOfLine
  name: IsPointRightOfLine
  nameWithType: Line2D.IsPointRightOfLine
  fullName: Vim.Math3d.Line2D.IsPointRightOfLine
- uid: Vim.Math3d.Line2D.TouchesOrCrosses*
  commentId: Overload:Vim.Math3d.Line2D.TouchesOrCrosses
  name: TouchesOrCrosses
  nameWithType: Line2D.TouchesOrCrosses
  fullName: Vim.Math3d.Line2D.TouchesOrCrosses
- uid: Vim.Math3d.Line2D.Intersects*
  commentId: Overload:Vim.Math3d.Line2D.Intersects
  name: Intersects
  nameWithType: Line2D.Intersects
  fullName: Vim.Math3d.Line2D.Intersects

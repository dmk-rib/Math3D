### YamlMime:ManagedReference
items:
- uid: Vim.Math3d.DQuaternion
  commentId: T:Vim.Math3d.DQuaternion
  id: DQuaternion
  parent: Vim.Math3d
  children:
  - Vim.Math3d.DQuaternion.#ctor(System.Double,System.Double,System.Double,System.Double)
  - Vim.Math3d.DQuaternion.#ctor(System.ValueTuple{System.Double,System.Double,System.Double,System.Double})
  - Vim.Math3d.DQuaternion.AlmostEquals(Vim.Math3d.DQuaternion,System.Single)
  - Vim.Math3d.DQuaternion.Create(System.Double,System.Double,System.Double,System.Double)
  - Vim.Math3d.DQuaternion.Create(System.ValueTuple{System.Double,System.Double,System.Double,System.Double})
  - Vim.Math3d.DQuaternion.Deconstruct(System.Double@,System.Double@,System.Double@,System.Double@)
  - Vim.Math3d.DQuaternion.DVector4
  - Vim.Math3d.DQuaternion.Equals(System.Object)
  - Vim.Math3d.DQuaternion.Equals(Vim.Math3d.DQuaternion)
  - Vim.Math3d.DQuaternion.GetHashCode
  - Vim.Math3d.DQuaternion.MaxValue
  - Vim.Math3d.DQuaternion.MinValue
  - Vim.Math3d.DQuaternion.op_Equality(Vim.Math3d.DQuaternion,Vim.Math3d.DQuaternion)
  - Vim.Math3d.DQuaternion.op_Implicit(System.ValueTuple{System.Double,System.Double,System.Double,System.Double})~Vim.Math3d.DQuaternion
  - Vim.Math3d.DQuaternion.op_Implicit(Vim.Math3d.DQuaternion)~System.ValueTuple{System.Double,System.Double,System.Double,System.Double}
  - Vim.Math3d.DQuaternion.op_Inequality(Vim.Math3d.DQuaternion,Vim.Math3d.DQuaternion)
  - Vim.Math3d.DQuaternion.Quaternion
  - Vim.Math3d.DQuaternion.SetW(System.Double)
  - Vim.Math3d.DQuaternion.SetX(System.Double)
  - Vim.Math3d.DQuaternion.SetY(System.Double)
  - Vim.Math3d.DQuaternion.SetZ(System.Double)
  - Vim.Math3d.DQuaternion.ToString
  - Vim.Math3d.DQuaternion.W
  - Vim.Math3d.DQuaternion.X
  - Vim.Math3d.DQuaternion.Y
  - Vim.Math3d.DQuaternion.Z
  - Vim.Math3d.DQuaternion.Zero
  langs:
  - csharp
  - vb
  name: DQuaternion
  nameWithType: DQuaternion
  fullName: Vim.Math3d.DQuaternion
  type: Struct
  source:
    remote:
      path: src/StructsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: DQuaternion
    path: ../src/StructsPartial.cs
    startLine: 214
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataContract]

      public readonly struct DQuaternion : IEquatable<DQuaternion>
    content.vb: >-
      <DataContract>

      Public Structure DQuaternion
          Implements IEquatable(Of DQuaternion)
  implements:
  - System.IEquatable{Vim.Math3d.DQuaternion}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Vim.Math3d.DQuaternion.X
  commentId: F:Vim.Math3d.DQuaternion.X
  id: X
  parent: Vim.Math3d.DQuaternion
  langs:
  - csharp
  - vb
  name: X
  nameWithType: DQuaternion.X
  fullName: Vim.Math3d.DQuaternion.X
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: X
    path: ../src/Structs.cs
    startLine: 619
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataMember]

      public readonly double X
    return:
      type: System.Double
    content.vb: >-
      <DataMember>

      Public ReadOnly X As Double
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.DQuaternion.Y
  commentId: F:Vim.Math3d.DQuaternion.Y
  id: Y
  parent: Vim.Math3d.DQuaternion
  langs:
  - csharp
  - vb
  name: Y
  nameWithType: DQuaternion.Y
  fullName: Vim.Math3d.DQuaternion.Y
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Y
    path: ../src/Structs.cs
    startLine: 621
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataMember]

      public readonly double Y
    return:
      type: System.Double
    content.vb: >-
      <DataMember>

      Public ReadOnly Y As Double
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.DQuaternion.Z
  commentId: F:Vim.Math3d.DQuaternion.Z
  id: Z
  parent: Vim.Math3d.DQuaternion
  langs:
  - csharp
  - vb
  name: Z
  nameWithType: DQuaternion.Z
  fullName: Vim.Math3d.DQuaternion.Z
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Z
    path: ../src/Structs.cs
    startLine: 623
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataMember]

      public readonly double Z
    return:
      type: System.Double
    content.vb: >-
      <DataMember>

      Public ReadOnly Z As Double
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.DQuaternion.W
  commentId: F:Vim.Math3d.DQuaternion.W
  id: W
  parent: Vim.Math3d.DQuaternion
  langs:
  - csharp
  - vb
  name: W
  nameWithType: DQuaternion.W
  fullName: Vim.Math3d.DQuaternion.W
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: W
    path: ../src/Structs.cs
    startLine: 625
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataMember]

      public readonly double W
    return:
      type: System.Double
    content.vb: >-
      <DataMember>

      Public ReadOnly W As Double
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.DQuaternion.#ctor(System.ValueTuple{System.Double,System.Double,System.Double,System.Double})
  commentId: M:Vim.Math3d.DQuaternion.#ctor(System.ValueTuple{System.Double,System.Double,System.Double,System.Double})
  id: '#ctor(System.ValueTuple{System.Double,System.Double,System.Double,System.Double})'
  parent: Vim.Math3d.DQuaternion
  langs:
  - csharp
  - vb
  name: DQuaternion((Double x, Double y, Double z, Double w))
  nameWithType: DQuaternion.DQuaternion((Double x, Double y, Double z, Double w))
  fullName: Vim.Math3d.DQuaternion.DQuaternion(System.ValueTuple<System.Double, System.Double, System.Double, System.Double>)
  type: Constructor
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: .ctor
    path: ../src/Structs.cs
    startLine: 626
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public DQuaternion((double x, double y, double z, double w) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{System.Double,System.Double,System.Double,System.Double}
    content.vb: Public Sub New(tuple As(x As Double, y As Double, z As Double, w As Double)(Of Double , Double, Double, Double))
  overload: Vim.Math3d.DQuaternion.#ctor*
  nameWithType.vb: DQuaternion.DQuaternion((x As Double, y As Double, z As Double, w As Double)(Of Double, Double, Double, Double))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Vim.Math3d.DQuaternion.DQuaternion(System.ValueTuple(Of System.Double, System.Double, System.Double, System.Double))
  name.vb: DQuaternion((x As Double, y As Double, z As Double, w As Double)(Of Double, Double, Double, Double))
- uid: Vim.Math3d.DQuaternion.#ctor(System.Double,System.Double,System.Double,System.Double)
  commentId: M:Vim.Math3d.DQuaternion.#ctor(System.Double,System.Double,System.Double,System.Double)
  id: '#ctor(System.Double,System.Double,System.Double,System.Double)'
  parent: Vim.Math3d.DQuaternion
  langs:
  - csharp
  - vb
  name: DQuaternion(Double, Double, Double, Double)
  nameWithType: DQuaternion.DQuaternion(Double, Double, Double, Double)
  fullName: Vim.Math3d.DQuaternion.DQuaternion(System.Double, System.Double, System.Double, System.Double)
  type: Constructor
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: .ctor
    path: ../src/Structs.cs
    startLine: 627
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public DQuaternion(double x, double y, double z, double w)
    parameters:
    - id: x
      type: System.Double
    - id: y
      type: System.Double
    - id: z
      type: System.Double
    - id: w
      type: System.Double
    content.vb: Public Sub New(x As Double, y As Double, z As Double, w As Double)
  overload: Vim.Math3d.DQuaternion.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Vim.Math3d.DQuaternion.Create(System.Double,System.Double,System.Double,System.Double)
  commentId: M:Vim.Math3d.DQuaternion.Create(System.Double,System.Double,System.Double,System.Double)
  id: Create(System.Double,System.Double,System.Double,System.Double)
  parent: Vim.Math3d.DQuaternion
  langs:
  - csharp
  - vb
  name: Create(Double, Double, Double, Double)
  nameWithType: DQuaternion.Create(Double, Double, Double, Double)
  fullName: Vim.Math3d.DQuaternion.Create(System.Double, System.Double, System.Double, System.Double)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Create
    path: ../src/Structs.cs
    startLine: 628
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DQuaternion Create(double x, double y, double z, double w)
    parameters:
    - id: x
      type: System.Double
    - id: y
      type: System.Double
    - id: z
      type: System.Double
    - id: w
      type: System.Double
    return:
      type: Vim.Math3d.DQuaternion
    content.vb: Public Shared Function Create(x As Double, y As Double, z As Double, w As Double) As DQuaternion
  overload: Vim.Math3d.DQuaternion.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.DQuaternion.Create(System.ValueTuple{System.Double,System.Double,System.Double,System.Double})
  commentId: M:Vim.Math3d.DQuaternion.Create(System.ValueTuple{System.Double,System.Double,System.Double,System.Double})
  id: Create(System.ValueTuple{System.Double,System.Double,System.Double,System.Double})
  parent: Vim.Math3d.DQuaternion
  langs:
  - csharp
  - vb
  name: Create((Double x, Double y, Double z, Double w))
  nameWithType: DQuaternion.Create((Double x, Double y, Double z, Double w))
  fullName: Vim.Math3d.DQuaternion.Create(System.ValueTuple<System.Double, System.Double, System.Double, System.Double>)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Create
    path: ../src/Structs.cs
    startLine: 629
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DQuaternion Create((double x, double y, double z, double w) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{System.Double,System.Double,System.Double,System.Double}
    return:
      type: Vim.Math3d.DQuaternion
    content.vb: Public Shared Function Create(tuple As(x As Double, y As Double, z As Double, w As Double)(Of Double , Double, Double, Double)) As DQuaternion
  overload: Vim.Math3d.DQuaternion.Create*
  nameWithType.vb: DQuaternion.Create((x As Double, y As Double, z As Double, w As Double)(Of Double, Double, Double, Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.DQuaternion.Create(System.ValueTuple(Of System.Double, System.Double, System.Double, System.Double))
  name.vb: Create((x As Double, y As Double, z As Double, w As Double)(Of Double, Double, Double, Double))
- uid: Vim.Math3d.DQuaternion.Equals(System.Object)
  commentId: M:Vim.Math3d.DQuaternion.Equals(System.Object)
  id: Equals(System.Object)
  parent: Vim.Math3d.DQuaternion
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: DQuaternion.Equals(Object)
  fullName: Vim.Math3d.DQuaternion.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Equals
    path: ../src/Structs.cs
    startLine: 630
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: Vim.Math3d.DQuaternion.Equals*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.DQuaternion.GetHashCode
  commentId: M:Vim.Math3d.DQuaternion.GetHashCode
  id: GetHashCode
  parent: Vim.Math3d.DQuaternion
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: DQuaternion.GetHashCode()
  fullName: Vim.Math3d.DQuaternion.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: GetHashCode
    path: ../src/Structs.cs
    startLine: 631
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: Vim.Math3d.DQuaternion.GetHashCode*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.DQuaternion.ToString
  commentId: M:Vim.Math3d.DQuaternion.ToString
  id: ToString
  parent: Vim.Math3d.DQuaternion
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: DQuaternion.ToString()
  fullName: Vim.Math3d.DQuaternion.ToString()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToString
    path: ../src/Structs.cs
    startLine: 632
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: Vim.Math3d.DQuaternion.ToString*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.DQuaternion.Deconstruct(System.Double@,System.Double@,System.Double@,System.Double@)
  commentId: M:Vim.Math3d.DQuaternion.Deconstruct(System.Double@,System.Double@,System.Double@,System.Double@)
  id: Deconstruct(System.Double@,System.Double@,System.Double@,System.Double@)
  parent: Vim.Math3d.DQuaternion
  langs:
  - csharp
  - vb
  name: Deconstruct(out Double, out Double, out Double, out Double)
  nameWithType: DQuaternion.Deconstruct(out Double, out Double, out Double, out Double)
  fullName: Vim.Math3d.DQuaternion.Deconstruct(out System.Double, out System.Double, out System.Double, out System.Double)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Deconstruct
    path: ../src/Structs.cs
    startLine: 633
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly void Deconstruct(out double x, out double y, out double z, out double w)
    parameters:
    - id: x
      type: System.Double
    - id: y
      type: System.Double
    - id: z
      type: System.Double
    - id: w
      type: System.Double
    content.vb: Public Sub Deconstruct(ByRef x As Double, ByRef y As Double, ByRef z As Double, ByRef w As Double)
  overload: Vim.Math3d.DQuaternion.Deconstruct*
  nameWithType.vb: DQuaternion.Deconstruct(ByRef Double, ByRef Double, ByRef Double, ByRef Double)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  fullName.vb: Vim.Math3d.DQuaternion.Deconstruct(ByRef System.Double, ByRef System.Double, ByRef System.Double, ByRef System.Double)
  name.vb: Deconstruct(ByRef Double, ByRef Double, ByRef Double, ByRef Double)
- uid: Vim.Math3d.DQuaternion.Equals(Vim.Math3d.DQuaternion)
  commentId: M:Vim.Math3d.DQuaternion.Equals(Vim.Math3d.DQuaternion)
  id: Equals(Vim.Math3d.DQuaternion)
  parent: Vim.Math3d.DQuaternion
  langs:
  - csharp
  - vb
  name: Equals(DQuaternion)
  nameWithType: DQuaternion.Equals(DQuaternion)
  fullName: Vim.Math3d.DQuaternion.Equals(Vim.Math3d.DQuaternion)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Equals
    path: ../src/Structs.cs
    startLine: 634
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool Equals(DQuaternion x)
    parameters:
    - id: x
      type: Vim.Math3d.DQuaternion
    return:
      type: System.Boolean
    content.vb: Public Function Equals(x As DQuaternion) As Boolean
  overload: Vim.Math3d.DQuaternion.Equals*
  implements:
  - System.IEquatable{Vim.Math3d.DQuaternion}.Equals(Vim.Math3d.DQuaternion)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.DQuaternion.op_Equality(Vim.Math3d.DQuaternion,Vim.Math3d.DQuaternion)
  commentId: M:Vim.Math3d.DQuaternion.op_Equality(Vim.Math3d.DQuaternion,Vim.Math3d.DQuaternion)
  id: op_Equality(Vim.Math3d.DQuaternion,Vim.Math3d.DQuaternion)
  parent: Vim.Math3d.DQuaternion
  langs:
  - csharp
  - vb
  name: Equality(DQuaternion, DQuaternion)
  nameWithType: DQuaternion.Equality(DQuaternion, DQuaternion)
  fullName: Vim.Math3d.DQuaternion.Equality(Vim.Math3d.DQuaternion, Vim.Math3d.DQuaternion)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Equality
    path: ../src/Structs.cs
    startLine: 635
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator ==(DQuaternion x0, DQuaternion x1)
    parameters:
    - id: x0
      type: Vim.Math3d.DQuaternion
    - id: x1
      type: Vim.Math3d.DQuaternion
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(x0 As DQuaternion, x1 As DQuaternion) As Boolean
  overload: Vim.Math3d.DQuaternion.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.DQuaternion.op_Inequality(Vim.Math3d.DQuaternion,Vim.Math3d.DQuaternion)
  commentId: M:Vim.Math3d.DQuaternion.op_Inequality(Vim.Math3d.DQuaternion,Vim.Math3d.DQuaternion)
  id: op_Inequality(Vim.Math3d.DQuaternion,Vim.Math3d.DQuaternion)
  parent: Vim.Math3d.DQuaternion
  langs:
  - csharp
  - vb
  name: Inequality(DQuaternion, DQuaternion)
  nameWithType: DQuaternion.Inequality(DQuaternion, DQuaternion)
  fullName: Vim.Math3d.DQuaternion.Inequality(Vim.Math3d.DQuaternion, Vim.Math3d.DQuaternion)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Inequality
    path: ../src/Structs.cs
    startLine: 636
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator !=(DQuaternion x0, DQuaternion x1)
    parameters:
    - id: x0
      type: Vim.Math3d.DQuaternion
    - id: x1
      type: Vim.Math3d.DQuaternion
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(x0 As DQuaternion, x1 As DQuaternion) As Boolean
  overload: Vim.Math3d.DQuaternion.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.DQuaternion.op_Implicit(System.ValueTuple{System.Double,System.Double,System.Double,System.Double})~Vim.Math3d.DQuaternion
  commentId: M:Vim.Math3d.DQuaternion.op_Implicit(System.ValueTuple{System.Double,System.Double,System.Double,System.Double})~Vim.Math3d.DQuaternion
  id: op_Implicit(System.ValueTuple{System.Double,System.Double,System.Double,System.Double})~Vim.Math3d.DQuaternion
  parent: Vim.Math3d.DQuaternion
  langs:
  - csharp
  - vb
  name: Implicit((Double x, Double y, Double z, Double w) to DQuaternion)
  nameWithType: DQuaternion.Implicit((Double x, Double y, Double z, Double w) to DQuaternion)
  fullName: Vim.Math3d.DQuaternion.Implicit(System.ValueTuple<System.Double, System.Double, System.Double, System.Double> to Vim.Math3d.DQuaternion)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Implicit
    path: ../src/Structs.cs
    startLine: 637
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static implicit operator DQuaternion((double x, double y, double z, double w) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{System.Double,System.Double,System.Double,System.Double}
    return:
      type: Vim.Math3d.DQuaternion
    content.vb: Public Shared Widening Operator CType(tuple As(x As Double, y As Double, z As Double, w As Double)(Of Double , Double, Double, Double)) As DQuaternion
  overload: Vim.Math3d.DQuaternion.op_Implicit*
  nameWithType.vb: DQuaternion.Widening((x As Double, y As Double, z As Double, w As Double)(Of Double, Double, Double, Double) to DQuaternion)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.DQuaternion.Widening(System.ValueTuple(Of System.Double, System.Double, System.Double, System.Double) to Vim.Math3d.DQuaternion)
  name.vb: Widening((x As Double, y As Double, z As Double, w As Double)(Of Double, Double, Double, Double) to DQuaternion)
- uid: Vim.Math3d.DQuaternion.op_Implicit(Vim.Math3d.DQuaternion)~System.ValueTuple{System.Double,System.Double,System.Double,System.Double}
  commentId: M:Vim.Math3d.DQuaternion.op_Implicit(Vim.Math3d.DQuaternion)~System.ValueTuple{System.Double,System.Double,System.Double,System.Double}
  id: op_Implicit(Vim.Math3d.DQuaternion)~System.ValueTuple{System.Double,System.Double,System.Double,System.Double}
  parent: Vim.Math3d.DQuaternion
  langs:
  - csharp
  - vb
  name: Implicit(DQuaternion to (Double x, Double y, Double z, Double w))
  nameWithType: DQuaternion.Implicit(DQuaternion to (Double x, Double y, Double z, Double w))
  fullName: Vim.Math3d.DQuaternion.Implicit(Vim.Math3d.DQuaternion to System.ValueTuple<System.Double, System.Double, System.Double, System.Double>)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Implicit
    path: ../src/Structs.cs
    startLine: 638
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static implicit operator (double x, double y, double z, double w)(DQuaternion self)
    parameters:
    - id: self
      type: Vim.Math3d.DQuaternion
    return:
      type: System.ValueTuple{System.Double,System.Double,System.Double,System.Double}
    content.vb: Public Shared Widening Operator CType(self As DQuaternion) As(x As Double, y As Double, z As Double, w As Double)(Of Double , Double, Double, Double)
  overload: Vim.Math3d.DQuaternion.op_Implicit*
  nameWithType.vb: DQuaternion.Widening(DQuaternion to (x As Double, y As Double, z As Double, w As Double)(Of Double, Double, Double, Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.DQuaternion.Widening(Vim.Math3d.DQuaternion to System.ValueTuple(Of System.Double, System.Double, System.Double, System.Double))
  name.vb: Widening(DQuaternion to (x As Double, y As Double, z As Double, w As Double)(Of Double, Double, Double, Double))
- uid: Vim.Math3d.DQuaternion.AlmostEquals(Vim.Math3d.DQuaternion,System.Single)
  commentId: M:Vim.Math3d.DQuaternion.AlmostEquals(Vim.Math3d.DQuaternion,System.Single)
  id: AlmostEquals(Vim.Math3d.DQuaternion,System.Single)
  parent: Vim.Math3d.DQuaternion
  langs:
  - csharp
  - vb
  name: AlmostEquals(DQuaternion, Single)
  nameWithType: DQuaternion.AlmostEquals(DQuaternion, Single)
  fullName: Vim.Math3d.DQuaternion.AlmostEquals(Vim.Math3d.DQuaternion, System.Single)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: AlmostEquals
    path: ../src/Structs.cs
    startLine: 640
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool AlmostEquals(DQuaternion x, float tolerance = 1E-07F)
    parameters:
    - id: x
      type: Vim.Math3d.DQuaternion
    - id: tolerance
      type: System.Single
    return:
      type: System.Boolean
    content.vb: Public Function AlmostEquals(x As DQuaternion, tolerance As Single = 1E-07F) As Boolean
  overload: Vim.Math3d.DQuaternion.AlmostEquals*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.DQuaternion.Zero
  commentId: F:Vim.Math3d.DQuaternion.Zero
  id: Zero
  parent: Vim.Math3d.DQuaternion
  langs:
  - csharp
  - vb
  name: Zero
  nameWithType: DQuaternion.Zero
  fullName: Vim.Math3d.DQuaternion.Zero
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Zero
    path: ../src/Structs.cs
    startLine: 641
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DQuaternion Zero
    return:
      type: Vim.Math3d.DQuaternion
    content.vb: Public Shared Zero As DQuaternion
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.DQuaternion.MinValue
  commentId: F:Vim.Math3d.DQuaternion.MinValue
  id: MinValue
  parent: Vim.Math3d.DQuaternion
  langs:
  - csharp
  - vb
  name: MinValue
  nameWithType: DQuaternion.MinValue
  fullName: Vim.Math3d.DQuaternion.MinValue
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MinValue
    path: ../src/Structs.cs
    startLine: 642
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DQuaternion MinValue
    return:
      type: Vim.Math3d.DQuaternion
    content.vb: Public Shared MinValue As DQuaternion
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.DQuaternion.MaxValue
  commentId: F:Vim.Math3d.DQuaternion.MaxValue
  id: MaxValue
  parent: Vim.Math3d.DQuaternion
  langs:
  - csharp
  - vb
  name: MaxValue
  nameWithType: DQuaternion.MaxValue
  fullName: Vim.Math3d.DQuaternion.MaxValue
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MaxValue
    path: ../src/Structs.cs
    startLine: 643
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DQuaternion MaxValue
    return:
      type: Vim.Math3d.DQuaternion
    content.vb: Public Shared MaxValue As DQuaternion
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.DQuaternion.SetX(System.Double)
  commentId: M:Vim.Math3d.DQuaternion.SetX(System.Double)
  id: SetX(System.Double)
  parent: Vim.Math3d.DQuaternion
  langs:
  - csharp
  - vb
  name: SetX(Double)
  nameWithType: DQuaternion.SetX(Double)
  fullName: Vim.Math3d.DQuaternion.SetX(System.Double)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SetX
    path: ../src/Structs.cs
    startLine: 644
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly DQuaternion SetX(double x)
    parameters:
    - id: x
      type: System.Double
    return:
      type: Vim.Math3d.DQuaternion
    content.vb: Public Function SetX(x As Double) As DQuaternion
  overload: Vim.Math3d.DQuaternion.SetX*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.DQuaternion.SetY(System.Double)
  commentId: M:Vim.Math3d.DQuaternion.SetY(System.Double)
  id: SetY(System.Double)
  parent: Vim.Math3d.DQuaternion
  langs:
  - csharp
  - vb
  name: SetY(Double)
  nameWithType: DQuaternion.SetY(Double)
  fullName: Vim.Math3d.DQuaternion.SetY(System.Double)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SetY
    path: ../src/Structs.cs
    startLine: 645
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly DQuaternion SetY(double x)
    parameters:
    - id: x
      type: System.Double
    return:
      type: Vim.Math3d.DQuaternion
    content.vb: Public Function SetY(x As Double) As DQuaternion
  overload: Vim.Math3d.DQuaternion.SetY*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.DQuaternion.SetZ(System.Double)
  commentId: M:Vim.Math3d.DQuaternion.SetZ(System.Double)
  id: SetZ(System.Double)
  parent: Vim.Math3d.DQuaternion
  langs:
  - csharp
  - vb
  name: SetZ(Double)
  nameWithType: DQuaternion.SetZ(Double)
  fullName: Vim.Math3d.DQuaternion.SetZ(System.Double)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SetZ
    path: ../src/Structs.cs
    startLine: 646
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly DQuaternion SetZ(double x)
    parameters:
    - id: x
      type: System.Double
    return:
      type: Vim.Math3d.DQuaternion
    content.vb: Public Function SetZ(x As Double) As DQuaternion
  overload: Vim.Math3d.DQuaternion.SetZ*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.DQuaternion.SetW(System.Double)
  commentId: M:Vim.Math3d.DQuaternion.SetW(System.Double)
  id: SetW(System.Double)
  parent: Vim.Math3d.DQuaternion
  langs:
  - csharp
  - vb
  name: SetW(Double)
  nameWithType: DQuaternion.SetW(Double)
  fullName: Vim.Math3d.DQuaternion.SetW(System.Double)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SetW
    path: ../src/Structs.cs
    startLine: 647
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly DQuaternion SetW(double x)
    parameters:
    - id: x
      type: System.Double
    return:
      type: Vim.Math3d.DQuaternion
    content.vb: Public Function SetW(x As Double) As DQuaternion
  overload: Vim.Math3d.DQuaternion.SetW*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.DQuaternion.Quaternion
  commentId: P:Vim.Math3d.DQuaternion.Quaternion
  id: Quaternion
  parent: Vim.Math3d.DQuaternion
  langs:
  - csharp
  - vb
  name: Quaternion
  nameWithType: DQuaternion.Quaternion
  fullName: Vim.Math3d.DQuaternion.Quaternion
  type: Property
  source:
    remote:
      path: src/StructsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Quaternion
    path: ../src/StructsPartial.cs
    startLine: 216
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly Quaternion Quaternion { get; }
    parameters: []
    return:
      type: Vim.Math3d.Quaternion
    content.vb: Public ReadOnly Property Quaternion As Quaternion
  overload: Vim.Math3d.DQuaternion.Quaternion*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.DQuaternion.DVector4
  commentId: P:Vim.Math3d.DQuaternion.DVector4
  id: DVector4
  parent: Vim.Math3d.DQuaternion
  langs:
  - csharp
  - vb
  name: DVector4
  nameWithType: DQuaternion.DVector4
  fullName: Vim.Math3d.DQuaternion.DVector4
  type: Property
  source:
    remote:
      path: src/StructsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: DVector4
    path: ../src/StructsPartial.cs
    startLine: 219
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly DVector4 DVector4 { get; }
    parameters: []
    return:
      type: Vim.Math3d.DVector4
    content.vb: Public ReadOnly Property DVector4 As DVector4
  overload: Vim.Math3d.DQuaternion.DVector4*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Vim.Math3d
  commentId: N:Vim.Math3d
  name: Vim.Math3d
  nameWithType: Vim.Math3d
  fullName: Vim.Math3d
- uid: System.IEquatable{Vim.Math3d.DQuaternion}
  commentId: T:System.IEquatable{Vim.Math3d.DQuaternion}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<DQuaternion>
  nameWithType: IEquatable<DQuaternion>
  fullName: System.IEquatable<Vim.Math3d.DQuaternion>
  nameWithType.vb: IEquatable(Of DQuaternion)
  fullName.vb: System.IEquatable(Of Vim.Math3d.DQuaternion)
  name.vb: IEquatable(Of DQuaternion)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.DQuaternion
    name: DQuaternion
    nameWithType: DQuaternion
    fullName: Vim.Math3d.DQuaternion
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.DQuaternion
    name: DQuaternion
    nameWithType: DQuaternion
    fullName: Vim.Math3d.DQuaternion
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Vim.Math3d.DQuaternion.#ctor*
  commentId: Overload:Vim.Math3d.DQuaternion.#ctor
  name: DQuaternion
  nameWithType: DQuaternion.DQuaternion
  fullName: Vim.Math3d.DQuaternion.DQuaternion
- uid: System.ValueTuple{System.Double,System.Double,System.Double,System.Double}
  commentId: T:System.ValueTuple{System.Double,System.Double,System.Double,System.Double}
  parent: System
  definition: System.ValueTuple`4
  name: (T1, T2, T3, T4)<Double, Double, Double, Double>
  nameWithType: (T1, T2, T3, T4)<Double, Double, Double, Double>
  fullName: System.ValueTuple<System.Double, System.Double, System.Double, System.Double>
  nameWithType.vb: (T1, T2, T3, T4)(Of Double, Double, Double, Double)
  fullName.vb: System.ValueTuple(Of System.Double, System.Double, System.Double, System.Double)
  name.vb: (T1, T2, T3, T4)(Of Double, Double, Double, Double)
  spec.csharp:
  - uid: System.ValueTuple`4
    name: (T1, T2, T3, T4)
    nameWithType: (T1, T2, T3, T4)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`4
    name: (T1, T2, T3, T4)
    nameWithType: (T1, T2, T3, T4)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple`4
  commentId: T:System.ValueTuple`4
  isExternal: true
  name: (T1, T2, T3, T4)<T1, T2, T3, T4>
  nameWithType: (T1, T2, T3, T4)<T1, T2, T3, T4>
  fullName: System.ValueTuple<T1, T2, T3, T4>
  nameWithType.vb: (T1, T2, T3, T4)(Of T1, T2, T3, T4)
  fullName.vb: System.ValueTuple(Of T1, T2, T3, T4)
  name.vb: (T1, T2, T3, T4)(Of T1, T2, T3, T4)
  spec.csharp:
  - uid: System.ValueTuple`4
    name: (T1, T2, T3, T4)
    nameWithType: (T1, T2, T3, T4)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`4
    name: (T1, T2, T3, T4)
    nameWithType: (T1, T2, T3, T4)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.DQuaternion.Create*
  commentId: Overload:Vim.Math3d.DQuaternion.Create
  name: Create
  nameWithType: DQuaternion.Create
  fullName: Vim.Math3d.DQuaternion.Create
- uid: Vim.Math3d.DQuaternion
  commentId: T:Vim.Math3d.DQuaternion
  parent: Vim.Math3d
  name: DQuaternion
  nameWithType: DQuaternion
  fullName: Vim.Math3d.DQuaternion
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.DQuaternion.Equals*
  commentId: Overload:Vim.Math3d.DQuaternion.Equals
  name: Equals
  nameWithType: DQuaternion.Equals
  fullName: Vim.Math3d.DQuaternion.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.DQuaternion.GetHashCode*
  commentId: Overload:Vim.Math3d.DQuaternion.GetHashCode
  name: GetHashCode
  nameWithType: DQuaternion.GetHashCode
  fullName: Vim.Math3d.DQuaternion.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.DQuaternion.ToString*
  commentId: Overload:Vim.Math3d.DQuaternion.ToString
  name: ToString
  nameWithType: DQuaternion.ToString
  fullName: Vim.Math3d.DQuaternion.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Vim.Math3d.DQuaternion.Deconstruct*
  commentId: Overload:Vim.Math3d.DQuaternion.Deconstruct
  name: Deconstruct
  nameWithType: DQuaternion.Deconstruct
  fullName: Vim.Math3d.DQuaternion.Deconstruct
- uid: System.IEquatable{Vim.Math3d.DQuaternion}.Equals(Vim.Math3d.DQuaternion)
  commentId: M:System.IEquatable{Vim.Math3d.DQuaternion}.Equals(Vim.Math3d.DQuaternion)
  parent: System.IEquatable{Vim.Math3d.DQuaternion}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(DQuaternion)
  nameWithType: IEquatable<DQuaternion>.Equals(DQuaternion)
  fullName: System.IEquatable<Vim.Math3d.DQuaternion>.Equals(Vim.Math3d.DQuaternion)
  nameWithType.vb: IEquatable(Of DQuaternion).Equals(DQuaternion)
  fullName.vb: System.IEquatable(Of Vim.Math3d.DQuaternion).Equals(Vim.Math3d.DQuaternion)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<DQuaternion>.Equals
    fullName: System.IEquatable<Vim.Math3d.DQuaternion>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.DQuaternion
    name: DQuaternion
    nameWithType: DQuaternion
    fullName: Vim.Math3d.DQuaternion
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of DQuaternion).Equals
    fullName: System.IEquatable(Of Vim.Math3d.DQuaternion).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.DQuaternion
    name: DQuaternion
    nameWithType: DQuaternion
    fullName: Vim.Math3d.DQuaternion
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.DQuaternion.op_Equality*
  commentId: Overload:Vim.Math3d.DQuaternion.op_Equality
  name: Equality
  nameWithType: DQuaternion.Equality
  fullName: Vim.Math3d.DQuaternion.Equality
- uid: Vim.Math3d.DQuaternion.op_Inequality*
  commentId: Overload:Vim.Math3d.DQuaternion.op_Inequality
  name: Inequality
  nameWithType: DQuaternion.Inequality
  fullName: Vim.Math3d.DQuaternion.Inequality
- uid: Vim.Math3d.DQuaternion.op_Implicit*
  commentId: Overload:Vim.Math3d.DQuaternion.op_Implicit
  name: Implicit
  nameWithType: DQuaternion.Implicit
  fullName: Vim.Math3d.DQuaternion.Implicit
  nameWithType.vb: DQuaternion.Widening
  fullName.vb: Vim.Math3d.DQuaternion.Widening
  name.vb: Widening
- uid: Vim.Math3d.DQuaternion.AlmostEquals*
  commentId: Overload:Vim.Math3d.DQuaternion.AlmostEquals
  name: AlmostEquals
  nameWithType: DQuaternion.AlmostEquals
  fullName: Vim.Math3d.DQuaternion.AlmostEquals
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Vim.Math3d.DQuaternion.SetX*
  commentId: Overload:Vim.Math3d.DQuaternion.SetX
  name: SetX
  nameWithType: DQuaternion.SetX
  fullName: Vim.Math3d.DQuaternion.SetX
- uid: Vim.Math3d.DQuaternion.SetY*
  commentId: Overload:Vim.Math3d.DQuaternion.SetY
  name: SetY
  nameWithType: DQuaternion.SetY
  fullName: Vim.Math3d.DQuaternion.SetY
- uid: Vim.Math3d.DQuaternion.SetZ*
  commentId: Overload:Vim.Math3d.DQuaternion.SetZ
  name: SetZ
  nameWithType: DQuaternion.SetZ
  fullName: Vim.Math3d.DQuaternion.SetZ
- uid: Vim.Math3d.DQuaternion.SetW*
  commentId: Overload:Vim.Math3d.DQuaternion.SetW
  name: SetW
  nameWithType: DQuaternion.SetW
  fullName: Vim.Math3d.DQuaternion.SetW
- uid: Vim.Math3d.DQuaternion.Quaternion*
  commentId: Overload:Vim.Math3d.DQuaternion.Quaternion
  name: Quaternion
  nameWithType: DQuaternion.Quaternion
  fullName: Vim.Math3d.DQuaternion.Quaternion
- uid: Vim.Math3d.Quaternion
  commentId: T:Vim.Math3d.Quaternion
  parent: Vim.Math3d
  name: Quaternion
  nameWithType: Quaternion
  fullName: Vim.Math3d.Quaternion
- uid: Vim.Math3d.DQuaternion.DVector4*
  commentId: Overload:Vim.Math3d.DQuaternion.DVector4
  name: DVector4
  nameWithType: DQuaternion.DVector4
  fullName: Vim.Math3d.DQuaternion.DVector4
- uid: Vim.Math3d.DVector4
  commentId: T:Vim.Math3d.DVector4
  parent: Vim.Math3d
  name: DVector4
  nameWithType: DVector4
  fullName: Vim.Math3d.DVector4

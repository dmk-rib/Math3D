### YamlMime:ManagedReference
items:
- uid: Vim.Math3d.Matrix4x4
  commentId: T:Vim.Math3d.Matrix4x4
  id: Matrix4x4
  parent: Vim.Math3d
  children:
  - Vim.Math3d.Matrix4x4.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  - Vim.Math3d.Matrix4x4.Add(Vim.Math3d.Matrix4x4,Vim.Math3d.Matrix4x4)
  - Vim.Math3d.Matrix4x4.Col0
  - Vim.Math3d.Matrix4x4.Col1
  - Vim.Math3d.Matrix4x4.Col2
  - Vim.Math3d.Matrix4x4.Col3
  - Vim.Math3d.Matrix4x4.CreateBillboard(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  - Vim.Math3d.Matrix4x4.CreateConstrainedBillboard(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  - Vim.Math3d.Matrix4x4.CreateFromAxisAngle(Vim.Math3d.Vector3,System.Single)
  - Vim.Math3d.Matrix4x4.CreateFromQuaternion(Vim.Math3d.Quaternion)
  - Vim.Math3d.Matrix4x4.CreateFromRows(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  - Vim.Math3d.Matrix4x4.CreateFromRows(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  - Vim.Math3d.Matrix4x4.CreateFromRows(Vim.Math3d.Vector4,Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  - Vim.Math3d.Matrix4x4.CreateFromRows(Vim.Math3d.Vector4,Vim.Math3d.Vector4,Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  - Vim.Math3d.Matrix4x4.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)
  - Vim.Math3d.Matrix4x4.CreateLookAt(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  - Vim.Math3d.Matrix4x4.CreateOrthographic(System.Single,System.Single,System.Single,System.Single)
  - Vim.Math3d.Matrix4x4.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  - Vim.Math3d.Matrix4x4.CreatePerspective(System.Single,System.Single,System.Single,System.Single)
  - Vim.Math3d.Matrix4x4.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single)
  - Vim.Math3d.Matrix4x4.CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  - Vim.Math3d.Matrix4x4.CreateReflection(Vim.Math3d.Plane)
  - Vim.Math3d.Matrix4x4.CreateRotation(Vim.Math3d.Quaternion)
  - Vim.Math3d.Matrix4x4.CreateRotationX(System.Single)
  - Vim.Math3d.Matrix4x4.CreateRotationX(System.Single,Vim.Math3d.Vector3)
  - Vim.Math3d.Matrix4x4.CreateRotationY(System.Single)
  - Vim.Math3d.Matrix4x4.CreateRotationY(System.Single,Vim.Math3d.Vector3)
  - Vim.Math3d.Matrix4x4.CreateRotationZ(System.Single)
  - Vim.Math3d.Matrix4x4.CreateRotationZ(System.Single,Vim.Math3d.Vector3)
  - Vim.Math3d.Matrix4x4.CreateScale(System.Single)
  - Vim.Math3d.Matrix4x4.CreateScale(System.Single,System.Single,System.Single)
  - Vim.Math3d.Matrix4x4.CreateScale(System.Single,System.Single,System.Single,Vim.Math3d.Vector3)
  - Vim.Math3d.Matrix4x4.CreateScale(System.Single,Vim.Math3d.Vector3)
  - Vim.Math3d.Matrix4x4.CreateScale(Vim.Math3d.Vector3)
  - Vim.Math3d.Matrix4x4.CreateScale(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  - Vim.Math3d.Matrix4x4.CreateShadow(Vim.Math3d.Vector3,Vim.Math3d.Plane)
  - Vim.Math3d.Matrix4x4.CreateTranslation(System.Single,System.Single,System.Single)
  - Vim.Math3d.Matrix4x4.CreateTranslation(Vim.Math3d.Vector3)
  - Vim.Math3d.Matrix4x4.CreateTRS(Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
  - Vim.Math3d.Matrix4x4.CreateWorld(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  - Vim.Math3d.Matrix4x4.Decompose(Vim.Math3d.Matrix4x4,Vim.Math3d.Vector3@,Vim.Math3d.Quaternion@,Vim.Math3d.Vector3@)
  - Vim.Math3d.Matrix4x4.Decompose(Vim.Math3d.Vector3@,Vim.Math3d.Quaternion@,Vim.Math3d.Vector3@)
  - Vim.Math3d.Matrix4x4.Equals(System.Object)
  - Vim.Math3d.Matrix4x4.Equals(Vim.Math3d.Matrix4x4)
  - Vim.Math3d.Matrix4x4.ExtractDirectScale
  - Vim.Math3d.Matrix4x4.Get3x3RotationDeterminant
  - Vim.Math3d.Matrix4x4.GetCol(System.Int32)
  - Vim.Math3d.Matrix4x4.GetDeterminant
  - Vim.Math3d.Matrix4x4.GetHashCode
  - Vim.Math3d.Matrix4x4.GetRow(System.Int32)
  - Vim.Math3d.Matrix4x4.Identity
  - Vim.Math3d.Matrix4x4.Invert(Vim.Math3d.Matrix4x4,Vim.Math3d.Matrix4x4@)
  - Vim.Math3d.Matrix4x4.IsIdentity
  - Vim.Math3d.Matrix4x4.IsReflection
  - Vim.Math3d.Matrix4x4.Lerp(Vim.Math3d.Matrix4x4,Vim.Math3d.Matrix4x4,System.Single)
  - Vim.Math3d.Matrix4x4.M11
  - Vim.Math3d.Matrix4x4.M12
  - Vim.Math3d.Matrix4x4.M13
  - Vim.Math3d.Matrix4x4.M14
  - Vim.Math3d.Matrix4x4.M21
  - Vim.Math3d.Matrix4x4.M22
  - Vim.Math3d.Matrix4x4.M23
  - Vim.Math3d.Matrix4x4.M24
  - Vim.Math3d.Matrix4x4.M31
  - Vim.Math3d.Matrix4x4.M32
  - Vim.Math3d.Matrix4x4.M33
  - Vim.Math3d.Matrix4x4.M34
  - Vim.Math3d.Matrix4x4.M41
  - Vim.Math3d.Matrix4x4.M42
  - Vim.Math3d.Matrix4x4.M43
  - Vim.Math3d.Matrix4x4.M44
  - Vim.Math3d.Matrix4x4.Multiply(Vim.Math3d.Matrix4x4,System.Single)
  - Vim.Math3d.Matrix4x4.Multiply(Vim.Math3d.Matrix4x4,Vim.Math3d.Matrix4x4)
  - Vim.Math3d.Matrix4x4.Negate(Vim.Math3d.Matrix4x4)
  - Vim.Math3d.Matrix4x4.op_Addition(Vim.Math3d.Matrix4x4,Vim.Math3d.Matrix4x4)
  - Vim.Math3d.Matrix4x4.op_Equality(Vim.Math3d.Matrix4x4,Vim.Math3d.Matrix4x4)
  - Vim.Math3d.Matrix4x4.op_Inequality(Vim.Math3d.Matrix4x4,Vim.Math3d.Matrix4x4)
  - Vim.Math3d.Matrix4x4.op_Multiply(Vim.Math3d.Matrix4x4,System.Single)
  - Vim.Math3d.Matrix4x4.op_Multiply(Vim.Math3d.Matrix4x4,Vim.Math3d.Matrix4x4)
  - Vim.Math3d.Matrix4x4.op_Subtraction(Vim.Math3d.Matrix4x4,Vim.Math3d.Matrix4x4)
  - Vim.Math3d.Matrix4x4.op_UnaryNegation(Vim.Math3d.Matrix4x4)
  - Vim.Math3d.Matrix4x4.Row0
  - Vim.Math3d.Matrix4x4.Row1
  - Vim.Math3d.Matrix4x4.Row2
  - Vim.Math3d.Matrix4x4.Row3
  - Vim.Math3d.Matrix4x4.ScaleTranslation(System.Single)
  - Vim.Math3d.Matrix4x4.SetTranslation(Vim.Math3d.Vector3)
  - Vim.Math3d.Matrix4x4.Subtract(Vim.Math3d.Matrix4x4,Vim.Math3d.Matrix4x4)
  - Vim.Math3d.Matrix4x4.ToString
  - Vim.Math3d.Matrix4x4.Transform(Vim.Math3d.Matrix4x4)
  - Vim.Math3d.Matrix4x4.Transform(Vim.Math3d.Matrix4x4,Vim.Math3d.Quaternion)
  - Vim.Math3d.Matrix4x4.Translation
  - Vim.Math3d.Matrix4x4.Transpose
  - Vim.Math3d.Matrix4x4.Transpose(Vim.Math3d.Matrix4x4)
  langs:
  - csharp
  - vb
  name: Matrix4x4
  nameWithType: Matrix4x4
  fullName: Vim.Math3d.Matrix4x4
  type: Struct
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Matrix4x4
    path: ../src/Matrix4x4.cs
    startLine: 20
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nA structure encapsulating a 4x4 matrix.\n"
  example: []
  syntax:
    content: >-
      [DataContract]

      public struct Matrix4x4 : IEquatable<Matrix4x4>, ITransformable3D<Matrix4x4>
    content.vb: >-
      <DataContract>

      Public Structure Matrix4x4
          Implements IEquatable(Of Matrix4x4), ITransformable3D(Of Matrix4x4)
  implements:
  - System.IEquatable{Vim.Math3d.Matrix4x4}
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Matrix4x4}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Matrix4x4}.Vim.Math3d.Transformable3D.Transform``1(Vim.Math3d.Matrix4x4[])
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Matrix4x4}.Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.Vector3)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Matrix4x4}.Vim.Math3d.Transformable3D.Translate``1(System.Single,System.Single,System.Single)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Matrix4x4}.Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.Quaternion)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Matrix4x4}.Vim.Math3d.Transformable3D.Scale``1(System.Single)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Matrix4x4}.Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.Vector3)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Matrix4x4}.Vim.Math3d.Transformable3D.Scale``1(System.Single,System.Single,System.Single)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Matrix4x4}.Vim.Math3d.Transformable3D.ScaleX``1(System.Single)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Matrix4x4}.Vim.Math3d.Transformable3D.ScaleY``1(System.Single)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Matrix4x4}.Vim.Math3d.Transformable3D.ScaleZ``1(System.Single)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Matrix4x4}.Vim.Math3d.Transformable3D.LookAt``1(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Matrix4x4}.Vim.Math3d.Transformable3D.RotateAround``1(Vim.Math3d.Vector3,System.Single)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Matrix4x4}.Vim.Math3d.Transformable3D.Rotate``1(System.Single,System.Single,System.Single)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Matrix4x4}.Vim.Math3d.Transformable3D.Reflect``1(Vim.Math3d.Plane)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Matrix4x4}.Vim.Math3d.Transformable3D.RotateX``1(System.Single)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Matrix4x4}.Vim.Math3d.Transformable3D.RotateY``1(System.Single)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Matrix4x4}.Vim.Math3d.Transformable3D.RotateZ``1(System.Single)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Matrix4x4}.Vim.Math3d.Transformable3D.TranslateRotateScale``1(Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
  - Vim.Math3d.Matrix4x4.Vim.Math3d.MathOps.ToFloats
  - Vim.Math3d.Matrix4x4.Vim.Math3d.MathOps.RayFromProjectionMatrix(Vim.Math3d.Vector2)
  - Vim.Math3d.Matrix4x4.Vim.Math3d.MathOps.Inverse
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Vim.Math3d.Matrix4x4.Col0
  commentId: P:Vim.Math3d.Matrix4x4.Col0
  id: Col0
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: Col0
  nameWithType: Matrix4x4.Col0
  fullName: Vim.Math3d.Matrix4x4.Col0
  type: Property
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Col0
    path: ../src/Matrix4x4.cs
    startLine: 23
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly Vector3 Col0 { get; }
    parameters: []
    return:
      type: Vim.Math3d.Vector3
    content.vb: Public ReadOnly Property Col0 As Vector3
  overload: Vim.Math3d.Matrix4x4.Col0*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.Matrix4x4.Col1
  commentId: P:Vim.Math3d.Matrix4x4.Col1
  id: Col1
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: Col1
  nameWithType: Matrix4x4.Col1
  fullName: Vim.Math3d.Matrix4x4.Col1
  type: Property
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Col1
    path: ../src/Matrix4x4.cs
    startLine: 24
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly Vector3 Col1 { get; }
    parameters: []
    return:
      type: Vim.Math3d.Vector3
    content.vb: Public ReadOnly Property Col1 As Vector3
  overload: Vim.Math3d.Matrix4x4.Col1*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.Matrix4x4.Col2
  commentId: P:Vim.Math3d.Matrix4x4.Col2
  id: Col2
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: Col2
  nameWithType: Matrix4x4.Col2
  fullName: Vim.Math3d.Matrix4x4.Col2
  type: Property
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Col2
    path: ../src/Matrix4x4.cs
    startLine: 25
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly Vector3 Col2 { get; }
    parameters: []
    return:
      type: Vim.Math3d.Vector3
    content.vb: Public ReadOnly Property Col2 As Vector3
  overload: Vim.Math3d.Matrix4x4.Col2*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.Matrix4x4.Col3
  commentId: P:Vim.Math3d.Matrix4x4.Col3
  id: Col3
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: Col3
  nameWithType: Matrix4x4.Col3
  fullName: Vim.Math3d.Matrix4x4.Col3
  type: Property
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Col3
    path: ../src/Matrix4x4.cs
    startLine: 26
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly Vector3 Col3 { get; }
    parameters: []
    return:
      type: Vim.Math3d.Vector3
    content.vb: Public ReadOnly Property Col3 As Vector3
  overload: Vim.Math3d.Matrix4x4.Col3*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.Matrix4x4.Row0
  commentId: P:Vim.Math3d.Matrix4x4.Row0
  id: Row0
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: Row0
  nameWithType: Matrix4x4.Row0
  fullName: Vim.Math3d.Matrix4x4.Row0
  type: Property
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Row0
    path: ../src/Matrix4x4.cs
    startLine: 28
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly Vector3 Row0 { get; }
    parameters: []
    return:
      type: Vim.Math3d.Vector3
    content.vb: Public ReadOnly Property Row0 As Vector3
  overload: Vim.Math3d.Matrix4x4.Row0*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.Matrix4x4.Row1
  commentId: P:Vim.Math3d.Matrix4x4.Row1
  id: Row1
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: Row1
  nameWithType: Matrix4x4.Row1
  fullName: Vim.Math3d.Matrix4x4.Row1
  type: Property
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Row1
    path: ../src/Matrix4x4.cs
    startLine: 29
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly Vector3 Row1 { get; }
    parameters: []
    return:
      type: Vim.Math3d.Vector3
    content.vb: Public ReadOnly Property Row1 As Vector3
  overload: Vim.Math3d.Matrix4x4.Row1*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.Matrix4x4.Row2
  commentId: P:Vim.Math3d.Matrix4x4.Row2
  id: Row2
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: Row2
  nameWithType: Matrix4x4.Row2
  fullName: Vim.Math3d.Matrix4x4.Row2
  type: Property
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Row2
    path: ../src/Matrix4x4.cs
    startLine: 30
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly Vector3 Row2 { get; }
    parameters: []
    return:
      type: Vim.Math3d.Vector3
    content.vb: Public ReadOnly Property Row2 As Vector3
  overload: Vim.Math3d.Matrix4x4.Row2*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.Matrix4x4.Row3
  commentId: P:Vim.Math3d.Matrix4x4.Row3
  id: Row3
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: Row3
  nameWithType: Matrix4x4.Row3
  fullName: Vim.Math3d.Matrix4x4.Row3
  type: Property
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Row3
    path: ../src/Matrix4x4.cs
    startLine: 31
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly Vector3 Row3 { get; }
    parameters: []
    return:
      type: Vim.Math3d.Vector3
    content.vb: Public ReadOnly Property Row3 As Vector3
  overload: Vim.Math3d.Matrix4x4.Row3*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.Matrix4x4.GetRow(System.Int32)
  commentId: M:Vim.Math3d.Matrix4x4.GetRow(System.Int32)
  id: GetRow(System.Int32)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: GetRow(Int32)
  nameWithType: Matrix4x4.GetRow(Int32)
  fullName: Vim.Math3d.Matrix4x4.GetRow(System.Int32)
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: GetRow
    path: ../src/Matrix4x4.cs
    startLine: 33
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public Vector3 GetRow(int row)
    parameters:
    - id: row
      type: System.Int32
    return:
      type: Vim.Math3d.Vector3
    content.vb: Public Function GetRow(row As Integer) As Vector3
  overload: Vim.Math3d.Matrix4x4.GetRow*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Matrix4x4.GetCol(System.Int32)
  commentId: M:Vim.Math3d.Matrix4x4.GetCol(System.Int32)
  id: GetCol(System.Int32)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: GetCol(Int32)
  nameWithType: Matrix4x4.GetCol(Int32)
  fullName: Vim.Math3d.Matrix4x4.GetCol(System.Int32)
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: GetCol
    path: ../src/Matrix4x4.cs
    startLine: 36
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public Vector3 GetCol(int col)
    parameters:
    - id: col
      type: System.Int32
    return:
      type: Vim.Math3d.Vector3
    content.vb: Public Function GetCol(col As Integer) As Vector3
  overload: Vim.Math3d.Matrix4x4.GetCol*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Matrix4x4.M11
  commentId: F:Vim.Math3d.Matrix4x4.M11
  id: M11
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: M11
  nameWithType: Matrix4x4.M11
  fullName: Vim.Math3d.Matrix4x4.M11
  type: Field
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: M11
    path: ../src/Matrix4x4.cs
    startLine: 42
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nValue at row 1, column 1 of the matrix.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public float M11
    return:
      type: System.Single
    content.vb: >-
      <DataMember>

      Public M11 As Single
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Matrix4x4.M12
  commentId: F:Vim.Math3d.Matrix4x4.M12
  id: M12
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: M12
  nameWithType: Matrix4x4.M12
  fullName: Vim.Math3d.Matrix4x4.M12
  type: Field
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: M12
    path: ../src/Matrix4x4.cs
    startLine: 46
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nValue at row 1, column 2 of the matrix.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public float M12
    return:
      type: System.Single
    content.vb: >-
      <DataMember>

      Public M12 As Single
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Matrix4x4.M13
  commentId: F:Vim.Math3d.Matrix4x4.M13
  id: M13
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: M13
  nameWithType: Matrix4x4.M13
  fullName: Vim.Math3d.Matrix4x4.M13
  type: Field
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: M13
    path: ../src/Matrix4x4.cs
    startLine: 50
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nValue at row 1, column 3 of the matrix.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public float M13
    return:
      type: System.Single
    content.vb: >-
      <DataMember>

      Public M13 As Single
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Matrix4x4.M14
  commentId: F:Vim.Math3d.Matrix4x4.M14
  id: M14
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: M14
  nameWithType: Matrix4x4.M14
  fullName: Vim.Math3d.Matrix4x4.M14
  type: Field
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: M14
    path: ../src/Matrix4x4.cs
    startLine: 54
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nValue at row 1, column 4 of the matrix.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public float M14
    return:
      type: System.Single
    content.vb: >-
      <DataMember>

      Public M14 As Single
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Matrix4x4.M21
  commentId: F:Vim.Math3d.Matrix4x4.M21
  id: M21
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: M21
  nameWithType: Matrix4x4.M21
  fullName: Vim.Math3d.Matrix4x4.M21
  type: Field
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: M21
    path: ../src/Matrix4x4.cs
    startLine: 59
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nValue at row 2, column 1 of the matrix.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public float M21
    return:
      type: System.Single
    content.vb: >-
      <DataMember>

      Public M21 As Single
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Matrix4x4.M22
  commentId: F:Vim.Math3d.Matrix4x4.M22
  id: M22
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: M22
  nameWithType: Matrix4x4.M22
  fullName: Vim.Math3d.Matrix4x4.M22
  type: Field
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: M22
    path: ../src/Matrix4x4.cs
    startLine: 63
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nValue at row 2, column 2 of the matrix.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public float M22
    return:
      type: System.Single
    content.vb: >-
      <DataMember>

      Public M22 As Single
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Matrix4x4.M23
  commentId: F:Vim.Math3d.Matrix4x4.M23
  id: M23
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: M23
  nameWithType: Matrix4x4.M23
  fullName: Vim.Math3d.Matrix4x4.M23
  type: Field
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: M23
    path: ../src/Matrix4x4.cs
    startLine: 67
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nValue at row 2, column 3 of the matrix.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public float M23
    return:
      type: System.Single
    content.vb: >-
      <DataMember>

      Public M23 As Single
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Matrix4x4.M24
  commentId: F:Vim.Math3d.Matrix4x4.M24
  id: M24
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: M24
  nameWithType: Matrix4x4.M24
  fullName: Vim.Math3d.Matrix4x4.M24
  type: Field
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: M24
    path: ../src/Matrix4x4.cs
    startLine: 71
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nValue at row 2, column 4 of the matrix.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public float M24
    return:
      type: System.Single
    content.vb: >-
      <DataMember>

      Public M24 As Single
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Matrix4x4.M31
  commentId: F:Vim.Math3d.Matrix4x4.M31
  id: M31
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: M31
  nameWithType: Matrix4x4.M31
  fullName: Vim.Math3d.Matrix4x4.M31
  type: Field
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: M31
    path: ../src/Matrix4x4.cs
    startLine: 76
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nValue at row 3, column 1 of the matrix.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public float M31
    return:
      type: System.Single
    content.vb: >-
      <DataMember>

      Public M31 As Single
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Matrix4x4.M32
  commentId: F:Vim.Math3d.Matrix4x4.M32
  id: M32
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: M32
  nameWithType: Matrix4x4.M32
  fullName: Vim.Math3d.Matrix4x4.M32
  type: Field
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: M32
    path: ../src/Matrix4x4.cs
    startLine: 80
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nValue at row 3, column 2 of the matrix.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public float M32
    return:
      type: System.Single
    content.vb: >-
      <DataMember>

      Public M32 As Single
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Matrix4x4.M33
  commentId: F:Vim.Math3d.Matrix4x4.M33
  id: M33
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: M33
  nameWithType: Matrix4x4.M33
  fullName: Vim.Math3d.Matrix4x4.M33
  type: Field
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: M33
    path: ../src/Matrix4x4.cs
    startLine: 84
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nValue at row 3, column 3 of the matrix.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public float M33
    return:
      type: System.Single
    content.vb: >-
      <DataMember>

      Public M33 As Single
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Matrix4x4.M34
  commentId: F:Vim.Math3d.Matrix4x4.M34
  id: M34
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: M34
  nameWithType: Matrix4x4.M34
  fullName: Vim.Math3d.Matrix4x4.M34
  type: Field
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: M34
    path: ../src/Matrix4x4.cs
    startLine: 88
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nValue at row 3, column 4 of the matrix.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public float M34
    return:
      type: System.Single
    content.vb: >-
      <DataMember>

      Public M34 As Single
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Matrix4x4.M41
  commentId: F:Vim.Math3d.Matrix4x4.M41
  id: M41
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: M41
  nameWithType: Matrix4x4.M41
  fullName: Vim.Math3d.Matrix4x4.M41
  type: Field
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: M41
    path: ../src/Matrix4x4.cs
    startLine: 93
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nValue at row 4, column 1 of the matrix.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public float M41
    return:
      type: System.Single
    content.vb: >-
      <DataMember>

      Public M41 As Single
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Matrix4x4.M42
  commentId: F:Vim.Math3d.Matrix4x4.M42
  id: M42
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: M42
  nameWithType: Matrix4x4.M42
  fullName: Vim.Math3d.Matrix4x4.M42
  type: Field
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: M42
    path: ../src/Matrix4x4.cs
    startLine: 97
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nValue at row 4, column 2 of the matrix.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public float M42
    return:
      type: System.Single
    content.vb: >-
      <DataMember>

      Public M42 As Single
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Matrix4x4.M43
  commentId: F:Vim.Math3d.Matrix4x4.M43
  id: M43
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: M43
  nameWithType: Matrix4x4.M43
  fullName: Vim.Math3d.Matrix4x4.M43
  type: Field
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: M43
    path: ../src/Matrix4x4.cs
    startLine: 101
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nValue at row 4, column 3 of the matrix.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public float M43
    return:
      type: System.Single
    content.vb: >-
      <DataMember>

      Public M43 As Single
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Matrix4x4.M44
  commentId: F:Vim.Math3d.Matrix4x4.M44
  id: M44
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: M44
  nameWithType: Matrix4x4.M44
  fullName: Vim.Math3d.Matrix4x4.M44
  type: Field
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: M44
    path: ../src/Matrix4x4.cs
    startLine: 105
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nValue at row 4, column 4 of the matrix.\n"
  example: []
  syntax:
    content: >-
      [DataMember]

      public float M44
    return:
      type: System.Single
    content.vb: >-
      <DataMember>

      Public M44 As Single
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Matrix4x4.Identity
  commentId: F:Vim.Math3d.Matrix4x4.Identity
  id: Identity
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: Identity
  nameWithType: Matrix4x4.Identity
  fullName: Vim.Math3d.Matrix4x4.Identity
  type: Field
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Identity
    path: ../src/Matrix4x4.cs
    startLine: 110
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nReturns the multiplicative identity matrix.\n"
  example: []
  syntax:
    content: public static Matrix4x4 Identity
    return:
      type: Vim.Math3d.Matrix4x4
    content.vb: Public Shared Identity As Matrix4x4
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Matrix4x4.IsIdentity
  commentId: P:Vim.Math3d.Matrix4x4.IsIdentity
  id: IsIdentity
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: IsIdentity
  nameWithType: Matrix4x4.IsIdentity
  fullName: Vim.Math3d.Matrix4x4.IsIdentity
  type: Property
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: IsIdentity
    path: ../src/Matrix4x4.cs
    startLine: 121
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nReturns whether the matrix is the identity matrix.\n"
  example: []
  syntax:
    content: public readonly bool IsIdentity { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsIdentity As Boolean
  overload: Vim.Math3d.Matrix4x4.IsIdentity*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.Matrix4x4.Translation
  commentId: P:Vim.Math3d.Matrix4x4.Translation
  id: Translation
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: Translation
  nameWithType: Matrix4x4.Translation
  fullName: Vim.Math3d.Matrix4x4.Translation
  type: Property
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Translation
    path: ../src/Matrix4x4.cs
    startLine: 131
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nGets the translation component of this matrix.\n"
  example: []
  syntax:
    content: public readonly Vector3 Translation { get; }
    parameters: []
    return:
      type: Vim.Math3d.Vector3
    content.vb: Public ReadOnly Property Translation As Vector3
  overload: Vim.Math3d.Matrix4x4.Translation*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.Matrix4x4.SetTranslation(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Matrix4x4.SetTranslation(Vim.Math3d.Vector3)
  id: SetTranslation(Vim.Math3d.Vector3)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: SetTranslation(Vector3)
  nameWithType: Matrix4x4.SetTranslation(Vector3)
  fullName: Vim.Math3d.Matrix4x4.SetTranslation(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SetTranslation
    path: ../src/Matrix4x4.cs
    startLine: 137
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nSets the translation component of this matrix, returning a new Matrix\n"
  example: []
  syntax:
    content: public Matrix4x4 SetTranslation(Vector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Matrix4x4
    content.vb: Public Function SetTranslation(v As Vector3) As Matrix4x4
  overload: Vim.Math3d.Matrix4x4.SetTranslation*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Matrix4x4.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  commentId: M:Vim.Math3d.Matrix4x4.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  id: '#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)'
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: Matrix4x4(Single, Single, Single, Single, Single, Single, Single, Single, Single, Single, Single, Single, Single, Single, Single, Single)
  nameWithType: Matrix4x4.Matrix4x4(Single, Single, Single, Single, Single, Single, Single, Single, Single, Single, Single, Single, Single, Single, Single, Single)
  fullName: Vim.Math3d.Matrix4x4.Matrix4x4(System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single)
  type: Constructor
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: .ctor
    path: ../src/Matrix4x4.cs
    startLine: 144
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nConstructs a Matrix4x4 from the given components.\n"
  example: []
  syntax:
    content: public Matrix4x4(float m11, float m12, float m13, float m14, float m21, float m22, float m23, float m24, float m31, float m32, float m33, float m34, float m41, float m42, float m43, float m44)
    parameters:
    - id: m11
      type: System.Single
    - id: m12
      type: System.Single
    - id: m13
      type: System.Single
    - id: m14
      type: System.Single
    - id: m21
      type: System.Single
    - id: m22
      type: System.Single
    - id: m23
      type: System.Single
    - id: m24
      type: System.Single
    - id: m31
      type: System.Single
    - id: m32
      type: System.Single
    - id: m33
      type: System.Single
    - id: m34
      type: System.Single
    - id: m41
      type: System.Single
    - id: m42
      type: System.Single
    - id: m43
      type: System.Single
    - id: m44
      type: System.Single
    content.vb: Public Sub New(m11 As Single, m12 As Single, m13 As Single, m14 As Single, m21 As Single, m22 As Single, m23 As Single, m24 As Single, m31 As Single, m32 As Single, m33 As Single, m34 As Single, m41 As Single, m42 As Single, m43 As Single, m44 As Single)
  overload: Vim.Math3d.Matrix4x4.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Matrix4x4.CreateFromRows(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Matrix4x4.CreateFromRows(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  id: CreateFromRows(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: CreateFromRows(Vector3, Vector3, Vector3)
  nameWithType: Matrix4x4.CreateFromRows(Vector3, Vector3, Vector3)
  fullName: Vim.Math3d.Matrix4x4.CreateFromRows(Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: CreateFromRows
    path: ../src/Matrix4x4.cs
    startLine: 171
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Matrix4x4 CreateFromRows(Vector3 row0, Vector3 row1, Vector3 row2)
    parameters:
    - id: row0
      type: Vim.Math3d.Vector3
    - id: row1
      type: Vim.Math3d.Vector3
    - id: row2
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Matrix4x4
    content.vb: Public Shared Function CreateFromRows(row0 As Vector3, row1 As Vector3, row2 As Vector3) As Matrix4x4
  overload: Vim.Math3d.Matrix4x4.CreateFromRows*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Matrix4x4.CreateFromRows(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Matrix4x4.CreateFromRows(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  id: CreateFromRows(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: CreateFromRows(Vector3, Vector3, Vector3, Vector3)
  nameWithType: Matrix4x4.CreateFromRows(Vector3, Vector3, Vector3, Vector3)
  fullName: Vim.Math3d.Matrix4x4.CreateFromRows(Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: CreateFromRows
    path: ../src/Matrix4x4.cs
    startLine: 175
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Matrix4x4 CreateFromRows(Vector3 row0, Vector3 row1, Vector3 row2, Vector3 row3)
    parameters:
    - id: row0
      type: Vim.Math3d.Vector3
    - id: row1
      type: Vim.Math3d.Vector3
    - id: row2
      type: Vim.Math3d.Vector3
    - id: row3
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Matrix4x4
    content.vb: Public Shared Function CreateFromRows(row0 As Vector3, row1 As Vector3, row2 As Vector3, row3 As Vector3) As Matrix4x4
  overload: Vim.Math3d.Matrix4x4.CreateFromRows*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Matrix4x4.CreateFromRows(Vim.Math3d.Vector4,Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  commentId: M:Vim.Math3d.Matrix4x4.CreateFromRows(Vim.Math3d.Vector4,Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  id: CreateFromRows(Vim.Math3d.Vector4,Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: CreateFromRows(Vector4, Vector4, Vector4)
  nameWithType: Matrix4x4.CreateFromRows(Vector4, Vector4, Vector4)
  fullName: Vim.Math3d.Matrix4x4.CreateFromRows(Vim.Math3d.Vector4, Vim.Math3d.Vector4, Vim.Math3d.Vector4)
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: CreateFromRows
    path: ../src/Matrix4x4.cs
    startLine: 179
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Matrix4x4 CreateFromRows(Vector4 row0, Vector4 row1, Vector4 row2)
    parameters:
    - id: row0
      type: Vim.Math3d.Vector4
    - id: row1
      type: Vim.Math3d.Vector4
    - id: row2
      type: Vim.Math3d.Vector4
    return:
      type: Vim.Math3d.Matrix4x4
    content.vb: Public Shared Function CreateFromRows(row0 As Vector4, row1 As Vector4, row2 As Vector4) As Matrix4x4
  overload: Vim.Math3d.Matrix4x4.CreateFromRows*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Matrix4x4.CreateFromRows(Vim.Math3d.Vector4,Vim.Math3d.Vector4,Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  commentId: M:Vim.Math3d.Matrix4x4.CreateFromRows(Vim.Math3d.Vector4,Vim.Math3d.Vector4,Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  id: CreateFromRows(Vim.Math3d.Vector4,Vim.Math3d.Vector4,Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: CreateFromRows(Vector4, Vector4, Vector4, Vector4)
  nameWithType: Matrix4x4.CreateFromRows(Vector4, Vector4, Vector4, Vector4)
  fullName: Vim.Math3d.Matrix4x4.CreateFromRows(Vim.Math3d.Vector4, Vim.Math3d.Vector4, Vim.Math3d.Vector4, Vim.Math3d.Vector4)
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: CreateFromRows
    path: ../src/Matrix4x4.cs
    startLine: 183
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Matrix4x4 CreateFromRows(Vector4 row0, Vector4 row1, Vector4 row2, Vector4 row3)
    parameters:
    - id: row0
      type: Vim.Math3d.Vector4
    - id: row1
      type: Vim.Math3d.Vector4
    - id: row2
      type: Vim.Math3d.Vector4
    - id: row3
      type: Vim.Math3d.Vector4
    return:
      type: Vim.Math3d.Matrix4x4
    content.vb: Public Shared Function CreateFromRows(row0 As Vector4, row1 As Vector4, row2 As Vector4, row3 As Vector4) As Matrix4x4
  overload: Vim.Math3d.Matrix4x4.CreateFromRows*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Matrix4x4.CreateBillboard(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Matrix4x4.CreateBillboard(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  id: CreateBillboard(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: CreateBillboard(Vector3, Vector3, Vector3, Vector3)
  nameWithType: Matrix4x4.CreateBillboard(Vector3, Vector3, Vector3, Vector3)
  fullName: Vim.Math3d.Matrix4x4.CreateBillboard(Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: CreateBillboard
    path: ../src/Matrix4x4.cs
    startLine: 193
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nCreates a spherical billboard that rotates around a specified object position.\n"
  example: []
  syntax:
    content: public static Matrix4x4 CreateBillboard(Vector3 objectPosition, Vector3 cameraPosition, Vector3 cameraUpVector, Vector3 cameraForwardVector)
    parameters:
    - id: objectPosition
      type: Vim.Math3d.Vector3
    - id: cameraPosition
      type: Vim.Math3d.Vector3
    - id: cameraUpVector
      type: Vim.Math3d.Vector3
    - id: cameraForwardVector
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Matrix4x4
    content.vb: Public Shared Function CreateBillboard(objectPosition As Vector3, cameraPosition As Vector3, cameraUpVector As Vector3, cameraForwardVector As Vector3) As Matrix4x4
  overload: Vim.Math3d.Matrix4x4.CreateBillboard*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Matrix4x4.CreateConstrainedBillboard(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Matrix4x4.CreateConstrainedBillboard(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  id: CreateConstrainedBillboard(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: CreateConstrainedBillboard(Vector3, Vector3, Vector3, Vector3, Vector3)
  nameWithType: Matrix4x4.CreateConstrainedBillboard(Vector3, Vector3, Vector3, Vector3, Vector3)
  fullName: Vim.Math3d.Matrix4x4.CreateConstrainedBillboard(Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: CreateConstrainedBillboard
    path: ../src/Matrix4x4.cs
    startLine: 243
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nCreates a cylindrical billboard that rotates around a specified axis.\n"
  example: []
  syntax:
    content: public static Matrix4x4 CreateConstrainedBillboard(Vector3 objectPosition, Vector3 cameraPosition, Vector3 rotateAxis, Vector3 cameraForwardVector, Vector3 objectForwardVector)
    parameters:
    - id: objectPosition
      type: Vim.Math3d.Vector3
    - id: cameraPosition
      type: Vim.Math3d.Vector3
    - id: rotateAxis
      type: Vim.Math3d.Vector3
    - id: cameraForwardVector
      type: Vim.Math3d.Vector3
    - id: objectForwardVector
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Matrix4x4
    content.vb: Public Shared Function CreateConstrainedBillboard(objectPosition As Vector3, cameraPosition As Vector3, rotateAxis As Vector3, cameraForwardVector As Vector3, objectForwardVector As Vector3) As Matrix4x4
  overload: Vim.Math3d.Matrix4x4.CreateConstrainedBillboard*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Matrix4x4.CreateTranslation(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Matrix4x4.CreateTranslation(Vim.Math3d.Vector3)
  id: CreateTranslation(Vim.Math3d.Vector3)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: CreateTranslation(Vector3)
  nameWithType: Matrix4x4.CreateTranslation(Vector3)
  fullName: Vim.Math3d.Matrix4x4.CreateTranslation(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: CreateTranslation
    path: ../src/Matrix4x4.cs
    startLine: 322
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nCreates a translation matrix.\n"
  example: []
  syntax:
    content: public static Matrix4x4 CreateTranslation(Vector3 position)
    parameters:
    - id: position
      type: Vim.Math3d.Vector3
      description: The amount to translate in each axis.
    return:
      type: Vim.Math3d.Matrix4x4
      description: The translation matrix.
    content.vb: Public Shared Function CreateTranslation(position As Vector3) As Matrix4x4
  overload: Vim.Math3d.Matrix4x4.CreateTranslation*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Matrix4x4.CreateTranslation(System.Single,System.Single,System.Single)
  commentId: M:Vim.Math3d.Matrix4x4.CreateTranslation(System.Single,System.Single,System.Single)
  id: CreateTranslation(System.Single,System.Single,System.Single)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: CreateTranslation(Single, Single, Single)
  nameWithType: Matrix4x4.CreateTranslation(Single, Single, Single)
  fullName: Vim.Math3d.Matrix4x4.CreateTranslation(System.Single, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: CreateTranslation
    path: ../src/Matrix4x4.cs
    startLine: 351
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nCreates a translation matrix.\n"
  example: []
  syntax:
    content: public static Matrix4x4 CreateTranslation(float x, float y, float z)
    parameters:
    - id: x
      type: System.Single
    - id: y
      type: System.Single
    - id: z
      type: System.Single
    return:
      type: Vim.Math3d.Matrix4x4
    content.vb: Public Shared Function CreateTranslation(x As Single, y As Single, z As Single) As Matrix4x4
  overload: Vim.Math3d.Matrix4x4.CreateTranslation*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Matrix4x4.CreateScale(System.Single,System.Single,System.Single)
  commentId: M:Vim.Math3d.Matrix4x4.CreateScale(System.Single,System.Single,System.Single)
  id: CreateScale(System.Single,System.Single,System.Single)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: CreateScale(Single, Single, Single)
  nameWithType: Matrix4x4.CreateScale(Single, Single, Single)
  fullName: Vim.Math3d.Matrix4x4.CreateScale(System.Single, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: CreateScale
    path: ../src/Matrix4x4.cs
    startLine: 362
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nCreates a scaling matrix.\n"
  example: []
  syntax:
    content: public static Matrix4x4 CreateScale(float xScale, float yScale, float zScale)
    parameters:
    - id: xScale
      type: System.Single
      description: Value to scale by on the X-axis.
    - id: yScale
      type: System.Single
      description: Value to scale by on the Y-axis.
    - id: zScale
      type: System.Single
      description: Value to scale by on the Z-axis.
    return:
      type: Vim.Math3d.Matrix4x4
      description: The scaling matrix.
    content.vb: Public Shared Function CreateScale(xScale As Single, yScale As Single, zScale As Single) As Matrix4x4
  overload: Vim.Math3d.Matrix4x4.CreateScale*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Matrix4x4.CreateScale(System.Single,System.Single,System.Single,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Matrix4x4.CreateScale(System.Single,System.Single,System.Single,Vim.Math3d.Vector3)
  id: CreateScale(System.Single,System.Single,System.Single,Vim.Math3d.Vector3)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: CreateScale(Single, Single, Single, Vector3)
  nameWithType: Matrix4x4.CreateScale(Single, Single, Single, Vector3)
  fullName: Vim.Math3d.Matrix4x4.CreateScale(System.Single, System.Single, System.Single, Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: CreateScale
    path: ../src/Matrix4x4.cs
    startLine: 395
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nCreates a scaling matrix with a center point.\n"
  example: []
  syntax:
    content: public static Matrix4x4 CreateScale(float xScale, float yScale, float zScale, Vector3 centerPoint)
    parameters:
    - id: xScale
      type: System.Single
      description: Value to scale by on the X-axis.
    - id: yScale
      type: System.Single
      description: Value to scale by on the Y-axis.
    - id: zScale
      type: System.Single
      description: Value to scale by on the Z-axis.
    - id: centerPoint
      type: Vim.Math3d.Vector3
      description: The center point.
    return:
      type: Vim.Math3d.Matrix4x4
      description: The scaling matrix.
    content.vb: Public Shared Function CreateScale(xScale As Single, yScale As Single, zScale As Single, centerPoint As Vector3) As Matrix4x4
  overload: Vim.Math3d.Matrix4x4.CreateScale*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Matrix4x4.CreateScale(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Matrix4x4.CreateScale(Vim.Math3d.Vector3)
  id: CreateScale(Vim.Math3d.Vector3)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: CreateScale(Vector3)
  nameWithType: Matrix4x4.CreateScale(Vector3)
  fullName: Vim.Math3d.Matrix4x4.CreateScale(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: CreateScale
    path: ../src/Matrix4x4.cs
    startLine: 429
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nCreates a scaling matrix.\n"
  example: []
  syntax:
    content: public static Matrix4x4 CreateScale(Vector3 scales)
    parameters:
    - id: scales
      type: Vim.Math3d.Vector3
      description: The vector containing the amount to scale by on each axis.
    return:
      type: Vim.Math3d.Matrix4x4
      description: The scaling matrix.
    content.vb: Public Shared Function CreateScale(scales As Vector3) As Matrix4x4
  overload: Vim.Math3d.Matrix4x4.CreateScale*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Matrix4x4.CreateScale(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Matrix4x4.CreateScale(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  id: CreateScale(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: CreateScale(Vector3, Vector3)
  nameWithType: Matrix4x4.CreateScale(Vector3, Vector3)
  fullName: Vim.Math3d.Matrix4x4.CreateScale(Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: CreateScale
    path: ../src/Matrix4x4.cs
    startLine: 436
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nCreates a scaling matrix with a center point.\n"
  example: []
  syntax:
    content: public static Matrix4x4 CreateScale(Vector3 scales, Vector3 centerPoint)
    parameters:
    - id: scales
      type: Vim.Math3d.Vector3
    - id: centerPoint
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Matrix4x4
    content.vb: Public Shared Function CreateScale(scales As Vector3, centerPoint As Vector3) As Matrix4x4
  overload: Vim.Math3d.Matrix4x4.CreateScale*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Matrix4x4.CreateScale(System.Single)
  commentId: M:Vim.Math3d.Matrix4x4.CreateScale(System.Single)
  id: CreateScale(System.Single)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: CreateScale(Single)
  nameWithType: Matrix4x4.CreateScale(Single)
  fullName: Vim.Math3d.Matrix4x4.CreateScale(System.Single)
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: CreateScale
    path: ../src/Matrix4x4.cs
    startLine: 445
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nCreates a uniform scaling matrix that scales equally on each axis.\n"
  example: []
  syntax:
    content: public static Matrix4x4 CreateScale(float scale)
    parameters:
    - id: scale
      type: System.Single
      description: The uniform scaling factor.
    return:
      type: Vim.Math3d.Matrix4x4
      description: The scaling matrix.
    content.vb: Public Shared Function CreateScale(scale As Single) As Matrix4x4
  overload: Vim.Math3d.Matrix4x4.CreateScale*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Matrix4x4.CreateScale(System.Single,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Matrix4x4.CreateScale(System.Single,Vim.Math3d.Vector3)
  id: CreateScale(System.Single,Vim.Math3d.Vector3)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: CreateScale(Single, Vector3)
  nameWithType: Matrix4x4.CreateScale(Single, Vector3)
  fullName: Vim.Math3d.Matrix4x4.CreateScale(System.Single, Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: CreateScale
    path: ../src/Matrix4x4.cs
    startLine: 455
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nCreates a uniform scaling matrix that scales equally on each axis with a center point.\n"
  example: []
  syntax:
    content: public static Matrix4x4 CreateScale(float scale, Vector3 centerPoint)
    parameters:
    - id: scale
      type: System.Single
      description: The uniform scaling factor.
    - id: centerPoint
      type: Vim.Math3d.Vector3
      description: The center point.
    return:
      type: Vim.Math3d.Matrix4x4
      description: The scaling matrix.
    content.vb: Public Shared Function CreateScale(scale As Single, centerPoint As Vector3) As Matrix4x4
  overload: Vim.Math3d.Matrix4x4.CreateScale*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Matrix4x4.CreateRotationX(System.Single)
  commentId: M:Vim.Math3d.Matrix4x4.CreateRotationX(System.Single)
  id: CreateRotationX(System.Single)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: CreateRotationX(Single)
  nameWithType: Matrix4x4.CreateRotationX(Single)
  fullName: Vim.Math3d.Matrix4x4.CreateRotationX(System.Single)
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: CreateRotationX
    path: ../src/Matrix4x4.cs
    startLine: 462
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nCreates a matrix for rotating points around the X-axis.\n"
  example: []
  syntax:
    content: public static Matrix4x4 CreateRotationX(float radians)
    parameters:
    - id: radians
      type: System.Single
    return:
      type: Vim.Math3d.Matrix4x4
    content.vb: Public Shared Function CreateRotationX(radians As Single) As Matrix4x4
  overload: Vim.Math3d.Matrix4x4.CreateRotationX*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Matrix4x4.CreateRotationX(System.Single,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Matrix4x4.CreateRotationX(System.Single,Vim.Math3d.Vector3)
  id: CreateRotationX(System.Single,Vim.Math3d.Vector3)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: CreateRotationX(Single, Vector3)
  nameWithType: Matrix4x4.CreateRotationX(Single, Vector3)
  fullName: Vim.Math3d.Matrix4x4.CreateRotationX(System.Single, Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: CreateRotationX
    path: ../src/Matrix4x4.cs
    startLine: 500
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nCreates a matrix for rotating points around the X-axis, from a center point.\n"
  example: []
  syntax:
    content: public static Matrix4x4 CreateRotationX(float radians, Vector3 centerPoint)
    parameters:
    - id: radians
      type: System.Single
      description: The amount, in radians, by which to rotate around the X-axis.
    - id: centerPoint
      type: Vim.Math3d.Vector3
      description: The center point.
    return:
      type: Vim.Math3d.Matrix4x4
      description: The rotation matrix.
    content.vb: Public Shared Function CreateRotationX(radians As Single, centerPoint As Vector3) As Matrix4x4
  overload: Vim.Math3d.Matrix4x4.CreateRotationX*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Matrix4x4.CreateRotationY(System.Single)
  commentId: M:Vim.Math3d.Matrix4x4.CreateRotationY(System.Single)
  id: CreateRotationY(System.Single)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: CreateRotationY(Single)
  nameWithType: Matrix4x4.CreateRotationY(Single)
  fullName: Vim.Math3d.Matrix4x4.CreateRotationY(System.Single)
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: CreateRotationY
    path: ../src/Matrix4x4.cs
    startLine: 540
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nCreates a matrix for rotating points around the Y-axis.\n"
  example: []
  syntax:
    content: public static Matrix4x4 CreateRotationY(float radians)
    parameters:
    - id: radians
      type: System.Single
      description: The amount, in radians, by which to rotate around the Y-axis.
    return:
      type: Vim.Math3d.Matrix4x4
      description: The rotation matrix.
    content.vb: Public Shared Function CreateRotationY(radians As Single) As Matrix4x4
  overload: Vim.Math3d.Matrix4x4.CreateRotationY*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Matrix4x4.CreateRotationY(System.Single,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Matrix4x4.CreateRotationY(System.Single,Vim.Math3d.Vector3)
  id: CreateRotationY(System.Single,Vim.Math3d.Vector3)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: CreateRotationY(Single, Vector3)
  nameWithType: Matrix4x4.CreateRotationY(Single, Vector3)
  fullName: Vim.Math3d.Matrix4x4.CreateRotationY(System.Single, Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: CreateRotationY
    path: ../src/Matrix4x4.cs
    startLine: 578
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nCreates a matrix for rotating points around the Y-axis, from a center point.\n"
  example: []
  syntax:
    content: public static Matrix4x4 CreateRotationY(float radians, Vector3 centerPoint)
    parameters:
    - id: radians
      type: System.Single
      description: The amount, in radians, by which to rotate around the Y-axis.
    - id: centerPoint
      type: Vim.Math3d.Vector3
      description: The center point.
    return:
      type: Vim.Math3d.Matrix4x4
      description: The rotation matrix.
    content.vb: Public Shared Function CreateRotationY(radians As Single, centerPoint As Vector3) As Matrix4x4
  overload: Vim.Math3d.Matrix4x4.CreateRotationY*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Matrix4x4.CreateRotationZ(System.Single)
  commentId: M:Vim.Math3d.Matrix4x4.CreateRotationZ(System.Single)
  id: CreateRotationZ(System.Single)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: CreateRotationZ(Single)
  nameWithType: Matrix4x4.CreateRotationZ(Single)
  fullName: Vim.Math3d.Matrix4x4.CreateRotationZ(System.Single)
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: CreateRotationZ
    path: ../src/Matrix4x4.cs
    startLine: 618
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nCreates a matrix for rotating points around the Z-axis.\n"
  example: []
  syntax:
    content: public static Matrix4x4 CreateRotationZ(float radians)
    parameters:
    - id: radians
      type: System.Single
      description: The amount, in radians, by which to rotate around the Z-axis.
    return:
      type: Vim.Math3d.Matrix4x4
      description: The rotation matrix.
    content.vb: Public Shared Function CreateRotationZ(radians As Single) As Matrix4x4
  overload: Vim.Math3d.Matrix4x4.CreateRotationZ*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Matrix4x4.CreateRotationZ(System.Single,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Matrix4x4.CreateRotationZ(System.Single,Vim.Math3d.Vector3)
  id: CreateRotationZ(System.Single,Vim.Math3d.Vector3)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: CreateRotationZ(Single, Vector3)
  nameWithType: Matrix4x4.CreateRotationZ(Single, Vector3)
  fullName: Vim.Math3d.Matrix4x4.CreateRotationZ(System.Single, Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: CreateRotationZ
    path: ../src/Matrix4x4.cs
    startLine: 656
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nCreates a matrix for rotating points around the Z-axis, from a center point.\n"
  example: []
  syntax:
    content: public static Matrix4x4 CreateRotationZ(float radians, Vector3 centerPoint)
    parameters:
    - id: radians
      type: System.Single
      description: The amount, in radians, by which to rotate around the Z-axis.
    - id: centerPoint
      type: Vim.Math3d.Vector3
      description: The center point.
    return:
      type: Vim.Math3d.Matrix4x4
      description: The rotation matrix.
    content.vb: Public Shared Function CreateRotationZ(radians As Single, centerPoint As Vector3) As Matrix4x4
  overload: Vim.Math3d.Matrix4x4.CreateRotationZ*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Matrix4x4.CreateFromAxisAngle(Vim.Math3d.Vector3,System.Single)
  commentId: M:Vim.Math3d.Matrix4x4.CreateFromAxisAngle(Vim.Math3d.Vector3,System.Single)
  id: CreateFromAxisAngle(Vim.Math3d.Vector3,System.Single)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: CreateFromAxisAngle(Vector3, Single)
  nameWithType: Matrix4x4.CreateFromAxisAngle(Vector3, Single)
  fullName: Vim.Math3d.Matrix4x4.CreateFromAxisAngle(Vim.Math3d.Vector3, System.Single)
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: CreateFromAxisAngle
    path: ../src/Matrix4x4.cs
    startLine: 697
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nCreates a matrix that rotates around an arbitrary vector.\n"
  example: []
  syntax:
    content: public static Matrix4x4 CreateFromAxisAngle(Vector3 axis, float angle)
    parameters:
    - id: axis
      type: Vim.Math3d.Vector3
      description: The axis to rotate around.
    - id: angle
      type: System.Single
      description: The angle to rotate around the given axis, in radians.
    return:
      type: Vim.Math3d.Matrix4x4
      description: The rotation matrix.
    content.vb: Public Shared Function CreateFromAxisAngle(axis As Vector3, angle As Single) As Matrix4x4
  overload: Vim.Math3d.Matrix4x4.CreateFromAxisAngle*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Matrix4x4.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single)
  commentId: M:Vim.Math3d.Matrix4x4.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single)
  id: CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: CreatePerspectiveFieldOfView(Single, Single, Single, Single)
  nameWithType: Matrix4x4.CreatePerspectiveFieldOfView(Single, Single, Single, Single)
  fullName: Vim.Math3d.Matrix4x4.CreatePerspectiveFieldOfView(System.Single, System.Single, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: CreatePerspectiveFieldOfView
    path: ../src/Matrix4x4.cs
    startLine: 760
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nCreates a perspective projection matrix based on a field of view, aspect ratio, and near and far view plane distances. \n"
  example: []
  syntax:
    content: public static Matrix4x4 CreatePerspectiveFieldOfView(float fieldOfView, float aspectRatio, float nearPlaneDistance, float farPlaneDistance)
    parameters:
    - id: fieldOfView
      type: System.Single
      description: Field of view in the y direction, in radians.
    - id: aspectRatio
      type: System.Single
      description: Aspect ratio, defined as view space width divided by height.
    - id: nearPlaneDistance
      type: System.Single
      description: Distance to the near view plane.
    - id: farPlaneDistance
      type: System.Single
      description: Distance to the far view plane.
    return:
      type: Vim.Math3d.Matrix4x4
      description: The perspective projection matrix.
    content.vb: Public Shared Function CreatePerspectiveFieldOfView(fieldOfView As Single, aspectRatio As Single, nearPlaneDistance As Single, farPlaneDistance As Single) As Matrix4x4
  overload: Vim.Math3d.Matrix4x4.CreatePerspectiveFieldOfView*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Matrix4x4.CreatePerspective(System.Single,System.Single,System.Single,System.Single)
  commentId: M:Vim.Math3d.Matrix4x4.CreatePerspective(System.Single,System.Single,System.Single,System.Single)
  id: CreatePerspective(System.Single,System.Single,System.Single,System.Single)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: CreatePerspective(Single, Single, Single, Single)
  nameWithType: Matrix4x4.CreatePerspective(Single, Single, Single, Single)
  fullName: Vim.Math3d.Matrix4x4.CreatePerspective(System.Single, System.Single, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: CreatePerspective
    path: ../src/Matrix4x4.cs
    startLine: 805
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nCreates a perspective projection matrix from the given view volume dimensions.\n"
  example: []
  syntax:
    content: public static Matrix4x4 CreatePerspective(float width, float height, float nearPlaneDistance, float farPlaneDistance)
    parameters:
    - id: width
      type: System.Single
      description: Width of the view volume at the near view plane.
    - id: height
      type: System.Single
      description: Height of the view volume at the near view plane.
    - id: nearPlaneDistance
      type: System.Single
      description: Distance to the near view plane.
    - id: farPlaneDistance
      type: System.Single
      description: Distance to the far view plane.
    return:
      type: Vim.Math3d.Matrix4x4
      description: The perspective projection matrix.
    content.vb: Public Shared Function CreatePerspective(width As Single, height As Single, nearPlaneDistance As Single, farPlaneDistance As Single) As Matrix4x4
  overload: Vim.Math3d.Matrix4x4.CreatePerspective*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Matrix4x4.CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  commentId: M:Vim.Math3d.Matrix4x4.CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  id: CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: CreatePerspectiveOffCenter(Single, Single, Single, Single, Single, Single)
  nameWithType: Matrix4x4.CreatePerspectiveOffCenter(Single, Single, Single, Single, Single, Single)
  fullName: Vim.Math3d.Matrix4x4.CreatePerspectiveOffCenter(System.Single, System.Single, System.Single, System.Single, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: CreatePerspectiveOffCenter
    path: ../src/Matrix4x4.cs
    startLine: 846
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nCreates a customized, perspective projection matrix.\n"
  example: []
  syntax:
    content: public static Matrix4x4 CreatePerspectiveOffCenter(float left, float right, float bottom, float top, float nearPlaneDistance, float farPlaneDistance)
    parameters:
    - id: left
      type: System.Single
      description: Minimum x-value of the view volume at the near view plane.
    - id: right
      type: System.Single
      description: Maximum x-value of the view volume at the near view plane.
    - id: bottom
      type: System.Single
      description: Minimum y-value of the view volume at the near view plane.
    - id: top
      type: System.Single
      description: Maximum y-value of the view volume at the near view plane.
    - id: nearPlaneDistance
      type: System.Single
      description: Distance to the near view plane.
    - id: farPlaneDistance
      type: System.Single
      description: Distance to of the far view plane.
    return:
      type: Vim.Math3d.Matrix4x4
      description: The perspective projection matrix.
    content.vb: Public Shared Function CreatePerspectiveOffCenter(left As Single, right As Single, bottom As Single, top As Single, nearPlaneDistance As Single, farPlaneDistance As Single) As Matrix4x4
  overload: Vim.Math3d.Matrix4x4.CreatePerspectiveOffCenter*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Matrix4x4.CreateOrthographic(System.Single,System.Single,System.Single,System.Single)
  commentId: M:Vim.Math3d.Matrix4x4.CreateOrthographic(System.Single,System.Single,System.Single,System.Single)
  id: CreateOrthographic(System.Single,System.Single,System.Single,System.Single)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: CreateOrthographic(Single, Single, Single, Single)
  nameWithType: Matrix4x4.CreateOrthographic(Single, Single, Single, Single)
  fullName: Vim.Math3d.Matrix4x4.CreateOrthographic(System.Single, System.Single, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: CreateOrthographic
    path: ../src/Matrix4x4.cs
    startLine: 886
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nCreates an orthographic perspective matrix from the given view volume dimensions.\n"
  example: []
  syntax:
    content: public static Matrix4x4 CreateOrthographic(float width, float height, float zNearPlane, float zFarPlane)
    parameters:
    - id: width
      type: System.Single
      description: Width of the view volume.
    - id: height
      type: System.Single
      description: Height of the view volume.
    - id: zNearPlane
      type: System.Single
      description: Minimum Z-value of the view volume.
    - id: zFarPlane
      type: System.Single
      description: Maximum Z-value of the view volume.
    return:
      type: Vim.Math3d.Matrix4x4
      description: The orthographic projection matrix.
    content.vb: Public Shared Function CreateOrthographic(width As Single, height As Single, zNearPlane As Single, zFarPlane As Single) As Matrix4x4
  overload: Vim.Math3d.Matrix4x4.CreateOrthographic*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Matrix4x4.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  commentId: M:Vim.Math3d.Matrix4x4.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  id: CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: CreateOrthographicOffCenter(Single, Single, Single, Single, Single, Single)
  nameWithType: Matrix4x4.CreateOrthographicOffCenter(Single, Single, Single, Single, Single, Single)
  fullName: Vim.Math3d.Matrix4x4.CreateOrthographicOffCenter(System.Single, System.Single, System.Single, System.Single, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: CreateOrthographicOffCenter
    path: ../src/Matrix4x4.cs
    startLine: 917
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nBuilds a customized, orthographic projection matrix.\n"
  example: []
  syntax:
    content: public static Matrix4x4 CreateOrthographicOffCenter(float left, float right, float bottom, float top, float zNearPlane, float zFarPlane)
    parameters:
    - id: left
      type: System.Single
      description: Minimum X-value of the view volume.
    - id: right
      type: System.Single
      description: Maximum X-value of the view volume.
    - id: bottom
      type: System.Single
      description: Minimum Y-value of the view volume.
    - id: top
      type: System.Single
      description: Maximum Y-value of the view volume.
    - id: zNearPlane
      type: System.Single
      description: Minimum Z-value of the view volume.
    - id: zFarPlane
      type: System.Single
      description: Maximum Z-value of the view volume.
    return:
      type: Vim.Math3d.Matrix4x4
      description: The orthographic projection matrix.
    content.vb: Public Shared Function CreateOrthographicOffCenter(left As Single, right As Single, bottom As Single, top As Single, zNearPlane As Single, zFarPlane As Single) As Matrix4x4
  overload: Vim.Math3d.Matrix4x4.CreateOrthographicOffCenter*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Matrix4x4.CreateLookAt(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Matrix4x4.CreateLookAt(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  id: CreateLookAt(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: CreateLookAt(Vector3, Vector3, Vector3)
  nameWithType: Matrix4x4.CreateLookAt(Vector3, Vector3, Vector3)
  fullName: Vim.Math3d.Matrix4x4.CreateLookAt(Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: CreateLookAt
    path: ../src/Matrix4x4.cs
    startLine: 946
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nCreates a view matrix.\n"
  example: []
  syntax:
    content: public static Matrix4x4 CreateLookAt(Vector3 cameraPosition, Vector3 cameraTarget, Vector3 cameraUpVector)
    parameters:
    - id: cameraPosition
      type: Vim.Math3d.Vector3
      description: The position of the camera.
    - id: cameraTarget
      type: Vim.Math3d.Vector3
      description: The target towards which the camera is pointing.
    - id: cameraUpVector
      type: Vim.Math3d.Vector3
      description: The direction that is &quot;up&quot; from the camera&apos;s point of view.
    return:
      type: Vim.Math3d.Matrix4x4
      description: The view matrix.
    content.vb: Public Shared Function CreateLookAt(cameraPosition As Vector3, cameraTarget As Vector3, cameraUpVector As Vector3) As Matrix4x4
  overload: Vim.Math3d.Matrix4x4.CreateLookAt*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Matrix4x4.CreateWorld(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Matrix4x4.CreateWorld(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  id: CreateWorld(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: CreateWorld(Vector3, Vector3, Vector3)
  nameWithType: Matrix4x4.CreateWorld(Vector3, Vector3, Vector3)
  fullName: Vim.Math3d.Matrix4x4.CreateWorld(Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: CreateWorld
    path: ../src/Matrix4x4.cs
    startLine: 982
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nCreates a world matrix with the specified parameters.\n"
  example: []
  syntax:
    content: public static Matrix4x4 CreateWorld(Vector3 position, Vector3 forward, Vector3 up)
    parameters:
    - id: position
      type: Vim.Math3d.Vector3
      description: The position of the object; used in translation operations.
    - id: forward
      type: Vim.Math3d.Vector3
      description: Forward direction of the object.
    - id: up
      type: Vim.Math3d.Vector3
      description: Upward direction of the object; usually [0, 1, 0].
    return:
      type: Vim.Math3d.Matrix4x4
      description: The world matrix.
    content.vb: Public Shared Function CreateWorld(position As Vector3, forward As Vector3, up As Vector3) As Matrix4x4
  overload: Vim.Math3d.Matrix4x4.CreateWorld*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Matrix4x4.CreateFromQuaternion(Vim.Math3d.Quaternion)
  commentId: M:Vim.Math3d.Matrix4x4.CreateFromQuaternion(Vim.Math3d.Quaternion)
  id: CreateFromQuaternion(Vim.Math3d.Quaternion)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: CreateFromQuaternion(Quaternion)
  nameWithType: Matrix4x4.CreateFromQuaternion(Quaternion)
  fullName: Vim.Math3d.Matrix4x4.CreateFromQuaternion(Vim.Math3d.Quaternion)
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: CreateFromQuaternion
    path: ../src/Matrix4x4.cs
    startLine: 1014
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nCreates a rotation matrix from the given Quaternion rotation value.\n"
  example: []
  syntax:
    content: public static Matrix4x4 CreateFromQuaternion(Quaternion quaternion)
    parameters:
    - id: quaternion
      type: Vim.Math3d.Quaternion
    return:
      type: Vim.Math3d.Matrix4x4
    content.vb: Public Shared Function CreateFromQuaternion(quaternion As Quaternion) As Matrix4x4
  overload: Vim.Math3d.Matrix4x4.CreateFromQuaternion*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Matrix4x4.CreateRotation(Vim.Math3d.Quaternion)
  commentId: M:Vim.Math3d.Matrix4x4.CreateRotation(Vim.Math3d.Quaternion)
  id: CreateRotation(Vim.Math3d.Quaternion)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: CreateRotation(Quaternion)
  nameWithType: Matrix4x4.CreateRotation(Quaternion)
  fullName: Vim.Math3d.Matrix4x4.CreateRotation(Vim.Math3d.Quaternion)
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: CreateRotation
    path: ../src/Matrix4x4.cs
    startLine: 1021
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nCreates a rotation matrix from the given Quaternion rotation value.\n"
  example: []
  syntax:
    content: public static Matrix4x4 CreateRotation(Quaternion quaternion)
    parameters:
    - id: quaternion
      type: Vim.Math3d.Quaternion
    return:
      type: Vim.Math3d.Matrix4x4
    content.vb: Public Shared Function CreateRotation(quaternion As Quaternion) As Matrix4x4
  overload: Vim.Math3d.Matrix4x4.CreateRotation*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Matrix4x4.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)
  commentId: M:Vim.Math3d.Matrix4x4.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)
  id: CreateFromYawPitchRoll(System.Single,System.Single,System.Single)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: CreateFromYawPitchRoll(Single, Single, Single)
  nameWithType: Matrix4x4.CreateFromYawPitchRoll(Single, Single, Single)
  fullName: Vim.Math3d.Matrix4x4.CreateFromYawPitchRoll(System.Single, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: CreateFromYawPitchRoll
    path: ../src/Matrix4x4.cs
    startLine: 1064
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nCreates a rotation matrix from the specified yaw, pitch, and roll.\n"
  example: []
  syntax:
    content: public static Matrix4x4 CreateFromYawPitchRoll(float yaw, float pitch, float roll)
    parameters:
    - id: yaw
      type: System.Single
      description: Angle of rotation, in radians, around the Y-axis.
    - id: pitch
      type: System.Single
      description: Angle of rotation, in radians, around the X-axis.
    - id: roll
      type: System.Single
      description: Angle of rotation, in radians, around the Z-axis.
    return:
      type: Vim.Math3d.Matrix4x4
      description: The rotation matrix.
    content.vb: Public Shared Function CreateFromYawPitchRoll(yaw As Single, pitch As Single, roll As Single) As Matrix4x4
  overload: Vim.Math3d.Matrix4x4.CreateFromYawPitchRoll*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Matrix4x4.CreateShadow(Vim.Math3d.Vector3,Vim.Math3d.Plane)
  commentId: M:Vim.Math3d.Matrix4x4.CreateShadow(Vim.Math3d.Vector3,Vim.Math3d.Plane)
  id: CreateShadow(Vim.Math3d.Vector3,Vim.Math3d.Plane)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: CreateShadow(Vector3, Plane)
  nameWithType: Matrix4x4.CreateShadow(Vector3, Plane)
  fullName: Vim.Math3d.Matrix4x4.CreateShadow(Vim.Math3d.Vector3, Vim.Math3d.Plane)
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: CreateShadow
    path: ../src/Matrix4x4.cs
    startLine: 1074
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nCreates a Matrix that flattens geometry into a specified Plane as if casting a shadow from a specified light source.\n"
  example: []
  syntax:
    content: public static Matrix4x4 CreateShadow(Vector3 lightDirection, Plane plane)
    parameters:
    - id: lightDirection
      type: Vim.Math3d.Vector3
      description: The direction from which the light that will cast the shadow is coming.
    - id: plane
      type: Vim.Math3d.Plane
      description: The Plane onto which the new matrix should flatten geometry so as to cast a shadow.
    return:
      type: Vim.Math3d.Matrix4x4
      description: A new Matrix that can be used to flatten geometry onto the specified plane from the specified direction.
    content.vb: Public Shared Function CreateShadow(lightDirection As Vector3, plane As Plane) As Matrix4x4
  overload: Vim.Math3d.Matrix4x4.CreateShadow*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Matrix4x4.CreateReflection(Vim.Math3d.Plane)
  commentId: M:Vim.Math3d.Matrix4x4.CreateReflection(Vim.Math3d.Plane)
  id: CreateReflection(Vim.Math3d.Plane)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: CreateReflection(Plane)
  nameWithType: Matrix4x4.CreateReflection(Plane)
  fullName: Vim.Math3d.Matrix4x4.CreateReflection(Vim.Math3d.Plane)
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: CreateReflection
    path: ../src/Matrix4x4.cs
    startLine: 1115
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nCreates a Matrix that reflects the coordinate system about a specified Plane.\n"
  example: []
  syntax:
    content: public static Matrix4x4 CreateReflection(Plane value)
    parameters:
    - id: value
      type: Vim.Math3d.Plane
      description: The Plane about which to create a reflection.
    return:
      type: Vim.Math3d.Matrix4x4
      description: A new matrix expressing the reflection.
    content.vb: Public Shared Function CreateReflection(value As Plane) As Matrix4x4
  overload: Vim.Math3d.Matrix4x4.CreateReflection*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Matrix4x4.Get3x3RotationDeterminant
  commentId: M:Vim.Math3d.Matrix4x4.Get3x3RotationDeterminant
  id: Get3x3RotationDeterminant
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: Get3x3RotationDeterminant()
  nameWithType: Matrix4x4.Get3x3RotationDeterminant()
  fullName: Vim.Math3d.Matrix4x4.Get3x3RotationDeterminant()
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Get3x3RotationDeterminant
    path: ../src/Matrix4x4.cs
    startLine: 1157
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nCalculates the determinant of the 3x3 rotational component of the matrix.\n"
  example: []
  syntax:
    content: public float Get3x3RotationDeterminant()
    return:
      type: System.Single
      description: The determinant of the 3x3 rotational component matrix.
    content.vb: Public Function Get3x3RotationDeterminant As Single
  overload: Vim.Math3d.Matrix4x4.Get3x3RotationDeterminant*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Matrix4x4.IsReflection
  commentId: P:Vim.Math3d.Matrix4x4.IsReflection
  id: IsReflection
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: IsReflection
  nameWithType: Matrix4x4.IsReflection
  fullName: Vim.Math3d.Matrix4x4.IsReflection
  type: Property
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: IsReflection
    path: ../src/Matrix4x4.cs
    startLine: 1195
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nReturns true if the 3x3 rotation determinant of the matrix is less than 0. This assumes the matrix represents\nan affine transform.\n"
  example: []
  syntax:
    content: public readonly bool IsReflection { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsReflection As Boolean
  overload: Vim.Math3d.Matrix4x4.IsReflection*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.Matrix4x4.GetDeterminant
  commentId: M:Vim.Math3d.Matrix4x4.GetDeterminant
  id: GetDeterminant
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: GetDeterminant()
  nameWithType: Matrix4x4.GetDeterminant()
  fullName: Vim.Math3d.Matrix4x4.GetDeterminant()
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: GetDeterminant
    path: ../src/Matrix4x4.cs
    startLine: 1202
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nCalculates the determinant of the matrix.\n"
  example: []
  syntax:
    content: public float GetDeterminant()
    return:
      type: System.Single
      description: The determinant of the matrix.
    content.vb: Public Function GetDeterminant As Single
  overload: Vim.Math3d.Matrix4x4.GetDeterminant*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Matrix4x4.Invert(Vim.Math3d.Matrix4x4,Vim.Math3d.Matrix4x4@)
  commentId: M:Vim.Math3d.Matrix4x4.Invert(Vim.Math3d.Matrix4x4,Vim.Math3d.Matrix4x4@)
  id: Invert(Vim.Math3d.Matrix4x4,Vim.Math3d.Matrix4x4@)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: Invert(Matrix4x4, out Matrix4x4)
  nameWithType: Matrix4x4.Invert(Matrix4x4, out Matrix4x4)
  fullName: Vim.Math3d.Matrix4x4.Invert(Vim.Math3d.Matrix4x4, out Vim.Math3d.Matrix4x4)
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Invert
    path: ../src/Matrix4x4.cs
    startLine: 1256
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nAttempts to calculate the inverse of the given matrix. If successful, result will contain the inverted matrix.\n"
  example: []
  syntax:
    content: public static bool Invert(Matrix4x4 matrix, out Matrix4x4 result)
    parameters:
    - id: matrix
      type: Vim.Math3d.Matrix4x4
      description: The source matrix to invert.
    - id: result
      type: Vim.Math3d.Matrix4x4
      description: If successful, contains the inverted matrix.
    return:
      type: System.Boolean
      description: True if the source matrix could be inverted; False otherwise.
    content.vb: Public Shared Function Invert(matrix As Matrix4x4, ByRef result As Matrix4x4) As Boolean
  overload: Vim.Math3d.Matrix4x4.Invert*
  nameWithType.vb: Matrix4x4.Invert(Matrix4x4, ByRef Matrix4x4)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.Matrix4x4.Invert(Vim.Math3d.Matrix4x4, ByRef Vim.Math3d.Matrix4x4)
  name.vb: Invert(Matrix4x4, ByRef Matrix4x4)
- uid: Vim.Math3d.Matrix4x4.Transform(Vim.Math3d.Matrix4x4,Vim.Math3d.Quaternion)
  commentId: M:Vim.Math3d.Matrix4x4.Transform(Vim.Math3d.Matrix4x4,Vim.Math3d.Quaternion)
  id: Transform(Vim.Math3d.Matrix4x4,Vim.Math3d.Quaternion)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: Transform(Matrix4x4, Quaternion)
  nameWithType: Matrix4x4.Transform(Matrix4x4, Quaternion)
  fullName: Vim.Math3d.Matrix4x4.Transform(Vim.Math3d.Matrix4x4, Vim.Math3d.Quaternion)
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Transform
    path: ../src/Matrix4x4.cs
    startLine: 1424
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nTransforms the given matrix by applying the given Quaternion rotation.\n"
  example: []
  syntax:
    content: public static Matrix4x4 Transform(Matrix4x4 value, Quaternion rotation)
    parameters:
    - id: value
      type: Vim.Math3d.Matrix4x4
      description: The source matrix to transform.
    - id: rotation
      type: Vim.Math3d.Quaternion
      description: The rotation to apply.
    return:
      type: Vim.Math3d.Matrix4x4
      description: The transformed matrix.
    content.vb: Public Shared Function Transform(value As Matrix4x4, rotation As Quaternion) As Matrix4x4
  overload: Vim.Math3d.Matrix4x4.Transform*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Matrix4x4.Transpose(Vim.Math3d.Matrix4x4)
  commentId: M:Vim.Math3d.Matrix4x4.Transpose(Vim.Math3d.Matrix4x4)
  id: Transpose(Vim.Math3d.Matrix4x4)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: Transpose(Matrix4x4)
  nameWithType: Matrix4x4.Transpose(Matrix4x4)
  fullName: Vim.Math3d.Matrix4x4.Transpose(Vim.Math3d.Matrix4x4)
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Transpose
    path: ../src/Matrix4x4.cs
    startLine: 1486
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nTransposes the rows and columns of a matrix.\n"
  example: []
  syntax:
    content: public static Matrix4x4 Transpose(Matrix4x4 matrix)
    parameters:
    - id: matrix
      type: Vim.Math3d.Matrix4x4
    return:
      type: Vim.Math3d.Matrix4x4
    content.vb: Public Shared Function Transpose(matrix As Matrix4x4) As Matrix4x4
  overload: Vim.Math3d.Matrix4x4.Transpose*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Matrix4x4.Transpose
  commentId: M:Vim.Math3d.Matrix4x4.Transpose
  id: Transpose
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: Transpose()
  nameWithType: Matrix4x4.Transpose()
  fullName: Vim.Math3d.Matrix4x4.Transpose()
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Transpose
    path: ../src/Matrix4x4.cs
    startLine: 1512
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nTransposes the rows and columns of a matrix.\n"
  example: []
  syntax:
    content: public Matrix4x4 Transpose()
    return:
      type: Vim.Math3d.Matrix4x4
    content.vb: Public Function Transpose As Matrix4x4
  overload: Vim.Math3d.Matrix4x4.Transpose*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Matrix4x4.Lerp(Vim.Math3d.Matrix4x4,Vim.Math3d.Matrix4x4,System.Single)
  commentId: M:Vim.Math3d.Matrix4x4.Lerp(Vim.Math3d.Matrix4x4,Vim.Math3d.Matrix4x4,System.Single)
  id: Lerp(Vim.Math3d.Matrix4x4,Vim.Math3d.Matrix4x4,System.Single)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: Lerp(Matrix4x4, Matrix4x4, Single)
  nameWithType: Matrix4x4.Lerp(Matrix4x4, Matrix4x4, Single)
  fullName: Vim.Math3d.Matrix4x4.Lerp(Vim.Math3d.Matrix4x4, Vim.Math3d.Matrix4x4, System.Single)
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Lerp
    path: ../src/Matrix4x4.cs
    startLine: 1519
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nLinearly interpolates between the corresponding values of two matrices.\n"
  example: []
  syntax:
    content: public static Matrix4x4 Lerp(Matrix4x4 matrix1, Matrix4x4 matrix2, float amount)
    parameters:
    - id: matrix1
      type: Vim.Math3d.Matrix4x4
    - id: matrix2
      type: Vim.Math3d.Matrix4x4
    - id: amount
      type: System.Single
    return:
      type: Vim.Math3d.Matrix4x4
    content.vb: Public Shared Function Lerp(matrix1 As Matrix4x4, matrix2 As Matrix4x4, amount As Single) As Matrix4x4
  overload: Vim.Math3d.Matrix4x4.Lerp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Matrix4x4.Negate(Vim.Math3d.Matrix4x4)
  commentId: M:Vim.Math3d.Matrix4x4.Negate(Vim.Math3d.Matrix4x4)
  id: Negate(Vim.Math3d.Matrix4x4)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: Negate(Matrix4x4)
  nameWithType: Matrix4x4.Negate(Matrix4x4)
  fullName: Vim.Math3d.Matrix4x4.Negate(Vim.Math3d.Matrix4x4)
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Negate
    path: ../src/Matrix4x4.cs
    startLine: 1556
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nReturns a new matrix with the negated elements of the given matrix.\n"
  example: []
  syntax:
    content: public static Matrix4x4 Negate(Matrix4x4 value)
    parameters:
    - id: value
      type: Vim.Math3d.Matrix4x4
      description: The source matrix.
    return:
      type: Vim.Math3d.Matrix4x4
      description: The negated matrix.
    content.vb: Public Shared Function Negate(value As Matrix4x4) As Matrix4x4
  overload: Vim.Math3d.Matrix4x4.Negate*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Matrix4x4.Add(Vim.Math3d.Matrix4x4,Vim.Math3d.Matrix4x4)
  commentId: M:Vim.Math3d.Matrix4x4.Add(Vim.Math3d.Matrix4x4,Vim.Math3d.Matrix4x4)
  id: Add(Vim.Math3d.Matrix4x4,Vim.Math3d.Matrix4x4)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: Add(Matrix4x4, Matrix4x4)
  nameWithType: Matrix4x4.Add(Matrix4x4, Matrix4x4)
  fullName: Vim.Math3d.Matrix4x4.Add(Vim.Math3d.Matrix4x4, Vim.Math3d.Matrix4x4)
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Add
    path: ../src/Matrix4x4.cs
    startLine: 1562
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nAdds two matrices together.\n"
  example: []
  syntax:
    content: public static Matrix4x4 Add(Matrix4x4 value1, Matrix4x4 value2)
    parameters:
    - id: value1
      type: Vim.Math3d.Matrix4x4
    - id: value2
      type: Vim.Math3d.Matrix4x4
    return:
      type: Vim.Math3d.Matrix4x4
    content.vb: Public Shared Function Add(value1 As Matrix4x4, value2 As Matrix4x4) As Matrix4x4
  overload: Vim.Math3d.Matrix4x4.Add*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Matrix4x4.Subtract(Vim.Math3d.Matrix4x4,Vim.Math3d.Matrix4x4)
  commentId: M:Vim.Math3d.Matrix4x4.Subtract(Vim.Math3d.Matrix4x4,Vim.Math3d.Matrix4x4)
  id: Subtract(Vim.Math3d.Matrix4x4,Vim.Math3d.Matrix4x4)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: Subtract(Matrix4x4, Matrix4x4)
  nameWithType: Matrix4x4.Subtract(Matrix4x4, Matrix4x4)
  fullName: Vim.Math3d.Matrix4x4.Subtract(Vim.Math3d.Matrix4x4, Vim.Math3d.Matrix4x4)
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Subtract
    path: ../src/Matrix4x4.cs
    startLine: 1568
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nSubtracts the second matrix from the first.\n"
  example: []
  syntax:
    content: public static Matrix4x4 Subtract(Matrix4x4 value1, Matrix4x4 value2)
    parameters:
    - id: value1
      type: Vim.Math3d.Matrix4x4
    - id: value2
      type: Vim.Math3d.Matrix4x4
    return:
      type: Vim.Math3d.Matrix4x4
    content.vb: Public Shared Function Subtract(value1 As Matrix4x4, value2 As Matrix4x4) As Matrix4x4
  overload: Vim.Math3d.Matrix4x4.Subtract*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Matrix4x4.Multiply(Vim.Math3d.Matrix4x4,Vim.Math3d.Matrix4x4)
  commentId: M:Vim.Math3d.Matrix4x4.Multiply(Vim.Math3d.Matrix4x4,Vim.Math3d.Matrix4x4)
  id: Multiply(Vim.Math3d.Matrix4x4,Vim.Math3d.Matrix4x4)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: Multiply(Matrix4x4, Matrix4x4)
  nameWithType: Matrix4x4.Multiply(Matrix4x4, Matrix4x4)
  fullName: Vim.Math3d.Matrix4x4.Multiply(Vim.Math3d.Matrix4x4, Vim.Math3d.Matrix4x4)
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Multiply
    path: ../src/Matrix4x4.cs
    startLine: 1574
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nMultiplies a matrix by another matrix.\n"
  example: []
  syntax:
    content: public static Matrix4x4 Multiply(Matrix4x4 value1, Matrix4x4 value2)
    parameters:
    - id: value1
      type: Vim.Math3d.Matrix4x4
    - id: value2
      type: Vim.Math3d.Matrix4x4
    return:
      type: Vim.Math3d.Matrix4x4
    content.vb: Public Shared Function Multiply(value1 As Matrix4x4, value2 As Matrix4x4) As Matrix4x4
  overload: Vim.Math3d.Matrix4x4.Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Matrix4x4.Multiply(Vim.Math3d.Matrix4x4,System.Single)
  commentId: M:Vim.Math3d.Matrix4x4.Multiply(Vim.Math3d.Matrix4x4,System.Single)
  id: Multiply(Vim.Math3d.Matrix4x4,System.Single)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: Multiply(Matrix4x4, Single)
  nameWithType: Matrix4x4.Multiply(Matrix4x4, Single)
  fullName: Vim.Math3d.Matrix4x4.Multiply(Vim.Math3d.Matrix4x4, System.Single)
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Multiply
    path: ../src/Matrix4x4.cs
    startLine: 1580
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nMultiplies a matrix by a scalar value.\n"
  example: []
  syntax:
    content: public static Matrix4x4 Multiply(Matrix4x4 value1, float value2)
    parameters:
    - id: value1
      type: Vim.Math3d.Matrix4x4
    - id: value2
      type: System.Single
    return:
      type: Vim.Math3d.Matrix4x4
    content.vb: Public Shared Function Multiply(value1 As Matrix4x4, value2 As Single) As Matrix4x4
  overload: Vim.Math3d.Matrix4x4.Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Matrix4x4.op_UnaryNegation(Vim.Math3d.Matrix4x4)
  commentId: M:Vim.Math3d.Matrix4x4.op_UnaryNegation(Vim.Math3d.Matrix4x4)
  id: op_UnaryNegation(Vim.Math3d.Matrix4x4)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: UnaryNegation(Matrix4x4)
  nameWithType: Matrix4x4.UnaryNegation(Matrix4x4)
  fullName: Vim.Math3d.Matrix4x4.UnaryNegation(Vim.Math3d.Matrix4x4)
  type: Operator
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_UnaryNegation
    path: ../src/Matrix4x4.cs
    startLine: 1586
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nReturns a new matrix with the negated elements of the given matrix.\n"
  example: []
  syntax:
    content: public static Matrix4x4 operator -(Matrix4x4 value)
    parameters:
    - id: value
      type: Vim.Math3d.Matrix4x4
    return:
      type: Vim.Math3d.Matrix4x4
    content.vb: Public Shared Operator -(value As Matrix4x4) As Matrix4x4
  overload: Vim.Math3d.Matrix4x4.op_UnaryNegation*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Matrix4x4.op_Addition(Vim.Math3d.Matrix4x4,Vim.Math3d.Matrix4x4)
  commentId: M:Vim.Math3d.Matrix4x4.op_Addition(Vim.Math3d.Matrix4x4,Vim.Math3d.Matrix4x4)
  id: op_Addition(Vim.Math3d.Matrix4x4,Vim.Math3d.Matrix4x4)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: Addition(Matrix4x4, Matrix4x4)
  nameWithType: Matrix4x4.Addition(Matrix4x4, Matrix4x4)
  fullName: Vim.Math3d.Matrix4x4.Addition(Vim.Math3d.Matrix4x4, Vim.Math3d.Matrix4x4)
  type: Operator
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Addition
    path: ../src/Matrix4x4.cs
    startLine: 1617
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nAdds two matrices together.\n"
  example: []
  syntax:
    content: public static Matrix4x4 operator +(Matrix4x4 value1, Matrix4x4 value2)
    parameters:
    - id: value1
      type: Vim.Math3d.Matrix4x4
      description: The first source matrix.
    - id: value2
      type: Vim.Math3d.Matrix4x4
      description: The second source matrix.
    return:
      type: Vim.Math3d.Matrix4x4
      description: The resulting matrix.
    content.vb: Public Shared Operator +(value1 As Matrix4x4, value2 As Matrix4x4) As Matrix4x4
  overload: Vim.Math3d.Matrix4x4.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Matrix4x4.op_Subtraction(Vim.Math3d.Matrix4x4,Vim.Math3d.Matrix4x4)
  commentId: M:Vim.Math3d.Matrix4x4.op_Subtraction(Vim.Math3d.Matrix4x4,Vim.Math3d.Matrix4x4)
  id: op_Subtraction(Vim.Math3d.Matrix4x4,Vim.Math3d.Matrix4x4)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: Subtraction(Matrix4x4, Matrix4x4)
  nameWithType: Matrix4x4.Subtraction(Matrix4x4, Matrix4x4)
  fullName: Vim.Math3d.Matrix4x4.Subtraction(Vim.Math3d.Matrix4x4, Vim.Math3d.Matrix4x4)
  type: Operator
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Subtraction
    path: ../src/Matrix4x4.cs
    startLine: 1648
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nSubtracts the second matrix from the first.\n"
  example: []
  syntax:
    content: public static Matrix4x4 operator -(Matrix4x4 value1, Matrix4x4 value2)
    parameters:
    - id: value1
      type: Vim.Math3d.Matrix4x4
      description: The first source matrix.
    - id: value2
      type: Vim.Math3d.Matrix4x4
      description: The second source matrix.
    return:
      type: Vim.Math3d.Matrix4x4
      description: The result of the subtraction.
    content.vb: Public Shared Operator -(value1 As Matrix4x4, value2 As Matrix4x4) As Matrix4x4
  overload: Vim.Math3d.Matrix4x4.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Matrix4x4.op_Multiply(Vim.Math3d.Matrix4x4,Vim.Math3d.Matrix4x4)
  commentId: M:Vim.Math3d.Matrix4x4.op_Multiply(Vim.Math3d.Matrix4x4,Vim.Math3d.Matrix4x4)
  id: op_Multiply(Vim.Math3d.Matrix4x4,Vim.Math3d.Matrix4x4)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: Multiply(Matrix4x4, Matrix4x4)
  nameWithType: Matrix4x4.Multiply(Matrix4x4, Matrix4x4)
  fullName: Vim.Math3d.Matrix4x4.Multiply(Vim.Math3d.Matrix4x4, Vim.Math3d.Matrix4x4)
  type: Operator
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Multiply
    path: ../src/Matrix4x4.cs
    startLine: 1679
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nMultiplies a matrix by another matrix.\n"
  example: []
  syntax:
    content: public static Matrix4x4 operator *(Matrix4x4 value1, Matrix4x4 value2)
    parameters:
    - id: value1
      type: Vim.Math3d.Matrix4x4
      description: The first source matrix.
    - id: value2
      type: Vim.Math3d.Matrix4x4
      description: The second source matrix.
    return:
      type: Vim.Math3d.Matrix4x4
      description: The result of the multiplication.
    content.vb: Public Shared Operator *(value1 As Matrix4x4, value2 As Matrix4x4) As Matrix4x4
  overload: Vim.Math3d.Matrix4x4.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Matrix4x4.op_Multiply(Vim.Math3d.Matrix4x4,System.Single)
  commentId: M:Vim.Math3d.Matrix4x4.op_Multiply(Vim.Math3d.Matrix4x4,System.Single)
  id: op_Multiply(Vim.Math3d.Matrix4x4,System.Single)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: Multiply(Matrix4x4, Single)
  nameWithType: Matrix4x4.Multiply(Matrix4x4, Single)
  fullName: Vim.Math3d.Matrix4x4.Multiply(Vim.Math3d.Matrix4x4, System.Single)
  type: Operator
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Multiply
    path: ../src/Matrix4x4.cs
    startLine: 1715
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nMultiplies a matrix by a scalar value.\n"
  example: []
  syntax:
    content: public static Matrix4x4 operator *(Matrix4x4 value1, float value2)
    parameters:
    - id: value1
      type: Vim.Math3d.Matrix4x4
    - id: value2
      type: System.Single
    return:
      type: Vim.Math3d.Matrix4x4
    content.vb: Public Shared Operator *(value1 As Matrix4x4, value2 As Single) As Matrix4x4
  overload: Vim.Math3d.Matrix4x4.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Matrix4x4.op_Equality(Vim.Math3d.Matrix4x4,Vim.Math3d.Matrix4x4)
  commentId: M:Vim.Math3d.Matrix4x4.op_Equality(Vim.Math3d.Matrix4x4,Vim.Math3d.Matrix4x4)
  id: op_Equality(Vim.Math3d.Matrix4x4,Vim.Math3d.Matrix4x4)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: Equality(Matrix4x4, Matrix4x4)
  nameWithType: Matrix4x4.Equality(Matrix4x4, Matrix4x4)
  fullName: Vim.Math3d.Matrix4x4.Equality(Vim.Math3d.Matrix4x4, Vim.Math3d.Matrix4x4)
  type: Operator
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Equality
    path: ../src/Matrix4x4.cs
    startLine: 1742
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nReturns a boolean indicating whether the given two matrices are equal.\n"
  example: []
  syntax:
    content: public static bool operator ==(Matrix4x4 value1, Matrix4x4 value2)
    parameters:
    - id: value1
      type: Vim.Math3d.Matrix4x4
    - id: value2
      type: Vim.Math3d.Matrix4x4
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(value1 As Matrix4x4, value2 As Matrix4x4) As Boolean
  overload: Vim.Math3d.Matrix4x4.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Matrix4x4.op_Inequality(Vim.Math3d.Matrix4x4,Vim.Math3d.Matrix4x4)
  commentId: M:Vim.Math3d.Matrix4x4.op_Inequality(Vim.Math3d.Matrix4x4,Vim.Math3d.Matrix4x4)
  id: op_Inequality(Vim.Math3d.Matrix4x4,Vim.Math3d.Matrix4x4)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: Inequality(Matrix4x4, Matrix4x4)
  nameWithType: Matrix4x4.Inequality(Matrix4x4, Matrix4x4)
  fullName: Vim.Math3d.Matrix4x4.Inequality(Vim.Math3d.Matrix4x4, Vim.Math3d.Matrix4x4)
  type: Operator
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Inequality
    path: ../src/Matrix4x4.cs
    startLine: 1752
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nReturns a boolean indicating whether the given two matrices are not equal.\n"
  example: []
  syntax:
    content: public static bool operator !=(Matrix4x4 value1, Matrix4x4 value2)
    parameters:
    - id: value1
      type: Vim.Math3d.Matrix4x4
    - id: value2
      type: Vim.Math3d.Matrix4x4
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(value1 As Matrix4x4, value2 As Matrix4x4) As Boolean
  overload: Vim.Math3d.Matrix4x4.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Matrix4x4.Equals(Vim.Math3d.Matrix4x4)
  commentId: M:Vim.Math3d.Matrix4x4.Equals(Vim.Math3d.Matrix4x4)
  id: Equals(Vim.Math3d.Matrix4x4)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: Equals(Matrix4x4)
  nameWithType: Matrix4x4.Equals(Matrix4x4)
  fullName: Vim.Math3d.Matrix4x4.Equals(Vim.Math3d.Matrix4x4)
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Equals
    path: ../src/Matrix4x4.cs
    startLine: 1764
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nReturns a boolean indicating whether this matrix instance is equal to the other given matrix.\n"
  example: []
  syntax:
    content: public bool Equals(Matrix4x4 other)
    parameters:
    - id: other
      type: Vim.Math3d.Matrix4x4
      description: The matrix to compare this instance to.
    return:
      type: System.Boolean
      description: True if the matrices are equal; False otherwise.
    content.vb: Public Function Equals(other As Matrix4x4) As Boolean
  overload: Vim.Math3d.Matrix4x4.Equals*
  implements:
  - System.IEquatable{Vim.Math3d.Matrix4x4}.Equals(Vim.Math3d.Matrix4x4)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Matrix4x4.Equals(System.Object)
  commentId: M:Vim.Math3d.Matrix4x4.Equals(System.Object)
  id: Equals(System.Object)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Matrix4x4.Equals(Object)
  fullName: Vim.Math3d.Matrix4x4.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Equals
    path: ../src/Matrix4x4.cs
    startLine: 1772
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nReturns a boolean indicating whether the given Object is equal to this matrix instance.\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The Object to compare against.
    return:
      type: System.Boolean
      description: True if the Object is equal to this matrix; False otherwise.
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: Vim.Math3d.Matrix4x4.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.Matrix4x4.ToString
  commentId: M:Vim.Math3d.Matrix4x4.ToString
  id: ToString
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Matrix4x4.ToString()
  fullName: Vim.Math3d.Matrix4x4.ToString()
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToString
    path: ../src/Matrix4x4.cs
    startLine: 1779
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nReturns a String representing this matrix instance.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: The string representation.
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: Vim.Math3d.Matrix4x4.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.Matrix4x4.GetHashCode
  commentId: M:Vim.Math3d.Matrix4x4.GetHashCode
  id: GetHashCode
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Matrix4x4.GetHashCode()
  fullName: Vim.Math3d.Matrix4x4.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: GetHashCode
    path: ../src/Matrix4x4.cs
    startLine: 1795
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nReturns the hash code for this instance.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: The hash code.
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: Vim.Math3d.Matrix4x4.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.Matrix4x4.Decompose(Vim.Math3d.Vector3@,Vim.Math3d.Quaternion@,Vim.Math3d.Vector3@)
  commentId: M:Vim.Math3d.Matrix4x4.Decompose(Vim.Math3d.Vector3@,Vim.Math3d.Quaternion@,Vim.Math3d.Vector3@)
  id: Decompose(Vim.Math3d.Vector3@,Vim.Math3d.Quaternion@,Vim.Math3d.Vector3@)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: Decompose(out Vector3, out Quaternion, out Vector3)
  nameWithType: Matrix4x4.Decompose(out Vector3, out Quaternion, out Vector3)
  fullName: Vim.Math3d.Matrix4x4.Decompose(out Vim.Math3d.Vector3, out Vim.Math3d.Quaternion, out Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Decompose
    path: ../src/Matrix4x4.cs
    startLine: 1812
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nAttempts to extract the scale, translation, and rotation components from the given scale/rotation/translation matrix.\nIf successful, the out parameters will contained the extracted values.\nhttps://referencesource.microsoft.com/#System.Numerics/System/Numerics/Matrix4x4.cs\n"
  example: []
  syntax:
    content: public bool Decompose(out Vector3 scale, out Quaternion rotation, out Vector3 translation)
    parameters:
    - id: scale
      type: Vim.Math3d.Vector3
    - id: rotation
      type: Vim.Math3d.Quaternion
    - id: translation
      type: Vim.Math3d.Vector3
    return:
      type: System.Boolean
    content.vb: Public Function Decompose(ByRef scale As Vector3, ByRef rotation As Quaternion, ByRef translation As Vector3) As Boolean
  overload: Vim.Math3d.Matrix4x4.Decompose*
  nameWithType.vb: Matrix4x4.Decompose(ByRef Vector3, ByRef Quaternion, ByRef Vector3)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Vim.Math3d.Matrix4x4.Decompose(ByRef Vim.Math3d.Vector3, ByRef Vim.Math3d.Quaternion, ByRef Vim.Math3d.Vector3)
  name.vb: Decompose(ByRef Vector3, ByRef Quaternion, ByRef Vector3)
- uid: Vim.Math3d.Matrix4x4.Decompose(Vim.Math3d.Matrix4x4,Vim.Math3d.Vector3@,Vim.Math3d.Quaternion@,Vim.Math3d.Vector3@)
  commentId: M:Vim.Math3d.Matrix4x4.Decompose(Vim.Math3d.Matrix4x4,Vim.Math3d.Vector3@,Vim.Math3d.Quaternion@,Vim.Math3d.Vector3@)
  id: Decompose(Vim.Math3d.Matrix4x4,Vim.Math3d.Vector3@,Vim.Math3d.Quaternion@,Vim.Math3d.Vector3@)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: Decompose(Matrix4x4, out Vector3, out Quaternion, out Vector3)
  nameWithType: Matrix4x4.Decompose(Matrix4x4, out Vector3, out Quaternion, out Vector3)
  fullName: Vim.Math3d.Matrix4x4.Decompose(Vim.Math3d.Matrix4x4, out Vim.Math3d.Vector3, out Vim.Math3d.Quaternion, out Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Decompose
    path: ../src/Matrix4x4.cs
    startLine: 1821
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nAttempts to extract the scale, translation, and rotation components from the given scale/rotation/translation matrix.\nIf successful, the out parameters will contained the extracted values.\nhttps://referencesource.microsoft.com/#System.Numerics/System/Numerics/Matrix4x4.cs\n"
  example: []
  syntax:
    content: public static bool Decompose(Matrix4x4 matrix, out Vector3 scale, out Quaternion rotation, out Vector3 translation)
    parameters:
    - id: matrix
      type: Vim.Math3d.Matrix4x4
    - id: scale
      type: Vim.Math3d.Vector3
    - id: rotation
      type: Vim.Math3d.Quaternion
    - id: translation
      type: Vim.Math3d.Vector3
    return:
      type: System.Boolean
    content.vb: Public Shared Function Decompose(matrix As Matrix4x4, ByRef scale As Vector3, ByRef rotation As Quaternion, ByRef translation As Vector3) As Boolean
  overload: Vim.Math3d.Matrix4x4.Decompose*
  nameWithType.vb: Matrix4x4.Decompose(Matrix4x4, ByRef Vector3, ByRef Quaternion, ByRef Vector3)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.Matrix4x4.Decompose(Vim.Math3d.Matrix4x4, ByRef Vim.Math3d.Vector3, ByRef Vim.Math3d.Quaternion, ByRef Vim.Math3d.Vector3)
  name.vb: Decompose(Matrix4x4, ByRef Vector3, ByRef Quaternion, ByRef Vector3)
- uid: Vim.Math3d.Matrix4x4.Transform(Vim.Math3d.Matrix4x4)
  commentId: M:Vim.Math3d.Matrix4x4.Transform(Vim.Math3d.Matrix4x4)
  id: Transform(Vim.Math3d.Matrix4x4)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: Transform(Matrix4x4)
  nameWithType: Matrix4x4.Transform(Matrix4x4)
  fullName: Vim.Math3d.Matrix4x4.Transform(Vim.Math3d.Matrix4x4)
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Transform
    path: ../src/Matrix4x4.cs
    startLine: 1982
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public Matrix4x4 Transform(Matrix4x4 mat)
    parameters:
    - id: mat
      type: Vim.Math3d.Matrix4x4
    return:
      type: Vim.Math3d.Matrix4x4
    content.vb: Public Function Transform(mat As Matrix4x4) As Matrix4x4
  overload: Vim.Math3d.Matrix4x4.Transform*
  implements:
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Matrix4x4}.Transform(Vim.Math3d.Matrix4x4)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Matrix4x4.CreateTRS(Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Matrix4x4.CreateTRS(Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
  id: CreateTRS(Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: CreateTRS(Vector3, Quaternion, Vector3)
  nameWithType: Matrix4x4.CreateTRS(Vector3, Quaternion, Vector3)
  fullName: Vim.Math3d.Matrix4x4.CreateTRS(Vim.Math3d.Vector3, Vim.Math3d.Quaternion, Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: CreateTRS
    path: ../src/Matrix4x4.cs
    startLine: 1986
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Matrix4x4 CreateTRS(Vector3 translation, Quaternion rotation, Vector3 scale)
    parameters:
    - id: translation
      type: Vim.Math3d.Vector3
    - id: rotation
      type: Vim.Math3d.Quaternion
    - id: scale
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Matrix4x4
    content.vb: Public Shared Function CreateTRS(translation As Vector3, rotation As Quaternion, scale As Vector3) As Matrix4x4
  overload: Vim.Math3d.Matrix4x4.CreateTRS*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Matrix4x4.ExtractDirectScale
  commentId: M:Vim.Math3d.Matrix4x4.ExtractDirectScale
  id: ExtractDirectScale
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: ExtractDirectScale()
  nameWithType: Matrix4x4.ExtractDirectScale()
  fullName: Vim.Math3d.Matrix4x4.ExtractDirectScale()
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ExtractDirectScale
    path: ../src/Matrix4x4.cs
    startLine: 2001
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public Vector3 ExtractDirectScale()
    return:
      type: Vim.Math3d.Vector3
    content.vb: Public Function ExtractDirectScale As Vector3
  overload: Vim.Math3d.Matrix4x4.ExtractDirectScale*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Matrix4x4.ScaleTranslation(System.Single)
  commentId: M:Vim.Math3d.Matrix4x4.ScaleTranslation(System.Single)
  id: ScaleTranslation(System.Single)
  parent: Vim.Math3d.Matrix4x4
  langs:
  - csharp
  - vb
  name: ScaleTranslation(Single)
  nameWithType: Matrix4x4.ScaleTranslation(Single)
  fullName: Vim.Math3d.Matrix4x4.ScaleTranslation(System.Single)
  type: Method
  source:
    remote:
      path: src/Matrix4x4.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ScaleTranslation
    path: ../src/Matrix4x4.cs
    startLine: 2009
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public Matrix4x4 ScaleTranslation(float amount)
    parameters:
    - id: amount
      type: System.Single
    return:
      type: Vim.Math3d.Matrix4x4
    content.vb: Public Function ScaleTranslation(amount As Single) As Matrix4x4
  overload: Vim.Math3d.Matrix4x4.ScaleTranslation*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Vim.Math3d
  commentId: N:Vim.Math3d
  name: Vim.Math3d
  nameWithType: Vim.Math3d
  fullName: Vim.Math3d
- uid: System.IEquatable{Vim.Math3d.Matrix4x4}
  commentId: T:System.IEquatable{Vim.Math3d.Matrix4x4}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Matrix4x4>
  nameWithType: IEquatable<Matrix4x4>
  fullName: System.IEquatable<Vim.Math3d.Matrix4x4>
  nameWithType.vb: IEquatable(Of Matrix4x4)
  fullName.vb: System.IEquatable(Of Vim.Math3d.Matrix4x4)
  name.vb: IEquatable(Of Matrix4x4)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.Matrix4x4
    name: Matrix4x4
    nameWithType: Matrix4x4
    fullName: Vim.Math3d.Matrix4x4
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.Matrix4x4
    name: Matrix4x4
    nameWithType: Matrix4x4
    fullName: Vim.Math3d.Matrix4x4
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Matrix4x4}
  commentId: T:Vim.Math3d.ITransformable3D{Vim.Math3d.Matrix4x4}
  parent: Vim.Math3d
  definition: Vim.Math3d.ITransformable3D`1
  name: ITransformable3D<Matrix4x4>
  nameWithType: ITransformable3D<Matrix4x4>
  fullName: Vim.Math3d.ITransformable3D<Vim.Math3d.Matrix4x4>
  nameWithType.vb: ITransformable3D(Of Matrix4x4)
  fullName.vb: Vim.Math3d.ITransformable3D(Of Vim.Math3d.Matrix4x4)
  name.vb: ITransformable3D(Of Matrix4x4)
  spec.csharp:
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.Matrix4x4
    name: Matrix4x4
    nameWithType: Matrix4x4
    fullName: Vim.Math3d.Matrix4x4
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.Matrix4x4
    name: Matrix4x4
    nameWithType: Matrix4x4
    fullName: Vim.Math3d.Matrix4x4
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Matrix4x4}.Vim.Math3d.Transformable3D.Transform``1(Vim.Math3d.Matrix4x4[])
  commentId: M:Vim.Math3d.Transformable3D.Transform``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Matrix4x4[])
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.Transform``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Matrix4x4[])
  name: Transform<Matrix4x4>(Matrix4x4[])
  nameWithType: Transformable3D.Transform<Matrix4x4>(Matrix4x4[])
  fullName: Vim.Math3d.Transformable3D.Transform<Vim.Math3d.Matrix4x4>(Vim.Math3d.Matrix4x4[])
  nameWithType.vb: Transformable3D.Transform(Of Matrix4x4)(Matrix4x4())
  fullName.vb: Vim.Math3d.Transformable3D.Transform(Of Vim.Math3d.Matrix4x4)(Vim.Math3d.Matrix4x4())
  name.vb: Transform(Of Matrix4x4)(Matrix4x4())
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Transform``1(Vim.Math3d.Matrix4x4[])
    name: Transform<Matrix4x4>
    nameWithType: Transformable3D.Transform<Matrix4x4>
    fullName: Vim.Math3d.Transformable3D.Transform<Vim.Math3d.Matrix4x4>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Matrix4x4
    name: Matrix4x4
    nameWithType: Matrix4x4
    fullName: Vim.Math3d.Matrix4x4
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Transform``1(Vim.Math3d.Matrix4x4[])
    name: Transform(Of Matrix4x4)
    nameWithType: Transformable3D.Transform(Of Matrix4x4)
    fullName: Vim.Math3d.Transformable3D.Transform(Of Vim.Math3d.Matrix4x4)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Matrix4x4
    name: Matrix4x4
    nameWithType: Matrix4x4
    fullName: Vim.Math3d.Matrix4x4
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Matrix4x4}.Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
  name: Translate<Matrix4x4>(Vector3)
  nameWithType: Transformable3D.Translate<Matrix4x4>(Vector3)
  fullName: Vim.Math3d.Transformable3D.Translate<Vim.Math3d.Matrix4x4>(Vim.Math3d.Vector3)
  nameWithType.vb: Transformable3D.Translate(Of Matrix4x4)(Vector3)
  fullName.vb: Vim.Math3d.Transformable3D.Translate(Of Vim.Math3d.Matrix4x4)(Vim.Math3d.Vector3)
  name.vb: Translate(Of Matrix4x4)(Vector3)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.Vector3)
    name: Translate<Matrix4x4>
    nameWithType: Transformable3D.Translate<Matrix4x4>
    fullName: Vim.Math3d.Transformable3D.Translate<Vim.Math3d.Matrix4x4>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.Vector3)
    name: Translate(Of Matrix4x4)
    nameWithType: Transformable3D.Translate(Of Matrix4x4)
    fullName: Vim.Math3d.Transformable3D.Translate(Of Vim.Math3d.Matrix4x4)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Matrix4x4}.Vim.Math3d.Transformable3D.Translate``1(System.Single,System.Single,System.Single)
  commentId: M:Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  name: Translate<Matrix4x4>(Single, Single, Single)
  nameWithType: Transformable3D.Translate<Matrix4x4>(Single, Single, Single)
  fullName: Vim.Math3d.Transformable3D.Translate<Vim.Math3d.Matrix4x4>(System.Single, System.Single, System.Single)
  nameWithType.vb: Transformable3D.Translate(Of Matrix4x4)(Single, Single, Single)
  fullName.vb: Vim.Math3d.Transformable3D.Translate(Of Vim.Math3d.Matrix4x4)(System.Single, System.Single, System.Single)
  name.vb: Translate(Of Matrix4x4)(Single, Single, Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Translate``1(System.Single,System.Single,System.Single)
    name: Translate<Matrix4x4>
    nameWithType: Transformable3D.Translate<Matrix4x4>
    fullName: Vim.Math3d.Transformable3D.Translate<Vim.Math3d.Matrix4x4>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Translate``1(System.Single,System.Single,System.Single)
    name: Translate(Of Matrix4x4)
    nameWithType: Transformable3D.Translate(Of Matrix4x4)
    fullName: Vim.Math3d.Transformable3D.Translate(Of Vim.Math3d.Matrix4x4)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Matrix4x4}.Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.Quaternion)
  commentId: M:Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Quaternion)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Quaternion)
  name: Rotate<Matrix4x4>(Quaternion)
  nameWithType: Transformable3D.Rotate<Matrix4x4>(Quaternion)
  fullName: Vim.Math3d.Transformable3D.Rotate<Vim.Math3d.Matrix4x4>(Vim.Math3d.Quaternion)
  nameWithType.vb: Transformable3D.Rotate(Of Matrix4x4)(Quaternion)
  fullName.vb: Vim.Math3d.Transformable3D.Rotate(Of Vim.Math3d.Matrix4x4)(Vim.Math3d.Quaternion)
  name.vb: Rotate(Of Matrix4x4)(Quaternion)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.Quaternion)
    name: Rotate<Matrix4x4>
    nameWithType: Transformable3D.Rotate<Matrix4x4>
    fullName: Vim.Math3d.Transformable3D.Rotate<Vim.Math3d.Matrix4x4>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Quaternion
    name: Quaternion
    nameWithType: Quaternion
    fullName: Vim.Math3d.Quaternion
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.Quaternion)
    name: Rotate(Of Matrix4x4)
    nameWithType: Transformable3D.Rotate(Of Matrix4x4)
    fullName: Vim.Math3d.Transformable3D.Rotate(Of Vim.Math3d.Matrix4x4)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Quaternion
    name: Quaternion
    nameWithType: Quaternion
    fullName: Vim.Math3d.Quaternion
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Matrix4x4}.Vim.Math3d.Transformable3D.Scale``1(System.Single)
  commentId: M:Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  name: Scale<Matrix4x4>(Single)
  nameWithType: Transformable3D.Scale<Matrix4x4>(Single)
  fullName: Vim.Math3d.Transformable3D.Scale<Vim.Math3d.Matrix4x4>(System.Single)
  nameWithType.vb: Transformable3D.Scale(Of Matrix4x4)(Single)
  fullName.vb: Vim.Math3d.Transformable3D.Scale(Of Vim.Math3d.Matrix4x4)(System.Single)
  name.vb: Scale(Of Matrix4x4)(Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Scale``1(System.Single)
    name: Scale<Matrix4x4>
    nameWithType: Transformable3D.Scale<Matrix4x4>
    fullName: Vim.Math3d.Transformable3D.Scale<Vim.Math3d.Matrix4x4>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Scale``1(System.Single)
    name: Scale(Of Matrix4x4)
    nameWithType: Transformable3D.Scale(Of Matrix4x4)
    fullName: Vim.Math3d.Transformable3D.Scale(Of Vim.Math3d.Matrix4x4)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Matrix4x4}.Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
  name: Scale<Matrix4x4>(Vector3)
  nameWithType: Transformable3D.Scale<Matrix4x4>(Vector3)
  fullName: Vim.Math3d.Transformable3D.Scale<Vim.Math3d.Matrix4x4>(Vim.Math3d.Vector3)
  nameWithType.vb: Transformable3D.Scale(Of Matrix4x4)(Vector3)
  fullName.vb: Vim.Math3d.Transformable3D.Scale(Of Vim.Math3d.Matrix4x4)(Vim.Math3d.Vector3)
  name.vb: Scale(Of Matrix4x4)(Vector3)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.Vector3)
    name: Scale<Matrix4x4>
    nameWithType: Transformable3D.Scale<Matrix4x4>
    fullName: Vim.Math3d.Transformable3D.Scale<Vim.Math3d.Matrix4x4>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.Vector3)
    name: Scale(Of Matrix4x4)
    nameWithType: Transformable3D.Scale(Of Matrix4x4)
    fullName: Vim.Math3d.Transformable3D.Scale(Of Vim.Math3d.Matrix4x4)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Matrix4x4}.Vim.Math3d.Transformable3D.Scale``1(System.Single,System.Single,System.Single)
  commentId: M:Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  name: Scale<Matrix4x4>(Single, Single, Single)
  nameWithType: Transformable3D.Scale<Matrix4x4>(Single, Single, Single)
  fullName: Vim.Math3d.Transformable3D.Scale<Vim.Math3d.Matrix4x4>(System.Single, System.Single, System.Single)
  nameWithType.vb: Transformable3D.Scale(Of Matrix4x4)(Single, Single, Single)
  fullName.vb: Vim.Math3d.Transformable3D.Scale(Of Vim.Math3d.Matrix4x4)(System.Single, System.Single, System.Single)
  name.vb: Scale(Of Matrix4x4)(Single, Single, Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Scale``1(System.Single,System.Single,System.Single)
    name: Scale<Matrix4x4>
    nameWithType: Transformable3D.Scale<Matrix4x4>
    fullName: Vim.Math3d.Transformable3D.Scale<Vim.Math3d.Matrix4x4>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Scale``1(System.Single,System.Single,System.Single)
    name: Scale(Of Matrix4x4)
    nameWithType: Transformable3D.Scale(Of Matrix4x4)
    fullName: Vim.Math3d.Transformable3D.Scale(Of Vim.Math3d.Matrix4x4)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Matrix4x4}.Vim.Math3d.Transformable3D.ScaleX``1(System.Single)
  commentId: M:Vim.Math3d.Transformable3D.ScaleX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.ScaleX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  name: ScaleX<Matrix4x4>(Single)
  nameWithType: Transformable3D.ScaleX<Matrix4x4>(Single)
  fullName: Vim.Math3d.Transformable3D.ScaleX<Vim.Math3d.Matrix4x4>(System.Single)
  nameWithType.vb: Transformable3D.ScaleX(Of Matrix4x4)(Single)
  fullName.vb: Vim.Math3d.Transformable3D.ScaleX(Of Vim.Math3d.Matrix4x4)(System.Single)
  name.vb: ScaleX(Of Matrix4x4)(Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.ScaleX``1(System.Single)
    name: ScaleX<Matrix4x4>
    nameWithType: Transformable3D.ScaleX<Matrix4x4>
    fullName: Vim.Math3d.Transformable3D.ScaleX<Vim.Math3d.Matrix4x4>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.ScaleX``1(System.Single)
    name: ScaleX(Of Matrix4x4)
    nameWithType: Transformable3D.ScaleX(Of Matrix4x4)
    fullName: Vim.Math3d.Transformable3D.ScaleX(Of Vim.Math3d.Matrix4x4)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Matrix4x4}.Vim.Math3d.Transformable3D.ScaleY``1(System.Single)
  commentId: M:Vim.Math3d.Transformable3D.ScaleY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.ScaleY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  name: ScaleY<Matrix4x4>(Single)
  nameWithType: Transformable3D.ScaleY<Matrix4x4>(Single)
  fullName: Vim.Math3d.Transformable3D.ScaleY<Vim.Math3d.Matrix4x4>(System.Single)
  nameWithType.vb: Transformable3D.ScaleY(Of Matrix4x4)(Single)
  fullName.vb: Vim.Math3d.Transformable3D.ScaleY(Of Vim.Math3d.Matrix4x4)(System.Single)
  name.vb: ScaleY(Of Matrix4x4)(Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.ScaleY``1(System.Single)
    name: ScaleY<Matrix4x4>
    nameWithType: Transformable3D.ScaleY<Matrix4x4>
    fullName: Vim.Math3d.Transformable3D.ScaleY<Vim.Math3d.Matrix4x4>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.ScaleY``1(System.Single)
    name: ScaleY(Of Matrix4x4)
    nameWithType: Transformable3D.ScaleY(Of Matrix4x4)
    fullName: Vim.Math3d.Transformable3D.ScaleY(Of Vim.Math3d.Matrix4x4)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Matrix4x4}.Vim.Math3d.Transformable3D.ScaleZ``1(System.Single)
  commentId: M:Vim.Math3d.Transformable3D.ScaleZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.ScaleZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  name: ScaleZ<Matrix4x4>(Single)
  nameWithType: Transformable3D.ScaleZ<Matrix4x4>(Single)
  fullName: Vim.Math3d.Transformable3D.ScaleZ<Vim.Math3d.Matrix4x4>(System.Single)
  nameWithType.vb: Transformable3D.ScaleZ(Of Matrix4x4)(Single)
  fullName.vb: Vim.Math3d.Transformable3D.ScaleZ(Of Vim.Math3d.Matrix4x4)(System.Single)
  name.vb: ScaleZ(Of Matrix4x4)(Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.ScaleZ``1(System.Single)
    name: ScaleZ<Matrix4x4>
    nameWithType: Transformable3D.ScaleZ<Matrix4x4>
    fullName: Vim.Math3d.Transformable3D.ScaleZ<Vim.Math3d.Matrix4x4>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.ScaleZ``1(System.Single)
    name: ScaleZ(Of Matrix4x4)
    nameWithType: Transformable3D.ScaleZ(Of Matrix4x4)
    fullName: Vim.Math3d.Transformable3D.ScaleZ(Of Vim.Math3d.Matrix4x4)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Matrix4x4}.Vim.Math3d.Transformable3D.LookAt``1(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Transformable3D.LookAt``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.LookAt``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  name: LookAt<Matrix4x4>(Vector3, Vector3, Vector3)
  nameWithType: Transformable3D.LookAt<Matrix4x4>(Vector3, Vector3, Vector3)
  fullName: Vim.Math3d.Transformable3D.LookAt<Vim.Math3d.Matrix4x4>(Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  nameWithType.vb: Transformable3D.LookAt(Of Matrix4x4)(Vector3, Vector3, Vector3)
  fullName.vb: Vim.Math3d.Transformable3D.LookAt(Of Vim.Math3d.Matrix4x4)(Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  name.vb: LookAt(Of Matrix4x4)(Vector3, Vector3, Vector3)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.LookAt``1(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
    name: LookAt<Matrix4x4>
    nameWithType: Transformable3D.LookAt<Matrix4x4>
    fullName: Vim.Math3d.Transformable3D.LookAt<Vim.Math3d.Matrix4x4>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.LookAt``1(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
    name: LookAt(Of Matrix4x4)
    nameWithType: Transformable3D.LookAt(Of Matrix4x4)
    fullName: Vim.Math3d.Transformable3D.LookAt(Of Vim.Math3d.Matrix4x4)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Matrix4x4}.Vim.Math3d.Transformable3D.RotateAround``1(Vim.Math3d.Vector3,System.Single)
  commentId: M:Vim.Math3d.Transformable3D.RotateAround``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,System.Single)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.RotateAround``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,System.Single)
  name: RotateAround<Matrix4x4>(Vector3, Single)
  nameWithType: Transformable3D.RotateAround<Matrix4x4>(Vector3, Single)
  fullName: Vim.Math3d.Transformable3D.RotateAround<Vim.Math3d.Matrix4x4>(Vim.Math3d.Vector3, System.Single)
  nameWithType.vb: Transformable3D.RotateAround(Of Matrix4x4)(Vector3, Single)
  fullName.vb: Vim.Math3d.Transformable3D.RotateAround(Of Vim.Math3d.Matrix4x4)(Vim.Math3d.Vector3, System.Single)
  name.vb: RotateAround(Of Matrix4x4)(Vector3, Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.RotateAround``1(Vim.Math3d.Vector3,System.Single)
    name: RotateAround<Matrix4x4>
    nameWithType: Transformable3D.RotateAround<Matrix4x4>
    fullName: Vim.Math3d.Transformable3D.RotateAround<Vim.Math3d.Matrix4x4>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.RotateAround``1(Vim.Math3d.Vector3,System.Single)
    name: RotateAround(Of Matrix4x4)
    nameWithType: Transformable3D.RotateAround(Of Matrix4x4)
    fullName: Vim.Math3d.Transformable3D.RotateAround(Of Vim.Math3d.Matrix4x4)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Matrix4x4}.Vim.Math3d.Transformable3D.Rotate``1(System.Single,System.Single,System.Single)
  commentId: M:Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  name: Rotate<Matrix4x4>(Single, Single, Single)
  nameWithType: Transformable3D.Rotate<Matrix4x4>(Single, Single, Single)
  fullName: Vim.Math3d.Transformable3D.Rotate<Vim.Math3d.Matrix4x4>(System.Single, System.Single, System.Single)
  nameWithType.vb: Transformable3D.Rotate(Of Matrix4x4)(Single, Single, Single)
  fullName.vb: Vim.Math3d.Transformable3D.Rotate(Of Vim.Math3d.Matrix4x4)(System.Single, System.Single, System.Single)
  name.vb: Rotate(Of Matrix4x4)(Single, Single, Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Rotate``1(System.Single,System.Single,System.Single)
    name: Rotate<Matrix4x4>
    nameWithType: Transformable3D.Rotate<Matrix4x4>
    fullName: Vim.Math3d.Transformable3D.Rotate<Vim.Math3d.Matrix4x4>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Rotate``1(System.Single,System.Single,System.Single)
    name: Rotate(Of Matrix4x4)
    nameWithType: Transformable3D.Rotate(Of Matrix4x4)
    fullName: Vim.Math3d.Transformable3D.Rotate(Of Vim.Math3d.Matrix4x4)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Matrix4x4}.Vim.Math3d.Transformable3D.Reflect``1(Vim.Math3d.Plane)
  commentId: M:Vim.Math3d.Transformable3D.Reflect``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Plane)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.Reflect``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Plane)
  name: Reflect<Matrix4x4>(Plane)
  nameWithType: Transformable3D.Reflect<Matrix4x4>(Plane)
  fullName: Vim.Math3d.Transformable3D.Reflect<Vim.Math3d.Matrix4x4>(Vim.Math3d.Plane)
  nameWithType.vb: Transformable3D.Reflect(Of Matrix4x4)(Plane)
  fullName.vb: Vim.Math3d.Transformable3D.Reflect(Of Vim.Math3d.Matrix4x4)(Vim.Math3d.Plane)
  name.vb: Reflect(Of Matrix4x4)(Plane)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Reflect``1(Vim.Math3d.Plane)
    name: Reflect<Matrix4x4>
    nameWithType: Transformable3D.Reflect<Matrix4x4>
    fullName: Vim.Math3d.Transformable3D.Reflect<Vim.Math3d.Matrix4x4>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Plane
    name: Plane
    nameWithType: Plane
    fullName: Vim.Math3d.Plane
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Reflect``1(Vim.Math3d.Plane)
    name: Reflect(Of Matrix4x4)
    nameWithType: Transformable3D.Reflect(Of Matrix4x4)
    fullName: Vim.Math3d.Transformable3D.Reflect(Of Vim.Math3d.Matrix4x4)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Plane
    name: Plane
    nameWithType: Plane
    fullName: Vim.Math3d.Plane
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Matrix4x4}.Vim.Math3d.Transformable3D.RotateX``1(System.Single)
  commentId: M:Vim.Math3d.Transformable3D.RotateX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.RotateX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  name: RotateX<Matrix4x4>(Single)
  nameWithType: Transformable3D.RotateX<Matrix4x4>(Single)
  fullName: Vim.Math3d.Transformable3D.RotateX<Vim.Math3d.Matrix4x4>(System.Single)
  nameWithType.vb: Transformable3D.RotateX(Of Matrix4x4)(Single)
  fullName.vb: Vim.Math3d.Transformable3D.RotateX(Of Vim.Math3d.Matrix4x4)(System.Single)
  name.vb: RotateX(Of Matrix4x4)(Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.RotateX``1(System.Single)
    name: RotateX<Matrix4x4>
    nameWithType: Transformable3D.RotateX<Matrix4x4>
    fullName: Vim.Math3d.Transformable3D.RotateX<Vim.Math3d.Matrix4x4>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.RotateX``1(System.Single)
    name: RotateX(Of Matrix4x4)
    nameWithType: Transformable3D.RotateX(Of Matrix4x4)
    fullName: Vim.Math3d.Transformable3D.RotateX(Of Vim.Math3d.Matrix4x4)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Matrix4x4}.Vim.Math3d.Transformable3D.RotateY``1(System.Single)
  commentId: M:Vim.Math3d.Transformable3D.RotateY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.RotateY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  name: RotateY<Matrix4x4>(Single)
  nameWithType: Transformable3D.RotateY<Matrix4x4>(Single)
  fullName: Vim.Math3d.Transformable3D.RotateY<Vim.Math3d.Matrix4x4>(System.Single)
  nameWithType.vb: Transformable3D.RotateY(Of Matrix4x4)(Single)
  fullName.vb: Vim.Math3d.Transformable3D.RotateY(Of Vim.Math3d.Matrix4x4)(System.Single)
  name.vb: RotateY(Of Matrix4x4)(Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.RotateY``1(System.Single)
    name: RotateY<Matrix4x4>
    nameWithType: Transformable3D.RotateY<Matrix4x4>
    fullName: Vim.Math3d.Transformable3D.RotateY<Vim.Math3d.Matrix4x4>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.RotateY``1(System.Single)
    name: RotateY(Of Matrix4x4)
    nameWithType: Transformable3D.RotateY(Of Matrix4x4)
    fullName: Vim.Math3d.Transformable3D.RotateY(Of Vim.Math3d.Matrix4x4)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Matrix4x4}.Vim.Math3d.Transformable3D.RotateZ``1(System.Single)
  commentId: M:Vim.Math3d.Transformable3D.RotateZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.RotateZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  name: RotateZ<Matrix4x4>(Single)
  nameWithType: Transformable3D.RotateZ<Matrix4x4>(Single)
  fullName: Vim.Math3d.Transformable3D.RotateZ<Vim.Math3d.Matrix4x4>(System.Single)
  nameWithType.vb: Transformable3D.RotateZ(Of Matrix4x4)(Single)
  fullName.vb: Vim.Math3d.Transformable3D.RotateZ(Of Vim.Math3d.Matrix4x4)(System.Single)
  name.vb: RotateZ(Of Matrix4x4)(Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.RotateZ``1(System.Single)
    name: RotateZ<Matrix4x4>
    nameWithType: Transformable3D.RotateZ<Matrix4x4>
    fullName: Vim.Math3d.Transformable3D.RotateZ<Vim.Math3d.Matrix4x4>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.RotateZ``1(System.Single)
    name: RotateZ(Of Matrix4x4)
    nameWithType: Transformable3D.RotateZ(Of Matrix4x4)
    fullName: Vim.Math3d.Transformable3D.RotateZ(Of Vim.Math3d.Matrix4x4)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Matrix4x4}.Vim.Math3d.Transformable3D.TranslateRotateScale``1(Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Transformable3D.TranslateRotateScale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.TranslateRotateScale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
  name: TranslateRotateScale<Matrix4x4>(Vector3, Quaternion, Vector3)
  nameWithType: Transformable3D.TranslateRotateScale<Matrix4x4>(Vector3, Quaternion, Vector3)
  fullName: Vim.Math3d.Transformable3D.TranslateRotateScale<Vim.Math3d.Matrix4x4>(Vim.Math3d.Vector3, Vim.Math3d.Quaternion, Vim.Math3d.Vector3)
  nameWithType.vb: Transformable3D.TranslateRotateScale(Of Matrix4x4)(Vector3, Quaternion, Vector3)
  fullName.vb: Vim.Math3d.Transformable3D.TranslateRotateScale(Of Vim.Math3d.Matrix4x4)(Vim.Math3d.Vector3, Vim.Math3d.Quaternion, Vim.Math3d.Vector3)
  name.vb: TranslateRotateScale(Of Matrix4x4)(Vector3, Quaternion, Vector3)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.TranslateRotateScale``1(Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
    name: TranslateRotateScale<Matrix4x4>
    nameWithType: Transformable3D.TranslateRotateScale<Matrix4x4>
    fullName: Vim.Math3d.Transformable3D.TranslateRotateScale<Vim.Math3d.Matrix4x4>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Quaternion
    name: Quaternion
    nameWithType: Quaternion
    fullName: Vim.Math3d.Quaternion
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.TranslateRotateScale``1(Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
    name: TranslateRotateScale(Of Matrix4x4)
    nameWithType: Transformable3D.TranslateRotateScale(Of Matrix4x4)
    fullName: Vim.Math3d.Transformable3D.TranslateRotateScale(Of Vim.Math3d.Matrix4x4)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Quaternion
    name: Quaternion
    nameWithType: Quaternion
    fullName: Vim.Math3d.Quaternion
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Matrix4x4.Vim.Math3d.MathOps.ToFloats
  commentId: M:Vim.Math3d.MathOps.ToFloats(Vim.Math3d.Matrix4x4)
  parent: Vim.Math3d.MathOps
  definition: Vim.Math3d.MathOps.ToFloats(Vim.Math3d.Matrix4x4)
  name: ToFloats()
  nameWithType: MathOps.ToFloats()
  fullName: Vim.Math3d.MathOps.ToFloats()
  spec.csharp:
  - uid: Vim.Math3d.MathOps.ToFloats
    name: ToFloats
    nameWithType: MathOps.ToFloats
    fullName: Vim.Math3d.MathOps.ToFloats
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.MathOps.ToFloats
    name: ToFloats
    nameWithType: MathOps.ToFloats
    fullName: Vim.Math3d.MathOps.ToFloats
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Matrix4x4.Vim.Math3d.MathOps.RayFromProjectionMatrix(Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.MathOps.RayFromProjectionMatrix(Vim.Math3d.Matrix4x4,Vim.Math3d.Vector2)
  parent: Vim.Math3d.MathOps
  definition: Vim.Math3d.MathOps.RayFromProjectionMatrix(Vim.Math3d.Matrix4x4,Vim.Math3d.Vector2)
  name: RayFromProjectionMatrix(Vector2)
  nameWithType: MathOps.RayFromProjectionMatrix(Vector2)
  fullName: Vim.Math3d.MathOps.RayFromProjectionMatrix(Vim.Math3d.Vector2)
  spec.csharp:
  - uid: Vim.Math3d.MathOps.RayFromProjectionMatrix(Vim.Math3d.Vector2)
    name: RayFromProjectionMatrix
    nameWithType: MathOps.RayFromProjectionMatrix
    fullName: Vim.Math3d.MathOps.RayFromProjectionMatrix
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Vim.Math3d.Vector2
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.MathOps.RayFromProjectionMatrix(Vim.Math3d.Vector2)
    name: RayFromProjectionMatrix
    nameWithType: MathOps.RayFromProjectionMatrix
    fullName: Vim.Math3d.MathOps.RayFromProjectionMatrix
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Vim.Math3d.Vector2
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Matrix4x4.Vim.Math3d.MathOps.Inverse
  commentId: M:Vim.Math3d.MathOps.Inverse(Vim.Math3d.Matrix4x4)
  parent: Vim.Math3d.MathOps
  definition: Vim.Math3d.MathOps.Inverse(Vim.Math3d.Matrix4x4)
  name: Inverse()
  nameWithType: MathOps.Inverse()
  fullName: Vim.Math3d.MathOps.Inverse()
  spec.csharp:
  - uid: Vim.Math3d.MathOps.Inverse
    name: Inverse
    nameWithType: MathOps.Inverse
    fullName: Vim.Math3d.MathOps.Inverse
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.MathOps.Inverse
    name: Inverse
    nameWithType: MathOps.Inverse
    fullName: Vim.Math3d.MathOps.Inverse
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Vim.Math3d.ITransformable3D`1
  commentId: T:Vim.Math3d.ITransformable3D`1
  name: ITransformable3D<TSelf>
  nameWithType: ITransformable3D<TSelf>
  fullName: Vim.Math3d.ITransformable3D<TSelf>
  nameWithType.vb: ITransformable3D(Of TSelf)
  fullName.vb: Vim.Math3d.ITransformable3D(Of TSelf)
  name.vb: ITransformable3D(Of TSelf)
  spec.csharp:
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: TSelf
    nameWithType: TSelf
    fullName: TSelf
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSelf
    nameWithType: TSelf
    fullName: TSelf
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Vim.Math3d.Transformable3D.Transform``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Matrix4x4[])
  commentId: M:Vim.Math3d.Transformable3D.Transform``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Matrix4x4[])
  name: Transform<T>(ITransformable3D<T>, Matrix4x4[])
  nameWithType: Transformable3D.Transform<T>(ITransformable3D<T>, Matrix4x4[])
  fullName: Vim.Math3d.Transformable3D.Transform<T>(Vim.Math3d.ITransformable3D<T>, Vim.Math3d.Matrix4x4[])
  nameWithType.vb: Transformable3D.Transform(Of T)(ITransformable3D(Of T), Matrix4x4())
  fullName.vb: Vim.Math3d.Transformable3D.Transform(Of T)(Vim.Math3d.ITransformable3D(Of T), Vim.Math3d.Matrix4x4())
  name.vb: Transform(Of T)(ITransformable3D(Of T), Matrix4x4())
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Transform``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Matrix4x4[])
    name: Transform<T>
    nameWithType: Transformable3D.Transform<T>
    fullName: Vim.Math3d.Transformable3D.Transform<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Matrix4x4
    name: Matrix4x4
    nameWithType: Matrix4x4
    fullName: Vim.Math3d.Matrix4x4
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Transform``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Matrix4x4[])
    name: Transform(Of T)
    nameWithType: Transformable3D.Transform(Of T)
    fullName: Vim.Math3d.Transformable3D.Transform(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Matrix4x4
    name: Matrix4x4
    nameWithType: Matrix4x4
    fullName: Vim.Math3d.Matrix4x4
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D
  commentId: T:Vim.Math3d.Transformable3D
  parent: Vim.Math3d
  name: Transformable3D
  nameWithType: Transformable3D
  fullName: Vim.Math3d.Transformable3D
- uid: Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
  name: Translate<T>(ITransformable3D<T>, Vector3)
  nameWithType: Transformable3D.Translate<T>(ITransformable3D<T>, Vector3)
  fullName: Vim.Math3d.Transformable3D.Translate<T>(Vim.Math3d.ITransformable3D<T>, Vim.Math3d.Vector3)
  nameWithType.vb: Transformable3D.Translate(Of T)(ITransformable3D(Of T), Vector3)
  fullName.vb: Vim.Math3d.Transformable3D.Translate(Of T)(Vim.Math3d.ITransformable3D(Of T), Vim.Math3d.Vector3)
  name.vb: Translate(Of T)(ITransformable3D(Of T), Vector3)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
    name: Translate<T>
    nameWithType: Transformable3D.Translate<T>
    fullName: Vim.Math3d.Transformable3D.Translate<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
    name: Translate(Of T)
    nameWithType: Transformable3D.Translate(Of T)
    fullName: Vim.Math3d.Transformable3D.Translate(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  commentId: M:Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  isExternal: true
  name: Translate<T>(ITransformable3D<T>, Single, Single, Single)
  nameWithType: Transformable3D.Translate<T>(ITransformable3D<T>, Single, Single, Single)
  fullName: Vim.Math3d.Transformable3D.Translate<T>(Vim.Math3d.ITransformable3D<T>, System.Single, System.Single, System.Single)
  nameWithType.vb: Transformable3D.Translate(Of T)(ITransformable3D(Of T), Single, Single, Single)
  fullName.vb: Vim.Math3d.Transformable3D.Translate(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single, System.Single, System.Single)
  name.vb: Translate(Of T)(ITransformable3D(Of T), Single, Single, Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
    name: Translate<T>
    nameWithType: Transformable3D.Translate<T>
    fullName: Vim.Math3d.Transformable3D.Translate<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
    name: Translate(Of T)
    nameWithType: Transformable3D.Translate(Of T)
    fullName: Vim.Math3d.Transformable3D.Translate(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Quaternion)
  commentId: M:Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Quaternion)
  name: Rotate<T>(ITransformable3D<T>, Quaternion)
  nameWithType: Transformable3D.Rotate<T>(ITransformable3D<T>, Quaternion)
  fullName: Vim.Math3d.Transformable3D.Rotate<T>(Vim.Math3d.ITransformable3D<T>, Vim.Math3d.Quaternion)
  nameWithType.vb: Transformable3D.Rotate(Of T)(ITransformable3D(Of T), Quaternion)
  fullName.vb: Vim.Math3d.Transformable3D.Rotate(Of T)(Vim.Math3d.ITransformable3D(Of T), Vim.Math3d.Quaternion)
  name.vb: Rotate(Of T)(ITransformable3D(Of T), Quaternion)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Quaternion)
    name: Rotate<T>
    nameWithType: Transformable3D.Rotate<T>
    fullName: Vim.Math3d.Transformable3D.Rotate<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Quaternion
    name: Quaternion
    nameWithType: Quaternion
    fullName: Vim.Math3d.Quaternion
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Quaternion)
    name: Rotate(Of T)
    nameWithType: Transformable3D.Rotate(Of T)
    fullName: Vim.Math3d.Transformable3D.Rotate(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Quaternion
    name: Quaternion
    nameWithType: Quaternion
    fullName: Vim.Math3d.Quaternion
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  commentId: M:Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  isExternal: true
  name: Scale<T>(ITransformable3D<T>, Single)
  nameWithType: Transformable3D.Scale<T>(ITransformable3D<T>, Single)
  fullName: Vim.Math3d.Transformable3D.Scale<T>(Vim.Math3d.ITransformable3D<T>, System.Single)
  nameWithType.vb: Transformable3D.Scale(Of T)(ITransformable3D(Of T), Single)
  fullName.vb: Vim.Math3d.Transformable3D.Scale(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single)
  name.vb: Scale(Of T)(ITransformable3D(Of T), Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: Scale<T>
    nameWithType: Transformable3D.Scale<T>
    fullName: Vim.Math3d.Transformable3D.Scale<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: Scale(Of T)
    nameWithType: Transformable3D.Scale(Of T)
    fullName: Vim.Math3d.Transformable3D.Scale(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
  name: Scale<T>(ITransformable3D<T>, Vector3)
  nameWithType: Transformable3D.Scale<T>(ITransformable3D<T>, Vector3)
  fullName: Vim.Math3d.Transformable3D.Scale<T>(Vim.Math3d.ITransformable3D<T>, Vim.Math3d.Vector3)
  nameWithType.vb: Transformable3D.Scale(Of T)(ITransformable3D(Of T), Vector3)
  fullName.vb: Vim.Math3d.Transformable3D.Scale(Of T)(Vim.Math3d.ITransformable3D(Of T), Vim.Math3d.Vector3)
  name.vb: Scale(Of T)(ITransformable3D(Of T), Vector3)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
    name: Scale<T>
    nameWithType: Transformable3D.Scale<T>
    fullName: Vim.Math3d.Transformable3D.Scale<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
    name: Scale(Of T)
    nameWithType: Transformable3D.Scale(Of T)
    fullName: Vim.Math3d.Transformable3D.Scale(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  commentId: M:Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  isExternal: true
  name: Scale<T>(ITransformable3D<T>, Single, Single, Single)
  nameWithType: Transformable3D.Scale<T>(ITransformable3D<T>, Single, Single, Single)
  fullName: Vim.Math3d.Transformable3D.Scale<T>(Vim.Math3d.ITransformable3D<T>, System.Single, System.Single, System.Single)
  nameWithType.vb: Transformable3D.Scale(Of T)(ITransformable3D(Of T), Single, Single, Single)
  fullName.vb: Vim.Math3d.Transformable3D.Scale(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single, System.Single, System.Single)
  name.vb: Scale(Of T)(ITransformable3D(Of T), Single, Single, Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
    name: Scale<T>
    nameWithType: Transformable3D.Scale<T>
    fullName: Vim.Math3d.Transformable3D.Scale<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
    name: Scale(Of T)
    nameWithType: Transformable3D.Scale(Of T)
    fullName: Vim.Math3d.Transformable3D.Scale(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.ScaleX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  commentId: M:Vim.Math3d.Transformable3D.ScaleX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  isExternal: true
  name: ScaleX<T>(ITransformable3D<T>, Single)
  nameWithType: Transformable3D.ScaleX<T>(ITransformable3D<T>, Single)
  fullName: Vim.Math3d.Transformable3D.ScaleX<T>(Vim.Math3d.ITransformable3D<T>, System.Single)
  nameWithType.vb: Transformable3D.ScaleX(Of T)(ITransformable3D(Of T), Single)
  fullName.vb: Vim.Math3d.Transformable3D.ScaleX(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single)
  name.vb: ScaleX(Of T)(ITransformable3D(Of T), Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.ScaleX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: ScaleX<T>
    nameWithType: Transformable3D.ScaleX<T>
    fullName: Vim.Math3d.Transformable3D.ScaleX<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.ScaleX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: ScaleX(Of T)
    nameWithType: Transformable3D.ScaleX(Of T)
    fullName: Vim.Math3d.Transformable3D.ScaleX(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.ScaleY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  commentId: M:Vim.Math3d.Transformable3D.ScaleY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  isExternal: true
  name: ScaleY<T>(ITransformable3D<T>, Single)
  nameWithType: Transformable3D.ScaleY<T>(ITransformable3D<T>, Single)
  fullName: Vim.Math3d.Transformable3D.ScaleY<T>(Vim.Math3d.ITransformable3D<T>, System.Single)
  nameWithType.vb: Transformable3D.ScaleY(Of T)(ITransformable3D(Of T), Single)
  fullName.vb: Vim.Math3d.Transformable3D.ScaleY(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single)
  name.vb: ScaleY(Of T)(ITransformable3D(Of T), Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.ScaleY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: ScaleY<T>
    nameWithType: Transformable3D.ScaleY<T>
    fullName: Vim.Math3d.Transformable3D.ScaleY<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.ScaleY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: ScaleY(Of T)
    nameWithType: Transformable3D.ScaleY(Of T)
    fullName: Vim.Math3d.Transformable3D.ScaleY(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.ScaleZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  commentId: M:Vim.Math3d.Transformable3D.ScaleZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  isExternal: true
  name: ScaleZ<T>(ITransformable3D<T>, Single)
  nameWithType: Transformable3D.ScaleZ<T>(ITransformable3D<T>, Single)
  fullName: Vim.Math3d.Transformable3D.ScaleZ<T>(Vim.Math3d.ITransformable3D<T>, System.Single)
  nameWithType.vb: Transformable3D.ScaleZ(Of T)(ITransformable3D(Of T), Single)
  fullName.vb: Vim.Math3d.Transformable3D.ScaleZ(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single)
  name.vb: ScaleZ(Of T)(ITransformable3D(Of T), Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.ScaleZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: ScaleZ<T>
    nameWithType: Transformable3D.ScaleZ<T>
    fullName: Vim.Math3d.Transformable3D.ScaleZ<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.ScaleZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: ScaleZ(Of T)
    nameWithType: Transformable3D.ScaleZ(Of T)
    fullName: Vim.Math3d.Transformable3D.ScaleZ(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.LookAt``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Transformable3D.LookAt``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  name: LookAt<T>(ITransformable3D<T>, Vector3, Vector3, Vector3)
  nameWithType: Transformable3D.LookAt<T>(ITransformable3D<T>, Vector3, Vector3, Vector3)
  fullName: Vim.Math3d.Transformable3D.LookAt<T>(Vim.Math3d.ITransformable3D<T>, Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  nameWithType.vb: Transformable3D.LookAt(Of T)(ITransformable3D(Of T), Vector3, Vector3, Vector3)
  fullName.vb: Vim.Math3d.Transformable3D.LookAt(Of T)(Vim.Math3d.ITransformable3D(Of T), Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  name.vb: LookAt(Of T)(ITransformable3D(Of T), Vector3, Vector3, Vector3)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.LookAt``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
    name: LookAt<T>
    nameWithType: Transformable3D.LookAt<T>
    fullName: Vim.Math3d.Transformable3D.LookAt<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.LookAt``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
    name: LookAt(Of T)
    nameWithType: Transformable3D.LookAt(Of T)
    fullName: Vim.Math3d.Transformable3D.LookAt(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.RotateAround``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,System.Single)
  commentId: M:Vim.Math3d.Transformable3D.RotateAround``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,System.Single)
  isExternal: true
  name: RotateAround<T>(ITransformable3D<T>, Vector3, Single)
  nameWithType: Transformable3D.RotateAround<T>(ITransformable3D<T>, Vector3, Single)
  fullName: Vim.Math3d.Transformable3D.RotateAround<T>(Vim.Math3d.ITransformable3D<T>, Vim.Math3d.Vector3, System.Single)
  nameWithType.vb: Transformable3D.RotateAround(Of T)(ITransformable3D(Of T), Vector3, Single)
  fullName.vb: Vim.Math3d.Transformable3D.RotateAround(Of T)(Vim.Math3d.ITransformable3D(Of T), Vim.Math3d.Vector3, System.Single)
  name.vb: RotateAround(Of T)(ITransformable3D(Of T), Vector3, Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.RotateAround``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,System.Single)
    name: RotateAround<T>
    nameWithType: Transformable3D.RotateAround<T>
    fullName: Vim.Math3d.Transformable3D.RotateAround<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.RotateAround``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,System.Single)
    name: RotateAround(Of T)
    nameWithType: Transformable3D.RotateAround(Of T)
    fullName: Vim.Math3d.Transformable3D.RotateAround(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  commentId: M:Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  isExternal: true
  name: Rotate<T>(ITransformable3D<T>, Single, Single, Single)
  nameWithType: Transformable3D.Rotate<T>(ITransformable3D<T>, Single, Single, Single)
  fullName: Vim.Math3d.Transformable3D.Rotate<T>(Vim.Math3d.ITransformable3D<T>, System.Single, System.Single, System.Single)
  nameWithType.vb: Transformable3D.Rotate(Of T)(ITransformable3D(Of T), Single, Single, Single)
  fullName.vb: Vim.Math3d.Transformable3D.Rotate(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single, System.Single, System.Single)
  name.vb: Rotate(Of T)(ITransformable3D(Of T), Single, Single, Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
    name: Rotate<T>
    nameWithType: Transformable3D.Rotate<T>
    fullName: Vim.Math3d.Transformable3D.Rotate<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
    name: Rotate(Of T)
    nameWithType: Transformable3D.Rotate(Of T)
    fullName: Vim.Math3d.Transformable3D.Rotate(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.Reflect``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Plane)
  commentId: M:Vim.Math3d.Transformable3D.Reflect``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Plane)
  name: Reflect<T>(ITransformable3D<T>, Plane)
  nameWithType: Transformable3D.Reflect<T>(ITransformable3D<T>, Plane)
  fullName: Vim.Math3d.Transformable3D.Reflect<T>(Vim.Math3d.ITransformable3D<T>, Vim.Math3d.Plane)
  nameWithType.vb: Transformable3D.Reflect(Of T)(ITransformable3D(Of T), Plane)
  fullName.vb: Vim.Math3d.Transformable3D.Reflect(Of T)(Vim.Math3d.ITransformable3D(Of T), Vim.Math3d.Plane)
  name.vb: Reflect(Of T)(ITransformable3D(Of T), Plane)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Reflect``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Plane)
    name: Reflect<T>
    nameWithType: Transformable3D.Reflect<T>
    fullName: Vim.Math3d.Transformable3D.Reflect<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Plane
    name: Plane
    nameWithType: Plane
    fullName: Vim.Math3d.Plane
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Reflect``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Plane)
    name: Reflect(Of T)
    nameWithType: Transformable3D.Reflect(Of T)
    fullName: Vim.Math3d.Transformable3D.Reflect(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Plane
    name: Plane
    nameWithType: Plane
    fullName: Vim.Math3d.Plane
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.RotateX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  commentId: M:Vim.Math3d.Transformable3D.RotateX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  isExternal: true
  name: RotateX<T>(ITransformable3D<T>, Single)
  nameWithType: Transformable3D.RotateX<T>(ITransformable3D<T>, Single)
  fullName: Vim.Math3d.Transformable3D.RotateX<T>(Vim.Math3d.ITransformable3D<T>, System.Single)
  nameWithType.vb: Transformable3D.RotateX(Of T)(ITransformable3D(Of T), Single)
  fullName.vb: Vim.Math3d.Transformable3D.RotateX(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single)
  name.vb: RotateX(Of T)(ITransformable3D(Of T), Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.RotateX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: RotateX<T>
    nameWithType: Transformable3D.RotateX<T>
    fullName: Vim.Math3d.Transformable3D.RotateX<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.RotateX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: RotateX(Of T)
    nameWithType: Transformable3D.RotateX(Of T)
    fullName: Vim.Math3d.Transformable3D.RotateX(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.RotateY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  commentId: M:Vim.Math3d.Transformable3D.RotateY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  isExternal: true
  name: RotateY<T>(ITransformable3D<T>, Single)
  nameWithType: Transformable3D.RotateY<T>(ITransformable3D<T>, Single)
  fullName: Vim.Math3d.Transformable3D.RotateY<T>(Vim.Math3d.ITransformable3D<T>, System.Single)
  nameWithType.vb: Transformable3D.RotateY(Of T)(ITransformable3D(Of T), Single)
  fullName.vb: Vim.Math3d.Transformable3D.RotateY(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single)
  name.vb: RotateY(Of T)(ITransformable3D(Of T), Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.RotateY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: RotateY<T>
    nameWithType: Transformable3D.RotateY<T>
    fullName: Vim.Math3d.Transformable3D.RotateY<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.RotateY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: RotateY(Of T)
    nameWithType: Transformable3D.RotateY(Of T)
    fullName: Vim.Math3d.Transformable3D.RotateY(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.RotateZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  commentId: M:Vim.Math3d.Transformable3D.RotateZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  isExternal: true
  name: RotateZ<T>(ITransformable3D<T>, Single)
  nameWithType: Transformable3D.RotateZ<T>(ITransformable3D<T>, Single)
  fullName: Vim.Math3d.Transformable3D.RotateZ<T>(Vim.Math3d.ITransformable3D<T>, System.Single)
  nameWithType.vb: Transformable3D.RotateZ(Of T)(ITransformable3D(Of T), Single)
  fullName.vb: Vim.Math3d.Transformable3D.RotateZ(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single)
  name.vb: RotateZ(Of T)(ITransformable3D(Of T), Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.RotateZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: RotateZ<T>
    nameWithType: Transformable3D.RotateZ<T>
    fullName: Vim.Math3d.Transformable3D.RotateZ<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.RotateZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: RotateZ(Of T)
    nameWithType: Transformable3D.RotateZ(Of T)
    fullName: Vim.Math3d.Transformable3D.RotateZ(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.TranslateRotateScale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Transformable3D.TranslateRotateScale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
  name: TranslateRotateScale<T>(ITransformable3D<T>, Vector3, Quaternion, Vector3)
  nameWithType: Transformable3D.TranslateRotateScale<T>(ITransformable3D<T>, Vector3, Quaternion, Vector3)
  fullName: Vim.Math3d.Transformable3D.TranslateRotateScale<T>(Vim.Math3d.ITransformable3D<T>, Vim.Math3d.Vector3, Vim.Math3d.Quaternion, Vim.Math3d.Vector3)
  nameWithType.vb: Transformable3D.TranslateRotateScale(Of T)(ITransformable3D(Of T), Vector3, Quaternion, Vector3)
  fullName.vb: Vim.Math3d.Transformable3D.TranslateRotateScale(Of T)(Vim.Math3d.ITransformable3D(Of T), Vim.Math3d.Vector3, Vim.Math3d.Quaternion, Vim.Math3d.Vector3)
  name.vb: TranslateRotateScale(Of T)(ITransformable3D(Of T), Vector3, Quaternion, Vector3)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.TranslateRotateScale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
    name: TranslateRotateScale<T>
    nameWithType: Transformable3D.TranslateRotateScale<T>
    fullName: Vim.Math3d.Transformable3D.TranslateRotateScale<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Quaternion
    name: Quaternion
    nameWithType: Quaternion
    fullName: Vim.Math3d.Quaternion
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.TranslateRotateScale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
    name: TranslateRotateScale(Of T)
    nameWithType: Transformable3D.TranslateRotateScale(Of T)
    fullName: Vim.Math3d.Transformable3D.TranslateRotateScale(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Quaternion
    name: Quaternion
    nameWithType: Quaternion
    fullName: Vim.Math3d.Quaternion
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.MathOps.ToFloats(Vim.Math3d.Matrix4x4)
  commentId: M:Vim.Math3d.MathOps.ToFloats(Vim.Math3d.Matrix4x4)
  name: ToFloats(Matrix4x4)
  nameWithType: MathOps.ToFloats(Matrix4x4)
  fullName: Vim.Math3d.MathOps.ToFloats(Vim.Math3d.Matrix4x4)
  spec.csharp:
  - uid: Vim.Math3d.MathOps.ToFloats(Vim.Math3d.Matrix4x4)
    name: ToFloats
    nameWithType: MathOps.ToFloats
    fullName: Vim.Math3d.MathOps.ToFloats
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Matrix4x4
    name: Matrix4x4
    nameWithType: Matrix4x4
    fullName: Vim.Math3d.Matrix4x4
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.MathOps.ToFloats(Vim.Math3d.Matrix4x4)
    name: ToFloats
    nameWithType: MathOps.ToFloats
    fullName: Vim.Math3d.MathOps.ToFloats
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Matrix4x4
    name: Matrix4x4
    nameWithType: Matrix4x4
    fullName: Vim.Math3d.Matrix4x4
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.MathOps
  commentId: T:Vim.Math3d.MathOps
  parent: Vim.Math3d
  name: MathOps
  nameWithType: MathOps
  fullName: Vim.Math3d.MathOps
- uid: Vim.Math3d.MathOps.RayFromProjectionMatrix(Vim.Math3d.Matrix4x4,Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.MathOps.RayFromProjectionMatrix(Vim.Math3d.Matrix4x4,Vim.Math3d.Vector2)
  name: RayFromProjectionMatrix(Matrix4x4, Vector2)
  nameWithType: MathOps.RayFromProjectionMatrix(Matrix4x4, Vector2)
  fullName: Vim.Math3d.MathOps.RayFromProjectionMatrix(Vim.Math3d.Matrix4x4, Vim.Math3d.Vector2)
  spec.csharp:
  - uid: Vim.Math3d.MathOps.RayFromProjectionMatrix(Vim.Math3d.Matrix4x4,Vim.Math3d.Vector2)
    name: RayFromProjectionMatrix
    nameWithType: MathOps.RayFromProjectionMatrix
    fullName: Vim.Math3d.MathOps.RayFromProjectionMatrix
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Matrix4x4
    name: Matrix4x4
    nameWithType: Matrix4x4
    fullName: Vim.Math3d.Matrix4x4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Vim.Math3d.Vector2
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.MathOps.RayFromProjectionMatrix(Vim.Math3d.Matrix4x4,Vim.Math3d.Vector2)
    name: RayFromProjectionMatrix
    nameWithType: MathOps.RayFromProjectionMatrix
    fullName: Vim.Math3d.MathOps.RayFromProjectionMatrix
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Matrix4x4
    name: Matrix4x4
    nameWithType: Matrix4x4
    fullName: Vim.Math3d.Matrix4x4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Vim.Math3d.Vector2
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.MathOps.Inverse(Vim.Math3d.Matrix4x4)
  commentId: M:Vim.Math3d.MathOps.Inverse(Vim.Math3d.Matrix4x4)
  name: Inverse(Matrix4x4)
  nameWithType: MathOps.Inverse(Matrix4x4)
  fullName: Vim.Math3d.MathOps.Inverse(Vim.Math3d.Matrix4x4)
  spec.csharp:
  - uid: Vim.Math3d.MathOps.Inverse(Vim.Math3d.Matrix4x4)
    name: Inverse
    nameWithType: MathOps.Inverse
    fullName: Vim.Math3d.MathOps.Inverse
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Matrix4x4
    name: Matrix4x4
    nameWithType: Matrix4x4
    fullName: Vim.Math3d.Matrix4x4
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.MathOps.Inverse(Vim.Math3d.Matrix4x4)
    name: Inverse
    nameWithType: MathOps.Inverse
    fullName: Vim.Math3d.MathOps.Inverse
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Matrix4x4
    name: Matrix4x4
    nameWithType: Matrix4x4
    fullName: Vim.Math3d.Matrix4x4
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Matrix4x4.Col0*
  commentId: Overload:Vim.Math3d.Matrix4x4.Col0
  name: Col0
  nameWithType: Matrix4x4.Col0
  fullName: Vim.Math3d.Matrix4x4.Col0
- uid: Vim.Math3d.Vector3
  commentId: T:Vim.Math3d.Vector3
  parent: Vim.Math3d
  name: Vector3
  nameWithType: Vector3
  fullName: Vim.Math3d.Vector3
- uid: Vim.Math3d.Matrix4x4.Col1*
  commentId: Overload:Vim.Math3d.Matrix4x4.Col1
  name: Col1
  nameWithType: Matrix4x4.Col1
  fullName: Vim.Math3d.Matrix4x4.Col1
- uid: Vim.Math3d.Matrix4x4.Col2*
  commentId: Overload:Vim.Math3d.Matrix4x4.Col2
  name: Col2
  nameWithType: Matrix4x4.Col2
  fullName: Vim.Math3d.Matrix4x4.Col2
- uid: Vim.Math3d.Matrix4x4.Col3*
  commentId: Overload:Vim.Math3d.Matrix4x4.Col3
  name: Col3
  nameWithType: Matrix4x4.Col3
  fullName: Vim.Math3d.Matrix4x4.Col3
- uid: Vim.Math3d.Matrix4x4.Row0*
  commentId: Overload:Vim.Math3d.Matrix4x4.Row0
  name: Row0
  nameWithType: Matrix4x4.Row0
  fullName: Vim.Math3d.Matrix4x4.Row0
- uid: Vim.Math3d.Matrix4x4.Row1*
  commentId: Overload:Vim.Math3d.Matrix4x4.Row1
  name: Row1
  nameWithType: Matrix4x4.Row1
  fullName: Vim.Math3d.Matrix4x4.Row1
- uid: Vim.Math3d.Matrix4x4.Row2*
  commentId: Overload:Vim.Math3d.Matrix4x4.Row2
  name: Row2
  nameWithType: Matrix4x4.Row2
  fullName: Vim.Math3d.Matrix4x4.Row2
- uid: Vim.Math3d.Matrix4x4.Row3*
  commentId: Overload:Vim.Math3d.Matrix4x4.Row3
  name: Row3
  nameWithType: Matrix4x4.Row3
  fullName: Vim.Math3d.Matrix4x4.Row3
- uid: Vim.Math3d.Matrix4x4.GetRow*
  commentId: Overload:Vim.Math3d.Matrix4x4.GetRow
  name: GetRow
  nameWithType: Matrix4x4.GetRow
  fullName: Vim.Math3d.Matrix4x4.GetRow
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Vim.Math3d.Matrix4x4.GetCol*
  commentId: Overload:Vim.Math3d.Matrix4x4.GetCol
  name: GetCol
  nameWithType: Matrix4x4.GetCol
  fullName: Vim.Math3d.Matrix4x4.GetCol
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Vim.Math3d.Matrix4x4
  commentId: T:Vim.Math3d.Matrix4x4
  parent: Vim.Math3d
  name: Matrix4x4
  nameWithType: Matrix4x4
  fullName: Vim.Math3d.Matrix4x4
- uid: Vim.Math3d.Matrix4x4.IsIdentity*
  commentId: Overload:Vim.Math3d.Matrix4x4.IsIdentity
  name: IsIdentity
  nameWithType: Matrix4x4.IsIdentity
  fullName: Vim.Math3d.Matrix4x4.IsIdentity
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Vim.Math3d.Matrix4x4.Translation*
  commentId: Overload:Vim.Math3d.Matrix4x4.Translation
  name: Translation
  nameWithType: Matrix4x4.Translation
  fullName: Vim.Math3d.Matrix4x4.Translation
- uid: Vim.Math3d.Matrix4x4.SetTranslation*
  commentId: Overload:Vim.Math3d.Matrix4x4.SetTranslation
  name: SetTranslation
  nameWithType: Matrix4x4.SetTranslation
  fullName: Vim.Math3d.Matrix4x4.SetTranslation
- uid: Vim.Math3d.Matrix4x4.#ctor*
  commentId: Overload:Vim.Math3d.Matrix4x4.#ctor
  name: Matrix4x4
  nameWithType: Matrix4x4.Matrix4x4
  fullName: Vim.Math3d.Matrix4x4.Matrix4x4
- uid: Vim.Math3d.Matrix4x4.CreateFromRows*
  commentId: Overload:Vim.Math3d.Matrix4x4.CreateFromRows
  name: CreateFromRows
  nameWithType: Matrix4x4.CreateFromRows
  fullName: Vim.Math3d.Matrix4x4.CreateFromRows
- uid: Vim.Math3d.Vector4
  commentId: T:Vim.Math3d.Vector4
  parent: Vim.Math3d
  name: Vector4
  nameWithType: Vector4
  fullName: Vim.Math3d.Vector4
- uid: Vim.Math3d.Matrix4x4.CreateBillboard*
  commentId: Overload:Vim.Math3d.Matrix4x4.CreateBillboard
  name: CreateBillboard
  nameWithType: Matrix4x4.CreateBillboard
  fullName: Vim.Math3d.Matrix4x4.CreateBillboard
- uid: Vim.Math3d.Matrix4x4.CreateConstrainedBillboard*
  commentId: Overload:Vim.Math3d.Matrix4x4.CreateConstrainedBillboard
  name: CreateConstrainedBillboard
  nameWithType: Matrix4x4.CreateConstrainedBillboard
  fullName: Vim.Math3d.Matrix4x4.CreateConstrainedBillboard
- uid: Vim.Math3d.Matrix4x4.CreateTranslation*
  commentId: Overload:Vim.Math3d.Matrix4x4.CreateTranslation
  name: CreateTranslation
  nameWithType: Matrix4x4.CreateTranslation
  fullName: Vim.Math3d.Matrix4x4.CreateTranslation
- uid: Vim.Math3d.Matrix4x4.CreateScale*
  commentId: Overload:Vim.Math3d.Matrix4x4.CreateScale
  name: CreateScale
  nameWithType: Matrix4x4.CreateScale
  fullName: Vim.Math3d.Matrix4x4.CreateScale
- uid: Vim.Math3d.Matrix4x4.CreateRotationX*
  commentId: Overload:Vim.Math3d.Matrix4x4.CreateRotationX
  name: CreateRotationX
  nameWithType: Matrix4x4.CreateRotationX
  fullName: Vim.Math3d.Matrix4x4.CreateRotationX
- uid: Vim.Math3d.Matrix4x4.CreateRotationY*
  commentId: Overload:Vim.Math3d.Matrix4x4.CreateRotationY
  name: CreateRotationY
  nameWithType: Matrix4x4.CreateRotationY
  fullName: Vim.Math3d.Matrix4x4.CreateRotationY
- uid: Vim.Math3d.Matrix4x4.CreateRotationZ*
  commentId: Overload:Vim.Math3d.Matrix4x4.CreateRotationZ
  name: CreateRotationZ
  nameWithType: Matrix4x4.CreateRotationZ
  fullName: Vim.Math3d.Matrix4x4.CreateRotationZ
- uid: Vim.Math3d.Matrix4x4.CreateFromAxisAngle*
  commentId: Overload:Vim.Math3d.Matrix4x4.CreateFromAxisAngle
  name: CreateFromAxisAngle
  nameWithType: Matrix4x4.CreateFromAxisAngle
  fullName: Vim.Math3d.Matrix4x4.CreateFromAxisAngle
- uid: Vim.Math3d.Matrix4x4.CreatePerspectiveFieldOfView*
  commentId: Overload:Vim.Math3d.Matrix4x4.CreatePerspectiveFieldOfView
  name: CreatePerspectiveFieldOfView
  nameWithType: Matrix4x4.CreatePerspectiveFieldOfView
  fullName: Vim.Math3d.Matrix4x4.CreatePerspectiveFieldOfView
- uid: Vim.Math3d.Matrix4x4.CreatePerspective*
  commentId: Overload:Vim.Math3d.Matrix4x4.CreatePerspective
  name: CreatePerspective
  nameWithType: Matrix4x4.CreatePerspective
  fullName: Vim.Math3d.Matrix4x4.CreatePerspective
- uid: Vim.Math3d.Matrix4x4.CreatePerspectiveOffCenter*
  commentId: Overload:Vim.Math3d.Matrix4x4.CreatePerspectiveOffCenter
  name: CreatePerspectiveOffCenter
  nameWithType: Matrix4x4.CreatePerspectiveOffCenter
  fullName: Vim.Math3d.Matrix4x4.CreatePerspectiveOffCenter
- uid: Vim.Math3d.Matrix4x4.CreateOrthographic*
  commentId: Overload:Vim.Math3d.Matrix4x4.CreateOrthographic
  name: CreateOrthographic
  nameWithType: Matrix4x4.CreateOrthographic
  fullName: Vim.Math3d.Matrix4x4.CreateOrthographic
- uid: Vim.Math3d.Matrix4x4.CreateOrthographicOffCenter*
  commentId: Overload:Vim.Math3d.Matrix4x4.CreateOrthographicOffCenter
  name: CreateOrthographicOffCenter
  nameWithType: Matrix4x4.CreateOrthographicOffCenter
  fullName: Vim.Math3d.Matrix4x4.CreateOrthographicOffCenter
- uid: Vim.Math3d.Matrix4x4.CreateLookAt*
  commentId: Overload:Vim.Math3d.Matrix4x4.CreateLookAt
  name: CreateLookAt
  nameWithType: Matrix4x4.CreateLookAt
  fullName: Vim.Math3d.Matrix4x4.CreateLookAt
- uid: Vim.Math3d.Matrix4x4.CreateWorld*
  commentId: Overload:Vim.Math3d.Matrix4x4.CreateWorld
  name: CreateWorld
  nameWithType: Matrix4x4.CreateWorld
  fullName: Vim.Math3d.Matrix4x4.CreateWorld
- uid: Vim.Math3d.Matrix4x4.CreateFromQuaternion*
  commentId: Overload:Vim.Math3d.Matrix4x4.CreateFromQuaternion
  name: CreateFromQuaternion
  nameWithType: Matrix4x4.CreateFromQuaternion
  fullName: Vim.Math3d.Matrix4x4.CreateFromQuaternion
- uid: Vim.Math3d.Quaternion
  commentId: T:Vim.Math3d.Quaternion
  parent: Vim.Math3d
  name: Quaternion
  nameWithType: Quaternion
  fullName: Vim.Math3d.Quaternion
- uid: Vim.Math3d.Matrix4x4.CreateRotation*
  commentId: Overload:Vim.Math3d.Matrix4x4.CreateRotation
  name: CreateRotation
  nameWithType: Matrix4x4.CreateRotation
  fullName: Vim.Math3d.Matrix4x4.CreateRotation
- uid: Vim.Math3d.Matrix4x4.CreateFromYawPitchRoll*
  commentId: Overload:Vim.Math3d.Matrix4x4.CreateFromYawPitchRoll
  name: CreateFromYawPitchRoll
  nameWithType: Matrix4x4.CreateFromYawPitchRoll
  fullName: Vim.Math3d.Matrix4x4.CreateFromYawPitchRoll
- uid: Vim.Math3d.Matrix4x4.CreateShadow*
  commentId: Overload:Vim.Math3d.Matrix4x4.CreateShadow
  name: CreateShadow
  nameWithType: Matrix4x4.CreateShadow
  fullName: Vim.Math3d.Matrix4x4.CreateShadow
- uid: Vim.Math3d.Plane
  commentId: T:Vim.Math3d.Plane
  parent: Vim.Math3d
  name: Plane
  nameWithType: Plane
  fullName: Vim.Math3d.Plane
- uid: Vim.Math3d.Matrix4x4.CreateReflection*
  commentId: Overload:Vim.Math3d.Matrix4x4.CreateReflection
  name: CreateReflection
  nameWithType: Matrix4x4.CreateReflection
  fullName: Vim.Math3d.Matrix4x4.CreateReflection
- uid: Vim.Math3d.Matrix4x4.Get3x3RotationDeterminant*
  commentId: Overload:Vim.Math3d.Matrix4x4.Get3x3RotationDeterminant
  name: Get3x3RotationDeterminant
  nameWithType: Matrix4x4.Get3x3RotationDeterminant
  fullName: Vim.Math3d.Matrix4x4.Get3x3RotationDeterminant
- uid: Vim.Math3d.Matrix4x4.IsReflection*
  commentId: Overload:Vim.Math3d.Matrix4x4.IsReflection
  name: IsReflection
  nameWithType: Matrix4x4.IsReflection
  fullName: Vim.Math3d.Matrix4x4.IsReflection
- uid: Vim.Math3d.Matrix4x4.GetDeterminant*
  commentId: Overload:Vim.Math3d.Matrix4x4.GetDeterminant
  name: GetDeterminant
  nameWithType: Matrix4x4.GetDeterminant
  fullName: Vim.Math3d.Matrix4x4.GetDeterminant
- uid: Vim.Math3d.Matrix4x4.Invert*
  commentId: Overload:Vim.Math3d.Matrix4x4.Invert
  name: Invert
  nameWithType: Matrix4x4.Invert
  fullName: Vim.Math3d.Matrix4x4.Invert
- uid: Vim.Math3d.Matrix4x4.Transform*
  commentId: Overload:Vim.Math3d.Matrix4x4.Transform
  name: Transform
  nameWithType: Matrix4x4.Transform
  fullName: Vim.Math3d.Matrix4x4.Transform
- uid: Vim.Math3d.Matrix4x4.Transpose*
  commentId: Overload:Vim.Math3d.Matrix4x4.Transpose
  name: Transpose
  nameWithType: Matrix4x4.Transpose
  fullName: Vim.Math3d.Matrix4x4.Transpose
- uid: Vim.Math3d.Matrix4x4.Lerp*
  commentId: Overload:Vim.Math3d.Matrix4x4.Lerp
  name: Lerp
  nameWithType: Matrix4x4.Lerp
  fullName: Vim.Math3d.Matrix4x4.Lerp
- uid: Vim.Math3d.Matrix4x4.Negate*
  commentId: Overload:Vim.Math3d.Matrix4x4.Negate
  name: Negate
  nameWithType: Matrix4x4.Negate
  fullName: Vim.Math3d.Matrix4x4.Negate
- uid: Vim.Math3d.Matrix4x4.Add*
  commentId: Overload:Vim.Math3d.Matrix4x4.Add
  name: Add
  nameWithType: Matrix4x4.Add
  fullName: Vim.Math3d.Matrix4x4.Add
- uid: Vim.Math3d.Matrix4x4.Subtract*
  commentId: Overload:Vim.Math3d.Matrix4x4.Subtract
  name: Subtract
  nameWithType: Matrix4x4.Subtract
  fullName: Vim.Math3d.Matrix4x4.Subtract
- uid: Vim.Math3d.Matrix4x4.Multiply*
  commentId: Overload:Vim.Math3d.Matrix4x4.Multiply
  name: Multiply
  nameWithType: Matrix4x4.Multiply
  fullName: Vim.Math3d.Matrix4x4.Multiply
- uid: Vim.Math3d.Matrix4x4.op_UnaryNegation*
  commentId: Overload:Vim.Math3d.Matrix4x4.op_UnaryNegation
  name: UnaryNegation
  nameWithType: Matrix4x4.UnaryNegation
  fullName: Vim.Math3d.Matrix4x4.UnaryNegation
- uid: Vim.Math3d.Matrix4x4.op_Addition*
  commentId: Overload:Vim.Math3d.Matrix4x4.op_Addition
  name: Addition
  nameWithType: Matrix4x4.Addition
  fullName: Vim.Math3d.Matrix4x4.Addition
- uid: Vim.Math3d.Matrix4x4.op_Subtraction*
  commentId: Overload:Vim.Math3d.Matrix4x4.op_Subtraction
  name: Subtraction
  nameWithType: Matrix4x4.Subtraction
  fullName: Vim.Math3d.Matrix4x4.Subtraction
- uid: Vim.Math3d.Matrix4x4.op_Multiply*
  commentId: Overload:Vim.Math3d.Matrix4x4.op_Multiply
  name: Multiply
  nameWithType: Matrix4x4.Multiply
  fullName: Vim.Math3d.Matrix4x4.Multiply
- uid: Vim.Math3d.Matrix4x4.op_Equality*
  commentId: Overload:Vim.Math3d.Matrix4x4.op_Equality
  name: Equality
  nameWithType: Matrix4x4.Equality
  fullName: Vim.Math3d.Matrix4x4.Equality
- uid: Vim.Math3d.Matrix4x4.op_Inequality*
  commentId: Overload:Vim.Math3d.Matrix4x4.op_Inequality
  name: Inequality
  nameWithType: Matrix4x4.Inequality
  fullName: Vim.Math3d.Matrix4x4.Inequality
- uid: Vim.Math3d.Matrix4x4.Equals*
  commentId: Overload:Vim.Math3d.Matrix4x4.Equals
  name: Equals
  nameWithType: Matrix4x4.Equals
  fullName: Vim.Math3d.Matrix4x4.Equals
- uid: System.IEquatable{Vim.Math3d.Matrix4x4}.Equals(Vim.Math3d.Matrix4x4)
  commentId: M:System.IEquatable{Vim.Math3d.Matrix4x4}.Equals(Vim.Math3d.Matrix4x4)
  parent: System.IEquatable{Vim.Math3d.Matrix4x4}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(Matrix4x4)
  nameWithType: IEquatable<Matrix4x4>.Equals(Matrix4x4)
  fullName: System.IEquatable<Vim.Math3d.Matrix4x4>.Equals(Vim.Math3d.Matrix4x4)
  nameWithType.vb: IEquatable(Of Matrix4x4).Equals(Matrix4x4)
  fullName.vb: System.IEquatable(Of Vim.Math3d.Matrix4x4).Equals(Vim.Math3d.Matrix4x4)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<Matrix4x4>.Equals
    fullName: System.IEquatable<Vim.Math3d.Matrix4x4>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Matrix4x4
    name: Matrix4x4
    nameWithType: Matrix4x4
    fullName: Vim.Math3d.Matrix4x4
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of Matrix4x4).Equals
    fullName: System.IEquatable(Of Vim.Math3d.Matrix4x4).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Matrix4x4
    name: Matrix4x4
    nameWithType: Matrix4x4
    fullName: Vim.Math3d.Matrix4x4
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Matrix4x4.ToString*
  commentId: Overload:Vim.Math3d.Matrix4x4.ToString
  name: ToString
  nameWithType: Matrix4x4.ToString
  fullName: Vim.Math3d.Matrix4x4.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Matrix4x4.GetHashCode*
  commentId: Overload:Vim.Math3d.Matrix4x4.GetHashCode
  name: GetHashCode
  nameWithType: Matrix4x4.GetHashCode
  fullName: Vim.Math3d.Matrix4x4.GetHashCode
- uid: Vim.Math3d.Matrix4x4.Decompose*
  commentId: Overload:Vim.Math3d.Matrix4x4.Decompose
  name: Decompose
  nameWithType: Matrix4x4.Decompose
  fullName: Vim.Math3d.Matrix4x4.Decompose
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Matrix4x4}.Transform(Vim.Math3d.Matrix4x4)
  commentId: M:Vim.Math3d.ITransformable3D{Vim.Math3d.Matrix4x4}.Transform(Vim.Math3d.Matrix4x4)
  parent: Vim.Math3d.ITransformable3D{Vim.Math3d.Matrix4x4}
  definition: Vim.Math3d.ITransformable3D`1.Transform(Vim.Math3d.Matrix4x4)
  name: Transform(Matrix4x4)
  nameWithType: ITransformable3D<Matrix4x4>.Transform(Matrix4x4)
  fullName: Vim.Math3d.ITransformable3D<Vim.Math3d.Matrix4x4>.Transform(Vim.Math3d.Matrix4x4)
  nameWithType.vb: ITransformable3D(Of Matrix4x4).Transform(Matrix4x4)
  fullName.vb: Vim.Math3d.ITransformable3D(Of Vim.Math3d.Matrix4x4).Transform(Vim.Math3d.Matrix4x4)
  spec.csharp:
  - uid: Vim.Math3d.ITransformable3D`1.Transform(Vim.Math3d.Matrix4x4)
    name: Transform
    nameWithType: ITransformable3D<Matrix4x4>.Transform
    fullName: Vim.Math3d.ITransformable3D<Vim.Math3d.Matrix4x4>.Transform
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Matrix4x4
    name: Matrix4x4
    nameWithType: Matrix4x4
    fullName: Vim.Math3d.Matrix4x4
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.ITransformable3D`1.Transform(Vim.Math3d.Matrix4x4)
    name: Transform
    nameWithType: ITransformable3D(Of Matrix4x4).Transform
    fullName: Vim.Math3d.ITransformable3D(Of Vim.Math3d.Matrix4x4).Transform
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Matrix4x4
    name: Matrix4x4
    nameWithType: Matrix4x4
    fullName: Vim.Math3d.Matrix4x4
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D`1.Transform(Vim.Math3d.Matrix4x4)
  commentId: M:Vim.Math3d.ITransformable3D`1.Transform(Vim.Math3d.Matrix4x4)
  name: Transform(Matrix4x4)
  nameWithType: ITransformable3D<TSelf>.Transform(Matrix4x4)
  fullName: Vim.Math3d.ITransformable3D<TSelf>.Transform(Vim.Math3d.Matrix4x4)
  nameWithType.vb: ITransformable3D(Of TSelf).Transform(Matrix4x4)
  fullName.vb: Vim.Math3d.ITransformable3D(Of TSelf).Transform(Vim.Math3d.Matrix4x4)
  spec.csharp:
  - uid: Vim.Math3d.ITransformable3D`1.Transform(Vim.Math3d.Matrix4x4)
    name: Transform
    nameWithType: ITransformable3D<TSelf>.Transform
    fullName: Vim.Math3d.ITransformable3D<TSelf>.Transform
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Matrix4x4
    name: Matrix4x4
    nameWithType: Matrix4x4
    fullName: Vim.Math3d.Matrix4x4
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.ITransformable3D`1.Transform(Vim.Math3d.Matrix4x4)
    name: Transform
    nameWithType: ITransformable3D(Of TSelf).Transform
    fullName: Vim.Math3d.ITransformable3D(Of TSelf).Transform
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Matrix4x4
    name: Matrix4x4
    nameWithType: Matrix4x4
    fullName: Vim.Math3d.Matrix4x4
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Matrix4x4.CreateTRS*
  commentId: Overload:Vim.Math3d.Matrix4x4.CreateTRS
  name: CreateTRS
  nameWithType: Matrix4x4.CreateTRS
  fullName: Vim.Math3d.Matrix4x4.CreateTRS
- uid: Vim.Math3d.Matrix4x4.ExtractDirectScale*
  commentId: Overload:Vim.Math3d.Matrix4x4.ExtractDirectScale
  name: ExtractDirectScale
  nameWithType: Matrix4x4.ExtractDirectScale
  fullName: Vim.Math3d.Matrix4x4.ExtractDirectScale
- uid: Vim.Math3d.Matrix4x4.ScaleTranslation*
  commentId: Overload:Vim.Math3d.Matrix4x4.ScaleTranslation
  name: ScaleTranslation
  nameWithType: Matrix4x4.ScaleTranslation
  fullName: Vim.Math3d.Matrix4x4.ScaleTranslation

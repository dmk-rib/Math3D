### YamlMime:ManagedReference
items:
- uid: Vim.Math3d.Complex
  commentId: T:Vim.Math3d.Complex
  id: Complex
  parent: Vim.Math3d
  children:
  - Vim.Math3d.Complex.#ctor(System.Double)
  - Vim.Math3d.Complex.#ctor(System.Double,System.Double)
  - Vim.Math3d.Complex.#ctor(System.ValueTuple{System.Double,System.Double})
  - Vim.Math3d.Complex.AlmostEquals(Vim.Math3d.Complex,System.Single)
  - Vim.Math3d.Complex.AlmostZero(System.Single)
  - Vim.Math3d.Complex.AnyComponentNegative
  - Vim.Math3d.Complex.CompareTo(Vim.Math3d.Complex)
  - Vim.Math3d.Complex.Create(System.Double,System.Double)
  - Vim.Math3d.Complex.Create(System.ValueTuple{System.Double,System.Double})
  - Vim.Math3d.Complex.Deconstruct(System.Double@,System.Double@)
  - Vim.Math3d.Complex.Dot(Vim.Math3d.Complex)
  - Vim.Math3d.Complex.Dot(Vim.Math3d.Complex,Vim.Math3d.Complex)
  - Vim.Math3d.Complex.Equals(System.Object)
  - Vim.Math3d.Complex.Equals(Vim.Math3d.Complex)
  - Vim.Math3d.Complex.GetComponent(System.Int32)
  - Vim.Math3d.Complex.GetHashCode
  - Vim.Math3d.Complex.Imaginary
  - Vim.Math3d.Complex.IsInfinity
  - Vim.Math3d.Complex.IsNaN
  - Vim.Math3d.Complex.Magnitude
  - Vim.Math3d.Complex.MagnitudeSquared
  - Vim.Math3d.Complex.MaxComponent
  - Vim.Math3d.Complex.MaxValue
  - Vim.Math3d.Complex.MinComponent
  - Vim.Math3d.Complex.MinValue
  - Vim.Math3d.Complex.NumComponents
  - Vim.Math3d.Complex.One
  - Vim.Math3d.Complex.op_Addition(System.Double,Vim.Math3d.Complex)
  - Vim.Math3d.Complex.op_Addition(Vim.Math3d.Complex,System.Double)
  - Vim.Math3d.Complex.op_Addition(Vim.Math3d.Complex,Vim.Math3d.Complex)
  - Vim.Math3d.Complex.op_Division(System.Double,Vim.Math3d.Complex)
  - Vim.Math3d.Complex.op_Division(Vim.Math3d.Complex,System.Double)
  - Vim.Math3d.Complex.op_Division(Vim.Math3d.Complex,Vim.Math3d.Complex)
  - Vim.Math3d.Complex.op_Equality(Vim.Math3d.Complex,Vim.Math3d.Complex)
  - Vim.Math3d.Complex.op_GreaterThan(Vim.Math3d.Complex,Vim.Math3d.Complex)
  - Vim.Math3d.Complex.op_GreaterThanOrEqual(Vim.Math3d.Complex,Vim.Math3d.Complex)
  - Vim.Math3d.Complex.op_Implicit(System.ValueTuple{System.Double,System.Double})~Vim.Math3d.Complex
  - Vim.Math3d.Complex.op_Implicit(Vim.Math3d.Complex)~System.ValueTuple{System.Double,System.Double}
  - Vim.Math3d.Complex.op_Inequality(Vim.Math3d.Complex,Vim.Math3d.Complex)
  - Vim.Math3d.Complex.op_LessThan(Vim.Math3d.Complex,Vim.Math3d.Complex)
  - Vim.Math3d.Complex.op_LessThanOrEqual(Vim.Math3d.Complex,Vim.Math3d.Complex)
  - Vim.Math3d.Complex.op_Multiply(System.Double,Vim.Math3d.Complex)
  - Vim.Math3d.Complex.op_Multiply(Vim.Math3d.Complex,System.Double)
  - Vim.Math3d.Complex.op_Multiply(Vim.Math3d.Complex,Vim.Math3d.Complex)
  - Vim.Math3d.Complex.op_Subtraction(System.Double,Vim.Math3d.Complex)
  - Vim.Math3d.Complex.op_Subtraction(Vim.Math3d.Complex,System.Double)
  - Vim.Math3d.Complex.op_Subtraction(Vim.Math3d.Complex,Vim.Math3d.Complex)
  - Vim.Math3d.Complex.op_UnaryNegation(Vim.Math3d.Complex)
  - Vim.Math3d.Complex.ProductComponents
  - Vim.Math3d.Complex.Real
  - Vim.Math3d.Complex.SetImaginary(System.Double)
  - Vim.Math3d.Complex.SetReal(System.Double)
  - Vim.Math3d.Complex.SumComponents
  - Vim.Math3d.Complex.SumSqrComponents
  - Vim.Math3d.Complex.ToString
  - Vim.Math3d.Complex.UnitImaginary
  - Vim.Math3d.Complex.UnitReal
  - Vim.Math3d.Complex.Zero
  langs:
  - csharp
  - vb
  name: Complex
  nameWithType: Complex
  fullName: Vim.Math3d.Complex
  type: Struct
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Complex
    path: ../src/Structs.cs
    startLine: 448
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataContract]

      public readonly struct Complex : IEquatable<Complex>, IComparable<Complex>
    content.vb: >-
      <DataContract>

      Public Structure Complex
          Implements IEquatable(Of Complex), IComparable(Of Complex)
  implements:
  - System.IEquatable{Vim.Math3d.Complex}
  - System.IComparable{Vim.Math3d.Complex}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Vim.Math3d.Complex.Real
  commentId: F:Vim.Math3d.Complex.Real
  id: Real
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: Real
  nameWithType: Complex.Real
  fullName: Vim.Math3d.Complex.Real
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Real
    path: ../src/Structs.cs
    startLine: 455
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataMember]

      public readonly double Real
    return:
      type: System.Double
    content.vb: >-
      <DataMember>

      Public ReadOnly Real As Double
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.Complex.Imaginary
  commentId: F:Vim.Math3d.Complex.Imaginary
  id: Imaginary
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: Imaginary
  nameWithType: Complex.Imaginary
  fullName: Vim.Math3d.Complex.Imaginary
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Imaginary
    path: ../src/Structs.cs
    startLine: 457
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataMember]

      public readonly double Imaginary
    return:
      type: System.Double
    content.vb: >-
      <DataMember>

      Public ReadOnly Imaginary As Double
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.Complex.#ctor(System.ValueTuple{System.Double,System.Double})
  commentId: M:Vim.Math3d.Complex.#ctor(System.ValueTuple{System.Double,System.Double})
  id: '#ctor(System.ValueTuple{System.Double,System.Double})'
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: Complex((Double real, Double imaginary))
  nameWithType: Complex.Complex((Double real, Double imaginary))
  fullName: Vim.Math3d.Complex.Complex(System.ValueTuple<System.Double, System.Double>)
  type: Constructor
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: .ctor
    path: ../src/Structs.cs
    startLine: 458
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public Complex((double real, double imaginary) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{System.Double,System.Double}
    content.vb: Public Sub New(tuple As(real As Double, imaginary As Double)(Of Double , Double))
  overload: Vim.Math3d.Complex.#ctor*
  nameWithType.vb: Complex.Complex((real As Double, imaginary As Double)(Of Double, Double))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Vim.Math3d.Complex.Complex(System.ValueTuple(Of System.Double, System.Double))
  name.vb: Complex((real As Double, imaginary As Double)(Of Double, Double))
- uid: Vim.Math3d.Complex.#ctor(System.Double,System.Double)
  commentId: M:Vim.Math3d.Complex.#ctor(System.Double,System.Double)
  id: '#ctor(System.Double,System.Double)'
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: Complex(Double, Double)
  nameWithType: Complex.Complex(Double, Double)
  fullName: Vim.Math3d.Complex.Complex(System.Double, System.Double)
  type: Constructor
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: .ctor
    path: ../src/Structs.cs
    startLine: 459
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public Complex(double real, double imaginary)
    parameters:
    - id: real
      type: System.Double
    - id: imaginary
      type: System.Double
    content.vb: Public Sub New(real As Double, imaginary As Double)
  overload: Vim.Math3d.Complex.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Complex.Create(System.Double,System.Double)
  commentId: M:Vim.Math3d.Complex.Create(System.Double,System.Double)
  id: Create(System.Double,System.Double)
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: Create(Double, Double)
  nameWithType: Complex.Create(Double, Double)
  fullName: Vim.Math3d.Complex.Create(System.Double, System.Double)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Create
    path: ../src/Structs.cs
    startLine: 460
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Complex Create(double real, double imaginary)
    parameters:
    - id: real
      type: System.Double
    - id: imaginary
      type: System.Double
    return:
      type: Vim.Math3d.Complex
    content.vb: Public Shared Function Create(real As Double, imaginary As Double) As Complex
  overload: Vim.Math3d.Complex.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Complex.Create(System.ValueTuple{System.Double,System.Double})
  commentId: M:Vim.Math3d.Complex.Create(System.ValueTuple{System.Double,System.Double})
  id: Create(System.ValueTuple{System.Double,System.Double})
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: Create((Double real, Double imaginary))
  nameWithType: Complex.Create((Double real, Double imaginary))
  fullName: Vim.Math3d.Complex.Create(System.ValueTuple<System.Double, System.Double>)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Create
    path: ../src/Structs.cs
    startLine: 461
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Complex Create((double real, double imaginary) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{System.Double,System.Double}
    return:
      type: Vim.Math3d.Complex
    content.vb: Public Shared Function Create(tuple As(real As Double, imaginary As Double)(Of Double , Double)) As Complex
  overload: Vim.Math3d.Complex.Create*
  nameWithType.vb: Complex.Create((real As Double, imaginary As Double)(Of Double, Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.Complex.Create(System.ValueTuple(Of System.Double, System.Double))
  name.vb: Create((real As Double, imaginary As Double)(Of Double, Double))
- uid: Vim.Math3d.Complex.Equals(System.Object)
  commentId: M:Vim.Math3d.Complex.Equals(System.Object)
  id: Equals(System.Object)
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Complex.Equals(Object)
  fullName: Vim.Math3d.Complex.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Equals
    path: ../src/Structs.cs
    startLine: 462
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: Vim.Math3d.Complex.Equals*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.Complex.GetHashCode
  commentId: M:Vim.Math3d.Complex.GetHashCode
  id: GetHashCode
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Complex.GetHashCode()
  fullName: Vim.Math3d.Complex.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: GetHashCode
    path: ../src/Structs.cs
    startLine: 463
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: Vim.Math3d.Complex.GetHashCode*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.Complex.ToString
  commentId: M:Vim.Math3d.Complex.ToString
  id: ToString
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Complex.ToString()
  fullName: Vim.Math3d.Complex.ToString()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToString
    path: ../src/Structs.cs
    startLine: 464
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: Vim.Math3d.Complex.ToString*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.Complex.Deconstruct(System.Double@,System.Double@)
  commentId: M:Vim.Math3d.Complex.Deconstruct(System.Double@,System.Double@)
  id: Deconstruct(System.Double@,System.Double@)
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: Deconstruct(out Double, out Double)
  nameWithType: Complex.Deconstruct(out Double, out Double)
  fullName: Vim.Math3d.Complex.Deconstruct(out System.Double, out System.Double)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Deconstruct
    path: ../src/Structs.cs
    startLine: 465
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly void Deconstruct(out double real, out double imaginary)
    parameters:
    - id: real
      type: System.Double
    - id: imaginary
      type: System.Double
    content.vb: Public Sub Deconstruct(ByRef real As Double, ByRef imaginary As Double)
  overload: Vim.Math3d.Complex.Deconstruct*
  nameWithType.vb: Complex.Deconstruct(ByRef Double, ByRef Double)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  fullName.vb: Vim.Math3d.Complex.Deconstruct(ByRef System.Double, ByRef System.Double)
  name.vb: Deconstruct(ByRef Double, ByRef Double)
- uid: Vim.Math3d.Complex.Equals(Vim.Math3d.Complex)
  commentId: M:Vim.Math3d.Complex.Equals(Vim.Math3d.Complex)
  id: Equals(Vim.Math3d.Complex)
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: Equals(Complex)
  nameWithType: Complex.Equals(Complex)
  fullName: Vim.Math3d.Complex.Equals(Vim.Math3d.Complex)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Equals
    path: ../src/Structs.cs
    startLine: 466
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool Equals(Complex x)
    parameters:
    - id: x
      type: Vim.Math3d.Complex
    return:
      type: System.Boolean
    content.vb: Public Function Equals(x As Complex) As Boolean
  overload: Vim.Math3d.Complex.Equals*
  implements:
  - System.IEquatable{Vim.Math3d.Complex}.Equals(Vim.Math3d.Complex)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Complex.op_Equality(Vim.Math3d.Complex,Vim.Math3d.Complex)
  commentId: M:Vim.Math3d.Complex.op_Equality(Vim.Math3d.Complex,Vim.Math3d.Complex)
  id: op_Equality(Vim.Math3d.Complex,Vim.Math3d.Complex)
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: Equality(Complex, Complex)
  nameWithType: Complex.Equality(Complex, Complex)
  fullName: Vim.Math3d.Complex.Equality(Vim.Math3d.Complex, Vim.Math3d.Complex)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Equality
    path: ../src/Structs.cs
    startLine: 467
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator ==(Complex x0, Complex x1)
    parameters:
    - id: x0
      type: Vim.Math3d.Complex
    - id: x1
      type: Vim.Math3d.Complex
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(x0 As Complex, x1 As Complex) As Boolean
  overload: Vim.Math3d.Complex.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Complex.op_Inequality(Vim.Math3d.Complex,Vim.Math3d.Complex)
  commentId: M:Vim.Math3d.Complex.op_Inequality(Vim.Math3d.Complex,Vim.Math3d.Complex)
  id: op_Inequality(Vim.Math3d.Complex,Vim.Math3d.Complex)
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: Inequality(Complex, Complex)
  nameWithType: Complex.Inequality(Complex, Complex)
  fullName: Vim.Math3d.Complex.Inequality(Vim.Math3d.Complex, Vim.Math3d.Complex)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Inequality
    path: ../src/Structs.cs
    startLine: 468
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator !=(Complex x0, Complex x1)
    parameters:
    - id: x0
      type: Vim.Math3d.Complex
    - id: x1
      type: Vim.Math3d.Complex
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(x0 As Complex, x1 As Complex) As Boolean
  overload: Vim.Math3d.Complex.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Complex.op_Implicit(System.ValueTuple{System.Double,System.Double})~Vim.Math3d.Complex
  commentId: M:Vim.Math3d.Complex.op_Implicit(System.ValueTuple{System.Double,System.Double})~Vim.Math3d.Complex
  id: op_Implicit(System.ValueTuple{System.Double,System.Double})~Vim.Math3d.Complex
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: Implicit((Double real, Double imaginary) to Complex)
  nameWithType: Complex.Implicit((Double real, Double imaginary) to Complex)
  fullName: Vim.Math3d.Complex.Implicit(System.ValueTuple<System.Double, System.Double> to Vim.Math3d.Complex)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Implicit
    path: ../src/Structs.cs
    startLine: 469
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static implicit operator Complex((double real, double imaginary) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{System.Double,System.Double}
    return:
      type: Vim.Math3d.Complex
    content.vb: Public Shared Widening Operator CType(tuple As(real As Double, imaginary As Double)(Of Double , Double)) As Complex
  overload: Vim.Math3d.Complex.op_Implicit*
  nameWithType.vb: Complex.Widening((real As Double, imaginary As Double)(Of Double, Double) to Complex)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.Complex.Widening(System.ValueTuple(Of System.Double, System.Double) to Vim.Math3d.Complex)
  name.vb: Widening((real As Double, imaginary As Double)(Of Double, Double) to Complex)
- uid: Vim.Math3d.Complex.op_Implicit(Vim.Math3d.Complex)~System.ValueTuple{System.Double,System.Double}
  commentId: M:Vim.Math3d.Complex.op_Implicit(Vim.Math3d.Complex)~System.ValueTuple{System.Double,System.Double}
  id: op_Implicit(Vim.Math3d.Complex)~System.ValueTuple{System.Double,System.Double}
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: Implicit(Complex to (Double real, Double imaginary))
  nameWithType: Complex.Implicit(Complex to (Double real, Double imaginary))
  fullName: Vim.Math3d.Complex.Implicit(Vim.Math3d.Complex to System.ValueTuple<System.Double, System.Double>)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Implicit
    path: ../src/Structs.cs
    startLine: 470
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static implicit operator (double real, double imaginary)(Complex self)
    parameters:
    - id: self
      type: Vim.Math3d.Complex
    return:
      type: System.ValueTuple{System.Double,System.Double}
    content.vb: Public Shared Widening Operator CType(self As Complex) As(real As Double, imaginary As Double)(Of Double , Double)
  overload: Vim.Math3d.Complex.op_Implicit*
  nameWithType.vb: Complex.Widening(Complex to (real As Double, imaginary As Double)(Of Double, Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.Complex.Widening(Vim.Math3d.Complex to System.ValueTuple(Of System.Double, System.Double))
  name.vb: Widening(Complex to (real As Double, imaginary As Double)(Of Double, Double))
- uid: Vim.Math3d.Complex.AlmostEquals(Vim.Math3d.Complex,System.Single)
  commentId: M:Vim.Math3d.Complex.AlmostEquals(Vim.Math3d.Complex,System.Single)
  id: AlmostEquals(Vim.Math3d.Complex,System.Single)
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: AlmostEquals(Complex, Single)
  nameWithType: Complex.AlmostEquals(Complex, Single)
  fullName: Vim.Math3d.Complex.AlmostEquals(Vim.Math3d.Complex, System.Single)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: AlmostEquals
    path: ../src/Structs.cs
    startLine: 472
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool AlmostEquals(Complex x, float tolerance = 1E-07F)
    parameters:
    - id: x
      type: Vim.Math3d.Complex
    - id: tolerance
      type: System.Single
    return:
      type: System.Boolean
    content.vb: Public Function AlmostEquals(x As Complex, tolerance As Single = 1E-07F) As Boolean
  overload: Vim.Math3d.Complex.AlmostEquals*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Complex.Zero
  commentId: F:Vim.Math3d.Complex.Zero
  id: Zero
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: Zero
  nameWithType: Complex.Zero
  fullName: Vim.Math3d.Complex.Zero
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Zero
    path: ../src/Structs.cs
    startLine: 473
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Complex Zero
    return:
      type: Vim.Math3d.Complex
    content.vb: Public Shared Zero As Complex
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Complex.MinValue
  commentId: F:Vim.Math3d.Complex.MinValue
  id: MinValue
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: MinValue
  nameWithType: Complex.MinValue
  fullName: Vim.Math3d.Complex.MinValue
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MinValue
    path: ../src/Structs.cs
    startLine: 474
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Complex MinValue
    return:
      type: Vim.Math3d.Complex
    content.vb: Public Shared MinValue As Complex
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Complex.MaxValue
  commentId: F:Vim.Math3d.Complex.MaxValue
  id: MaxValue
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: MaxValue
  nameWithType: Complex.MaxValue
  fullName: Vim.Math3d.Complex.MaxValue
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MaxValue
    path: ../src/Structs.cs
    startLine: 475
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Complex MaxValue
    return:
      type: Vim.Math3d.Complex
    content.vb: Public Shared MaxValue As Complex
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Complex.SetReal(System.Double)
  commentId: M:Vim.Math3d.Complex.SetReal(System.Double)
  id: SetReal(System.Double)
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: SetReal(Double)
  nameWithType: Complex.SetReal(Double)
  fullName: Vim.Math3d.Complex.SetReal(System.Double)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SetReal
    path: ../src/Structs.cs
    startLine: 476
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly Complex SetReal(double x)
    parameters:
    - id: x
      type: System.Double
    return:
      type: Vim.Math3d.Complex
    content.vb: Public Function SetReal(x As Double) As Complex
  overload: Vim.Math3d.Complex.SetReal*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Complex.SetImaginary(System.Double)
  commentId: M:Vim.Math3d.Complex.SetImaginary(System.Double)
  id: SetImaginary(System.Double)
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: SetImaginary(Double)
  nameWithType: Complex.SetImaginary(Double)
  fullName: Vim.Math3d.Complex.SetImaginary(System.Double)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SetImaginary
    path: ../src/Structs.cs
    startLine: 477
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly Complex SetImaginary(double x)
    parameters:
    - id: x
      type: System.Double
    return:
      type: Vim.Math3d.Complex
    content.vb: Public Function SetImaginary(x As Double) As Complex
  overload: Vim.Math3d.Complex.SetImaginary*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Complex.op_Addition(Vim.Math3d.Complex,Vim.Math3d.Complex)
  commentId: M:Vim.Math3d.Complex.op_Addition(Vim.Math3d.Complex,Vim.Math3d.Complex)
  id: op_Addition(Vim.Math3d.Complex,Vim.Math3d.Complex)
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: Addition(Complex, Complex)
  nameWithType: Complex.Addition(Complex, Complex)
  fullName: Vim.Math3d.Complex.Addition(Vim.Math3d.Complex, Vim.Math3d.Complex)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Addition
    path: ../src/Structs.cs
    startLine: 478
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Complex operator +(Complex value1, Complex value2)
    parameters:
    - id: value1
      type: Vim.Math3d.Complex
    - id: value2
      type: Vim.Math3d.Complex
    return:
      type: Vim.Math3d.Complex
    content.vb: Public Shared Operator +(value1 As Complex, value2 As Complex) As Complex
  overload: Vim.Math3d.Complex.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Complex.op_Addition(Vim.Math3d.Complex,System.Double)
  commentId: M:Vim.Math3d.Complex.op_Addition(Vim.Math3d.Complex,System.Double)
  id: op_Addition(Vim.Math3d.Complex,System.Double)
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: Addition(Complex, Double)
  nameWithType: Complex.Addition(Complex, Double)
  fullName: Vim.Math3d.Complex.Addition(Vim.Math3d.Complex, System.Double)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Addition
    path: ../src/Structs.cs
    startLine: 479
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Complex operator +(Complex value1, double value2)
    parameters:
    - id: value1
      type: Vim.Math3d.Complex
    - id: value2
      type: System.Double
    return:
      type: Vim.Math3d.Complex
    content.vb: Public Shared Operator +(value1 As Complex, value2 As Double) As Complex
  overload: Vim.Math3d.Complex.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Complex.op_Addition(System.Double,Vim.Math3d.Complex)
  commentId: M:Vim.Math3d.Complex.op_Addition(System.Double,Vim.Math3d.Complex)
  id: op_Addition(System.Double,Vim.Math3d.Complex)
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: Addition(Double, Complex)
  nameWithType: Complex.Addition(Double, Complex)
  fullName: Vim.Math3d.Complex.Addition(System.Double, Vim.Math3d.Complex)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Addition
    path: ../src/Structs.cs
    startLine: 480
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Complex operator +(double value1, Complex value2)
    parameters:
    - id: value1
      type: System.Double
    - id: value2
      type: Vim.Math3d.Complex
    return:
      type: Vim.Math3d.Complex
    content.vb: Public Shared Operator +(value1 As Double, value2 As Complex) As Complex
  overload: Vim.Math3d.Complex.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Complex.op_Subtraction(Vim.Math3d.Complex,Vim.Math3d.Complex)
  commentId: M:Vim.Math3d.Complex.op_Subtraction(Vim.Math3d.Complex,Vim.Math3d.Complex)
  id: op_Subtraction(Vim.Math3d.Complex,Vim.Math3d.Complex)
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: Subtraction(Complex, Complex)
  nameWithType: Complex.Subtraction(Complex, Complex)
  fullName: Vim.Math3d.Complex.Subtraction(Vim.Math3d.Complex, Vim.Math3d.Complex)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Subtraction
    path: ../src/Structs.cs
    startLine: 481
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Complex operator -(Complex value1, Complex value2)
    parameters:
    - id: value1
      type: Vim.Math3d.Complex
    - id: value2
      type: Vim.Math3d.Complex
    return:
      type: Vim.Math3d.Complex
    content.vb: Public Shared Operator -(value1 As Complex, value2 As Complex) As Complex
  overload: Vim.Math3d.Complex.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Complex.op_Subtraction(Vim.Math3d.Complex,System.Double)
  commentId: M:Vim.Math3d.Complex.op_Subtraction(Vim.Math3d.Complex,System.Double)
  id: op_Subtraction(Vim.Math3d.Complex,System.Double)
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: Subtraction(Complex, Double)
  nameWithType: Complex.Subtraction(Complex, Double)
  fullName: Vim.Math3d.Complex.Subtraction(Vim.Math3d.Complex, System.Double)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Subtraction
    path: ../src/Structs.cs
    startLine: 482
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Complex operator -(Complex value1, double value2)
    parameters:
    - id: value1
      type: Vim.Math3d.Complex
    - id: value2
      type: System.Double
    return:
      type: Vim.Math3d.Complex
    content.vb: Public Shared Operator -(value1 As Complex, value2 As Double) As Complex
  overload: Vim.Math3d.Complex.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Complex.op_Subtraction(System.Double,Vim.Math3d.Complex)
  commentId: M:Vim.Math3d.Complex.op_Subtraction(System.Double,Vim.Math3d.Complex)
  id: op_Subtraction(System.Double,Vim.Math3d.Complex)
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: Subtraction(Double, Complex)
  nameWithType: Complex.Subtraction(Double, Complex)
  fullName: Vim.Math3d.Complex.Subtraction(System.Double, Vim.Math3d.Complex)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Subtraction
    path: ../src/Structs.cs
    startLine: 483
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Complex operator -(double value1, Complex value2)
    parameters:
    - id: value1
      type: System.Double
    - id: value2
      type: Vim.Math3d.Complex
    return:
      type: Vim.Math3d.Complex
    content.vb: Public Shared Operator -(value1 As Double, value2 As Complex) As Complex
  overload: Vim.Math3d.Complex.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Complex.op_Multiply(Vim.Math3d.Complex,Vim.Math3d.Complex)
  commentId: M:Vim.Math3d.Complex.op_Multiply(Vim.Math3d.Complex,Vim.Math3d.Complex)
  id: op_Multiply(Vim.Math3d.Complex,Vim.Math3d.Complex)
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: Multiply(Complex, Complex)
  nameWithType: Complex.Multiply(Complex, Complex)
  fullName: Vim.Math3d.Complex.Multiply(Vim.Math3d.Complex, Vim.Math3d.Complex)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Multiply
    path: ../src/Structs.cs
    startLine: 484
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Complex operator *(Complex value1, Complex value2)
    parameters:
    - id: value1
      type: Vim.Math3d.Complex
    - id: value2
      type: Vim.Math3d.Complex
    return:
      type: Vim.Math3d.Complex
    content.vb: Public Shared Operator *(value1 As Complex, value2 As Complex) As Complex
  overload: Vim.Math3d.Complex.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Complex.op_Multiply(Vim.Math3d.Complex,System.Double)
  commentId: M:Vim.Math3d.Complex.op_Multiply(Vim.Math3d.Complex,System.Double)
  id: op_Multiply(Vim.Math3d.Complex,System.Double)
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: Multiply(Complex, Double)
  nameWithType: Complex.Multiply(Complex, Double)
  fullName: Vim.Math3d.Complex.Multiply(Vim.Math3d.Complex, System.Double)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Multiply
    path: ../src/Structs.cs
    startLine: 485
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Complex operator *(Complex value1, double value2)
    parameters:
    - id: value1
      type: Vim.Math3d.Complex
    - id: value2
      type: System.Double
    return:
      type: Vim.Math3d.Complex
    content.vb: Public Shared Operator *(value1 As Complex, value2 As Double) As Complex
  overload: Vim.Math3d.Complex.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Complex.op_Multiply(System.Double,Vim.Math3d.Complex)
  commentId: M:Vim.Math3d.Complex.op_Multiply(System.Double,Vim.Math3d.Complex)
  id: op_Multiply(System.Double,Vim.Math3d.Complex)
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: Multiply(Double, Complex)
  nameWithType: Complex.Multiply(Double, Complex)
  fullName: Vim.Math3d.Complex.Multiply(System.Double, Vim.Math3d.Complex)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Multiply
    path: ../src/Structs.cs
    startLine: 486
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Complex operator *(double value1, Complex value2)
    parameters:
    - id: value1
      type: System.Double
    - id: value2
      type: Vim.Math3d.Complex
    return:
      type: Vim.Math3d.Complex
    content.vb: Public Shared Operator *(value1 As Double, value2 As Complex) As Complex
  overload: Vim.Math3d.Complex.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Complex.op_Division(Vim.Math3d.Complex,Vim.Math3d.Complex)
  commentId: M:Vim.Math3d.Complex.op_Division(Vim.Math3d.Complex,Vim.Math3d.Complex)
  id: op_Division(Vim.Math3d.Complex,Vim.Math3d.Complex)
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: Division(Complex, Complex)
  nameWithType: Complex.Division(Complex, Complex)
  fullName: Vim.Math3d.Complex.Division(Vim.Math3d.Complex, Vim.Math3d.Complex)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Division
    path: ../src/Structs.cs
    startLine: 487
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Complex operator /(Complex value1, Complex value2)
    parameters:
    - id: value1
      type: Vim.Math3d.Complex
    - id: value2
      type: Vim.Math3d.Complex
    return:
      type: Vim.Math3d.Complex
    content.vb: Public Shared Operator /(value1 As Complex, value2 As Complex) As Complex
  overload: Vim.Math3d.Complex.op_Division*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Complex.op_Division(Vim.Math3d.Complex,System.Double)
  commentId: M:Vim.Math3d.Complex.op_Division(Vim.Math3d.Complex,System.Double)
  id: op_Division(Vim.Math3d.Complex,System.Double)
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: Division(Complex, Double)
  nameWithType: Complex.Division(Complex, Double)
  fullName: Vim.Math3d.Complex.Division(Vim.Math3d.Complex, System.Double)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Division
    path: ../src/Structs.cs
    startLine: 488
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Complex operator /(Complex value1, double value2)
    parameters:
    - id: value1
      type: Vim.Math3d.Complex
    - id: value2
      type: System.Double
    return:
      type: Vim.Math3d.Complex
    content.vb: Public Shared Operator /(value1 As Complex, value2 As Double) As Complex
  overload: Vim.Math3d.Complex.op_Division*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Complex.op_Division(System.Double,Vim.Math3d.Complex)
  commentId: M:Vim.Math3d.Complex.op_Division(System.Double,Vim.Math3d.Complex)
  id: op_Division(System.Double,Vim.Math3d.Complex)
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: Division(Double, Complex)
  nameWithType: Complex.Division(Double, Complex)
  fullName: Vim.Math3d.Complex.Division(System.Double, Vim.Math3d.Complex)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Division
    path: ../src/Structs.cs
    startLine: 489
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Complex operator /(double value1, Complex value2)
    parameters:
    - id: value1
      type: System.Double
    - id: value2
      type: Vim.Math3d.Complex
    return:
      type: Vim.Math3d.Complex
    content.vb: Public Shared Operator /(value1 As Double, value2 As Complex) As Complex
  overload: Vim.Math3d.Complex.op_Division*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Complex.One
  commentId: F:Vim.Math3d.Complex.One
  id: One
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: One
  nameWithType: Complex.One
  fullName: Vim.Math3d.Complex.One
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: One
    path: ../src/Structs.cs
    startLine: 490
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Complex One
    return:
      type: Vim.Math3d.Complex
    content.vb: Public Shared One As Complex
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Complex.UnitReal
  commentId: F:Vim.Math3d.Complex.UnitReal
  id: UnitReal
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: UnitReal
  nameWithType: Complex.UnitReal
  fullName: Vim.Math3d.Complex.UnitReal
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: UnitReal
    path: ../src/Structs.cs
    startLine: 491
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Complex UnitReal
    return:
      type: Vim.Math3d.Complex
    content.vb: Public Shared UnitReal As Complex
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Complex.UnitImaginary
  commentId: F:Vim.Math3d.Complex.UnitImaginary
  id: UnitImaginary
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: UnitImaginary
  nameWithType: Complex.UnitImaginary
  fullName: Vim.Math3d.Complex.UnitImaginary
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: UnitImaginary
    path: ../src/Structs.cs
    startLine: 492
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Complex UnitImaginary
    return:
      type: Vim.Math3d.Complex
    content.vb: Public Shared UnitImaginary As Complex
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Complex.#ctor(System.Double)
  commentId: M:Vim.Math3d.Complex.#ctor(System.Double)
  id: '#ctor(System.Double)'
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: Complex(Double)
  nameWithType: Complex.Complex(Double)
  fullName: Vim.Math3d.Complex.Complex(System.Double)
  type: Constructor
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: .ctor
    path: ../src/Structs.cs
    startLine: 493
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public Complex(double value)
    parameters:
    - id: value
      type: System.Double
    content.vb: Public Sub New(value As Double)
  overload: Vim.Math3d.Complex.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Complex.op_UnaryNegation(Vim.Math3d.Complex)
  commentId: M:Vim.Math3d.Complex.op_UnaryNegation(Vim.Math3d.Complex)
  id: op_UnaryNegation(Vim.Math3d.Complex)
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: UnaryNegation(Complex)
  nameWithType: Complex.UnaryNegation(Complex)
  fullName: Vim.Math3d.Complex.UnaryNegation(Vim.Math3d.Complex)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_UnaryNegation
    path: ../src/Structs.cs
    startLine: 494
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Complex operator -(Complex value)
    parameters:
    - id: value
      type: Vim.Math3d.Complex
    return:
      type: Vim.Math3d.Complex
    content.vb: Public Shared Operator -(value As Complex) As Complex
  overload: Vim.Math3d.Complex.op_UnaryNegation*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Complex.Dot(Vim.Math3d.Complex,Vim.Math3d.Complex)
  commentId: M:Vim.Math3d.Complex.Dot(Vim.Math3d.Complex,Vim.Math3d.Complex)
  id: Dot(Vim.Math3d.Complex,Vim.Math3d.Complex)
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: Dot(Complex, Complex)
  nameWithType: Complex.Dot(Complex, Complex)
  fullName: Vim.Math3d.Complex.Dot(Vim.Math3d.Complex, Vim.Math3d.Complex)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Dot
    path: ../src/Structs.cs
    startLine: 495
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double Dot(Complex value1, Complex value2)
    parameters:
    - id: value1
      type: Vim.Math3d.Complex
    - id: value2
      type: Vim.Math3d.Complex
    return:
      type: System.Double
    content.vb: Public Shared Function Dot(value1 As Complex, value2 As Complex) As Double
  overload: Vim.Math3d.Complex.Dot*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Complex.Dot(Vim.Math3d.Complex)
  commentId: M:Vim.Math3d.Complex.Dot(Vim.Math3d.Complex)
  id: Dot(Vim.Math3d.Complex)
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: Dot(Complex)
  nameWithType: Complex.Dot(Complex)
  fullName: Vim.Math3d.Complex.Dot(Vim.Math3d.Complex)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Dot
    path: ../src/Structs.cs
    startLine: 496
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly double Dot(Complex value)
    parameters:
    - id: value
      type: Vim.Math3d.Complex
    return:
      type: System.Double
    content.vb: Public Function Dot(value As Complex) As Double
  overload: Vim.Math3d.Complex.Dot*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Complex.AlmostZero(System.Single)
  commentId: M:Vim.Math3d.Complex.AlmostZero(System.Single)
  id: AlmostZero(System.Single)
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: AlmostZero(Single)
  nameWithType: Complex.AlmostZero(Single)
  fullName: Vim.Math3d.Complex.AlmostZero(System.Single)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: AlmostZero
    path: ../src/Structs.cs
    startLine: 497
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool AlmostZero(float tolerance = 1E-07F)
    parameters:
    - id: tolerance
      type: System.Single
    return:
      type: System.Boolean
    content.vb: Public Function AlmostZero(tolerance As Single = 1E-07F) As Boolean
  overload: Vim.Math3d.Complex.AlmostZero*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Complex.AnyComponentNegative
  commentId: M:Vim.Math3d.Complex.AnyComponentNegative
  id: AnyComponentNegative
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: AnyComponentNegative()
  nameWithType: Complex.AnyComponentNegative()
  fullName: Vim.Math3d.Complex.AnyComponentNegative()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: AnyComponentNegative
    path: ../src/Structs.cs
    startLine: 498
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool AnyComponentNegative()
    return:
      type: System.Boolean
    content.vb: Public Function AnyComponentNegative As Boolean
  overload: Vim.Math3d.Complex.AnyComponentNegative*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Complex.MinComponent
  commentId: M:Vim.Math3d.Complex.MinComponent
  id: MinComponent
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: MinComponent()
  nameWithType: Complex.MinComponent()
  fullName: Vim.Math3d.Complex.MinComponent()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MinComponent
    path: ../src/Structs.cs
    startLine: 499
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly double MinComponent()
    return:
      type: System.Double
    content.vb: Public Function MinComponent As Double
  overload: Vim.Math3d.Complex.MinComponent*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Complex.MaxComponent
  commentId: M:Vim.Math3d.Complex.MaxComponent
  id: MaxComponent
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: MaxComponent()
  nameWithType: Complex.MaxComponent()
  fullName: Vim.Math3d.Complex.MaxComponent()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MaxComponent
    path: ../src/Structs.cs
    startLine: 500
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly double MaxComponent()
    return:
      type: System.Double
    content.vb: Public Function MaxComponent As Double
  overload: Vim.Math3d.Complex.MaxComponent*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Complex.SumComponents
  commentId: M:Vim.Math3d.Complex.SumComponents
  id: SumComponents
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: SumComponents()
  nameWithType: Complex.SumComponents()
  fullName: Vim.Math3d.Complex.SumComponents()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SumComponents
    path: ../src/Structs.cs
    startLine: 501
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly double SumComponents()
    return:
      type: System.Double
    content.vb: Public Function SumComponents As Double
  overload: Vim.Math3d.Complex.SumComponents*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Complex.SumSqrComponents
  commentId: M:Vim.Math3d.Complex.SumSqrComponents
  id: SumSqrComponents
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: SumSqrComponents()
  nameWithType: Complex.SumSqrComponents()
  fullName: Vim.Math3d.Complex.SumSqrComponents()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SumSqrComponents
    path: ../src/Structs.cs
    startLine: 502
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly double SumSqrComponents()
    return:
      type: System.Double
    content.vb: Public Function SumSqrComponents As Double
  overload: Vim.Math3d.Complex.SumSqrComponents*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Complex.ProductComponents
  commentId: M:Vim.Math3d.Complex.ProductComponents
  id: ProductComponents
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: ProductComponents()
  nameWithType: Complex.ProductComponents()
  fullName: Vim.Math3d.Complex.ProductComponents()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ProductComponents
    path: ../src/Structs.cs
    startLine: 503
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly double ProductComponents()
    return:
      type: System.Double
    content.vb: Public Function ProductComponents As Double
  overload: Vim.Math3d.Complex.ProductComponents*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Complex.GetComponent(System.Int32)
  commentId: M:Vim.Math3d.Complex.GetComponent(System.Int32)
  id: GetComponent(System.Int32)
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: GetComponent(Int32)
  nameWithType: Complex.GetComponent(Int32)
  fullName: Vim.Math3d.Complex.GetComponent(System.Int32)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: GetComponent
    path: ../src/Structs.cs
    startLine: 504
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly double GetComponent(int n)
    parameters:
    - id: n
      type: System.Int32
    return:
      type: System.Double
    content.vb: Public Function GetComponent(n As Integer) As Double
  overload: Vim.Math3d.Complex.GetComponent*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Complex.MagnitudeSquared
  commentId: M:Vim.Math3d.Complex.MagnitudeSquared
  id: MagnitudeSquared
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: MagnitudeSquared()
  nameWithType: Complex.MagnitudeSquared()
  fullName: Vim.Math3d.Complex.MagnitudeSquared()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MagnitudeSquared
    path: ../src/Structs.cs
    startLine: 505
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly double MagnitudeSquared()
    return:
      type: System.Double
    content.vb: Public Function MagnitudeSquared As Double
  overload: Vim.Math3d.Complex.MagnitudeSquared*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Complex.Magnitude
  commentId: M:Vim.Math3d.Complex.Magnitude
  id: Magnitude
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: Magnitude()
  nameWithType: Complex.Magnitude()
  fullName: Vim.Math3d.Complex.Magnitude()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Magnitude
    path: ../src/Structs.cs
    startLine: 506
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly double Magnitude()
    return:
      type: System.Double
    content.vb: Public Function Magnitude As Double
  overload: Vim.Math3d.Complex.Magnitude*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Complex.NumComponents
  commentId: F:Vim.Math3d.Complex.NumComponents
  id: NumComponents
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: NumComponents
  nameWithType: Complex.NumComponents
  fullName: Vim.Math3d.Complex.NumComponents
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: NumComponents
    path: ../src/Structs.cs
    startLine: 507
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public const int NumComponents = 2
    return:
      type: System.Int32
    content.vb: Public Const NumComponents As Integer = 2
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Vim.Math3d.Complex.IsNaN
  commentId: M:Vim.Math3d.Complex.IsNaN
  id: IsNaN
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: IsNaN()
  nameWithType: Complex.IsNaN()
  fullName: Vim.Math3d.Complex.IsNaN()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: IsNaN
    path: ../src/Structs.cs
    startLine: 509
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool IsNaN()
    return:
      type: System.Boolean
    content.vb: Public Function IsNaN As Boolean
  overload: Vim.Math3d.Complex.IsNaN*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Complex.IsInfinity
  commentId: M:Vim.Math3d.Complex.IsInfinity
  id: IsInfinity
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: IsInfinity()
  nameWithType: Complex.IsInfinity()
  fullName: Vim.Math3d.Complex.IsInfinity()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: IsInfinity
    path: ../src/Structs.cs
    startLine: 510
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool IsInfinity()
    return:
      type: System.Boolean
    content.vb: Public Function IsInfinity As Boolean
  overload: Vim.Math3d.Complex.IsInfinity*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Complex.CompareTo(Vim.Math3d.Complex)
  commentId: M:Vim.Math3d.Complex.CompareTo(Vim.Math3d.Complex)
  id: CompareTo(Vim.Math3d.Complex)
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: CompareTo(Complex)
  nameWithType: Complex.CompareTo(Complex)
  fullName: Vim.Math3d.Complex.CompareTo(Vim.Math3d.Complex)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: CompareTo
    path: ../src/Structs.cs
    startLine: 511
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly int CompareTo(Complex x)
    parameters:
    - id: x
      type: Vim.Math3d.Complex
    return:
      type: System.Int32
    content.vb: Public Function CompareTo(x As Complex) As Integer
  overload: Vim.Math3d.Complex.CompareTo*
  implements:
  - System.IComparable{Vim.Math3d.Complex}.CompareTo(Vim.Math3d.Complex)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Complex.op_LessThan(Vim.Math3d.Complex,Vim.Math3d.Complex)
  commentId: M:Vim.Math3d.Complex.op_LessThan(Vim.Math3d.Complex,Vim.Math3d.Complex)
  id: op_LessThan(Vim.Math3d.Complex,Vim.Math3d.Complex)
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: LessThan(Complex, Complex)
  nameWithType: Complex.LessThan(Complex, Complex)
  fullName: Vim.Math3d.Complex.LessThan(Vim.Math3d.Complex, Vim.Math3d.Complex)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_LessThan
    path: ../src/Structs.cs
    startLine: 512
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator <(Complex x0, Complex x1)
    parameters:
    - id: x0
      type: Vim.Math3d.Complex
    - id: x1
      type: Vim.Math3d.Complex
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <(x0 As Complex, x1 As Complex) As Boolean
  overload: Vim.Math3d.Complex.op_LessThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Complex.op_LessThanOrEqual(Vim.Math3d.Complex,Vim.Math3d.Complex)
  commentId: M:Vim.Math3d.Complex.op_LessThanOrEqual(Vim.Math3d.Complex,Vim.Math3d.Complex)
  id: op_LessThanOrEqual(Vim.Math3d.Complex,Vim.Math3d.Complex)
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(Complex, Complex)
  nameWithType: Complex.LessThanOrEqual(Complex, Complex)
  fullName: Vim.Math3d.Complex.LessThanOrEqual(Vim.Math3d.Complex, Vim.Math3d.Complex)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_LessThanOrEqual
    path: ../src/Structs.cs
    startLine: 513
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator <=(Complex x0, Complex x1)
    parameters:
    - id: x0
      type: Vim.Math3d.Complex
    - id: x1
      type: Vim.Math3d.Complex
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <=(x0 As Complex, x1 As Complex) As Boolean
  overload: Vim.Math3d.Complex.op_LessThanOrEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Complex.op_GreaterThan(Vim.Math3d.Complex,Vim.Math3d.Complex)
  commentId: M:Vim.Math3d.Complex.op_GreaterThan(Vim.Math3d.Complex,Vim.Math3d.Complex)
  id: op_GreaterThan(Vim.Math3d.Complex,Vim.Math3d.Complex)
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: GreaterThan(Complex, Complex)
  nameWithType: Complex.GreaterThan(Complex, Complex)
  fullName: Vim.Math3d.Complex.GreaterThan(Vim.Math3d.Complex, Vim.Math3d.Complex)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_GreaterThan
    path: ../src/Structs.cs
    startLine: 514
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator>(Complex x0, Complex x1)
    parameters:
    - id: x0
      type: Vim.Math3d.Complex
    - id: x1
      type: Vim.Math3d.Complex
    return:
      type: System.Boolean
    content.vb: Public Shared Operator>(x0 As Complex, x1 As Complex) As Boolean
  overload: Vim.Math3d.Complex.op_GreaterThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Complex.op_GreaterThanOrEqual(Vim.Math3d.Complex,Vim.Math3d.Complex)
  commentId: M:Vim.Math3d.Complex.op_GreaterThanOrEqual(Vim.Math3d.Complex,Vim.Math3d.Complex)
  id: op_GreaterThanOrEqual(Vim.Math3d.Complex,Vim.Math3d.Complex)
  parent: Vim.Math3d.Complex
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(Complex, Complex)
  nameWithType: Complex.GreaterThanOrEqual(Complex, Complex)
  fullName: Vim.Math3d.Complex.GreaterThanOrEqual(Vim.Math3d.Complex, Vim.Math3d.Complex)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_GreaterThanOrEqual
    path: ../src/Structs.cs
    startLine: 515
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator >=(Complex x0, Complex x1)
    parameters:
    - id: x0
      type: Vim.Math3d.Complex
    - id: x1
      type: Vim.Math3d.Complex
    return:
      type: System.Boolean
    content.vb: Public Shared Operator >=(x0 As Complex, x1 As Complex) As Boolean
  overload: Vim.Math3d.Complex.op_GreaterThanOrEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Vim.Math3d
  commentId: N:Vim.Math3d
  name: Vim.Math3d
  nameWithType: Vim.Math3d
  fullName: Vim.Math3d
- uid: System.IEquatable{Vim.Math3d.Complex}
  commentId: T:System.IEquatable{Vim.Math3d.Complex}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Complex>
  nameWithType: IEquatable<Complex>
  fullName: System.IEquatable<Vim.Math3d.Complex>
  nameWithType.vb: IEquatable(Of Complex)
  fullName.vb: System.IEquatable(Of Vim.Math3d.Complex)
  name.vb: IEquatable(Of Complex)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.Complex
    name: Complex
    nameWithType: Complex
    fullName: Vim.Math3d.Complex
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.Complex
    name: Complex
    nameWithType: Complex
    fullName: Vim.Math3d.Complex
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable{Vim.Math3d.Complex}
  commentId: T:System.IComparable{Vim.Math3d.Complex}
  parent: System
  definition: System.IComparable`1
  name: IComparable<Complex>
  nameWithType: IComparable<Complex>
  fullName: System.IComparable<Vim.Math3d.Complex>
  nameWithType.vb: IComparable(Of Complex)
  fullName.vb: System.IComparable(Of Vim.Math3d.Complex)
  name.vb: IComparable(Of Complex)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.Complex
    name: Complex
    nameWithType: Complex
    fullName: Vim.Math3d.Complex
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.Complex
    name: Complex
    nameWithType: Complex
    fullName: Vim.Math3d.Complex
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Vim.Math3d.Complex.#ctor*
  commentId: Overload:Vim.Math3d.Complex.#ctor
  name: Complex
  nameWithType: Complex.Complex
  fullName: Vim.Math3d.Complex.Complex
- uid: System.ValueTuple{System.Double,System.Double}
  commentId: T:System.ValueTuple{System.Double,System.Double}
  parent: System
  definition: System.ValueTuple`2
  name: (T1, T2)<Double, Double>
  nameWithType: (T1, T2)<Double, Double>
  fullName: System.ValueTuple<System.Double, System.Double>
  nameWithType.vb: (T1, T2)(Of Double, Double)
  fullName.vb: System.ValueTuple(Of System.Double, System.Double)
  name.vb: (T1, T2)(Of Double, Double)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple`2
  commentId: T:System.ValueTuple`2
  isExternal: true
  name: (T1, T2)<T1, T2>
  nameWithType: (T1, T2)<T1, T2>
  fullName: System.ValueTuple<T1, T2>
  nameWithType.vb: (T1, T2)(Of T1, T2)
  fullName.vb: System.ValueTuple(Of T1, T2)
  name.vb: (T1, T2)(Of T1, T2)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Complex.Create*
  commentId: Overload:Vim.Math3d.Complex.Create
  name: Create
  nameWithType: Complex.Create
  fullName: Vim.Math3d.Complex.Create
- uid: Vim.Math3d.Complex
  commentId: T:Vim.Math3d.Complex
  parent: Vim.Math3d
  name: Complex
  nameWithType: Complex
  fullName: Vim.Math3d.Complex
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Complex.Equals*
  commentId: Overload:Vim.Math3d.Complex.Equals
  name: Equals
  nameWithType: Complex.Equals
  fullName: Vim.Math3d.Complex.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Complex.GetHashCode*
  commentId: Overload:Vim.Math3d.Complex.GetHashCode
  name: GetHashCode
  nameWithType: Complex.GetHashCode
  fullName: Vim.Math3d.Complex.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Complex.ToString*
  commentId: Overload:Vim.Math3d.Complex.ToString
  name: ToString
  nameWithType: Complex.ToString
  fullName: Vim.Math3d.Complex.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Vim.Math3d.Complex.Deconstruct*
  commentId: Overload:Vim.Math3d.Complex.Deconstruct
  name: Deconstruct
  nameWithType: Complex.Deconstruct
  fullName: Vim.Math3d.Complex.Deconstruct
- uid: System.IEquatable{Vim.Math3d.Complex}.Equals(Vim.Math3d.Complex)
  commentId: M:System.IEquatable{Vim.Math3d.Complex}.Equals(Vim.Math3d.Complex)
  parent: System.IEquatable{Vim.Math3d.Complex}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(Complex)
  nameWithType: IEquatable<Complex>.Equals(Complex)
  fullName: System.IEquatable<Vim.Math3d.Complex>.Equals(Vim.Math3d.Complex)
  nameWithType.vb: IEquatable(Of Complex).Equals(Complex)
  fullName.vb: System.IEquatable(Of Vim.Math3d.Complex).Equals(Vim.Math3d.Complex)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<Complex>.Equals
    fullName: System.IEquatable<Vim.Math3d.Complex>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Complex
    name: Complex
    nameWithType: Complex
    fullName: Vim.Math3d.Complex
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of Complex).Equals
    fullName: System.IEquatable(Of Vim.Math3d.Complex).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Complex
    name: Complex
    nameWithType: Complex
    fullName: Vim.Math3d.Complex
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Complex.op_Equality*
  commentId: Overload:Vim.Math3d.Complex.op_Equality
  name: Equality
  nameWithType: Complex.Equality
  fullName: Vim.Math3d.Complex.Equality
- uid: Vim.Math3d.Complex.op_Inequality*
  commentId: Overload:Vim.Math3d.Complex.op_Inequality
  name: Inequality
  nameWithType: Complex.Inequality
  fullName: Vim.Math3d.Complex.Inequality
- uid: Vim.Math3d.Complex.op_Implicit*
  commentId: Overload:Vim.Math3d.Complex.op_Implicit
  name: Implicit
  nameWithType: Complex.Implicit
  fullName: Vim.Math3d.Complex.Implicit
  nameWithType.vb: Complex.Widening
  fullName.vb: Vim.Math3d.Complex.Widening
  name.vb: Widening
- uid: Vim.Math3d.Complex.AlmostEquals*
  commentId: Overload:Vim.Math3d.Complex.AlmostEquals
  name: AlmostEquals
  nameWithType: Complex.AlmostEquals
  fullName: Vim.Math3d.Complex.AlmostEquals
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Vim.Math3d.Complex.SetReal*
  commentId: Overload:Vim.Math3d.Complex.SetReal
  name: SetReal
  nameWithType: Complex.SetReal
  fullName: Vim.Math3d.Complex.SetReal
- uid: Vim.Math3d.Complex.SetImaginary*
  commentId: Overload:Vim.Math3d.Complex.SetImaginary
  name: SetImaginary
  nameWithType: Complex.SetImaginary
  fullName: Vim.Math3d.Complex.SetImaginary
- uid: Vim.Math3d.Complex.op_Addition*
  commentId: Overload:Vim.Math3d.Complex.op_Addition
  name: Addition
  nameWithType: Complex.Addition
  fullName: Vim.Math3d.Complex.Addition
- uid: Vim.Math3d.Complex.op_Subtraction*
  commentId: Overload:Vim.Math3d.Complex.op_Subtraction
  name: Subtraction
  nameWithType: Complex.Subtraction
  fullName: Vim.Math3d.Complex.Subtraction
- uid: Vim.Math3d.Complex.op_Multiply*
  commentId: Overload:Vim.Math3d.Complex.op_Multiply
  name: Multiply
  nameWithType: Complex.Multiply
  fullName: Vim.Math3d.Complex.Multiply
- uid: Vim.Math3d.Complex.op_Division*
  commentId: Overload:Vim.Math3d.Complex.op_Division
  name: Division
  nameWithType: Complex.Division
  fullName: Vim.Math3d.Complex.Division
- uid: Vim.Math3d.Complex.op_UnaryNegation*
  commentId: Overload:Vim.Math3d.Complex.op_UnaryNegation
  name: UnaryNegation
  nameWithType: Complex.UnaryNegation
  fullName: Vim.Math3d.Complex.UnaryNegation
- uid: Vim.Math3d.Complex.Dot*
  commentId: Overload:Vim.Math3d.Complex.Dot
  name: Dot
  nameWithType: Complex.Dot
  fullName: Vim.Math3d.Complex.Dot
- uid: Vim.Math3d.Complex.AlmostZero*
  commentId: Overload:Vim.Math3d.Complex.AlmostZero
  name: AlmostZero
  nameWithType: Complex.AlmostZero
  fullName: Vim.Math3d.Complex.AlmostZero
- uid: Vim.Math3d.Complex.AnyComponentNegative*
  commentId: Overload:Vim.Math3d.Complex.AnyComponentNegative
  name: AnyComponentNegative
  nameWithType: Complex.AnyComponentNegative
  fullName: Vim.Math3d.Complex.AnyComponentNegative
- uid: Vim.Math3d.Complex.MinComponent*
  commentId: Overload:Vim.Math3d.Complex.MinComponent
  name: MinComponent
  nameWithType: Complex.MinComponent
  fullName: Vim.Math3d.Complex.MinComponent
- uid: Vim.Math3d.Complex.MaxComponent*
  commentId: Overload:Vim.Math3d.Complex.MaxComponent
  name: MaxComponent
  nameWithType: Complex.MaxComponent
  fullName: Vim.Math3d.Complex.MaxComponent
- uid: Vim.Math3d.Complex.SumComponents*
  commentId: Overload:Vim.Math3d.Complex.SumComponents
  name: SumComponents
  nameWithType: Complex.SumComponents
  fullName: Vim.Math3d.Complex.SumComponents
- uid: Vim.Math3d.Complex.SumSqrComponents*
  commentId: Overload:Vim.Math3d.Complex.SumSqrComponents
  name: SumSqrComponents
  nameWithType: Complex.SumSqrComponents
  fullName: Vim.Math3d.Complex.SumSqrComponents
- uid: Vim.Math3d.Complex.ProductComponents*
  commentId: Overload:Vim.Math3d.Complex.ProductComponents
  name: ProductComponents
  nameWithType: Complex.ProductComponents
  fullName: Vim.Math3d.Complex.ProductComponents
- uid: Vim.Math3d.Complex.GetComponent*
  commentId: Overload:Vim.Math3d.Complex.GetComponent
  name: GetComponent
  nameWithType: Complex.GetComponent
  fullName: Vim.Math3d.Complex.GetComponent
- uid: Vim.Math3d.Complex.MagnitudeSquared*
  commentId: Overload:Vim.Math3d.Complex.MagnitudeSquared
  name: MagnitudeSquared
  nameWithType: Complex.MagnitudeSquared
  fullName: Vim.Math3d.Complex.MagnitudeSquared
- uid: Vim.Math3d.Complex.Magnitude*
  commentId: Overload:Vim.Math3d.Complex.Magnitude
  name: Magnitude
  nameWithType: Complex.Magnitude
  fullName: Vim.Math3d.Complex.Magnitude
- uid: Vim.Math3d.Complex.IsNaN*
  commentId: Overload:Vim.Math3d.Complex.IsNaN
  name: IsNaN
  nameWithType: Complex.IsNaN
  fullName: Vim.Math3d.Complex.IsNaN
- uid: Vim.Math3d.Complex.IsInfinity*
  commentId: Overload:Vim.Math3d.Complex.IsInfinity
  name: IsInfinity
  nameWithType: Complex.IsInfinity
  fullName: Vim.Math3d.Complex.IsInfinity
- uid: Vim.Math3d.Complex.CompareTo*
  commentId: Overload:Vim.Math3d.Complex.CompareTo
  name: CompareTo
  nameWithType: Complex.CompareTo
  fullName: Vim.Math3d.Complex.CompareTo
- uid: System.IComparable{Vim.Math3d.Complex}.CompareTo(Vim.Math3d.Complex)
  commentId: M:System.IComparable{Vim.Math3d.Complex}.CompareTo(Vim.Math3d.Complex)
  parent: System.IComparable{Vim.Math3d.Complex}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(Complex)
  nameWithType: IComparable<Complex>.CompareTo(Complex)
  fullName: System.IComparable<Vim.Math3d.Complex>.CompareTo(Vim.Math3d.Complex)
  nameWithType.vb: IComparable(Of Complex).CompareTo(Complex)
  fullName.vb: System.IComparable(Of Vim.Math3d.Complex).CompareTo(Vim.Math3d.Complex)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<Complex>.CompareTo
    fullName: System.IComparable<Vim.Math3d.Complex>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Complex
    name: Complex
    nameWithType: Complex
    fullName: Vim.Math3d.Complex
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of Complex).CompareTo
    fullName: System.IComparable(Of Vim.Math3d.Complex).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Complex
    name: Complex
    nameWithType: Complex
    fullName: Vim.Math3d.Complex
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable`1.CompareTo(`0)
  commentId: M:System.IComparable`1.CompareTo(`0)
  isExternal: true
  name: CompareTo(T)
  nameWithType: IComparable<T>.CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
  fullName.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<T>.CompareTo
    fullName: System.IComparable<T>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of T).CompareTo
    fullName: System.IComparable(Of T).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Complex.op_LessThan*
  commentId: Overload:Vim.Math3d.Complex.op_LessThan
  name: LessThan
  nameWithType: Complex.LessThan
  fullName: Vim.Math3d.Complex.LessThan
- uid: Vim.Math3d.Complex.op_LessThanOrEqual*
  commentId: Overload:Vim.Math3d.Complex.op_LessThanOrEqual
  name: LessThanOrEqual
  nameWithType: Complex.LessThanOrEqual
  fullName: Vim.Math3d.Complex.LessThanOrEqual
- uid: Vim.Math3d.Complex.op_GreaterThan*
  commentId: Overload:Vim.Math3d.Complex.op_GreaterThan
  name: GreaterThan
  nameWithType: Complex.GreaterThan
  fullName: Vim.Math3d.Complex.GreaterThan
- uid: Vim.Math3d.Complex.op_GreaterThanOrEqual*
  commentId: Overload:Vim.Math3d.Complex.op_GreaterThanOrEqual
  name: GreaterThanOrEqual
  nameWithType: Complex.GreaterThanOrEqual
  fullName: Vim.Math3d.Complex.GreaterThanOrEqual

### YamlMime:ManagedReference
items:
- uid: Vim.Math3d.IMappable`2
  commentId: T:Vim.Math3d.IMappable`2
  id: IMappable`2
  parent: Vim.Math3d
  children:
  - Vim.Math3d.IMappable`2.Map(System.Func{`1,`1})
  langs:
  - csharp
  - vb
  name: IMappable<TContainer, TPart>
  nameWithType: IMappable<TContainer, TPart>
  fullName: Vim.Math3d.IMappable<TContainer, TPart>
  type: Interface
  source:
    remote:
      path: src/IMappable.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: IMappable
    path: ../src/IMappable.cs
    startLine: 4
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public interface IMappable<TContainer, TPart>
    typeParameters:
    - id: TContainer
    - id: TPart
    content.vb: Public Interface IMappable(Of TContainer, TPart)
  nameWithType.vb: IMappable(Of TContainer, TPart)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Vim.Math3d.IMappable(Of TContainer, TPart)
  name.vb: IMappable(Of TContainer, TPart)
- uid: Vim.Math3d.IMappable`2.Map(System.Func{`1,`1})
  commentId: M:Vim.Math3d.IMappable`2.Map(System.Func{`1,`1})
  id: Map(System.Func{`1,`1})
  parent: Vim.Math3d.IMappable`2
  langs:
  - csharp
  - vb
  name: Map(Func<TPart, TPart>)
  nameWithType: IMappable<TContainer, TPart>.Map(Func<TPart, TPart>)
  fullName: Vim.Math3d.IMappable<TContainer, TPart>.Map(System.Func<TPart, TPart>)
  type: Method
  source:
    remote:
      path: src/IMappable.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Map
    path: ../src/IMappable.cs
    startLine: 6
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: TContainer Map(Func<TPart, TPart> f)
    parameters:
    - id: f
      type: System.Func{{TPart},{TPart}}
    return:
      type: '{TContainer}'
    content.vb: Function Map(f As Func(Of TPart, TPart)) As TContainer
  overload: Vim.Math3d.IMappable`2.Map*
  nameWithType.vb: IMappable(Of TContainer, TPart).Map(Func(Of TPart, TPart))
  fullName.vb: Vim.Math3d.IMappable(Of TContainer, TPart).Map(System.Func(Of TPart, TPart))
  name.vb: Map(Func(Of TPart, TPart))
references:
- uid: Vim.Math3d
  commentId: N:Vim.Math3d
  name: Vim.Math3d
  nameWithType: Vim.Math3d
  fullName: Vim.Math3d
- uid: Vim.Math3d.IMappable`2.Map*
  commentId: Overload:Vim.Math3d.IMappable`2.Map
  name: Map
  nameWithType: IMappable<TContainer, TPart>.Map
  fullName: Vim.Math3d.IMappable<TContainer, TPart>.Map
  nameWithType.vb: IMappable(Of TContainer, TPart).Map
  fullName.vb: Vim.Math3d.IMappable(Of TContainer, TPart).Map
- uid: System.Func{{TPart},{TPart}}
  commentId: T:System.Func{`1,`1}
  parent: System
  definition: System.Func`2
  name: Func<TPart, TPart>
  nameWithType: Func<TPart, TPart>
  fullName: System.Func<TPart, TPart>
  nameWithType.vb: Func(Of TPart, TPart)
  fullName.vb: System.Func(Of TPart, TPart)
  name.vb: Func(Of TPart, TPart)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TPart
    nameWithType: TPart
    fullName: TPart
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPart
    nameWithType: TPart
    fullName: TPart
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TPart
    nameWithType: TPart
    fullName: TPart
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPart
    nameWithType: TPart
    fullName: TPart
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TContainer}'
  commentId: '!:TContainer'
  definition: TContainer
  name: TContainer
  nameWithType: TContainer
  fullName: TContainer
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TContainer
  commentId: '!:TContainer'
  name: TContainer
  nameWithType: TContainer
  fullName: TContainer

### YamlMime:ManagedReference
items:
- uid: Vim.Math3d.Transformable3D
  commentId: T:Vim.Math3d.Transformable3D
  id: Transformable3D
  parent: Vim.Math3d
  children:
  - Vim.Math3d.Transformable3D.LookAt``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  - Vim.Math3d.Transformable3D.Multiply(Vim.Math3d.Matrix4x4[])
  - Vim.Math3d.Transformable3D.Reflect``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Plane)
  - Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  - Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Quaternion)
  - Vim.Math3d.Transformable3D.RotateAround``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,System.Single)
  - Vim.Math3d.Transformable3D.RotateX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  - Vim.Math3d.Transformable3D.RotateY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  - Vim.Math3d.Transformable3D.RotateZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  - Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  - Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  - Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
  - Vim.Math3d.Transformable3D.ScaleX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  - Vim.Math3d.Transformable3D.ScaleY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  - Vim.Math3d.Transformable3D.ScaleZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  - Vim.Math3d.Transformable3D.Transform``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Matrix4x4[])
  - Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  - Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
  - Vim.Math3d.Transformable3D.TranslateRotateScale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
  langs:
  - csharp
  - vb
  name: Transformable3D
  nameWithType: Transformable3D
  fullName: Vim.Math3d.Transformable3D
  type: Class
  source:
    remote:
      path: src/ITransformable.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Transformable3D
    path: ../src/ITransformable.cs
    startLine: 9
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static class Transformable3D
    content.vb: Public Module Transformable3D
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Vim.Math3d.Transformable3D.Multiply(Vim.Math3d.Matrix4x4[])
  commentId: M:Vim.Math3d.Transformable3D.Multiply(Vim.Math3d.Matrix4x4[])
  id: Multiply(Vim.Math3d.Matrix4x4[])
  parent: Vim.Math3d.Transformable3D
  langs:
  - csharp
  - vb
  name: Multiply(Matrix4x4[])
  nameWithType: Transformable3D.Multiply(Matrix4x4[])
  fullName: Vim.Math3d.Transformable3D.Multiply(Vim.Math3d.Matrix4x4[])
  type: Method
  source:
    remote:
      path: src/ITransformable.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Multiply
    path: ../src/ITransformable.cs
    startLine: 11
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Matrix4x4 Multiply(params Matrix4x4[] matrices)
    parameters:
    - id: matrices
      type: Vim.Math3d.Matrix4x4[]
    return:
      type: Vim.Math3d.Matrix4x4
    content.vb: Public Shared Function Multiply(ParamArray matrices As Matrix4x4()) As Matrix4x4
  overload: Vim.Math3d.Transformable3D.Multiply*
  nameWithType.vb: Transformable3D.Multiply(Matrix4x4())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.Transformable3D.Multiply(Vim.Math3d.Matrix4x4())
  name.vb: Multiply(Matrix4x4())
- uid: Vim.Math3d.Transformable3D.Transform``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Matrix4x4[])
  commentId: M:Vim.Math3d.Transformable3D.Transform``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Matrix4x4[])
  id: Transform``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Matrix4x4[])
  isExtensionMethod: true
  parent: Vim.Math3d.Transformable3D
  langs:
  - csharp
  - vb
  name: Transform<T>(ITransformable3D<T>, Matrix4x4[])
  nameWithType: Transformable3D.Transform<T>(ITransformable3D<T>, Matrix4x4[])
  fullName: Vim.Math3d.Transformable3D.Transform<T>(Vim.Math3d.ITransformable3D<T>, Vim.Math3d.Matrix4x4[])
  type: Method
  source:
    remote:
      path: src/ITransformable.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Transform
    path: ../src/ITransformable.cs
    startLine: 14
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static T Transform<T>(this ITransformable3D<T> self, params Matrix4x4[] matrices)
    parameters:
    - id: self
      type: Vim.Math3d.ITransformable3D{{T}}
    - id: matrices
      type: Vim.Math3d.Matrix4x4[]
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Transform(Of T)(self As ITransformable3D(Of T), ParamArray matrices As Matrix4x4()) As T
  overload: Vim.Math3d.Transformable3D.Transform*
  nameWithType.vb: Transformable3D.Transform(Of T)(ITransformable3D(Of T), Matrix4x4())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.Transformable3D.Transform(Of T)(Vim.Math3d.ITransformable3D(Of T), Vim.Math3d.Matrix4x4())
  name.vb: Transform(Of T)(ITransformable3D(Of T), Matrix4x4())
- uid: Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
  id: Translate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.Transformable3D
  langs:
  - csharp
  - vb
  name: Translate<T>(ITransformable3D<T>, Vector3)
  nameWithType: Transformable3D.Translate<T>(ITransformable3D<T>, Vector3)
  fullName: Vim.Math3d.Transformable3D.Translate<T>(Vim.Math3d.ITransformable3D<T>, Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/ITransformable.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Translate
    path: ../src/ITransformable.cs
    startLine: 17
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static T Translate<T>(this ITransformable3D<T> self, Vector3 offset)
    parameters:
    - id: self
      type: Vim.Math3d.ITransformable3D{{T}}
    - id: offset
      type: Vim.Math3d.Vector3
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Translate(Of T)(self As ITransformable3D(Of T), offset As Vector3) As T
  overload: Vim.Math3d.Transformable3D.Translate*
  nameWithType.vb: Transformable3D.Translate(Of T)(ITransformable3D(Of T), Vector3)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.Transformable3D.Translate(Of T)(Vim.Math3d.ITransformable3D(Of T), Vim.Math3d.Vector3)
  name.vb: Translate(Of T)(ITransformable3D(Of T), Vector3)
- uid: Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  commentId: M:Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  id: Translate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.Transformable3D
  langs:
  - csharp
  - vb
  name: Translate<T>(ITransformable3D<T>, Single, Single, Single)
  nameWithType: Transformable3D.Translate<T>(ITransformable3D<T>, Single, Single, Single)
  fullName: Vim.Math3d.Transformable3D.Translate<T>(Vim.Math3d.ITransformable3D<T>, System.Single, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: src/ITransformable.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Translate
    path: ../src/ITransformable.cs
    startLine: 20
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static T Translate<T>(this ITransformable3D<T> self, float x, float y, float z)
    parameters:
    - id: self
      type: Vim.Math3d.ITransformable3D{{T}}
    - id: x
      type: System.Single
    - id: y
      type: System.Single
    - id: z
      type: System.Single
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Translate(Of T)(self As ITransformable3D(Of T), x As Single, y As Single, z As Single) As T
  overload: Vim.Math3d.Transformable3D.Translate*
  nameWithType.vb: Transformable3D.Translate(Of T)(ITransformable3D(Of T), Single, Single, Single)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.Transformable3D.Translate(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single, System.Single, System.Single)
  name.vb: Translate(Of T)(ITransformable3D(Of T), Single, Single, Single)
- uid: Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Quaternion)
  commentId: M:Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Quaternion)
  id: Rotate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Quaternion)
  isExtensionMethod: true
  parent: Vim.Math3d.Transformable3D
  langs:
  - csharp
  - vb
  name: Rotate<T>(ITransformable3D<T>, Quaternion)
  nameWithType: Transformable3D.Rotate<T>(ITransformable3D<T>, Quaternion)
  fullName: Vim.Math3d.Transformable3D.Rotate<T>(Vim.Math3d.ITransformable3D<T>, Vim.Math3d.Quaternion)
  type: Method
  source:
    remote:
      path: src/ITransformable.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Rotate
    path: ../src/ITransformable.cs
    startLine: 23
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static T Rotate<T>(this ITransformable3D<T> self, Quaternion q)
    parameters:
    - id: self
      type: Vim.Math3d.ITransformable3D{{T}}
    - id: q
      type: Vim.Math3d.Quaternion
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Rotate(Of T)(self As ITransformable3D(Of T), q As Quaternion) As T
  overload: Vim.Math3d.Transformable3D.Rotate*
  nameWithType.vb: Transformable3D.Rotate(Of T)(ITransformable3D(Of T), Quaternion)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.Transformable3D.Rotate(Of T)(Vim.Math3d.ITransformable3D(Of T), Vim.Math3d.Quaternion)
  name.vb: Rotate(Of T)(ITransformable3D(Of T), Quaternion)
- uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  commentId: M:Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  id: Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.Transformable3D
  langs:
  - csharp
  - vb
  name: Scale<T>(ITransformable3D<T>, Single)
  nameWithType: Transformable3D.Scale<T>(ITransformable3D<T>, Single)
  fullName: Vim.Math3d.Transformable3D.Scale<T>(Vim.Math3d.ITransformable3D<T>, System.Single)
  type: Method
  source:
    remote:
      path: src/ITransformable.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Scale
    path: ../src/ITransformable.cs
    startLine: 26
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static T Scale<T>(this ITransformable3D<T> self, float scale)
    parameters:
    - id: self
      type: Vim.Math3d.ITransformable3D{{T}}
    - id: scale
      type: System.Single
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Scale(Of T)(self As ITransformable3D(Of T), scale As Single) As T
  overload: Vim.Math3d.Transformable3D.Scale*
  nameWithType.vb: Transformable3D.Scale(Of T)(ITransformable3D(Of T), Single)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.Transformable3D.Scale(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single)
  name.vb: Scale(Of T)(ITransformable3D(Of T), Single)
- uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
  id: Scale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.Transformable3D
  langs:
  - csharp
  - vb
  name: Scale<T>(ITransformable3D<T>, Vector3)
  nameWithType: Transformable3D.Scale<T>(ITransformable3D<T>, Vector3)
  fullName: Vim.Math3d.Transformable3D.Scale<T>(Vim.Math3d.ITransformable3D<T>, Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/ITransformable.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Scale
    path: ../src/ITransformable.cs
    startLine: 29
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static T Scale<T>(this ITransformable3D<T> self, Vector3 scales)
    parameters:
    - id: self
      type: Vim.Math3d.ITransformable3D{{T}}
    - id: scales
      type: Vim.Math3d.Vector3
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Scale(Of T)(self As ITransformable3D(Of T), scales As Vector3) As T
  overload: Vim.Math3d.Transformable3D.Scale*
  nameWithType.vb: Transformable3D.Scale(Of T)(ITransformable3D(Of T), Vector3)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.Transformable3D.Scale(Of T)(Vim.Math3d.ITransformable3D(Of T), Vim.Math3d.Vector3)
  name.vb: Scale(Of T)(ITransformable3D(Of T), Vector3)
- uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  commentId: M:Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  id: Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.Transformable3D
  langs:
  - csharp
  - vb
  name: Scale<T>(ITransformable3D<T>, Single, Single, Single)
  nameWithType: Transformable3D.Scale<T>(ITransformable3D<T>, Single, Single, Single)
  fullName: Vim.Math3d.Transformable3D.Scale<T>(Vim.Math3d.ITransformable3D<T>, System.Single, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: src/ITransformable.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Scale
    path: ../src/ITransformable.cs
    startLine: 32
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static T Scale<T>(this ITransformable3D<T> self, float x, float y, float z)
    parameters:
    - id: self
      type: Vim.Math3d.ITransformable3D{{T}}
    - id: x
      type: System.Single
    - id: y
      type: System.Single
    - id: z
      type: System.Single
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Scale(Of T)(self As ITransformable3D(Of T), x As Single, y As Single, z As Single) As T
  overload: Vim.Math3d.Transformable3D.Scale*
  nameWithType.vb: Transformable3D.Scale(Of T)(ITransformable3D(Of T), Single, Single, Single)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.Transformable3D.Scale(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single, System.Single, System.Single)
  name.vb: Scale(Of T)(ITransformable3D(Of T), Single, Single, Single)
- uid: Vim.Math3d.Transformable3D.ScaleX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  commentId: M:Vim.Math3d.Transformable3D.ScaleX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  id: ScaleX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.Transformable3D
  langs:
  - csharp
  - vb
  name: ScaleX<T>(ITransformable3D<T>, Single)
  nameWithType: Transformable3D.ScaleX<T>(ITransformable3D<T>, Single)
  fullName: Vim.Math3d.Transformable3D.ScaleX<T>(Vim.Math3d.ITransformable3D<T>, System.Single)
  type: Method
  source:
    remote:
      path: src/ITransformable.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ScaleX
    path: ../src/ITransformable.cs
    startLine: 35
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static T ScaleX<T>(this ITransformable3D<T> self, float x)
    parameters:
    - id: self
      type: Vim.Math3d.ITransformable3D{{T}}
    - id: x
      type: System.Single
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ScaleX(Of T)(self As ITransformable3D(Of T), x As Single) As T
  overload: Vim.Math3d.Transformable3D.ScaleX*
  nameWithType.vb: Transformable3D.ScaleX(Of T)(ITransformable3D(Of T), Single)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.Transformable3D.ScaleX(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single)
  name.vb: ScaleX(Of T)(ITransformable3D(Of T), Single)
- uid: Vim.Math3d.Transformable3D.ScaleY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  commentId: M:Vim.Math3d.Transformable3D.ScaleY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  id: ScaleY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.Transformable3D
  langs:
  - csharp
  - vb
  name: ScaleY<T>(ITransformable3D<T>, Single)
  nameWithType: Transformable3D.ScaleY<T>(ITransformable3D<T>, Single)
  fullName: Vim.Math3d.Transformable3D.ScaleY<T>(Vim.Math3d.ITransformable3D<T>, System.Single)
  type: Method
  source:
    remote:
      path: src/ITransformable.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ScaleY
    path: ../src/ITransformable.cs
    startLine: 38
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static T ScaleY<T>(this ITransformable3D<T> self, float y)
    parameters:
    - id: self
      type: Vim.Math3d.ITransformable3D{{T}}
    - id: y
      type: System.Single
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ScaleY(Of T)(self As ITransformable3D(Of T), y As Single) As T
  overload: Vim.Math3d.Transformable3D.ScaleY*
  nameWithType.vb: Transformable3D.ScaleY(Of T)(ITransformable3D(Of T), Single)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.Transformable3D.ScaleY(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single)
  name.vb: ScaleY(Of T)(ITransformable3D(Of T), Single)
- uid: Vim.Math3d.Transformable3D.ScaleZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  commentId: M:Vim.Math3d.Transformable3D.ScaleZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  id: ScaleZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.Transformable3D
  langs:
  - csharp
  - vb
  name: ScaleZ<T>(ITransformable3D<T>, Single)
  nameWithType: Transformable3D.ScaleZ<T>(ITransformable3D<T>, Single)
  fullName: Vim.Math3d.Transformable3D.ScaleZ<T>(Vim.Math3d.ITransformable3D<T>, System.Single)
  type: Method
  source:
    remote:
      path: src/ITransformable.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ScaleZ
    path: ../src/ITransformable.cs
    startLine: 41
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static T ScaleZ<T>(this ITransformable3D<T> self, float z)
    parameters:
    - id: self
      type: Vim.Math3d.ITransformable3D{{T}}
    - id: z
      type: System.Single
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ScaleZ(Of T)(self As ITransformable3D(Of T), z As Single) As T
  overload: Vim.Math3d.Transformable3D.ScaleZ*
  nameWithType.vb: Transformable3D.ScaleZ(Of T)(ITransformable3D(Of T), Single)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.Transformable3D.ScaleZ(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single)
  name.vb: ScaleZ(Of T)(ITransformable3D(Of T), Single)
- uid: Vim.Math3d.Transformable3D.LookAt``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Transformable3D.LookAt``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  id: LookAt``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.Transformable3D
  langs:
  - csharp
  - vb
  name: LookAt<T>(ITransformable3D<T>, Vector3, Vector3, Vector3)
  nameWithType: Transformable3D.LookAt<T>(ITransformable3D<T>, Vector3, Vector3, Vector3)
  fullName: Vim.Math3d.Transformable3D.LookAt<T>(Vim.Math3d.ITransformable3D<T>, Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/ITransformable.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: LookAt
    path: ../src/ITransformable.cs
    startLine: 44
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static T LookAt<T>(this ITransformable3D<T> self, Vector3 cameraPosition, Vector3 cameraTarget, Vector3 cameraUpVector)
    parameters:
    - id: self
      type: Vim.Math3d.ITransformable3D{{T}}
    - id: cameraPosition
      type: Vim.Math3d.Vector3
    - id: cameraTarget
      type: Vim.Math3d.Vector3
    - id: cameraUpVector
      type: Vim.Math3d.Vector3
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LookAt(Of T)(self As ITransformable3D(Of T), cameraPosition As Vector3, cameraTarget As Vector3, cameraUpVector As Vector3) As T
  overload: Vim.Math3d.Transformable3D.LookAt*
  nameWithType.vb: Transformable3D.LookAt(Of T)(ITransformable3D(Of T), Vector3, Vector3, Vector3)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.Transformable3D.LookAt(Of T)(Vim.Math3d.ITransformable3D(Of T), Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  name.vb: LookAt(Of T)(ITransformable3D(Of T), Vector3, Vector3, Vector3)
- uid: Vim.Math3d.Transformable3D.RotateAround``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,System.Single)
  commentId: M:Vim.Math3d.Transformable3D.RotateAround``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,System.Single)
  id: RotateAround``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.Transformable3D
  langs:
  - csharp
  - vb
  name: RotateAround<T>(ITransformable3D<T>, Vector3, Single)
  nameWithType: Transformable3D.RotateAround<T>(ITransformable3D<T>, Vector3, Single)
  fullName: Vim.Math3d.Transformable3D.RotateAround<T>(Vim.Math3d.ITransformable3D<T>, Vim.Math3d.Vector3, System.Single)
  type: Method
  source:
    remote:
      path: src/ITransformable.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: RotateAround
    path: ../src/ITransformable.cs
    startLine: 47
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static T RotateAround<T>(this ITransformable3D<T> self, Vector3 axis, float angle)
    parameters:
    - id: self
      type: Vim.Math3d.ITransformable3D{{T}}
    - id: axis
      type: Vim.Math3d.Vector3
    - id: angle
      type: System.Single
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function RotateAround(Of T)(self As ITransformable3D(Of T), axis As Vector3, angle As Single) As T
  overload: Vim.Math3d.Transformable3D.RotateAround*
  nameWithType.vb: Transformable3D.RotateAround(Of T)(ITransformable3D(Of T), Vector3, Single)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.Transformable3D.RotateAround(Of T)(Vim.Math3d.ITransformable3D(Of T), Vim.Math3d.Vector3, System.Single)
  name.vb: RotateAround(Of T)(ITransformable3D(Of T), Vector3, Single)
- uid: Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  commentId: M:Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  id: Rotate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.Transformable3D
  langs:
  - csharp
  - vb
  name: Rotate<T>(ITransformable3D<T>, Single, Single, Single)
  nameWithType: Transformable3D.Rotate<T>(ITransformable3D<T>, Single, Single, Single)
  fullName: Vim.Math3d.Transformable3D.Rotate<T>(Vim.Math3d.ITransformable3D<T>, System.Single, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: src/ITransformable.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Rotate
    path: ../src/ITransformable.cs
    startLine: 50
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static T Rotate<T>(this ITransformable3D<T> self, float yaw, float pitch, float roll)
    parameters:
    - id: self
      type: Vim.Math3d.ITransformable3D{{T}}
    - id: yaw
      type: System.Single
    - id: pitch
      type: System.Single
    - id: roll
      type: System.Single
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Rotate(Of T)(self As ITransformable3D(Of T), yaw As Single, pitch As Single, roll As Single) As T
  overload: Vim.Math3d.Transformable3D.Rotate*
  nameWithType.vb: Transformable3D.Rotate(Of T)(ITransformable3D(Of T), Single, Single, Single)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.Transformable3D.Rotate(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single, System.Single, System.Single)
  name.vb: Rotate(Of T)(ITransformable3D(Of T), Single, Single, Single)
- uid: Vim.Math3d.Transformable3D.Reflect``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Plane)
  commentId: M:Vim.Math3d.Transformable3D.Reflect``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Plane)
  id: Reflect``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Plane)
  isExtensionMethod: true
  parent: Vim.Math3d.Transformable3D
  langs:
  - csharp
  - vb
  name: Reflect<T>(ITransformable3D<T>, Plane)
  nameWithType: Transformable3D.Reflect<T>(ITransformable3D<T>, Plane)
  fullName: Vim.Math3d.Transformable3D.Reflect<T>(Vim.Math3d.ITransformable3D<T>, Vim.Math3d.Plane)
  type: Method
  source:
    remote:
      path: src/ITransformable.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Reflect
    path: ../src/ITransformable.cs
    startLine: 53
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static T Reflect<T>(this ITransformable3D<T> self, Plane plane)
    parameters:
    - id: self
      type: Vim.Math3d.ITransformable3D{{T}}
    - id: plane
      type: Vim.Math3d.Plane
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Reflect(Of T)(self As ITransformable3D(Of T), plane As Plane) As T
  overload: Vim.Math3d.Transformable3D.Reflect*
  nameWithType.vb: Transformable3D.Reflect(Of T)(ITransformable3D(Of T), Plane)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.Transformable3D.Reflect(Of T)(Vim.Math3d.ITransformable3D(Of T), Vim.Math3d.Plane)
  name.vb: Reflect(Of T)(ITransformable3D(Of T), Plane)
- uid: Vim.Math3d.Transformable3D.RotateX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  commentId: M:Vim.Math3d.Transformable3D.RotateX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  id: RotateX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.Transformable3D
  langs:
  - csharp
  - vb
  name: RotateX<T>(ITransformable3D<T>, Single)
  nameWithType: Transformable3D.RotateX<T>(ITransformable3D<T>, Single)
  fullName: Vim.Math3d.Transformable3D.RotateX<T>(Vim.Math3d.ITransformable3D<T>, System.Single)
  type: Method
  source:
    remote:
      path: src/ITransformable.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: RotateX
    path: ../src/ITransformable.cs
    startLine: 56
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static T RotateX<T>(this ITransformable3D<T> self, float angle)
    parameters:
    - id: self
      type: Vim.Math3d.ITransformable3D{{T}}
    - id: angle
      type: System.Single
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function RotateX(Of T)(self As ITransformable3D(Of T), angle As Single) As T
  overload: Vim.Math3d.Transformable3D.RotateX*
  nameWithType.vb: Transformable3D.RotateX(Of T)(ITransformable3D(Of T), Single)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.Transformable3D.RotateX(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single)
  name.vb: RotateX(Of T)(ITransformable3D(Of T), Single)
- uid: Vim.Math3d.Transformable3D.RotateY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  commentId: M:Vim.Math3d.Transformable3D.RotateY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  id: RotateY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.Transformable3D
  langs:
  - csharp
  - vb
  name: RotateY<T>(ITransformable3D<T>, Single)
  nameWithType: Transformable3D.RotateY<T>(ITransformable3D<T>, Single)
  fullName: Vim.Math3d.Transformable3D.RotateY<T>(Vim.Math3d.ITransformable3D<T>, System.Single)
  type: Method
  source:
    remote:
      path: src/ITransformable.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: RotateY
    path: ../src/ITransformable.cs
    startLine: 59
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static T RotateY<T>(this ITransformable3D<T> self, float angle)
    parameters:
    - id: self
      type: Vim.Math3d.ITransformable3D{{T}}
    - id: angle
      type: System.Single
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function RotateY(Of T)(self As ITransformable3D(Of T), angle As Single) As T
  overload: Vim.Math3d.Transformable3D.RotateY*
  nameWithType.vb: Transformable3D.RotateY(Of T)(ITransformable3D(Of T), Single)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.Transformable3D.RotateY(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single)
  name.vb: RotateY(Of T)(ITransformable3D(Of T), Single)
- uid: Vim.Math3d.Transformable3D.RotateZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  commentId: M:Vim.Math3d.Transformable3D.RotateZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  id: RotateZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.Transformable3D
  langs:
  - csharp
  - vb
  name: RotateZ<T>(ITransformable3D<T>, Single)
  nameWithType: Transformable3D.RotateZ<T>(ITransformable3D<T>, Single)
  fullName: Vim.Math3d.Transformable3D.RotateZ<T>(Vim.Math3d.ITransformable3D<T>, System.Single)
  type: Method
  source:
    remote:
      path: src/ITransformable.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: RotateZ
    path: ../src/ITransformable.cs
    startLine: 62
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static T RotateZ<T>(this ITransformable3D<T> self, float angle)
    parameters:
    - id: self
      type: Vim.Math3d.ITransformable3D{{T}}
    - id: angle
      type: System.Single
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function RotateZ(Of T)(self As ITransformable3D(Of T), angle As Single) As T
  overload: Vim.Math3d.Transformable3D.RotateZ*
  nameWithType.vb: Transformable3D.RotateZ(Of T)(ITransformable3D(Of T), Single)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.Transformable3D.RotateZ(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single)
  name.vb: RotateZ(Of T)(ITransformable3D(Of T), Single)
- uid: Vim.Math3d.Transformable3D.TranslateRotateScale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Transformable3D.TranslateRotateScale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
  id: TranslateRotateScale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.Transformable3D
  langs:
  - csharp
  - vb
  name: TranslateRotateScale<T>(ITransformable3D<T>, Vector3, Quaternion, Vector3)
  nameWithType: Transformable3D.TranslateRotateScale<T>(ITransformable3D<T>, Vector3, Quaternion, Vector3)
  fullName: Vim.Math3d.Transformable3D.TranslateRotateScale<T>(Vim.Math3d.ITransformable3D<T>, Vim.Math3d.Vector3, Vim.Math3d.Quaternion, Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/ITransformable.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: TranslateRotateScale
    path: ../src/ITransformable.cs
    startLine: 65
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      public static T TranslateRotateScale<T>(this ITransformable3D<T> self, Vector3 pos, Quaternion rot, Vector3 scale)
          where T : ITransformable3D<T>
    parameters:
    - id: self
      type: Vim.Math3d.ITransformable3D{{T}}
    - id: pos
      type: Vim.Math3d.Vector3
    - id: rot
      type: Vim.Math3d.Quaternion
    - id: scale
      type: Vim.Math3d.Vector3
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TranslateRotateScale(Of T As ITransformable3D(Of T))(self As ITransformable3D(Of T), pos As Vector3, rot As Quaternion, scale As Vector3) As T
  overload: Vim.Math3d.Transformable3D.TranslateRotateScale*
  nameWithType.vb: Transformable3D.TranslateRotateScale(Of T)(ITransformable3D(Of T), Vector3, Quaternion, Vector3)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.Transformable3D.TranslateRotateScale(Of T)(Vim.Math3d.ITransformable3D(Of T), Vim.Math3d.Vector3, Vim.Math3d.Quaternion, Vim.Math3d.Vector3)
  name.vb: TranslateRotateScale(Of T)(ITransformable3D(Of T), Vector3, Quaternion, Vector3)
references:
- uid: Vim.Math3d
  commentId: N:Vim.Math3d
  name: Vim.Math3d
  nameWithType: Vim.Math3d
  fullName: Vim.Math3d
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Vim.Math3d.Transformable3D.Multiply*
  commentId: Overload:Vim.Math3d.Transformable3D.Multiply
  name: Multiply
  nameWithType: Transformable3D.Multiply
  fullName: Vim.Math3d.Transformable3D.Multiply
- uid: Vim.Math3d.Matrix4x4[]
  isExternal: true
  name: Matrix4x4[]
  nameWithType: Matrix4x4[]
  fullName: Vim.Math3d.Matrix4x4[]
  nameWithType.vb: Matrix4x4()
  fullName.vb: Vim.Math3d.Matrix4x4()
  name.vb: Matrix4x4()
  spec.csharp:
  - uid: Vim.Math3d.Matrix4x4
    name: Matrix4x4
    nameWithType: Matrix4x4
    fullName: Vim.Math3d.Matrix4x4
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Vim.Math3d.Matrix4x4
    name: Matrix4x4
    nameWithType: Matrix4x4
    fullName: Vim.Math3d.Matrix4x4
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Vim.Math3d.Matrix4x4
  commentId: T:Vim.Math3d.Matrix4x4
  parent: Vim.Math3d
  name: Matrix4x4
  nameWithType: Matrix4x4
  fullName: Vim.Math3d.Matrix4x4
- uid: Vim.Math3d.Transformable3D.Transform*
  commentId: Overload:Vim.Math3d.Transformable3D.Transform
  name: Transform
  nameWithType: Transformable3D.Transform
  fullName: Vim.Math3d.Transformable3D.Transform
- uid: Vim.Math3d.ITransformable3D{{T}}
  commentId: T:Vim.Math3d.ITransformable3D{``0}
  parent: Vim.Math3d
  definition: Vim.Math3d.ITransformable3D`1
  name: ITransformable3D<T>
  nameWithType: ITransformable3D<T>
  fullName: Vim.Math3d.ITransformable3D<T>
  nameWithType.vb: ITransformable3D(Of T)
  fullName.vb: Vim.Math3d.ITransformable3D(Of T)
  name.vb: ITransformable3D(Of T)
  spec.csharp:
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: Vim.Math3d.ITransformable3D`1
  commentId: T:Vim.Math3d.ITransformable3D`1
  name: ITransformable3D<TSelf>
  nameWithType: ITransformable3D<TSelf>
  fullName: Vim.Math3d.ITransformable3D<TSelf>
  nameWithType.vb: ITransformable3D(Of TSelf)
  fullName.vb: Vim.Math3d.ITransformable3D(Of TSelf)
  name.vb: ITransformable3D(Of TSelf)
  spec.csharp:
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: TSelf
    nameWithType: TSelf
    fullName: TSelf
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSelf
    nameWithType: TSelf
    fullName: TSelf
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Vim.Math3d.Transformable3D.Translate*
  commentId: Overload:Vim.Math3d.Transformable3D.Translate
  name: Translate
  nameWithType: Transformable3D.Translate
  fullName: Vim.Math3d.Transformable3D.Translate
- uid: Vim.Math3d.Vector3
  commentId: T:Vim.Math3d.Vector3
  parent: Vim.Math3d
  name: Vector3
  nameWithType: Vector3
  fullName: Vim.Math3d.Vector3
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Vim.Math3d.Transformable3D.Rotate*
  commentId: Overload:Vim.Math3d.Transformable3D.Rotate
  name: Rotate
  nameWithType: Transformable3D.Rotate
  fullName: Vim.Math3d.Transformable3D.Rotate
- uid: Vim.Math3d.Quaternion
  commentId: T:Vim.Math3d.Quaternion
  parent: Vim.Math3d
  name: Quaternion
  nameWithType: Quaternion
  fullName: Vim.Math3d.Quaternion
- uid: Vim.Math3d.Transformable3D.Scale*
  commentId: Overload:Vim.Math3d.Transformable3D.Scale
  name: Scale
  nameWithType: Transformable3D.Scale
  fullName: Vim.Math3d.Transformable3D.Scale
- uid: Vim.Math3d.Transformable3D.ScaleX*
  commentId: Overload:Vim.Math3d.Transformable3D.ScaleX
  name: ScaleX
  nameWithType: Transformable3D.ScaleX
  fullName: Vim.Math3d.Transformable3D.ScaleX
- uid: Vim.Math3d.Transformable3D.ScaleY*
  commentId: Overload:Vim.Math3d.Transformable3D.ScaleY
  name: ScaleY
  nameWithType: Transformable3D.ScaleY
  fullName: Vim.Math3d.Transformable3D.ScaleY
- uid: Vim.Math3d.Transformable3D.ScaleZ*
  commentId: Overload:Vim.Math3d.Transformable3D.ScaleZ
  name: ScaleZ
  nameWithType: Transformable3D.ScaleZ
  fullName: Vim.Math3d.Transformable3D.ScaleZ
- uid: Vim.Math3d.Transformable3D.LookAt*
  commentId: Overload:Vim.Math3d.Transformable3D.LookAt
  name: LookAt
  nameWithType: Transformable3D.LookAt
  fullName: Vim.Math3d.Transformable3D.LookAt
- uid: Vim.Math3d.Transformable3D.RotateAround*
  commentId: Overload:Vim.Math3d.Transformable3D.RotateAround
  name: RotateAround
  nameWithType: Transformable3D.RotateAround
  fullName: Vim.Math3d.Transformable3D.RotateAround
- uid: Vim.Math3d.Transformable3D.Reflect*
  commentId: Overload:Vim.Math3d.Transformable3D.Reflect
  name: Reflect
  nameWithType: Transformable3D.Reflect
  fullName: Vim.Math3d.Transformable3D.Reflect
- uid: Vim.Math3d.Plane
  commentId: T:Vim.Math3d.Plane
  parent: Vim.Math3d
  name: Plane
  nameWithType: Plane
  fullName: Vim.Math3d.Plane
- uid: Vim.Math3d.Transformable3D.RotateX*
  commentId: Overload:Vim.Math3d.Transformable3D.RotateX
  name: RotateX
  nameWithType: Transformable3D.RotateX
  fullName: Vim.Math3d.Transformable3D.RotateX
- uid: Vim.Math3d.Transformable3D.RotateY*
  commentId: Overload:Vim.Math3d.Transformable3D.RotateY
  name: RotateY
  nameWithType: Transformable3D.RotateY
  fullName: Vim.Math3d.Transformable3D.RotateY
- uid: Vim.Math3d.Transformable3D.RotateZ*
  commentId: Overload:Vim.Math3d.Transformable3D.RotateZ
  name: RotateZ
  nameWithType: Transformable3D.RotateZ
  fullName: Vim.Math3d.Transformable3D.RotateZ
- uid: Vim.Math3d.Transformable3D.TranslateRotateScale*
  commentId: Overload:Vim.Math3d.Transformable3D.TranslateRotateScale
  name: TranslateRotateScale
  nameWithType: Transformable3D.TranslateRotateScale
  fullName: Vim.Math3d.Transformable3D.TranslateRotateScale

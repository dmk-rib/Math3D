### YamlMime:ManagedReference
items:
- uid: Vim.Math3d.HorizontalCoordinate
  commentId: T:Vim.Math3d.HorizontalCoordinate
  id: HorizontalCoordinate
  parent: Vim.Math3d
  children:
  - Vim.Math3d.HorizontalCoordinate.#ctor(System.Double)
  - Vim.Math3d.HorizontalCoordinate.#ctor(System.Double,System.Double)
  - Vim.Math3d.HorizontalCoordinate.#ctor(System.ValueTuple{System.Double,System.Double})
  - Vim.Math3d.HorizontalCoordinate.AlmostEquals(Vim.Math3d.HorizontalCoordinate,System.Single)
  - Vim.Math3d.HorizontalCoordinate.AlmostZero(System.Single)
  - Vim.Math3d.HorizontalCoordinate.AnyComponentNegative
  - Vim.Math3d.HorizontalCoordinate.Azimuth
  - Vim.Math3d.HorizontalCoordinate.CompareTo(Vim.Math3d.HorizontalCoordinate)
  - Vim.Math3d.HorizontalCoordinate.Create(System.Double,System.Double)
  - Vim.Math3d.HorizontalCoordinate.Create(System.ValueTuple{System.Double,System.Double})
  - Vim.Math3d.HorizontalCoordinate.Deconstruct(System.Double@,System.Double@)
  - Vim.Math3d.HorizontalCoordinate.Dot(Vim.Math3d.HorizontalCoordinate)
  - Vim.Math3d.HorizontalCoordinate.Dot(Vim.Math3d.HorizontalCoordinate,Vim.Math3d.HorizontalCoordinate)
  - Vim.Math3d.HorizontalCoordinate.Equals(System.Object)
  - Vim.Math3d.HorizontalCoordinate.Equals(Vim.Math3d.HorizontalCoordinate)
  - Vim.Math3d.HorizontalCoordinate.GetComponent(System.Int32)
  - Vim.Math3d.HorizontalCoordinate.GetHashCode
  - Vim.Math3d.HorizontalCoordinate.Inclination
  - Vim.Math3d.HorizontalCoordinate.IsInfinity
  - Vim.Math3d.HorizontalCoordinate.IsNaN
  - Vim.Math3d.HorizontalCoordinate.Magnitude
  - Vim.Math3d.HorizontalCoordinate.MagnitudeSquared
  - Vim.Math3d.HorizontalCoordinate.MaxComponent
  - Vim.Math3d.HorizontalCoordinate.MaxValue
  - Vim.Math3d.HorizontalCoordinate.MinComponent
  - Vim.Math3d.HorizontalCoordinate.MinValue
  - Vim.Math3d.HorizontalCoordinate.NumComponents
  - Vim.Math3d.HorizontalCoordinate.One
  - Vim.Math3d.HorizontalCoordinate.op_Addition(System.Double,Vim.Math3d.HorizontalCoordinate)
  - Vim.Math3d.HorizontalCoordinate.op_Addition(Vim.Math3d.HorizontalCoordinate,System.Double)
  - Vim.Math3d.HorizontalCoordinate.op_Addition(Vim.Math3d.HorizontalCoordinate,Vim.Math3d.HorizontalCoordinate)
  - Vim.Math3d.HorizontalCoordinate.op_Division(System.Double,Vim.Math3d.HorizontalCoordinate)
  - Vim.Math3d.HorizontalCoordinate.op_Division(Vim.Math3d.HorizontalCoordinate,System.Double)
  - Vim.Math3d.HorizontalCoordinate.op_Division(Vim.Math3d.HorizontalCoordinate,Vim.Math3d.HorizontalCoordinate)
  - Vim.Math3d.HorizontalCoordinate.op_Equality(Vim.Math3d.HorizontalCoordinate,Vim.Math3d.HorizontalCoordinate)
  - Vim.Math3d.HorizontalCoordinate.op_GreaterThan(Vim.Math3d.HorizontalCoordinate,Vim.Math3d.HorizontalCoordinate)
  - Vim.Math3d.HorizontalCoordinate.op_GreaterThanOrEqual(Vim.Math3d.HorizontalCoordinate,Vim.Math3d.HorizontalCoordinate)
  - Vim.Math3d.HorizontalCoordinate.op_Implicit(System.ValueTuple{System.Double,System.Double})~Vim.Math3d.HorizontalCoordinate
  - Vim.Math3d.HorizontalCoordinate.op_Implicit(Vim.Math3d.HorizontalCoordinate)~System.ValueTuple{System.Double,System.Double}
  - Vim.Math3d.HorizontalCoordinate.op_Inequality(Vim.Math3d.HorizontalCoordinate,Vim.Math3d.HorizontalCoordinate)
  - Vim.Math3d.HorizontalCoordinate.op_LessThan(Vim.Math3d.HorizontalCoordinate,Vim.Math3d.HorizontalCoordinate)
  - Vim.Math3d.HorizontalCoordinate.op_LessThanOrEqual(Vim.Math3d.HorizontalCoordinate,Vim.Math3d.HorizontalCoordinate)
  - Vim.Math3d.HorizontalCoordinate.op_Multiply(System.Double,Vim.Math3d.HorizontalCoordinate)
  - Vim.Math3d.HorizontalCoordinate.op_Multiply(Vim.Math3d.HorizontalCoordinate,System.Double)
  - Vim.Math3d.HorizontalCoordinate.op_Multiply(Vim.Math3d.HorizontalCoordinate,Vim.Math3d.HorizontalCoordinate)
  - Vim.Math3d.HorizontalCoordinate.op_Subtraction(System.Double,Vim.Math3d.HorizontalCoordinate)
  - Vim.Math3d.HorizontalCoordinate.op_Subtraction(Vim.Math3d.HorizontalCoordinate,System.Double)
  - Vim.Math3d.HorizontalCoordinate.op_Subtraction(Vim.Math3d.HorizontalCoordinate,Vim.Math3d.HorizontalCoordinate)
  - Vim.Math3d.HorizontalCoordinate.op_UnaryNegation(Vim.Math3d.HorizontalCoordinate)
  - Vim.Math3d.HorizontalCoordinate.ProductComponents
  - Vim.Math3d.HorizontalCoordinate.SetAzimuth(System.Double)
  - Vim.Math3d.HorizontalCoordinate.SetInclination(System.Double)
  - Vim.Math3d.HorizontalCoordinate.SumComponents
  - Vim.Math3d.HorizontalCoordinate.SumSqrComponents
  - Vim.Math3d.HorizontalCoordinate.ToString
  - Vim.Math3d.HorizontalCoordinate.UnitAzimuth
  - Vim.Math3d.HorizontalCoordinate.UnitInclination
  - Vim.Math3d.HorizontalCoordinate.Zero
  langs:
  - csharp
  - vb
  name: HorizontalCoordinate
  nameWithType: HorizontalCoordinate
  fullName: Vim.Math3d.HorizontalCoordinate
  type: Struct
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: HorizontalCoordinate
    path: ../src/Structs.cs
    startLine: 1930
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataContract]

      public readonly struct HorizontalCoordinate : IEquatable<HorizontalCoordinate>, IComparable<HorizontalCoordinate>
    content.vb: >-
      <DataContract>

      Public Structure HorizontalCoordinate
          Implements IEquatable(Of HorizontalCoordinate), IComparable(Of HorizontalCoordinate)
  implements:
  - System.IEquatable{Vim.Math3d.HorizontalCoordinate}
  - System.IComparable{Vim.Math3d.HorizontalCoordinate}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Vim.Math3d.HorizontalCoordinate.Azimuth
  commentId: F:Vim.Math3d.HorizontalCoordinate.Azimuth
  id: Azimuth
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: Azimuth
  nameWithType: HorizontalCoordinate.Azimuth
  fullName: Vim.Math3d.HorizontalCoordinate.Azimuth
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Azimuth
    path: ../src/Structs.cs
    startLine: 1937
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataMember]

      public readonly double Azimuth
    return:
      type: System.Double
    content.vb: >-
      <DataMember>

      Public ReadOnly Azimuth As Double
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.HorizontalCoordinate.Inclination
  commentId: F:Vim.Math3d.HorizontalCoordinate.Inclination
  id: Inclination
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: Inclination
  nameWithType: HorizontalCoordinate.Inclination
  fullName: Vim.Math3d.HorizontalCoordinate.Inclination
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Inclination
    path: ../src/Structs.cs
    startLine: 1939
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataMember]

      public readonly double Inclination
    return:
      type: System.Double
    content.vb: >-
      <DataMember>

      Public ReadOnly Inclination As Double
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.HorizontalCoordinate.#ctor(System.ValueTuple{System.Double,System.Double})
  commentId: M:Vim.Math3d.HorizontalCoordinate.#ctor(System.ValueTuple{System.Double,System.Double})
  id: '#ctor(System.ValueTuple{System.Double,System.Double})'
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: HorizontalCoordinate((Double azimuth, Double inclination))
  nameWithType: HorizontalCoordinate.HorizontalCoordinate((Double azimuth, Double inclination))
  fullName: Vim.Math3d.HorizontalCoordinate.HorizontalCoordinate(System.ValueTuple<System.Double, System.Double>)
  type: Constructor
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: .ctor
    path: ../src/Structs.cs
    startLine: 1940
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public HorizontalCoordinate((double azimuth, double inclination) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{System.Double,System.Double}
    content.vb: Public Sub New(tuple As(azimuth As Double, inclination As Double)(Of Double , Double))
  overload: Vim.Math3d.HorizontalCoordinate.#ctor*
  nameWithType.vb: HorizontalCoordinate.HorizontalCoordinate((azimuth As Double, inclination As Double)(Of Double, Double))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Vim.Math3d.HorizontalCoordinate.HorizontalCoordinate(System.ValueTuple(Of System.Double, System.Double))
  name.vb: HorizontalCoordinate((azimuth As Double, inclination As Double)(Of Double, Double))
- uid: Vim.Math3d.HorizontalCoordinate.#ctor(System.Double,System.Double)
  commentId: M:Vim.Math3d.HorizontalCoordinate.#ctor(System.Double,System.Double)
  id: '#ctor(System.Double,System.Double)'
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: HorizontalCoordinate(Double, Double)
  nameWithType: HorizontalCoordinate.HorizontalCoordinate(Double, Double)
  fullName: Vim.Math3d.HorizontalCoordinate.HorizontalCoordinate(System.Double, System.Double)
  type: Constructor
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: .ctor
    path: ../src/Structs.cs
    startLine: 1941
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public HorizontalCoordinate(double azimuth, double inclination)
    parameters:
    - id: azimuth
      type: System.Double
    - id: inclination
      type: System.Double
    content.vb: Public Sub New(azimuth As Double, inclination As Double)
  overload: Vim.Math3d.HorizontalCoordinate.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Vim.Math3d.HorizontalCoordinate.Create(System.Double,System.Double)
  commentId: M:Vim.Math3d.HorizontalCoordinate.Create(System.Double,System.Double)
  id: Create(System.Double,System.Double)
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: Create(Double, Double)
  nameWithType: HorizontalCoordinate.Create(Double, Double)
  fullName: Vim.Math3d.HorizontalCoordinate.Create(System.Double, System.Double)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Create
    path: ../src/Structs.cs
    startLine: 1942
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static HorizontalCoordinate Create(double azimuth, double inclination)
    parameters:
    - id: azimuth
      type: System.Double
    - id: inclination
      type: System.Double
    return:
      type: Vim.Math3d.HorizontalCoordinate
    content.vb: Public Shared Function Create(azimuth As Double, inclination As Double) As HorizontalCoordinate
  overload: Vim.Math3d.HorizontalCoordinate.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.HorizontalCoordinate.Create(System.ValueTuple{System.Double,System.Double})
  commentId: M:Vim.Math3d.HorizontalCoordinate.Create(System.ValueTuple{System.Double,System.Double})
  id: Create(System.ValueTuple{System.Double,System.Double})
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: Create((Double azimuth, Double inclination))
  nameWithType: HorizontalCoordinate.Create((Double azimuth, Double inclination))
  fullName: Vim.Math3d.HorizontalCoordinate.Create(System.ValueTuple<System.Double, System.Double>)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Create
    path: ../src/Structs.cs
    startLine: 1943
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static HorizontalCoordinate Create((double azimuth, double inclination) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{System.Double,System.Double}
    return:
      type: Vim.Math3d.HorizontalCoordinate
    content.vb: Public Shared Function Create(tuple As(azimuth As Double, inclination As Double)(Of Double , Double)) As HorizontalCoordinate
  overload: Vim.Math3d.HorizontalCoordinate.Create*
  nameWithType.vb: HorizontalCoordinate.Create((azimuth As Double, inclination As Double)(Of Double, Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.HorizontalCoordinate.Create(System.ValueTuple(Of System.Double, System.Double))
  name.vb: Create((azimuth As Double, inclination As Double)(Of Double, Double))
- uid: Vim.Math3d.HorizontalCoordinate.Equals(System.Object)
  commentId: M:Vim.Math3d.HorizontalCoordinate.Equals(System.Object)
  id: Equals(System.Object)
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: HorizontalCoordinate.Equals(Object)
  fullName: Vim.Math3d.HorizontalCoordinate.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Equals
    path: ../src/Structs.cs
    startLine: 1944
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: Vim.Math3d.HorizontalCoordinate.Equals*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.HorizontalCoordinate.GetHashCode
  commentId: M:Vim.Math3d.HorizontalCoordinate.GetHashCode
  id: GetHashCode
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: HorizontalCoordinate.GetHashCode()
  fullName: Vim.Math3d.HorizontalCoordinate.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: GetHashCode
    path: ../src/Structs.cs
    startLine: 1945
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: Vim.Math3d.HorizontalCoordinate.GetHashCode*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.HorizontalCoordinate.ToString
  commentId: M:Vim.Math3d.HorizontalCoordinate.ToString
  id: ToString
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: HorizontalCoordinate.ToString()
  fullName: Vim.Math3d.HorizontalCoordinate.ToString()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToString
    path: ../src/Structs.cs
    startLine: 1946
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: Vim.Math3d.HorizontalCoordinate.ToString*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.HorizontalCoordinate.Deconstruct(System.Double@,System.Double@)
  commentId: M:Vim.Math3d.HorizontalCoordinate.Deconstruct(System.Double@,System.Double@)
  id: Deconstruct(System.Double@,System.Double@)
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: Deconstruct(out Double, out Double)
  nameWithType: HorizontalCoordinate.Deconstruct(out Double, out Double)
  fullName: Vim.Math3d.HorizontalCoordinate.Deconstruct(out System.Double, out System.Double)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Deconstruct
    path: ../src/Structs.cs
    startLine: 1947
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly void Deconstruct(out double azimuth, out double inclination)
    parameters:
    - id: azimuth
      type: System.Double
    - id: inclination
      type: System.Double
    content.vb: Public Sub Deconstruct(ByRef azimuth As Double, ByRef inclination As Double)
  overload: Vim.Math3d.HorizontalCoordinate.Deconstruct*
  nameWithType.vb: HorizontalCoordinate.Deconstruct(ByRef Double, ByRef Double)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  fullName.vb: Vim.Math3d.HorizontalCoordinate.Deconstruct(ByRef System.Double, ByRef System.Double)
  name.vb: Deconstruct(ByRef Double, ByRef Double)
- uid: Vim.Math3d.HorizontalCoordinate.Equals(Vim.Math3d.HorizontalCoordinate)
  commentId: M:Vim.Math3d.HorizontalCoordinate.Equals(Vim.Math3d.HorizontalCoordinate)
  id: Equals(Vim.Math3d.HorizontalCoordinate)
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: Equals(HorizontalCoordinate)
  nameWithType: HorizontalCoordinate.Equals(HorizontalCoordinate)
  fullName: Vim.Math3d.HorizontalCoordinate.Equals(Vim.Math3d.HorizontalCoordinate)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Equals
    path: ../src/Structs.cs
    startLine: 1948
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool Equals(HorizontalCoordinate x)
    parameters:
    - id: x
      type: Vim.Math3d.HorizontalCoordinate
    return:
      type: System.Boolean
    content.vb: Public Function Equals(x As HorizontalCoordinate) As Boolean
  overload: Vim.Math3d.HorizontalCoordinate.Equals*
  implements:
  - System.IEquatable{Vim.Math3d.HorizontalCoordinate}.Equals(Vim.Math3d.HorizontalCoordinate)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.HorizontalCoordinate.op_Equality(Vim.Math3d.HorizontalCoordinate,Vim.Math3d.HorizontalCoordinate)
  commentId: M:Vim.Math3d.HorizontalCoordinate.op_Equality(Vim.Math3d.HorizontalCoordinate,Vim.Math3d.HorizontalCoordinate)
  id: op_Equality(Vim.Math3d.HorizontalCoordinate,Vim.Math3d.HorizontalCoordinate)
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: Equality(HorizontalCoordinate, HorizontalCoordinate)
  nameWithType: HorizontalCoordinate.Equality(HorizontalCoordinate, HorizontalCoordinate)
  fullName: Vim.Math3d.HorizontalCoordinate.Equality(Vim.Math3d.HorizontalCoordinate, Vim.Math3d.HorizontalCoordinate)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Equality
    path: ../src/Structs.cs
    startLine: 1949
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator ==(HorizontalCoordinate x0, HorizontalCoordinate x1)
    parameters:
    - id: x0
      type: Vim.Math3d.HorizontalCoordinate
    - id: x1
      type: Vim.Math3d.HorizontalCoordinate
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(x0 As HorizontalCoordinate, x1 As HorizontalCoordinate) As Boolean
  overload: Vim.Math3d.HorizontalCoordinate.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.HorizontalCoordinate.op_Inequality(Vim.Math3d.HorizontalCoordinate,Vim.Math3d.HorizontalCoordinate)
  commentId: M:Vim.Math3d.HorizontalCoordinate.op_Inequality(Vim.Math3d.HorizontalCoordinate,Vim.Math3d.HorizontalCoordinate)
  id: op_Inequality(Vim.Math3d.HorizontalCoordinate,Vim.Math3d.HorizontalCoordinate)
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: Inequality(HorizontalCoordinate, HorizontalCoordinate)
  nameWithType: HorizontalCoordinate.Inequality(HorizontalCoordinate, HorizontalCoordinate)
  fullName: Vim.Math3d.HorizontalCoordinate.Inequality(Vim.Math3d.HorizontalCoordinate, Vim.Math3d.HorizontalCoordinate)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Inequality
    path: ../src/Structs.cs
    startLine: 1950
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator !=(HorizontalCoordinate x0, HorizontalCoordinate x1)
    parameters:
    - id: x0
      type: Vim.Math3d.HorizontalCoordinate
    - id: x1
      type: Vim.Math3d.HorizontalCoordinate
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(x0 As HorizontalCoordinate, x1 As HorizontalCoordinate) As Boolean
  overload: Vim.Math3d.HorizontalCoordinate.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.HorizontalCoordinate.op_Implicit(System.ValueTuple{System.Double,System.Double})~Vim.Math3d.HorizontalCoordinate
  commentId: M:Vim.Math3d.HorizontalCoordinate.op_Implicit(System.ValueTuple{System.Double,System.Double})~Vim.Math3d.HorizontalCoordinate
  id: op_Implicit(System.ValueTuple{System.Double,System.Double})~Vim.Math3d.HorizontalCoordinate
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: Implicit((Double azimuth, Double inclination) to HorizontalCoordinate)
  nameWithType: HorizontalCoordinate.Implicit((Double azimuth, Double inclination) to HorizontalCoordinate)
  fullName: Vim.Math3d.HorizontalCoordinate.Implicit(System.ValueTuple<System.Double, System.Double> to Vim.Math3d.HorizontalCoordinate)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Implicit
    path: ../src/Structs.cs
    startLine: 1951
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static implicit operator HorizontalCoordinate((double azimuth, double inclination) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{System.Double,System.Double}
    return:
      type: Vim.Math3d.HorizontalCoordinate
    content.vb: Public Shared Widening Operator CType(tuple As(azimuth As Double, inclination As Double)(Of Double , Double)) As HorizontalCoordinate
  overload: Vim.Math3d.HorizontalCoordinate.op_Implicit*
  nameWithType.vb: HorizontalCoordinate.Widening((azimuth As Double, inclination As Double)(Of Double, Double) to HorizontalCoordinate)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.HorizontalCoordinate.Widening(System.ValueTuple(Of System.Double, System.Double) to Vim.Math3d.HorizontalCoordinate)
  name.vb: Widening((azimuth As Double, inclination As Double)(Of Double, Double) to HorizontalCoordinate)
- uid: Vim.Math3d.HorizontalCoordinate.op_Implicit(Vim.Math3d.HorizontalCoordinate)~System.ValueTuple{System.Double,System.Double}
  commentId: M:Vim.Math3d.HorizontalCoordinate.op_Implicit(Vim.Math3d.HorizontalCoordinate)~System.ValueTuple{System.Double,System.Double}
  id: op_Implicit(Vim.Math3d.HorizontalCoordinate)~System.ValueTuple{System.Double,System.Double}
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: Implicit(HorizontalCoordinate to (Double azimuth, Double inclination))
  nameWithType: HorizontalCoordinate.Implicit(HorizontalCoordinate to (Double azimuth, Double inclination))
  fullName: Vim.Math3d.HorizontalCoordinate.Implicit(Vim.Math3d.HorizontalCoordinate to System.ValueTuple<System.Double, System.Double>)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Implicit
    path: ../src/Structs.cs
    startLine: 1952
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static implicit operator (double azimuth, double inclination)(HorizontalCoordinate self)
    parameters:
    - id: self
      type: Vim.Math3d.HorizontalCoordinate
    return:
      type: System.ValueTuple{System.Double,System.Double}
    content.vb: Public Shared Widening Operator CType(self As HorizontalCoordinate) As(azimuth As Double, inclination As Double)(Of Double , Double)
  overload: Vim.Math3d.HorizontalCoordinate.op_Implicit*
  nameWithType.vb: HorizontalCoordinate.Widening(HorizontalCoordinate to (azimuth As Double, inclination As Double)(Of Double, Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.HorizontalCoordinate.Widening(Vim.Math3d.HorizontalCoordinate to System.ValueTuple(Of System.Double, System.Double))
  name.vb: Widening(HorizontalCoordinate to (azimuth As Double, inclination As Double)(Of Double, Double))
- uid: Vim.Math3d.HorizontalCoordinate.AlmostEquals(Vim.Math3d.HorizontalCoordinate,System.Single)
  commentId: M:Vim.Math3d.HorizontalCoordinate.AlmostEquals(Vim.Math3d.HorizontalCoordinate,System.Single)
  id: AlmostEquals(Vim.Math3d.HorizontalCoordinate,System.Single)
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: AlmostEquals(HorizontalCoordinate, Single)
  nameWithType: HorizontalCoordinate.AlmostEquals(HorizontalCoordinate, Single)
  fullName: Vim.Math3d.HorizontalCoordinate.AlmostEquals(Vim.Math3d.HorizontalCoordinate, System.Single)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: AlmostEquals
    path: ../src/Structs.cs
    startLine: 1954
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool AlmostEquals(HorizontalCoordinate x, float tolerance = 1E-07F)
    parameters:
    - id: x
      type: Vim.Math3d.HorizontalCoordinate
    - id: tolerance
      type: System.Single
    return:
      type: System.Boolean
    content.vb: Public Function AlmostEquals(x As HorizontalCoordinate, tolerance As Single = 1E-07F) As Boolean
  overload: Vim.Math3d.HorizontalCoordinate.AlmostEquals*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.HorizontalCoordinate.Zero
  commentId: F:Vim.Math3d.HorizontalCoordinate.Zero
  id: Zero
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: Zero
  nameWithType: HorizontalCoordinate.Zero
  fullName: Vim.Math3d.HorizontalCoordinate.Zero
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Zero
    path: ../src/Structs.cs
    startLine: 1955
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static HorizontalCoordinate Zero
    return:
      type: Vim.Math3d.HorizontalCoordinate
    content.vb: Public Shared Zero As HorizontalCoordinate
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.HorizontalCoordinate.MinValue
  commentId: F:Vim.Math3d.HorizontalCoordinate.MinValue
  id: MinValue
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: MinValue
  nameWithType: HorizontalCoordinate.MinValue
  fullName: Vim.Math3d.HorizontalCoordinate.MinValue
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MinValue
    path: ../src/Structs.cs
    startLine: 1956
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static HorizontalCoordinate MinValue
    return:
      type: Vim.Math3d.HorizontalCoordinate
    content.vb: Public Shared MinValue As HorizontalCoordinate
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.HorizontalCoordinate.MaxValue
  commentId: F:Vim.Math3d.HorizontalCoordinate.MaxValue
  id: MaxValue
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: MaxValue
  nameWithType: HorizontalCoordinate.MaxValue
  fullName: Vim.Math3d.HorizontalCoordinate.MaxValue
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MaxValue
    path: ../src/Structs.cs
    startLine: 1957
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static HorizontalCoordinate MaxValue
    return:
      type: Vim.Math3d.HorizontalCoordinate
    content.vb: Public Shared MaxValue As HorizontalCoordinate
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.HorizontalCoordinate.SetAzimuth(System.Double)
  commentId: M:Vim.Math3d.HorizontalCoordinate.SetAzimuth(System.Double)
  id: SetAzimuth(System.Double)
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: SetAzimuth(Double)
  nameWithType: HorizontalCoordinate.SetAzimuth(Double)
  fullName: Vim.Math3d.HorizontalCoordinate.SetAzimuth(System.Double)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SetAzimuth
    path: ../src/Structs.cs
    startLine: 1958
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly HorizontalCoordinate SetAzimuth(double x)
    parameters:
    - id: x
      type: System.Double
    return:
      type: Vim.Math3d.HorizontalCoordinate
    content.vb: Public Function SetAzimuth(x As Double) As HorizontalCoordinate
  overload: Vim.Math3d.HorizontalCoordinate.SetAzimuth*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.HorizontalCoordinate.SetInclination(System.Double)
  commentId: M:Vim.Math3d.HorizontalCoordinate.SetInclination(System.Double)
  id: SetInclination(System.Double)
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: SetInclination(Double)
  nameWithType: HorizontalCoordinate.SetInclination(Double)
  fullName: Vim.Math3d.HorizontalCoordinate.SetInclination(System.Double)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SetInclination
    path: ../src/Structs.cs
    startLine: 1959
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly HorizontalCoordinate SetInclination(double x)
    parameters:
    - id: x
      type: System.Double
    return:
      type: Vim.Math3d.HorizontalCoordinate
    content.vb: Public Function SetInclination(x As Double) As HorizontalCoordinate
  overload: Vim.Math3d.HorizontalCoordinate.SetInclination*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.HorizontalCoordinate.op_Addition(Vim.Math3d.HorizontalCoordinate,Vim.Math3d.HorizontalCoordinate)
  commentId: M:Vim.Math3d.HorizontalCoordinate.op_Addition(Vim.Math3d.HorizontalCoordinate,Vim.Math3d.HorizontalCoordinate)
  id: op_Addition(Vim.Math3d.HorizontalCoordinate,Vim.Math3d.HorizontalCoordinate)
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: Addition(HorizontalCoordinate, HorizontalCoordinate)
  nameWithType: HorizontalCoordinate.Addition(HorizontalCoordinate, HorizontalCoordinate)
  fullName: Vim.Math3d.HorizontalCoordinate.Addition(Vim.Math3d.HorizontalCoordinate, Vim.Math3d.HorizontalCoordinate)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Addition
    path: ../src/Structs.cs
    startLine: 1960
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static HorizontalCoordinate operator +(HorizontalCoordinate value1, HorizontalCoordinate value2)
    parameters:
    - id: value1
      type: Vim.Math3d.HorizontalCoordinate
    - id: value2
      type: Vim.Math3d.HorizontalCoordinate
    return:
      type: Vim.Math3d.HorizontalCoordinate
    content.vb: Public Shared Operator +(value1 As HorizontalCoordinate, value2 As HorizontalCoordinate) As HorizontalCoordinate
  overload: Vim.Math3d.HorizontalCoordinate.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.HorizontalCoordinate.op_Addition(Vim.Math3d.HorizontalCoordinate,System.Double)
  commentId: M:Vim.Math3d.HorizontalCoordinate.op_Addition(Vim.Math3d.HorizontalCoordinate,System.Double)
  id: op_Addition(Vim.Math3d.HorizontalCoordinate,System.Double)
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: Addition(HorizontalCoordinate, Double)
  nameWithType: HorizontalCoordinate.Addition(HorizontalCoordinate, Double)
  fullName: Vim.Math3d.HorizontalCoordinate.Addition(Vim.Math3d.HorizontalCoordinate, System.Double)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Addition
    path: ../src/Structs.cs
    startLine: 1961
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static HorizontalCoordinate operator +(HorizontalCoordinate value1, double value2)
    parameters:
    - id: value1
      type: Vim.Math3d.HorizontalCoordinate
    - id: value2
      type: System.Double
    return:
      type: Vim.Math3d.HorizontalCoordinate
    content.vb: Public Shared Operator +(value1 As HorizontalCoordinate, value2 As Double) As HorizontalCoordinate
  overload: Vim.Math3d.HorizontalCoordinate.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.HorizontalCoordinate.op_Addition(System.Double,Vim.Math3d.HorizontalCoordinate)
  commentId: M:Vim.Math3d.HorizontalCoordinate.op_Addition(System.Double,Vim.Math3d.HorizontalCoordinate)
  id: op_Addition(System.Double,Vim.Math3d.HorizontalCoordinate)
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: Addition(Double, HorizontalCoordinate)
  nameWithType: HorizontalCoordinate.Addition(Double, HorizontalCoordinate)
  fullName: Vim.Math3d.HorizontalCoordinate.Addition(System.Double, Vim.Math3d.HorizontalCoordinate)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Addition
    path: ../src/Structs.cs
    startLine: 1962
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static HorizontalCoordinate operator +(double value1, HorizontalCoordinate value2)
    parameters:
    - id: value1
      type: System.Double
    - id: value2
      type: Vim.Math3d.HorizontalCoordinate
    return:
      type: Vim.Math3d.HorizontalCoordinate
    content.vb: Public Shared Operator +(value1 As Double, value2 As HorizontalCoordinate) As HorizontalCoordinate
  overload: Vim.Math3d.HorizontalCoordinate.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.HorizontalCoordinate.op_Subtraction(Vim.Math3d.HorizontalCoordinate,Vim.Math3d.HorizontalCoordinate)
  commentId: M:Vim.Math3d.HorizontalCoordinate.op_Subtraction(Vim.Math3d.HorizontalCoordinate,Vim.Math3d.HorizontalCoordinate)
  id: op_Subtraction(Vim.Math3d.HorizontalCoordinate,Vim.Math3d.HorizontalCoordinate)
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: Subtraction(HorizontalCoordinate, HorizontalCoordinate)
  nameWithType: HorizontalCoordinate.Subtraction(HorizontalCoordinate, HorizontalCoordinate)
  fullName: Vim.Math3d.HorizontalCoordinate.Subtraction(Vim.Math3d.HorizontalCoordinate, Vim.Math3d.HorizontalCoordinate)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Subtraction
    path: ../src/Structs.cs
    startLine: 1963
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static HorizontalCoordinate operator -(HorizontalCoordinate value1, HorizontalCoordinate value2)
    parameters:
    - id: value1
      type: Vim.Math3d.HorizontalCoordinate
    - id: value2
      type: Vim.Math3d.HorizontalCoordinate
    return:
      type: Vim.Math3d.HorizontalCoordinate
    content.vb: Public Shared Operator -(value1 As HorizontalCoordinate, value2 As HorizontalCoordinate) As HorizontalCoordinate
  overload: Vim.Math3d.HorizontalCoordinate.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.HorizontalCoordinate.op_Subtraction(Vim.Math3d.HorizontalCoordinate,System.Double)
  commentId: M:Vim.Math3d.HorizontalCoordinate.op_Subtraction(Vim.Math3d.HorizontalCoordinate,System.Double)
  id: op_Subtraction(Vim.Math3d.HorizontalCoordinate,System.Double)
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: Subtraction(HorizontalCoordinate, Double)
  nameWithType: HorizontalCoordinate.Subtraction(HorizontalCoordinate, Double)
  fullName: Vim.Math3d.HorizontalCoordinate.Subtraction(Vim.Math3d.HorizontalCoordinate, System.Double)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Subtraction
    path: ../src/Structs.cs
    startLine: 1964
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static HorizontalCoordinate operator -(HorizontalCoordinate value1, double value2)
    parameters:
    - id: value1
      type: Vim.Math3d.HorizontalCoordinate
    - id: value2
      type: System.Double
    return:
      type: Vim.Math3d.HorizontalCoordinate
    content.vb: Public Shared Operator -(value1 As HorizontalCoordinate, value2 As Double) As HorizontalCoordinate
  overload: Vim.Math3d.HorizontalCoordinate.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.HorizontalCoordinate.op_Subtraction(System.Double,Vim.Math3d.HorizontalCoordinate)
  commentId: M:Vim.Math3d.HorizontalCoordinate.op_Subtraction(System.Double,Vim.Math3d.HorizontalCoordinate)
  id: op_Subtraction(System.Double,Vim.Math3d.HorizontalCoordinate)
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: Subtraction(Double, HorizontalCoordinate)
  nameWithType: HorizontalCoordinate.Subtraction(Double, HorizontalCoordinate)
  fullName: Vim.Math3d.HorizontalCoordinate.Subtraction(System.Double, Vim.Math3d.HorizontalCoordinate)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Subtraction
    path: ../src/Structs.cs
    startLine: 1965
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static HorizontalCoordinate operator -(double value1, HorizontalCoordinate value2)
    parameters:
    - id: value1
      type: System.Double
    - id: value2
      type: Vim.Math3d.HorizontalCoordinate
    return:
      type: Vim.Math3d.HorizontalCoordinate
    content.vb: Public Shared Operator -(value1 As Double, value2 As HorizontalCoordinate) As HorizontalCoordinate
  overload: Vim.Math3d.HorizontalCoordinate.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.HorizontalCoordinate.op_Multiply(Vim.Math3d.HorizontalCoordinate,Vim.Math3d.HorizontalCoordinate)
  commentId: M:Vim.Math3d.HorizontalCoordinate.op_Multiply(Vim.Math3d.HorizontalCoordinate,Vim.Math3d.HorizontalCoordinate)
  id: op_Multiply(Vim.Math3d.HorizontalCoordinate,Vim.Math3d.HorizontalCoordinate)
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: Multiply(HorizontalCoordinate, HorizontalCoordinate)
  nameWithType: HorizontalCoordinate.Multiply(HorizontalCoordinate, HorizontalCoordinate)
  fullName: Vim.Math3d.HorizontalCoordinate.Multiply(Vim.Math3d.HorizontalCoordinate, Vim.Math3d.HorizontalCoordinate)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Multiply
    path: ../src/Structs.cs
    startLine: 1966
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static HorizontalCoordinate operator *(HorizontalCoordinate value1, HorizontalCoordinate value2)
    parameters:
    - id: value1
      type: Vim.Math3d.HorizontalCoordinate
    - id: value2
      type: Vim.Math3d.HorizontalCoordinate
    return:
      type: Vim.Math3d.HorizontalCoordinate
    content.vb: Public Shared Operator *(value1 As HorizontalCoordinate, value2 As HorizontalCoordinate) As HorizontalCoordinate
  overload: Vim.Math3d.HorizontalCoordinate.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.HorizontalCoordinate.op_Multiply(Vim.Math3d.HorizontalCoordinate,System.Double)
  commentId: M:Vim.Math3d.HorizontalCoordinate.op_Multiply(Vim.Math3d.HorizontalCoordinate,System.Double)
  id: op_Multiply(Vim.Math3d.HorizontalCoordinate,System.Double)
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: Multiply(HorizontalCoordinate, Double)
  nameWithType: HorizontalCoordinate.Multiply(HorizontalCoordinate, Double)
  fullName: Vim.Math3d.HorizontalCoordinate.Multiply(Vim.Math3d.HorizontalCoordinate, System.Double)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Multiply
    path: ../src/Structs.cs
    startLine: 1967
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static HorizontalCoordinate operator *(HorizontalCoordinate value1, double value2)
    parameters:
    - id: value1
      type: Vim.Math3d.HorizontalCoordinate
    - id: value2
      type: System.Double
    return:
      type: Vim.Math3d.HorizontalCoordinate
    content.vb: Public Shared Operator *(value1 As HorizontalCoordinate, value2 As Double) As HorizontalCoordinate
  overload: Vim.Math3d.HorizontalCoordinate.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.HorizontalCoordinate.op_Multiply(System.Double,Vim.Math3d.HorizontalCoordinate)
  commentId: M:Vim.Math3d.HorizontalCoordinate.op_Multiply(System.Double,Vim.Math3d.HorizontalCoordinate)
  id: op_Multiply(System.Double,Vim.Math3d.HorizontalCoordinate)
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: Multiply(Double, HorizontalCoordinate)
  nameWithType: HorizontalCoordinate.Multiply(Double, HorizontalCoordinate)
  fullName: Vim.Math3d.HorizontalCoordinate.Multiply(System.Double, Vim.Math3d.HorizontalCoordinate)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Multiply
    path: ../src/Structs.cs
    startLine: 1968
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static HorizontalCoordinate operator *(double value1, HorizontalCoordinate value2)
    parameters:
    - id: value1
      type: System.Double
    - id: value2
      type: Vim.Math3d.HorizontalCoordinate
    return:
      type: Vim.Math3d.HorizontalCoordinate
    content.vb: Public Shared Operator *(value1 As Double, value2 As HorizontalCoordinate) As HorizontalCoordinate
  overload: Vim.Math3d.HorizontalCoordinate.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.HorizontalCoordinate.op_Division(Vim.Math3d.HorizontalCoordinate,Vim.Math3d.HorizontalCoordinate)
  commentId: M:Vim.Math3d.HorizontalCoordinate.op_Division(Vim.Math3d.HorizontalCoordinate,Vim.Math3d.HorizontalCoordinate)
  id: op_Division(Vim.Math3d.HorizontalCoordinate,Vim.Math3d.HorizontalCoordinate)
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: Division(HorizontalCoordinate, HorizontalCoordinate)
  nameWithType: HorizontalCoordinate.Division(HorizontalCoordinate, HorizontalCoordinate)
  fullName: Vim.Math3d.HorizontalCoordinate.Division(Vim.Math3d.HorizontalCoordinate, Vim.Math3d.HorizontalCoordinate)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Division
    path: ../src/Structs.cs
    startLine: 1969
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static HorizontalCoordinate operator /(HorizontalCoordinate value1, HorizontalCoordinate value2)
    parameters:
    - id: value1
      type: Vim.Math3d.HorizontalCoordinate
    - id: value2
      type: Vim.Math3d.HorizontalCoordinate
    return:
      type: Vim.Math3d.HorizontalCoordinate
    content.vb: Public Shared Operator /(value1 As HorizontalCoordinate, value2 As HorizontalCoordinate) As HorizontalCoordinate
  overload: Vim.Math3d.HorizontalCoordinate.op_Division*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.HorizontalCoordinate.op_Division(Vim.Math3d.HorizontalCoordinate,System.Double)
  commentId: M:Vim.Math3d.HorizontalCoordinate.op_Division(Vim.Math3d.HorizontalCoordinate,System.Double)
  id: op_Division(Vim.Math3d.HorizontalCoordinate,System.Double)
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: Division(HorizontalCoordinate, Double)
  nameWithType: HorizontalCoordinate.Division(HorizontalCoordinate, Double)
  fullName: Vim.Math3d.HorizontalCoordinate.Division(Vim.Math3d.HorizontalCoordinate, System.Double)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Division
    path: ../src/Structs.cs
    startLine: 1970
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static HorizontalCoordinate operator /(HorizontalCoordinate value1, double value2)
    parameters:
    - id: value1
      type: Vim.Math3d.HorizontalCoordinate
    - id: value2
      type: System.Double
    return:
      type: Vim.Math3d.HorizontalCoordinate
    content.vb: Public Shared Operator /(value1 As HorizontalCoordinate, value2 As Double) As HorizontalCoordinate
  overload: Vim.Math3d.HorizontalCoordinate.op_Division*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.HorizontalCoordinate.op_Division(System.Double,Vim.Math3d.HorizontalCoordinate)
  commentId: M:Vim.Math3d.HorizontalCoordinate.op_Division(System.Double,Vim.Math3d.HorizontalCoordinate)
  id: op_Division(System.Double,Vim.Math3d.HorizontalCoordinate)
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: Division(Double, HorizontalCoordinate)
  nameWithType: HorizontalCoordinate.Division(Double, HorizontalCoordinate)
  fullName: Vim.Math3d.HorizontalCoordinate.Division(System.Double, Vim.Math3d.HorizontalCoordinate)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Division
    path: ../src/Structs.cs
    startLine: 1971
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static HorizontalCoordinate operator /(double value1, HorizontalCoordinate value2)
    parameters:
    - id: value1
      type: System.Double
    - id: value2
      type: Vim.Math3d.HorizontalCoordinate
    return:
      type: Vim.Math3d.HorizontalCoordinate
    content.vb: Public Shared Operator /(value1 As Double, value2 As HorizontalCoordinate) As HorizontalCoordinate
  overload: Vim.Math3d.HorizontalCoordinate.op_Division*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.HorizontalCoordinate.One
  commentId: F:Vim.Math3d.HorizontalCoordinate.One
  id: One
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: One
  nameWithType: HorizontalCoordinate.One
  fullName: Vim.Math3d.HorizontalCoordinate.One
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: One
    path: ../src/Structs.cs
    startLine: 1972
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static HorizontalCoordinate One
    return:
      type: Vim.Math3d.HorizontalCoordinate
    content.vb: Public Shared One As HorizontalCoordinate
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.HorizontalCoordinate.UnitAzimuth
  commentId: F:Vim.Math3d.HorizontalCoordinate.UnitAzimuth
  id: UnitAzimuth
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: UnitAzimuth
  nameWithType: HorizontalCoordinate.UnitAzimuth
  fullName: Vim.Math3d.HorizontalCoordinate.UnitAzimuth
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: UnitAzimuth
    path: ../src/Structs.cs
    startLine: 1973
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static HorizontalCoordinate UnitAzimuth
    return:
      type: Vim.Math3d.HorizontalCoordinate
    content.vb: Public Shared UnitAzimuth As HorizontalCoordinate
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.HorizontalCoordinate.UnitInclination
  commentId: F:Vim.Math3d.HorizontalCoordinate.UnitInclination
  id: UnitInclination
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: UnitInclination
  nameWithType: HorizontalCoordinate.UnitInclination
  fullName: Vim.Math3d.HorizontalCoordinate.UnitInclination
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: UnitInclination
    path: ../src/Structs.cs
    startLine: 1974
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static HorizontalCoordinate UnitInclination
    return:
      type: Vim.Math3d.HorizontalCoordinate
    content.vb: Public Shared UnitInclination As HorizontalCoordinate
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.HorizontalCoordinate.#ctor(System.Double)
  commentId: M:Vim.Math3d.HorizontalCoordinate.#ctor(System.Double)
  id: '#ctor(System.Double)'
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: HorizontalCoordinate(Double)
  nameWithType: HorizontalCoordinate.HorizontalCoordinate(Double)
  fullName: Vim.Math3d.HorizontalCoordinate.HorizontalCoordinate(System.Double)
  type: Constructor
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: .ctor
    path: ../src/Structs.cs
    startLine: 1975
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public HorizontalCoordinate(double value)
    parameters:
    - id: value
      type: System.Double
    content.vb: Public Sub New(value As Double)
  overload: Vim.Math3d.HorizontalCoordinate.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Vim.Math3d.HorizontalCoordinate.op_UnaryNegation(Vim.Math3d.HorizontalCoordinate)
  commentId: M:Vim.Math3d.HorizontalCoordinate.op_UnaryNegation(Vim.Math3d.HorizontalCoordinate)
  id: op_UnaryNegation(Vim.Math3d.HorizontalCoordinate)
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: UnaryNegation(HorizontalCoordinate)
  nameWithType: HorizontalCoordinate.UnaryNegation(HorizontalCoordinate)
  fullName: Vim.Math3d.HorizontalCoordinate.UnaryNegation(Vim.Math3d.HorizontalCoordinate)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_UnaryNegation
    path: ../src/Structs.cs
    startLine: 1976
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static HorizontalCoordinate operator -(HorizontalCoordinate value)
    parameters:
    - id: value
      type: Vim.Math3d.HorizontalCoordinate
    return:
      type: Vim.Math3d.HorizontalCoordinate
    content.vb: Public Shared Operator -(value As HorizontalCoordinate) As HorizontalCoordinate
  overload: Vim.Math3d.HorizontalCoordinate.op_UnaryNegation*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.HorizontalCoordinate.Dot(Vim.Math3d.HorizontalCoordinate,Vim.Math3d.HorizontalCoordinate)
  commentId: M:Vim.Math3d.HorizontalCoordinate.Dot(Vim.Math3d.HorizontalCoordinate,Vim.Math3d.HorizontalCoordinate)
  id: Dot(Vim.Math3d.HorizontalCoordinate,Vim.Math3d.HorizontalCoordinate)
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: Dot(HorizontalCoordinate, HorizontalCoordinate)
  nameWithType: HorizontalCoordinate.Dot(HorizontalCoordinate, HorizontalCoordinate)
  fullName: Vim.Math3d.HorizontalCoordinate.Dot(Vim.Math3d.HorizontalCoordinate, Vim.Math3d.HorizontalCoordinate)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Dot
    path: ../src/Structs.cs
    startLine: 1977
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double Dot(HorizontalCoordinate value1, HorizontalCoordinate value2)
    parameters:
    - id: value1
      type: Vim.Math3d.HorizontalCoordinate
    - id: value2
      type: Vim.Math3d.HorizontalCoordinate
    return:
      type: System.Double
    content.vb: Public Shared Function Dot(value1 As HorizontalCoordinate, value2 As HorizontalCoordinate) As Double
  overload: Vim.Math3d.HorizontalCoordinate.Dot*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.HorizontalCoordinate.Dot(Vim.Math3d.HorizontalCoordinate)
  commentId: M:Vim.Math3d.HorizontalCoordinate.Dot(Vim.Math3d.HorizontalCoordinate)
  id: Dot(Vim.Math3d.HorizontalCoordinate)
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: Dot(HorizontalCoordinate)
  nameWithType: HorizontalCoordinate.Dot(HorizontalCoordinate)
  fullName: Vim.Math3d.HorizontalCoordinate.Dot(Vim.Math3d.HorizontalCoordinate)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Dot
    path: ../src/Structs.cs
    startLine: 1978
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly double Dot(HorizontalCoordinate value)
    parameters:
    - id: value
      type: Vim.Math3d.HorizontalCoordinate
    return:
      type: System.Double
    content.vb: Public Function Dot(value As HorizontalCoordinate) As Double
  overload: Vim.Math3d.HorizontalCoordinate.Dot*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.HorizontalCoordinate.AlmostZero(System.Single)
  commentId: M:Vim.Math3d.HorizontalCoordinate.AlmostZero(System.Single)
  id: AlmostZero(System.Single)
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: AlmostZero(Single)
  nameWithType: HorizontalCoordinate.AlmostZero(Single)
  fullName: Vim.Math3d.HorizontalCoordinate.AlmostZero(System.Single)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: AlmostZero
    path: ../src/Structs.cs
    startLine: 1979
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool AlmostZero(float tolerance = 1E-07F)
    parameters:
    - id: tolerance
      type: System.Single
    return:
      type: System.Boolean
    content.vb: Public Function AlmostZero(tolerance As Single = 1E-07F) As Boolean
  overload: Vim.Math3d.HorizontalCoordinate.AlmostZero*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.HorizontalCoordinate.AnyComponentNegative
  commentId: M:Vim.Math3d.HorizontalCoordinate.AnyComponentNegative
  id: AnyComponentNegative
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: AnyComponentNegative()
  nameWithType: HorizontalCoordinate.AnyComponentNegative()
  fullName: Vim.Math3d.HorizontalCoordinate.AnyComponentNegative()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: AnyComponentNegative
    path: ../src/Structs.cs
    startLine: 1980
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool AnyComponentNegative()
    return:
      type: System.Boolean
    content.vb: Public Function AnyComponentNegative As Boolean
  overload: Vim.Math3d.HorizontalCoordinate.AnyComponentNegative*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.HorizontalCoordinate.MinComponent
  commentId: M:Vim.Math3d.HorizontalCoordinate.MinComponent
  id: MinComponent
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: MinComponent()
  nameWithType: HorizontalCoordinate.MinComponent()
  fullName: Vim.Math3d.HorizontalCoordinate.MinComponent()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MinComponent
    path: ../src/Structs.cs
    startLine: 1981
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly double MinComponent()
    return:
      type: System.Double
    content.vb: Public Function MinComponent As Double
  overload: Vim.Math3d.HorizontalCoordinate.MinComponent*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.HorizontalCoordinate.MaxComponent
  commentId: M:Vim.Math3d.HorizontalCoordinate.MaxComponent
  id: MaxComponent
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: MaxComponent()
  nameWithType: HorizontalCoordinate.MaxComponent()
  fullName: Vim.Math3d.HorizontalCoordinate.MaxComponent()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MaxComponent
    path: ../src/Structs.cs
    startLine: 1982
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly double MaxComponent()
    return:
      type: System.Double
    content.vb: Public Function MaxComponent As Double
  overload: Vim.Math3d.HorizontalCoordinate.MaxComponent*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.HorizontalCoordinate.SumComponents
  commentId: M:Vim.Math3d.HorizontalCoordinate.SumComponents
  id: SumComponents
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: SumComponents()
  nameWithType: HorizontalCoordinate.SumComponents()
  fullName: Vim.Math3d.HorizontalCoordinate.SumComponents()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SumComponents
    path: ../src/Structs.cs
    startLine: 1983
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly double SumComponents()
    return:
      type: System.Double
    content.vb: Public Function SumComponents As Double
  overload: Vim.Math3d.HorizontalCoordinate.SumComponents*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.HorizontalCoordinate.SumSqrComponents
  commentId: M:Vim.Math3d.HorizontalCoordinate.SumSqrComponents
  id: SumSqrComponents
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: SumSqrComponents()
  nameWithType: HorizontalCoordinate.SumSqrComponents()
  fullName: Vim.Math3d.HorizontalCoordinate.SumSqrComponents()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SumSqrComponents
    path: ../src/Structs.cs
    startLine: 1984
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly double SumSqrComponents()
    return:
      type: System.Double
    content.vb: Public Function SumSqrComponents As Double
  overload: Vim.Math3d.HorizontalCoordinate.SumSqrComponents*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.HorizontalCoordinate.ProductComponents
  commentId: M:Vim.Math3d.HorizontalCoordinate.ProductComponents
  id: ProductComponents
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: ProductComponents()
  nameWithType: HorizontalCoordinate.ProductComponents()
  fullName: Vim.Math3d.HorizontalCoordinate.ProductComponents()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ProductComponents
    path: ../src/Structs.cs
    startLine: 1985
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly double ProductComponents()
    return:
      type: System.Double
    content.vb: Public Function ProductComponents As Double
  overload: Vim.Math3d.HorizontalCoordinate.ProductComponents*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.HorizontalCoordinate.GetComponent(System.Int32)
  commentId: M:Vim.Math3d.HorizontalCoordinate.GetComponent(System.Int32)
  id: GetComponent(System.Int32)
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: GetComponent(Int32)
  nameWithType: HorizontalCoordinate.GetComponent(Int32)
  fullName: Vim.Math3d.HorizontalCoordinate.GetComponent(System.Int32)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: GetComponent
    path: ../src/Structs.cs
    startLine: 1986
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly double GetComponent(int n)
    parameters:
    - id: n
      type: System.Int32
    return:
      type: System.Double
    content.vb: Public Function GetComponent(n As Integer) As Double
  overload: Vim.Math3d.HorizontalCoordinate.GetComponent*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.HorizontalCoordinate.MagnitudeSquared
  commentId: M:Vim.Math3d.HorizontalCoordinate.MagnitudeSquared
  id: MagnitudeSquared
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: MagnitudeSquared()
  nameWithType: HorizontalCoordinate.MagnitudeSquared()
  fullName: Vim.Math3d.HorizontalCoordinate.MagnitudeSquared()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MagnitudeSquared
    path: ../src/Structs.cs
    startLine: 1987
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly double MagnitudeSquared()
    return:
      type: System.Double
    content.vb: Public Function MagnitudeSquared As Double
  overload: Vim.Math3d.HorizontalCoordinate.MagnitudeSquared*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.HorizontalCoordinate.Magnitude
  commentId: M:Vim.Math3d.HorizontalCoordinate.Magnitude
  id: Magnitude
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: Magnitude()
  nameWithType: HorizontalCoordinate.Magnitude()
  fullName: Vim.Math3d.HorizontalCoordinate.Magnitude()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Magnitude
    path: ../src/Structs.cs
    startLine: 1988
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly double Magnitude()
    return:
      type: System.Double
    content.vb: Public Function Magnitude As Double
  overload: Vim.Math3d.HorizontalCoordinate.Magnitude*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.HorizontalCoordinate.NumComponents
  commentId: F:Vim.Math3d.HorizontalCoordinate.NumComponents
  id: NumComponents
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: NumComponents
  nameWithType: HorizontalCoordinate.NumComponents
  fullName: Vim.Math3d.HorizontalCoordinate.NumComponents
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: NumComponents
    path: ../src/Structs.cs
    startLine: 1989
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public const int NumComponents = 2
    return:
      type: System.Int32
    content.vb: Public Const NumComponents As Integer = 2
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Vim.Math3d.HorizontalCoordinate.IsNaN
  commentId: M:Vim.Math3d.HorizontalCoordinate.IsNaN
  id: IsNaN
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: IsNaN()
  nameWithType: HorizontalCoordinate.IsNaN()
  fullName: Vim.Math3d.HorizontalCoordinate.IsNaN()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: IsNaN
    path: ../src/Structs.cs
    startLine: 1991
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool IsNaN()
    return:
      type: System.Boolean
    content.vb: Public Function IsNaN As Boolean
  overload: Vim.Math3d.HorizontalCoordinate.IsNaN*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.HorizontalCoordinate.IsInfinity
  commentId: M:Vim.Math3d.HorizontalCoordinate.IsInfinity
  id: IsInfinity
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: IsInfinity()
  nameWithType: HorizontalCoordinate.IsInfinity()
  fullName: Vim.Math3d.HorizontalCoordinate.IsInfinity()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: IsInfinity
    path: ../src/Structs.cs
    startLine: 1992
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool IsInfinity()
    return:
      type: System.Boolean
    content.vb: Public Function IsInfinity As Boolean
  overload: Vim.Math3d.HorizontalCoordinate.IsInfinity*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.HorizontalCoordinate.CompareTo(Vim.Math3d.HorizontalCoordinate)
  commentId: M:Vim.Math3d.HorizontalCoordinate.CompareTo(Vim.Math3d.HorizontalCoordinate)
  id: CompareTo(Vim.Math3d.HorizontalCoordinate)
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: CompareTo(HorizontalCoordinate)
  nameWithType: HorizontalCoordinate.CompareTo(HorizontalCoordinate)
  fullName: Vim.Math3d.HorizontalCoordinate.CompareTo(Vim.Math3d.HorizontalCoordinate)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: CompareTo
    path: ../src/Structs.cs
    startLine: 1993
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly int CompareTo(HorizontalCoordinate x)
    parameters:
    - id: x
      type: Vim.Math3d.HorizontalCoordinate
    return:
      type: System.Int32
    content.vb: Public Function CompareTo(x As HorizontalCoordinate) As Integer
  overload: Vim.Math3d.HorizontalCoordinate.CompareTo*
  implements:
  - System.IComparable{Vim.Math3d.HorizontalCoordinate}.CompareTo(Vim.Math3d.HorizontalCoordinate)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.HorizontalCoordinate.op_LessThan(Vim.Math3d.HorizontalCoordinate,Vim.Math3d.HorizontalCoordinate)
  commentId: M:Vim.Math3d.HorizontalCoordinate.op_LessThan(Vim.Math3d.HorizontalCoordinate,Vim.Math3d.HorizontalCoordinate)
  id: op_LessThan(Vim.Math3d.HorizontalCoordinate,Vim.Math3d.HorizontalCoordinate)
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: LessThan(HorizontalCoordinate, HorizontalCoordinate)
  nameWithType: HorizontalCoordinate.LessThan(HorizontalCoordinate, HorizontalCoordinate)
  fullName: Vim.Math3d.HorizontalCoordinate.LessThan(Vim.Math3d.HorizontalCoordinate, Vim.Math3d.HorizontalCoordinate)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_LessThan
    path: ../src/Structs.cs
    startLine: 1994
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator <(HorizontalCoordinate x0, HorizontalCoordinate x1)
    parameters:
    - id: x0
      type: Vim.Math3d.HorizontalCoordinate
    - id: x1
      type: Vim.Math3d.HorizontalCoordinate
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <(x0 As HorizontalCoordinate, x1 As HorizontalCoordinate) As Boolean
  overload: Vim.Math3d.HorizontalCoordinate.op_LessThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.HorizontalCoordinate.op_LessThanOrEqual(Vim.Math3d.HorizontalCoordinate,Vim.Math3d.HorizontalCoordinate)
  commentId: M:Vim.Math3d.HorizontalCoordinate.op_LessThanOrEqual(Vim.Math3d.HorizontalCoordinate,Vim.Math3d.HorizontalCoordinate)
  id: op_LessThanOrEqual(Vim.Math3d.HorizontalCoordinate,Vim.Math3d.HorizontalCoordinate)
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(HorizontalCoordinate, HorizontalCoordinate)
  nameWithType: HorizontalCoordinate.LessThanOrEqual(HorizontalCoordinate, HorizontalCoordinate)
  fullName: Vim.Math3d.HorizontalCoordinate.LessThanOrEqual(Vim.Math3d.HorizontalCoordinate, Vim.Math3d.HorizontalCoordinate)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_LessThanOrEqual
    path: ../src/Structs.cs
    startLine: 1995
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator <=(HorizontalCoordinate x0, HorizontalCoordinate x1)
    parameters:
    - id: x0
      type: Vim.Math3d.HorizontalCoordinate
    - id: x1
      type: Vim.Math3d.HorizontalCoordinate
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <=(x0 As HorizontalCoordinate, x1 As HorizontalCoordinate) As Boolean
  overload: Vim.Math3d.HorizontalCoordinate.op_LessThanOrEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.HorizontalCoordinate.op_GreaterThan(Vim.Math3d.HorizontalCoordinate,Vim.Math3d.HorizontalCoordinate)
  commentId: M:Vim.Math3d.HorizontalCoordinate.op_GreaterThan(Vim.Math3d.HorizontalCoordinate,Vim.Math3d.HorizontalCoordinate)
  id: op_GreaterThan(Vim.Math3d.HorizontalCoordinate,Vim.Math3d.HorizontalCoordinate)
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: GreaterThan(HorizontalCoordinate, HorizontalCoordinate)
  nameWithType: HorizontalCoordinate.GreaterThan(HorizontalCoordinate, HorizontalCoordinate)
  fullName: Vim.Math3d.HorizontalCoordinate.GreaterThan(Vim.Math3d.HorizontalCoordinate, Vim.Math3d.HorizontalCoordinate)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_GreaterThan
    path: ../src/Structs.cs
    startLine: 1996
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator>(HorizontalCoordinate x0, HorizontalCoordinate x1)
    parameters:
    - id: x0
      type: Vim.Math3d.HorizontalCoordinate
    - id: x1
      type: Vim.Math3d.HorizontalCoordinate
    return:
      type: System.Boolean
    content.vb: Public Shared Operator>(x0 As HorizontalCoordinate, x1 As HorizontalCoordinate) As Boolean
  overload: Vim.Math3d.HorizontalCoordinate.op_GreaterThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.HorizontalCoordinate.op_GreaterThanOrEqual(Vim.Math3d.HorizontalCoordinate,Vim.Math3d.HorizontalCoordinate)
  commentId: M:Vim.Math3d.HorizontalCoordinate.op_GreaterThanOrEqual(Vim.Math3d.HorizontalCoordinate,Vim.Math3d.HorizontalCoordinate)
  id: op_GreaterThanOrEqual(Vim.Math3d.HorizontalCoordinate,Vim.Math3d.HorizontalCoordinate)
  parent: Vim.Math3d.HorizontalCoordinate
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(HorizontalCoordinate, HorizontalCoordinate)
  nameWithType: HorizontalCoordinate.GreaterThanOrEqual(HorizontalCoordinate, HorizontalCoordinate)
  fullName: Vim.Math3d.HorizontalCoordinate.GreaterThanOrEqual(Vim.Math3d.HorizontalCoordinate, Vim.Math3d.HorizontalCoordinate)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_GreaterThanOrEqual
    path: ../src/Structs.cs
    startLine: 1997
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator >=(HorizontalCoordinate x0, HorizontalCoordinate x1)
    parameters:
    - id: x0
      type: Vim.Math3d.HorizontalCoordinate
    - id: x1
      type: Vim.Math3d.HorizontalCoordinate
    return:
      type: System.Boolean
    content.vb: Public Shared Operator >=(x0 As HorizontalCoordinate, x1 As HorizontalCoordinate) As Boolean
  overload: Vim.Math3d.HorizontalCoordinate.op_GreaterThanOrEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Vim.Math3d
  commentId: N:Vim.Math3d
  name: Vim.Math3d
  nameWithType: Vim.Math3d
  fullName: Vim.Math3d
- uid: System.IEquatable{Vim.Math3d.HorizontalCoordinate}
  commentId: T:System.IEquatable{Vim.Math3d.HorizontalCoordinate}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<HorizontalCoordinate>
  nameWithType: IEquatable<HorizontalCoordinate>
  fullName: System.IEquatable<Vim.Math3d.HorizontalCoordinate>
  nameWithType.vb: IEquatable(Of HorizontalCoordinate)
  fullName.vb: System.IEquatable(Of Vim.Math3d.HorizontalCoordinate)
  name.vb: IEquatable(Of HorizontalCoordinate)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.HorizontalCoordinate
    name: HorizontalCoordinate
    nameWithType: HorizontalCoordinate
    fullName: Vim.Math3d.HorizontalCoordinate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.HorizontalCoordinate
    name: HorizontalCoordinate
    nameWithType: HorizontalCoordinate
    fullName: Vim.Math3d.HorizontalCoordinate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable{Vim.Math3d.HorizontalCoordinate}
  commentId: T:System.IComparable{Vim.Math3d.HorizontalCoordinate}
  parent: System
  definition: System.IComparable`1
  name: IComparable<HorizontalCoordinate>
  nameWithType: IComparable<HorizontalCoordinate>
  fullName: System.IComparable<Vim.Math3d.HorizontalCoordinate>
  nameWithType.vb: IComparable(Of HorizontalCoordinate)
  fullName.vb: System.IComparable(Of Vim.Math3d.HorizontalCoordinate)
  name.vb: IComparable(Of HorizontalCoordinate)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.HorizontalCoordinate
    name: HorizontalCoordinate
    nameWithType: HorizontalCoordinate
    fullName: Vim.Math3d.HorizontalCoordinate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.HorizontalCoordinate
    name: HorizontalCoordinate
    nameWithType: HorizontalCoordinate
    fullName: Vim.Math3d.HorizontalCoordinate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Vim.Math3d.HorizontalCoordinate.#ctor*
  commentId: Overload:Vim.Math3d.HorizontalCoordinate.#ctor
  name: HorizontalCoordinate
  nameWithType: HorizontalCoordinate.HorizontalCoordinate
  fullName: Vim.Math3d.HorizontalCoordinate.HorizontalCoordinate
- uid: System.ValueTuple{System.Double,System.Double}
  commentId: T:System.ValueTuple{System.Double,System.Double}
  parent: System
  definition: System.ValueTuple`2
  name: (T1, T2)<Double, Double>
  nameWithType: (T1, T2)<Double, Double>
  fullName: System.ValueTuple<System.Double, System.Double>
  nameWithType.vb: (T1, T2)(Of Double, Double)
  fullName.vb: System.ValueTuple(Of System.Double, System.Double)
  name.vb: (T1, T2)(Of Double, Double)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple`2
  commentId: T:System.ValueTuple`2
  isExternal: true
  name: (T1, T2)<T1, T2>
  nameWithType: (T1, T2)<T1, T2>
  fullName: System.ValueTuple<T1, T2>
  nameWithType.vb: (T1, T2)(Of T1, T2)
  fullName.vb: System.ValueTuple(Of T1, T2)
  name.vb: (T1, T2)(Of T1, T2)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.HorizontalCoordinate.Create*
  commentId: Overload:Vim.Math3d.HorizontalCoordinate.Create
  name: Create
  nameWithType: HorizontalCoordinate.Create
  fullName: Vim.Math3d.HorizontalCoordinate.Create
- uid: Vim.Math3d.HorizontalCoordinate
  commentId: T:Vim.Math3d.HorizontalCoordinate
  parent: Vim.Math3d
  name: HorizontalCoordinate
  nameWithType: HorizontalCoordinate
  fullName: Vim.Math3d.HorizontalCoordinate
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.HorizontalCoordinate.Equals*
  commentId: Overload:Vim.Math3d.HorizontalCoordinate.Equals
  name: Equals
  nameWithType: HorizontalCoordinate.Equals
  fullName: Vim.Math3d.HorizontalCoordinate.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.HorizontalCoordinate.GetHashCode*
  commentId: Overload:Vim.Math3d.HorizontalCoordinate.GetHashCode
  name: GetHashCode
  nameWithType: HorizontalCoordinate.GetHashCode
  fullName: Vim.Math3d.HorizontalCoordinate.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.HorizontalCoordinate.ToString*
  commentId: Overload:Vim.Math3d.HorizontalCoordinate.ToString
  name: ToString
  nameWithType: HorizontalCoordinate.ToString
  fullName: Vim.Math3d.HorizontalCoordinate.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Vim.Math3d.HorizontalCoordinate.Deconstruct*
  commentId: Overload:Vim.Math3d.HorizontalCoordinate.Deconstruct
  name: Deconstruct
  nameWithType: HorizontalCoordinate.Deconstruct
  fullName: Vim.Math3d.HorizontalCoordinate.Deconstruct
- uid: System.IEquatable{Vim.Math3d.HorizontalCoordinate}.Equals(Vim.Math3d.HorizontalCoordinate)
  commentId: M:System.IEquatable{Vim.Math3d.HorizontalCoordinate}.Equals(Vim.Math3d.HorizontalCoordinate)
  parent: System.IEquatable{Vim.Math3d.HorizontalCoordinate}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(HorizontalCoordinate)
  nameWithType: IEquatable<HorizontalCoordinate>.Equals(HorizontalCoordinate)
  fullName: System.IEquatable<Vim.Math3d.HorizontalCoordinate>.Equals(Vim.Math3d.HorizontalCoordinate)
  nameWithType.vb: IEquatable(Of HorizontalCoordinate).Equals(HorizontalCoordinate)
  fullName.vb: System.IEquatable(Of Vim.Math3d.HorizontalCoordinate).Equals(Vim.Math3d.HorizontalCoordinate)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<HorizontalCoordinate>.Equals
    fullName: System.IEquatable<Vim.Math3d.HorizontalCoordinate>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.HorizontalCoordinate
    name: HorizontalCoordinate
    nameWithType: HorizontalCoordinate
    fullName: Vim.Math3d.HorizontalCoordinate
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of HorizontalCoordinate).Equals
    fullName: System.IEquatable(Of Vim.Math3d.HorizontalCoordinate).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.HorizontalCoordinate
    name: HorizontalCoordinate
    nameWithType: HorizontalCoordinate
    fullName: Vim.Math3d.HorizontalCoordinate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.HorizontalCoordinate.op_Equality*
  commentId: Overload:Vim.Math3d.HorizontalCoordinate.op_Equality
  name: Equality
  nameWithType: HorizontalCoordinate.Equality
  fullName: Vim.Math3d.HorizontalCoordinate.Equality
- uid: Vim.Math3d.HorizontalCoordinate.op_Inequality*
  commentId: Overload:Vim.Math3d.HorizontalCoordinate.op_Inequality
  name: Inequality
  nameWithType: HorizontalCoordinate.Inequality
  fullName: Vim.Math3d.HorizontalCoordinate.Inequality
- uid: Vim.Math3d.HorizontalCoordinate.op_Implicit*
  commentId: Overload:Vim.Math3d.HorizontalCoordinate.op_Implicit
  name: Implicit
  nameWithType: HorizontalCoordinate.Implicit
  fullName: Vim.Math3d.HorizontalCoordinate.Implicit
  nameWithType.vb: HorizontalCoordinate.Widening
  fullName.vb: Vim.Math3d.HorizontalCoordinate.Widening
  name.vb: Widening
- uid: Vim.Math3d.HorizontalCoordinate.AlmostEquals*
  commentId: Overload:Vim.Math3d.HorizontalCoordinate.AlmostEquals
  name: AlmostEquals
  nameWithType: HorizontalCoordinate.AlmostEquals
  fullName: Vim.Math3d.HorizontalCoordinate.AlmostEquals
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Vim.Math3d.HorizontalCoordinate.SetAzimuth*
  commentId: Overload:Vim.Math3d.HorizontalCoordinate.SetAzimuth
  name: SetAzimuth
  nameWithType: HorizontalCoordinate.SetAzimuth
  fullName: Vim.Math3d.HorizontalCoordinate.SetAzimuth
- uid: Vim.Math3d.HorizontalCoordinate.SetInclination*
  commentId: Overload:Vim.Math3d.HorizontalCoordinate.SetInclination
  name: SetInclination
  nameWithType: HorizontalCoordinate.SetInclination
  fullName: Vim.Math3d.HorizontalCoordinate.SetInclination
- uid: Vim.Math3d.HorizontalCoordinate.op_Addition*
  commentId: Overload:Vim.Math3d.HorizontalCoordinate.op_Addition
  name: Addition
  nameWithType: HorizontalCoordinate.Addition
  fullName: Vim.Math3d.HorizontalCoordinate.Addition
- uid: Vim.Math3d.HorizontalCoordinate.op_Subtraction*
  commentId: Overload:Vim.Math3d.HorizontalCoordinate.op_Subtraction
  name: Subtraction
  nameWithType: HorizontalCoordinate.Subtraction
  fullName: Vim.Math3d.HorizontalCoordinate.Subtraction
- uid: Vim.Math3d.HorizontalCoordinate.op_Multiply*
  commentId: Overload:Vim.Math3d.HorizontalCoordinate.op_Multiply
  name: Multiply
  nameWithType: HorizontalCoordinate.Multiply
  fullName: Vim.Math3d.HorizontalCoordinate.Multiply
- uid: Vim.Math3d.HorizontalCoordinate.op_Division*
  commentId: Overload:Vim.Math3d.HorizontalCoordinate.op_Division
  name: Division
  nameWithType: HorizontalCoordinate.Division
  fullName: Vim.Math3d.HorizontalCoordinate.Division
- uid: Vim.Math3d.HorizontalCoordinate.op_UnaryNegation*
  commentId: Overload:Vim.Math3d.HorizontalCoordinate.op_UnaryNegation
  name: UnaryNegation
  nameWithType: HorizontalCoordinate.UnaryNegation
  fullName: Vim.Math3d.HorizontalCoordinate.UnaryNegation
- uid: Vim.Math3d.HorizontalCoordinate.Dot*
  commentId: Overload:Vim.Math3d.HorizontalCoordinate.Dot
  name: Dot
  nameWithType: HorizontalCoordinate.Dot
  fullName: Vim.Math3d.HorizontalCoordinate.Dot
- uid: Vim.Math3d.HorizontalCoordinate.AlmostZero*
  commentId: Overload:Vim.Math3d.HorizontalCoordinate.AlmostZero
  name: AlmostZero
  nameWithType: HorizontalCoordinate.AlmostZero
  fullName: Vim.Math3d.HorizontalCoordinate.AlmostZero
- uid: Vim.Math3d.HorizontalCoordinate.AnyComponentNegative*
  commentId: Overload:Vim.Math3d.HorizontalCoordinate.AnyComponentNegative
  name: AnyComponentNegative
  nameWithType: HorizontalCoordinate.AnyComponentNegative
  fullName: Vim.Math3d.HorizontalCoordinate.AnyComponentNegative
- uid: Vim.Math3d.HorizontalCoordinate.MinComponent*
  commentId: Overload:Vim.Math3d.HorizontalCoordinate.MinComponent
  name: MinComponent
  nameWithType: HorizontalCoordinate.MinComponent
  fullName: Vim.Math3d.HorizontalCoordinate.MinComponent
- uid: Vim.Math3d.HorizontalCoordinate.MaxComponent*
  commentId: Overload:Vim.Math3d.HorizontalCoordinate.MaxComponent
  name: MaxComponent
  nameWithType: HorizontalCoordinate.MaxComponent
  fullName: Vim.Math3d.HorizontalCoordinate.MaxComponent
- uid: Vim.Math3d.HorizontalCoordinate.SumComponents*
  commentId: Overload:Vim.Math3d.HorizontalCoordinate.SumComponents
  name: SumComponents
  nameWithType: HorizontalCoordinate.SumComponents
  fullName: Vim.Math3d.HorizontalCoordinate.SumComponents
- uid: Vim.Math3d.HorizontalCoordinate.SumSqrComponents*
  commentId: Overload:Vim.Math3d.HorizontalCoordinate.SumSqrComponents
  name: SumSqrComponents
  nameWithType: HorizontalCoordinate.SumSqrComponents
  fullName: Vim.Math3d.HorizontalCoordinate.SumSqrComponents
- uid: Vim.Math3d.HorizontalCoordinate.ProductComponents*
  commentId: Overload:Vim.Math3d.HorizontalCoordinate.ProductComponents
  name: ProductComponents
  nameWithType: HorizontalCoordinate.ProductComponents
  fullName: Vim.Math3d.HorizontalCoordinate.ProductComponents
- uid: Vim.Math3d.HorizontalCoordinate.GetComponent*
  commentId: Overload:Vim.Math3d.HorizontalCoordinate.GetComponent
  name: GetComponent
  nameWithType: HorizontalCoordinate.GetComponent
  fullName: Vim.Math3d.HorizontalCoordinate.GetComponent
- uid: Vim.Math3d.HorizontalCoordinate.MagnitudeSquared*
  commentId: Overload:Vim.Math3d.HorizontalCoordinate.MagnitudeSquared
  name: MagnitudeSquared
  nameWithType: HorizontalCoordinate.MagnitudeSquared
  fullName: Vim.Math3d.HorizontalCoordinate.MagnitudeSquared
- uid: Vim.Math3d.HorizontalCoordinate.Magnitude*
  commentId: Overload:Vim.Math3d.HorizontalCoordinate.Magnitude
  name: Magnitude
  nameWithType: HorizontalCoordinate.Magnitude
  fullName: Vim.Math3d.HorizontalCoordinate.Magnitude
- uid: Vim.Math3d.HorizontalCoordinate.IsNaN*
  commentId: Overload:Vim.Math3d.HorizontalCoordinate.IsNaN
  name: IsNaN
  nameWithType: HorizontalCoordinate.IsNaN
  fullName: Vim.Math3d.HorizontalCoordinate.IsNaN
- uid: Vim.Math3d.HorizontalCoordinate.IsInfinity*
  commentId: Overload:Vim.Math3d.HorizontalCoordinate.IsInfinity
  name: IsInfinity
  nameWithType: HorizontalCoordinate.IsInfinity
  fullName: Vim.Math3d.HorizontalCoordinate.IsInfinity
- uid: Vim.Math3d.HorizontalCoordinate.CompareTo*
  commentId: Overload:Vim.Math3d.HorizontalCoordinate.CompareTo
  name: CompareTo
  nameWithType: HorizontalCoordinate.CompareTo
  fullName: Vim.Math3d.HorizontalCoordinate.CompareTo
- uid: System.IComparable{Vim.Math3d.HorizontalCoordinate}.CompareTo(Vim.Math3d.HorizontalCoordinate)
  commentId: M:System.IComparable{Vim.Math3d.HorizontalCoordinate}.CompareTo(Vim.Math3d.HorizontalCoordinate)
  parent: System.IComparable{Vim.Math3d.HorizontalCoordinate}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(HorizontalCoordinate)
  nameWithType: IComparable<HorizontalCoordinate>.CompareTo(HorizontalCoordinate)
  fullName: System.IComparable<Vim.Math3d.HorizontalCoordinate>.CompareTo(Vim.Math3d.HorizontalCoordinate)
  nameWithType.vb: IComparable(Of HorizontalCoordinate).CompareTo(HorizontalCoordinate)
  fullName.vb: System.IComparable(Of Vim.Math3d.HorizontalCoordinate).CompareTo(Vim.Math3d.HorizontalCoordinate)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<HorizontalCoordinate>.CompareTo
    fullName: System.IComparable<Vim.Math3d.HorizontalCoordinate>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.HorizontalCoordinate
    name: HorizontalCoordinate
    nameWithType: HorizontalCoordinate
    fullName: Vim.Math3d.HorizontalCoordinate
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of HorizontalCoordinate).CompareTo
    fullName: System.IComparable(Of Vim.Math3d.HorizontalCoordinate).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.HorizontalCoordinate
    name: HorizontalCoordinate
    nameWithType: HorizontalCoordinate
    fullName: Vim.Math3d.HorizontalCoordinate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable`1.CompareTo(`0)
  commentId: M:System.IComparable`1.CompareTo(`0)
  isExternal: true
  name: CompareTo(T)
  nameWithType: IComparable<T>.CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
  fullName.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<T>.CompareTo
    fullName: System.IComparable<T>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of T).CompareTo
    fullName: System.IComparable(Of T).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.HorizontalCoordinate.op_LessThan*
  commentId: Overload:Vim.Math3d.HorizontalCoordinate.op_LessThan
  name: LessThan
  nameWithType: HorizontalCoordinate.LessThan
  fullName: Vim.Math3d.HorizontalCoordinate.LessThan
- uid: Vim.Math3d.HorizontalCoordinate.op_LessThanOrEqual*
  commentId: Overload:Vim.Math3d.HorizontalCoordinate.op_LessThanOrEqual
  name: LessThanOrEqual
  nameWithType: HorizontalCoordinate.LessThanOrEqual
  fullName: Vim.Math3d.HorizontalCoordinate.LessThanOrEqual
- uid: Vim.Math3d.HorizontalCoordinate.op_GreaterThan*
  commentId: Overload:Vim.Math3d.HorizontalCoordinate.op_GreaterThan
  name: GreaterThan
  nameWithType: HorizontalCoordinate.GreaterThan
  fullName: Vim.Math3d.HorizontalCoordinate.GreaterThan
- uid: Vim.Math3d.HorizontalCoordinate.op_GreaterThanOrEqual*
  commentId: Overload:Vim.Math3d.HorizontalCoordinate.op_GreaterThanOrEqual
  name: GreaterThanOrEqual
  nameWithType: HorizontalCoordinate.GreaterThanOrEqual
  fullName: Vim.Math3d.HorizontalCoordinate.GreaterThanOrEqual

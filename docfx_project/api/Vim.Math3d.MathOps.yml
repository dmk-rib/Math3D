### YamlMime:ManagedReference
items:
- uid: Vim.Math3d.MathOps
  commentId: T:Vim.Math3d.MathOps
  id: MathOps
  parent: Vim.Math3d
  children:
  - Vim.Math3d.MathOps.Abs(System.Double)
  - Vim.Math3d.MathOps.Abs(System.Int32)
  - Vim.Math3d.MathOps.Abs(System.Int64)
  - Vim.Math3d.MathOps.Abs(System.Single)
  - Vim.Math3d.MathOps.Abs(Vim.Math3d.DVector2)
  - Vim.Math3d.MathOps.Abs(Vim.Math3d.DVector3)
  - Vim.Math3d.MathOps.Abs(Vim.Math3d.DVector4)
  - Vim.Math3d.MathOps.Abs(Vim.Math3d.Vector2)
  - Vim.Math3d.MathOps.Abs(Vim.Math3d.Vector3)
  - Vim.Math3d.MathOps.Abs(Vim.Math3d.Vector4)
  - Vim.Math3d.MathOps.Acos(System.Double)
  - Vim.Math3d.MathOps.Acos(System.Single)
  - Vim.Math3d.MathOps.Acos(Vim.Math3d.DVector2)
  - Vim.Math3d.MathOps.Acos(Vim.Math3d.DVector3)
  - Vim.Math3d.MathOps.Acos(Vim.Math3d.DVector4)
  - Vim.Math3d.MathOps.Acos(Vim.Math3d.Vector2)
  - Vim.Math3d.MathOps.Acos(Vim.Math3d.Vector3)
  - Vim.Math3d.MathOps.Acos(Vim.Math3d.Vector4)
  - Vim.Math3d.MathOps.Add(System.Double,System.Double)
  - Vim.Math3d.MathOps.Add(System.Int32,System.Int32)
  - Vim.Math3d.MathOps.Add(System.Int64,System.Int64)
  - Vim.Math3d.MathOps.Add(System.Single,System.Single)
  - Vim.Math3d.MathOps.Add(Vim.Math3d.DVector2,Vim.Math3d.DVector2)
  - Vim.Math3d.MathOps.Add(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  - Vim.Math3d.MathOps.Add(Vim.Math3d.DVector4,Vim.Math3d.DVector4)
  - Vim.Math3d.MathOps.Add(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  - Vim.Math3d.MathOps.Add(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  - Vim.Math3d.MathOps.Add(Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  - Vim.Math3d.MathOps.AlmostEquals(System.Double,System.Double,System.Single)
  - Vim.Math3d.MathOps.AlmostEquals(System.Single,System.Single,System.Single)
  - Vim.Math3d.MathOps.AlmostZero(System.Double,System.Single)
  - Vim.Math3d.MathOps.AlmostZero(System.Single,System.Single)
  - Vim.Math3d.MathOps.Along(Vim.Math3d.Vector3,System.Single)
  - Vim.Math3d.MathOps.AlongX(System.Single)
  - Vim.Math3d.MathOps.AlongY(System.Single)
  - Vim.Math3d.MathOps.AlongZ(System.Single)
  - Vim.Math3d.MathOps.And(System.Boolean,System.Boolean)
  - Vim.Math3d.MathOps.And(System.Int32,System.Int32)
  - Vim.Math3d.MathOps.And(System.Int64,System.Int64)
  - Vim.Math3d.MathOps.Angle(Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single)
  - Vim.Math3d.MathOps.Asin(System.Double)
  - Vim.Math3d.MathOps.Asin(System.Single)
  - Vim.Math3d.MathOps.Asin(Vim.Math3d.DVector2)
  - Vim.Math3d.MathOps.Asin(Vim.Math3d.DVector3)
  - Vim.Math3d.MathOps.Asin(Vim.Math3d.DVector4)
  - Vim.Math3d.MathOps.Asin(Vim.Math3d.Vector2)
  - Vim.Math3d.MathOps.Asin(Vim.Math3d.Vector3)
  - Vim.Math3d.MathOps.Asin(Vim.Math3d.Vector4)
  - Vim.Math3d.MathOps.Atan(System.Double)
  - Vim.Math3d.MathOps.Atan(System.Single)
  - Vim.Math3d.MathOps.Atan(Vim.Math3d.DVector2)
  - Vim.Math3d.MathOps.Atan(Vim.Math3d.DVector3)
  - Vim.Math3d.MathOps.Atan(Vim.Math3d.DVector4)
  - Vim.Math3d.MathOps.Atan(Vim.Math3d.Vector2)
  - Vim.Math3d.MathOps.Atan(Vim.Math3d.Vector3)
  - Vim.Math3d.MathOps.Atan(Vim.Math3d.Vector4)
  - Vim.Math3d.MathOps.Average(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector2})
  - Vim.Math3d.MathOps.Average(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector3})
  - Vim.Math3d.MathOps.Average(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector4})
  - Vim.Math3d.MathOps.Average(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector2})
  - Vim.Math3d.MathOps.Average(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector3})
  - Vim.Math3d.MathOps.Average(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector4})
  - Vim.Math3d.MathOps.Average(System.Double,System.Double)
  - Vim.Math3d.MathOps.Average(System.Single,System.Single)
  - Vim.Math3d.MathOps.Average(Vim.Math3d.DVector2,Vim.Math3d.DVector2)
  - Vim.Math3d.MathOps.Average(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  - Vim.Math3d.MathOps.Average(Vim.Math3d.DVector4,Vim.Math3d.DVector4)
  - Vim.Math3d.MathOps.Average(Vim.Math3d.Stats{Vim.Math3d.DVector2})
  - Vim.Math3d.MathOps.Average(Vim.Math3d.Stats{Vim.Math3d.DVector3})
  - Vim.Math3d.MathOps.Average(Vim.Math3d.Stats{Vim.Math3d.DVector4})
  - Vim.Math3d.MathOps.Average(Vim.Math3d.Stats{Vim.Math3d.Vector2})
  - Vim.Math3d.MathOps.Average(Vim.Math3d.Stats{Vim.Math3d.Vector3})
  - Vim.Math3d.MathOps.Average(Vim.Math3d.Stats{Vim.Math3d.Vector4})
  - Vim.Math3d.MathOps.Average(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  - Vim.Math3d.MathOps.Average(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  - Vim.Math3d.MathOps.Average(Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  - Vim.Math3d.MathOps.Barycentric(System.Double,System.Double,System.Double,System.Single,System.Single)
  - Vim.Math3d.MathOps.Barycentric(System.Single,System.Single,System.Single,System.Single,System.Single)
  - Vim.Math3d.MathOps.Barycentric(Vim.Math3d.DVector2,Vim.Math3d.DVector2,Vim.Math3d.DVector2,System.Single,System.Single)
  - Vim.Math3d.MathOps.Barycentric(Vim.Math3d.DVector3,Vim.Math3d.DVector3,Vim.Math3d.DVector3,System.Single,System.Single)
  - Vim.Math3d.MathOps.Barycentric(Vim.Math3d.DVector4,Vim.Math3d.DVector4,Vim.Math3d.DVector4,System.Single,System.Single)
  - Vim.Math3d.MathOps.Barycentric(Vim.Math3d.Vector2,Vim.Math3d.Vector2,Vim.Math3d.Vector2,System.Single,System.Single)
  - Vim.Math3d.MathOps.Barycentric(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single,System.Single)
  - Vim.Math3d.MathOps.Barycentric(Vim.Math3d.Vector4,Vim.Math3d.Vector4,Vim.Math3d.Vector4,System.Single,System.Single)
  - Vim.Math3d.MathOps.CatmullRom(System.Single,System.Single,System.Single,System.Single,System.Single)
  - Vim.Math3d.MathOps.CatmullRom(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single)
  - Vim.Math3d.MathOps.Ceiling(System.Double)
  - Vim.Math3d.MathOps.Ceiling(System.Single)
  - Vim.Math3d.MathOps.Ceiling(Vim.Math3d.DVector2)
  - Vim.Math3d.MathOps.Ceiling(Vim.Math3d.DVector3)
  - Vim.Math3d.MathOps.Ceiling(Vim.Math3d.DVector4)
  - Vim.Math3d.MathOps.Ceiling(Vim.Math3d.Vector2)
  - Vim.Math3d.MathOps.Ceiling(Vim.Math3d.Vector3)
  - Vim.Math3d.MathOps.Ceiling(Vim.Math3d.Vector4)
  - Vim.Math3d.MathOps.Clamp(System.Double,System.Double,System.Double)
  - Vim.Math3d.MathOps.Clamp(System.Int32,System.Int32,System.Int32)
  - Vim.Math3d.MathOps.Clamp(System.Int64,System.Int64,System.Int64)
  - Vim.Math3d.MathOps.Clamp(System.Single,System.Single,System.Single)
  - Vim.Math3d.MathOps.Clamp(Vim.Math3d.DVector2,Vim.Math3d.DVector2,Vim.Math3d.DVector2)
  - Vim.Math3d.MathOps.Clamp(Vim.Math3d.DVector3,Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  - Vim.Math3d.MathOps.Clamp(Vim.Math3d.DVector4,Vim.Math3d.DVector4,Vim.Math3d.DVector4)
  - Vim.Math3d.MathOps.Clamp(Vim.Math3d.Vector2,Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  - Vim.Math3d.MathOps.Clamp(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  - Vim.Math3d.MathOps.Clamp(Vim.Math3d.Vector4,Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  - Vim.Math3d.MathOps.ClampLower(System.Double,System.Double)
  - Vim.Math3d.MathOps.ClampLower(System.Single,System.Single)
  - Vim.Math3d.MathOps.ClampLower(Vim.Math3d.DVector2,Vim.Math3d.DVector2)
  - Vim.Math3d.MathOps.ClampLower(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  - Vim.Math3d.MathOps.ClampLower(Vim.Math3d.DVector4,Vim.Math3d.DVector4)
  - Vim.Math3d.MathOps.ClampLower(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  - Vim.Math3d.MathOps.ClampLower(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  - Vim.Math3d.MathOps.ClampLower(Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  - Vim.Math3d.MathOps.ClampUpper(System.Double,System.Double)
  - Vim.Math3d.MathOps.ClampUpper(System.Single,System.Single)
  - Vim.Math3d.MathOps.ClampUpper(Vim.Math3d.DVector2,Vim.Math3d.DVector2)
  - Vim.Math3d.MathOps.ClampUpper(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  - Vim.Math3d.MathOps.ClampUpper(Vim.Math3d.DVector4,Vim.Math3d.DVector4)
  - Vim.Math3d.MathOps.ClampUpper(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  - Vim.Math3d.MathOps.ClampUpper(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  - Vim.Math3d.MathOps.ClampUpper(Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  - Vim.Math3d.MathOps.Colinear(Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single)
  - Vim.Math3d.MathOps.Coplanar(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single)
  - Vim.Math3d.MathOps.Cos(System.Double)
  - Vim.Math3d.MathOps.Cos(System.Single)
  - Vim.Math3d.MathOps.Cos(Vim.Math3d.DVector2)
  - Vim.Math3d.MathOps.Cos(Vim.Math3d.DVector3)
  - Vim.Math3d.MathOps.Cos(Vim.Math3d.DVector4)
  - Vim.Math3d.MathOps.Cos(Vim.Math3d.Vector2)
  - Vim.Math3d.MathOps.Cos(Vim.Math3d.Vector3)
  - Vim.Math3d.MathOps.Cos(Vim.Math3d.Vector4)
  - Vim.Math3d.MathOps.Cosh(System.Double)
  - Vim.Math3d.MathOps.Cosh(System.Single)
  - Vim.Math3d.MathOps.Cosh(Vim.Math3d.DVector2)
  - Vim.Math3d.MathOps.Cosh(Vim.Math3d.DVector3)
  - Vim.Math3d.MathOps.Cosh(Vim.Math3d.DVector4)
  - Vim.Math3d.MathOps.Cosh(Vim.Math3d.Vector2)
  - Vim.Math3d.MathOps.Cosh(Vim.Math3d.Vector3)
  - Vim.Math3d.MathOps.Cosh(Vim.Math3d.Vector4)
  - Vim.Math3d.MathOps.Cross(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  - Vim.Math3d.MathOps.Cube(System.Double)
  - Vim.Math3d.MathOps.Cube(System.Int32)
  - Vim.Math3d.MathOps.Cube(System.Int64)
  - Vim.Math3d.MathOps.Cube(System.Single)
  - Vim.Math3d.MathOps.Cube(Vim.Math3d.DVector2)
  - Vim.Math3d.MathOps.Cube(Vim.Math3d.DVector3)
  - Vim.Math3d.MathOps.Cube(Vim.Math3d.DVector4)
  - Vim.Math3d.MathOps.Cube(Vim.Math3d.Vector2)
  - Vim.Math3d.MathOps.Cube(Vim.Math3d.Vector3)
  - Vim.Math3d.MathOps.Cube(Vim.Math3d.Vector4)
  - Vim.Math3d.MathOps.Distance(System.Double,System.Double)
  - Vim.Math3d.MathOps.Distance(System.Single,System.Single)
  - Vim.Math3d.MathOps.Distance(Vim.Math3d.DVector2,Vim.Math3d.DVector2)
  - Vim.Math3d.MathOps.Distance(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  - Vim.Math3d.MathOps.Distance(Vim.Math3d.DVector4,Vim.Math3d.DVector4)
  - Vim.Math3d.MathOps.Distance(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  - Vim.Math3d.MathOps.Distance(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  - Vim.Math3d.MathOps.Distance(Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  - Vim.Math3d.MathOps.DistanceSquared(Vim.Math3d.DVector2,Vim.Math3d.DVector2)
  - Vim.Math3d.MathOps.DistanceSquared(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  - Vim.Math3d.MathOps.DistanceSquared(Vim.Math3d.DVector4,Vim.Math3d.DVector4)
  - Vim.Math3d.MathOps.DistanceSquared(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  - Vim.Math3d.MathOps.DistanceSquared(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  - Vim.Math3d.MathOps.DistanceSquared(Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  - Vim.Math3d.MathOps.Divide(System.Double,System.Double)
  - Vim.Math3d.MathOps.Divide(System.Int32,System.Int32)
  - Vim.Math3d.MathOps.Divide(System.Int64,System.Int64)
  - Vim.Math3d.MathOps.Divide(System.Single,System.Single)
  - Vim.Math3d.MathOps.Divide(Vim.Math3d.DVector2,Vim.Math3d.DVector2)
  - Vim.Math3d.MathOps.Divide(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  - Vim.Math3d.MathOps.Divide(Vim.Math3d.DVector4,Vim.Math3d.DVector4)
  - Vim.Math3d.MathOps.Divide(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  - Vim.Math3d.MathOps.Divide(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  - Vim.Math3d.MathOps.Divide(Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  - Vim.Math3d.MathOps.DivideRoundUp(System.Int32,System.Int32)
  - Vim.Math3d.MathOps.DivideRoundUp(System.Int64,System.Int64)
  - Vim.Math3d.MathOps.Dot(Vim.Math3d.DVector2,Vim.Math3d.DVector2)
  - Vim.Math3d.MathOps.Dot(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  - Vim.Math3d.MathOps.Dot(Vim.Math3d.DVector4,Vim.Math3d.DVector4)
  - Vim.Math3d.MathOps.Dot(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  - Vim.Math3d.MathOps.Dot(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  - Vim.Math3d.MathOps.Dot(Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  - Vim.Math3d.MathOps.Eq(System.Boolean,System.Boolean)
  - Vim.Math3d.MathOps.Eq(System.Double,System.Double)
  - Vim.Math3d.MathOps.Eq(System.Int32,System.Int32)
  - Vim.Math3d.MathOps.Eq(System.Int64,System.Int64)
  - Vim.Math3d.MathOps.Eq(System.Single,System.Single)
  - Vim.Math3d.MathOps.Exp(System.Double)
  - Vim.Math3d.MathOps.Exp(System.Single)
  - Vim.Math3d.MathOps.Exp(Vim.Math3d.DVector2)
  - Vim.Math3d.MathOps.Exp(Vim.Math3d.DVector3)
  - Vim.Math3d.MathOps.Exp(Vim.Math3d.DVector4)
  - Vim.Math3d.MathOps.Exp(Vim.Math3d.Vector2)
  - Vim.Math3d.MathOps.Exp(Vim.Math3d.Vector3)
  - Vim.Math3d.MathOps.Exp(Vim.Math3d.Vector4)
  - Vim.Math3d.MathOps.Extents(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector2})
  - Vim.Math3d.MathOps.Extents(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector3})
  - Vim.Math3d.MathOps.Extents(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector4})
  - Vim.Math3d.MathOps.Extents(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector2})
  - Vim.Math3d.MathOps.Extents(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector3})
  - Vim.Math3d.MathOps.Extents(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector4})
  - Vim.Math3d.MathOps.Extents(Vim.Math3d.Stats{Vim.Math3d.DVector2})
  - Vim.Math3d.MathOps.Extents(Vim.Math3d.Stats{Vim.Math3d.DVector3})
  - Vim.Math3d.MathOps.Extents(Vim.Math3d.Stats{Vim.Math3d.DVector4})
  - Vim.Math3d.MathOps.Extents(Vim.Math3d.Stats{Vim.Math3d.Vector2})
  - Vim.Math3d.MathOps.Extents(Vim.Math3d.Stats{Vim.Math3d.Vector3})
  - Vim.Math3d.MathOps.Extents(Vim.Math3d.Stats{Vim.Math3d.Vector4})
  - Vim.Math3d.MathOps.Floor(System.Double)
  - Vim.Math3d.MathOps.Floor(System.Single)
  - Vim.Math3d.MathOps.Floor(Vim.Math3d.DVector2)
  - Vim.Math3d.MathOps.Floor(Vim.Math3d.DVector3)
  - Vim.Math3d.MathOps.Floor(Vim.Math3d.DVector4)
  - Vim.Math3d.MathOps.Floor(Vim.Math3d.Vector2)
  - Vim.Math3d.MathOps.Floor(Vim.Math3d.Vector3)
  - Vim.Math3d.MathOps.Floor(Vim.Math3d.Vector4)
  - Vim.Math3d.MathOps.Gt(System.Double,System.Double)
  - Vim.Math3d.MathOps.Gt(System.Int32,System.Int32)
  - Vim.Math3d.MathOps.Gt(System.Int64,System.Int64)
  - Vim.Math3d.MathOps.Gt(System.Single,System.Single)
  - Vim.Math3d.MathOps.GtEq(System.Double,System.Double)
  - Vim.Math3d.MathOps.GtEq(System.Int32,System.Int32)
  - Vim.Math3d.MathOps.GtEq(System.Int64,System.Int64)
  - Vim.Math3d.MathOps.GtEq(System.Single,System.Single)
  - Vim.Math3d.MathOps.Hermite(System.Single,System.Single,System.Single,System.Single,System.Single)
  - Vim.Math3d.MathOps.Hermite(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single)
  - Vim.Math3d.MathOps.Inverse(System.Double)
  - Vim.Math3d.MathOps.Inverse(System.Single)
  - Vim.Math3d.MathOps.Inverse(Vim.Math3d.DVector2)
  - Vim.Math3d.MathOps.Inverse(Vim.Math3d.DVector3)
  - Vim.Math3d.MathOps.Inverse(Vim.Math3d.DVector4)
  - Vim.Math3d.MathOps.Inverse(Vim.Math3d.Matrix4x4)
  - Vim.Math3d.MathOps.Inverse(Vim.Math3d.Vector2)
  - Vim.Math3d.MathOps.Inverse(Vim.Math3d.Vector3)
  - Vim.Math3d.MathOps.Inverse(Vim.Math3d.Vector4)
  - Vim.Math3d.MathOps.InverseLerp(System.Double,System.Double,System.Double)
  - Vim.Math3d.MathOps.InverseLerp(System.Single,System.Single,System.Single)
  - Vim.Math3d.MathOps.InverseLerp(Vim.Math3d.DVector2,Vim.Math3d.DVector2,Vim.Math3d.DVector2)
  - Vim.Math3d.MathOps.InverseLerp(Vim.Math3d.DVector3,Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  - Vim.Math3d.MathOps.InverseLerp(Vim.Math3d.DVector4,Vim.Math3d.DVector4,Vim.Math3d.DVector4)
  - Vim.Math3d.MathOps.InverseLerp(Vim.Math3d.Vector2,Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  - Vim.Math3d.MathOps.InverseLerp(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  - Vim.Math3d.MathOps.InverseLerp(Vim.Math3d.Vector4,Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  - Vim.Math3d.MathOps.IsBackFace(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  - Vim.Math3d.MathOps.IsEven(System.Int32)
  - Vim.Math3d.MathOps.IsEven(System.Int64)
  - Vim.Math3d.MathOps.IsInfinity(System.Double)
  - Vim.Math3d.MathOps.IsInfinity(System.Int32)
  - Vim.Math3d.MathOps.IsInfinity(System.Int64)
  - Vim.Math3d.MathOps.IsInfinity(System.Single)
  - Vim.Math3d.MathOps.IsNaN(System.Double)
  - Vim.Math3d.MathOps.IsNaN(System.Int32)
  - Vim.Math3d.MathOps.IsNaN(System.Int64)
  - Vim.Math3d.MathOps.IsNaN(System.Single)
  - Vim.Math3d.MathOps.IsNonZeroAndValid(System.Single,System.Single)
  - Vim.Math3d.MathOps.IsNonZeroAndValid(Vim.Math3d.Vector3)
  - Vim.Math3d.MathOps.IsOdd(System.Int32)
  - Vim.Math3d.MathOps.IsOdd(System.Int64)
  - Vim.Math3d.MathOps.IsPerpendicular(Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single)
  - Vim.Math3d.MathOps.IsPowerOfTwo(System.Int32)
  - Vim.Math3d.MathOps.IsPowerOfTwo(System.Int64)
  - Vim.Math3d.MathOps.IsZeroOrInvalid(Vim.Math3d.Vector3)
  - Vim.Math3d.MathOps.Length(Vim.Math3d.DVector2)
  - Vim.Math3d.MathOps.Length(Vim.Math3d.DVector3)
  - Vim.Math3d.MathOps.Length(Vim.Math3d.DVector4)
  - Vim.Math3d.MathOps.Length(Vim.Math3d.Vector2)
  - Vim.Math3d.MathOps.Length(Vim.Math3d.Vector3)
  - Vim.Math3d.MathOps.Length(Vim.Math3d.Vector4)
  - Vim.Math3d.MathOps.LengthSquared(Vim.Math3d.DVector2)
  - Vim.Math3d.MathOps.LengthSquared(Vim.Math3d.DVector3)
  - Vim.Math3d.MathOps.LengthSquared(Vim.Math3d.DVector4)
  - Vim.Math3d.MathOps.LengthSquared(Vim.Math3d.Vector2)
  - Vim.Math3d.MathOps.LengthSquared(Vim.Math3d.Vector3)
  - Vim.Math3d.MathOps.LengthSquared(Vim.Math3d.Vector4)
  - Vim.Math3d.MathOps.Lerp(System.Double,System.Double,System.Single)
  - Vim.Math3d.MathOps.Lerp(System.Single,System.Single,System.Single)
  - Vim.Math3d.MathOps.Lerp(Vim.Math3d.DVector2,Vim.Math3d.DVector2,System.Single)
  - Vim.Math3d.MathOps.Lerp(Vim.Math3d.DVector3,Vim.Math3d.DVector3,System.Single)
  - Vim.Math3d.MathOps.Lerp(Vim.Math3d.DVector4,Vim.Math3d.DVector4,System.Single)
  - Vim.Math3d.MathOps.Lerp(Vim.Math3d.Vector2,Vim.Math3d.Vector2,System.Single)
  - Vim.Math3d.MathOps.Lerp(Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single)
  - Vim.Math3d.MathOps.Lerp(Vim.Math3d.Vector4,Vim.Math3d.Vector4,System.Single)
  - Vim.Math3d.MathOps.LerpPrecise(System.Double,System.Double,System.Single)
  - Vim.Math3d.MathOps.LerpPrecise(System.Single,System.Single,System.Single)
  - Vim.Math3d.MathOps.LerpPrecise(Vim.Math3d.DVector2,Vim.Math3d.DVector2,System.Single)
  - Vim.Math3d.MathOps.LerpPrecise(Vim.Math3d.DVector3,Vim.Math3d.DVector3,System.Single)
  - Vim.Math3d.MathOps.LerpPrecise(Vim.Math3d.DVector4,Vim.Math3d.DVector4,System.Single)
  - Vim.Math3d.MathOps.LerpPrecise(Vim.Math3d.Vector2,Vim.Math3d.Vector2,System.Single)
  - Vim.Math3d.MathOps.LerpPrecise(Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single)
  - Vim.Math3d.MathOps.LerpPrecise(Vim.Math3d.Vector4,Vim.Math3d.Vector4,System.Single)
  - Vim.Math3d.MathOps.Log(System.Double)
  - Vim.Math3d.MathOps.Log(System.Single)
  - Vim.Math3d.MathOps.Log(Vim.Math3d.DVector2)
  - Vim.Math3d.MathOps.Log(Vim.Math3d.DVector3)
  - Vim.Math3d.MathOps.Log(Vim.Math3d.DVector4)
  - Vim.Math3d.MathOps.Log(Vim.Math3d.Vector2)
  - Vim.Math3d.MathOps.Log(Vim.Math3d.Vector3)
  - Vim.Math3d.MathOps.Log(Vim.Math3d.Vector4)
  - Vim.Math3d.MathOps.Log10(System.Double)
  - Vim.Math3d.MathOps.Log10(System.Single)
  - Vim.Math3d.MathOps.Log10(Vim.Math3d.DVector2)
  - Vim.Math3d.MathOps.Log10(Vim.Math3d.DVector3)
  - Vim.Math3d.MathOps.Log10(Vim.Math3d.DVector4)
  - Vim.Math3d.MathOps.Log10(Vim.Math3d.Vector2)
  - Vim.Math3d.MathOps.Log10(Vim.Math3d.Vector3)
  - Vim.Math3d.MathOps.Log10(Vim.Math3d.Vector4)
  - Vim.Math3d.MathOps.Lt(System.Double,System.Double)
  - Vim.Math3d.MathOps.Lt(System.Int32,System.Int32)
  - Vim.Math3d.MathOps.Lt(System.Int64,System.Int64)
  - Vim.Math3d.MathOps.Lt(System.Single,System.Single)
  - Vim.Math3d.MathOps.LtEq(System.Double,System.Double)
  - Vim.Math3d.MathOps.LtEq(System.Int32,System.Int32)
  - Vim.Math3d.MathOps.LtEq(System.Int64,System.Int64)
  - Vim.Math3d.MathOps.LtEq(System.Single,System.Single)
  - Vim.Math3d.MathOps.Magnitude(System.Double)
  - Vim.Math3d.MathOps.Magnitude(System.Int32)
  - Vim.Math3d.MathOps.Magnitude(System.Int64)
  - Vim.Math3d.MathOps.Magnitude(System.Single)
  - Vim.Math3d.MathOps.MagnitudeSquared(System.Double)
  - Vim.Math3d.MathOps.MagnitudeSquared(System.Int32)
  - Vim.Math3d.MathOps.MagnitudeSquared(System.Int64)
  - Vim.Math3d.MathOps.MagnitudeSquared(System.Single)
  - Vim.Math3d.MathOps.Max(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector2})
  - Vim.Math3d.MathOps.Max(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector3})
  - Vim.Math3d.MathOps.Max(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector4})
  - Vim.Math3d.MathOps.Max(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector2})
  - Vim.Math3d.MathOps.Max(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector3})
  - Vim.Math3d.MathOps.Max(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector4})
  - Vim.Math3d.MathOps.Max(System.Double,System.Double)
  - Vim.Math3d.MathOps.Max(System.Int32,System.Int32)
  - Vim.Math3d.MathOps.Max(System.Int64,System.Int64)
  - Vim.Math3d.MathOps.Max(System.Single,System.Single)
  - Vim.Math3d.MathOps.Max(Vim.Math3d.DVector2,Vim.Math3d.DVector2)
  - Vim.Math3d.MathOps.Max(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  - Vim.Math3d.MathOps.Max(Vim.Math3d.DVector4,Vim.Math3d.DVector4)
  - Vim.Math3d.MathOps.Max(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  - Vim.Math3d.MathOps.Max(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  - Vim.Math3d.MathOps.Max(Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  - Vim.Math3d.MathOps.Middle(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector2})
  - Vim.Math3d.MathOps.Middle(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector3})
  - Vim.Math3d.MathOps.Middle(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector4})
  - Vim.Math3d.MathOps.Middle(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector2})
  - Vim.Math3d.MathOps.Middle(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector3})
  - Vim.Math3d.MathOps.Middle(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector4})
  - Vim.Math3d.MathOps.Middle(Vim.Math3d.Stats{Vim.Math3d.DVector2})
  - Vim.Math3d.MathOps.Middle(Vim.Math3d.Stats{Vim.Math3d.DVector3})
  - Vim.Math3d.MathOps.Middle(Vim.Math3d.Stats{Vim.Math3d.DVector4})
  - Vim.Math3d.MathOps.Middle(Vim.Math3d.Stats{Vim.Math3d.Vector2})
  - Vim.Math3d.MathOps.Middle(Vim.Math3d.Stats{Vim.Math3d.Vector3})
  - Vim.Math3d.MathOps.Middle(Vim.Math3d.Stats{Vim.Math3d.Vector4})
  - Vim.Math3d.MathOps.Min(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector2})
  - Vim.Math3d.MathOps.Min(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector3})
  - Vim.Math3d.MathOps.Min(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector4})
  - Vim.Math3d.MathOps.Min(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector2})
  - Vim.Math3d.MathOps.Min(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector3})
  - Vim.Math3d.MathOps.Min(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector4})
  - Vim.Math3d.MathOps.Min(System.Double,System.Double)
  - Vim.Math3d.MathOps.Min(System.Int32,System.Int32)
  - Vim.Math3d.MathOps.Min(System.Int64,System.Int64)
  - Vim.Math3d.MathOps.Min(System.Single,System.Single)
  - Vim.Math3d.MathOps.Min(Vim.Math3d.DVector2,Vim.Math3d.DVector2)
  - Vim.Math3d.MathOps.Min(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  - Vim.Math3d.MathOps.Min(Vim.Math3d.DVector4,Vim.Math3d.DVector4)
  - Vim.Math3d.MathOps.Min(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  - Vim.Math3d.MathOps.Min(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  - Vim.Math3d.MathOps.Min(Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  - Vim.Math3d.MathOps.Multiply(System.Double,System.Double)
  - Vim.Math3d.MathOps.Multiply(System.Int32,System.Int32)
  - Vim.Math3d.MathOps.Multiply(System.Int64,System.Int64)
  - Vim.Math3d.MathOps.Multiply(System.Single,System.Single)
  - Vim.Math3d.MathOps.Multiply(Vim.Math3d.DVector2,Vim.Math3d.DVector2)
  - Vim.Math3d.MathOps.Multiply(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  - Vim.Math3d.MathOps.Multiply(Vim.Math3d.DVector4,Vim.Math3d.DVector4)
  - Vim.Math3d.MathOps.Multiply(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  - Vim.Math3d.MathOps.Multiply(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  - Vim.Math3d.MathOps.Multiply(Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  - Vim.Math3d.MathOps.NAnd(System.Boolean,System.Boolean)
  - Vim.Math3d.MathOps.NAnd(System.Int32,System.Int32)
  - Vim.Math3d.MathOps.NAnd(System.Int64,System.Int64)
  - Vim.Math3d.MathOps.Negate(System.Double)
  - Vim.Math3d.MathOps.Negate(System.Int32)
  - Vim.Math3d.MathOps.Negate(System.Int64)
  - Vim.Math3d.MathOps.Negate(System.Single)
  - Vim.Math3d.MathOps.Negate(Vim.Math3d.DVector2)
  - Vim.Math3d.MathOps.Negate(Vim.Math3d.DVector3)
  - Vim.Math3d.MathOps.Negate(Vim.Math3d.DVector4)
  - Vim.Math3d.MathOps.Negate(Vim.Math3d.Vector2)
  - Vim.Math3d.MathOps.Negate(Vim.Math3d.Vector3)
  - Vim.Math3d.MathOps.Negate(Vim.Math3d.Vector4)
  - Vim.Math3d.MathOps.NEq(System.Boolean,System.Boolean)
  - Vim.Math3d.MathOps.NEq(System.Double,System.Double)
  - Vim.Math3d.MathOps.NEq(System.Int32,System.Int32)
  - Vim.Math3d.MathOps.NEq(System.Int64,System.Int64)
  - Vim.Math3d.MathOps.NEq(System.Single,System.Single)
  - Vim.Math3d.MathOps.NOr(System.Boolean,System.Boolean)
  - Vim.Math3d.MathOps.NOr(System.Int32,System.Int32)
  - Vim.Math3d.MathOps.NOr(System.Int64,System.Int64)
  - Vim.Math3d.MathOps.Normalize(Vim.Math3d.DVector2)
  - Vim.Math3d.MathOps.Normalize(Vim.Math3d.DVector3)
  - Vim.Math3d.MathOps.Normalize(Vim.Math3d.DVector4)
  - Vim.Math3d.MathOps.Normalize(Vim.Math3d.Vector2)
  - Vim.Math3d.MathOps.Normalize(Vim.Math3d.Vector3)
  - Vim.Math3d.MathOps.Normalize(Vim.Math3d.Vector4)
  - Vim.Math3d.MathOps.Not(System.Boolean)
  - Vim.Math3d.MathOps.Not(System.Int32)
  - Vim.Math3d.MathOps.Not(System.Int64)
  - Vim.Math3d.MathOps.Or(System.Boolean,System.Boolean)
  - Vim.Math3d.MathOps.Or(System.Int32,System.Int32)
  - Vim.Math3d.MathOps.Or(System.Int64,System.Int64)
  - Vim.Math3d.MathOps.Percentage(System.Double,System.Double)
  - Vim.Math3d.MathOps.Projection(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  - Vim.Math3d.MathOps.RayFromProjectionMatrix(Vim.Math3d.Matrix4x4,Vim.Math3d.Vector2)
  - Vim.Math3d.MathOps.Reflect(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  - Vim.Math3d.MathOps.Reflect(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  - Vim.Math3d.MathOps.Rejection(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  - Vim.Math3d.MathOps.Rotate(Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single)
  - Vim.Math3d.MathOps.Round(System.Double)
  - Vim.Math3d.MathOps.Round(System.Single)
  - Vim.Math3d.MathOps.Round(Vim.Math3d.DVector2)
  - Vim.Math3d.MathOps.Round(Vim.Math3d.DVector3)
  - Vim.Math3d.MathOps.Round(Vim.Math3d.DVector4)
  - Vim.Math3d.MathOps.Round(Vim.Math3d.Vector2)
  - Vim.Math3d.MathOps.Round(Vim.Math3d.Vector3)
  - Vim.Math3d.MathOps.Round(Vim.Math3d.Vector4)
  - Vim.Math3d.MathOps.SafeNormalize(Vim.Math3d.DVector2)
  - Vim.Math3d.MathOps.SafeNormalize(Vim.Math3d.DVector3)
  - Vim.Math3d.MathOps.SafeNormalize(Vim.Math3d.DVector4)
  - Vim.Math3d.MathOps.SafeNormalize(Vim.Math3d.Vector2)
  - Vim.Math3d.MathOps.SafeNormalize(Vim.Math3d.Vector3)
  - Vim.Math3d.MathOps.SafeNormalize(Vim.Math3d.Vector4)
  - Vim.Math3d.MathOps.Sign(System.Double)
  - Vim.Math3d.MathOps.Sign(System.Single)
  - Vim.Math3d.MathOps.SignedAngle(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  - Vim.Math3d.MathOps.SignedAngle(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  - Vim.Math3d.MathOps.Sin(System.Double)
  - Vim.Math3d.MathOps.Sin(System.Single)
  - Vim.Math3d.MathOps.Sin(Vim.Math3d.DVector2)
  - Vim.Math3d.MathOps.Sin(Vim.Math3d.DVector3)
  - Vim.Math3d.MathOps.Sin(Vim.Math3d.DVector4)
  - Vim.Math3d.MathOps.Sin(Vim.Math3d.Vector2)
  - Vim.Math3d.MathOps.Sin(Vim.Math3d.Vector3)
  - Vim.Math3d.MathOps.Sin(Vim.Math3d.Vector4)
  - Vim.Math3d.MathOps.Sinh(System.Double)
  - Vim.Math3d.MathOps.Sinh(System.Single)
  - Vim.Math3d.MathOps.Sinh(Vim.Math3d.DVector2)
  - Vim.Math3d.MathOps.Sinh(Vim.Math3d.DVector3)
  - Vim.Math3d.MathOps.Sinh(Vim.Math3d.DVector4)
  - Vim.Math3d.MathOps.Sinh(Vim.Math3d.Vector2)
  - Vim.Math3d.MathOps.Sinh(Vim.Math3d.Vector3)
  - Vim.Math3d.MathOps.Sinh(Vim.Math3d.Vector4)
  - Vim.Math3d.MathOps.Smoothstep(System.Double)
  - Vim.Math3d.MathOps.Smoothstep(System.Single)
  - Vim.Math3d.MathOps.SmoothStep(System.Single,System.Single,System.Single)
  - Vim.Math3d.MathOps.SmoothStep(Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single)
  - Vim.Math3d.MathOps.Sqr(System.Double)
  - Vim.Math3d.MathOps.Sqr(System.Int32)
  - Vim.Math3d.MathOps.Sqr(System.Int64)
  - Vim.Math3d.MathOps.Sqr(System.Single)
  - Vim.Math3d.MathOps.Sqr(Vim.Math3d.DVector2)
  - Vim.Math3d.MathOps.Sqr(Vim.Math3d.DVector3)
  - Vim.Math3d.MathOps.Sqr(Vim.Math3d.DVector4)
  - Vim.Math3d.MathOps.Sqr(Vim.Math3d.Vector2)
  - Vim.Math3d.MathOps.Sqr(Vim.Math3d.Vector3)
  - Vim.Math3d.MathOps.Sqr(Vim.Math3d.Vector4)
  - Vim.Math3d.MathOps.Sqrt(System.Double)
  - Vim.Math3d.MathOps.Sqrt(System.Single)
  - Vim.Math3d.MathOps.Sqrt(Vim.Math3d.DVector2)
  - Vim.Math3d.MathOps.Sqrt(Vim.Math3d.DVector3)
  - Vim.Math3d.MathOps.Sqrt(Vim.Math3d.DVector4)
  - Vim.Math3d.MathOps.Sqrt(Vim.Math3d.Vector2)
  - Vim.Math3d.MathOps.Sqrt(Vim.Math3d.Vector3)
  - Vim.Math3d.MathOps.Sqrt(Vim.Math3d.Vector4)
  - Vim.Math3d.MathOps.SquareRoot(Vim.Math3d.DVector2)
  - Vim.Math3d.MathOps.SquareRoot(Vim.Math3d.DVector3)
  - Vim.Math3d.MathOps.SquareRoot(Vim.Math3d.DVector4)
  - Vim.Math3d.MathOps.SquareRoot(Vim.Math3d.Vector2)
  - Vim.Math3d.MathOps.SquareRoot(Vim.Math3d.Vector3)
  - Vim.Math3d.MathOps.SquareRoot(Vim.Math3d.Vector4)
  - Vim.Math3d.MathOps.Stats(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector2})
  - Vim.Math3d.MathOps.Stats(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector3})
  - Vim.Math3d.MathOps.Stats(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector4})
  - Vim.Math3d.MathOps.Stats(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector2})
  - Vim.Math3d.MathOps.Stats(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector3})
  - Vim.Math3d.MathOps.Stats(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector4})
  - Vim.Math3d.MathOps.Subtract(System.Double,System.Double)
  - Vim.Math3d.MathOps.Subtract(System.Int32,System.Int32)
  - Vim.Math3d.MathOps.Subtract(System.Int64,System.Int64)
  - Vim.Math3d.MathOps.Subtract(System.Single,System.Single)
  - Vim.Math3d.MathOps.Subtract(Vim.Math3d.DVector2,Vim.Math3d.DVector2)
  - Vim.Math3d.MathOps.Subtract(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  - Vim.Math3d.MathOps.Subtract(Vim.Math3d.DVector4,Vim.Math3d.DVector4)
  - Vim.Math3d.MathOps.Subtract(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  - Vim.Math3d.MathOps.Subtract(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  - Vim.Math3d.MathOps.Subtract(Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  - Vim.Math3d.MathOps.Sum(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector2})
  - Vim.Math3d.MathOps.Sum(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector3})
  - Vim.Math3d.MathOps.Sum(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector4})
  - Vim.Math3d.MathOps.Sum(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector2})
  - Vim.Math3d.MathOps.Sum(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector3})
  - Vim.Math3d.MathOps.Sum(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector4})
  - Vim.Math3d.MathOps.Tan(System.Double)
  - Vim.Math3d.MathOps.Tan(System.Single)
  - Vim.Math3d.MathOps.Tan(Vim.Math3d.DVector2)
  - Vim.Math3d.MathOps.Tan(Vim.Math3d.DVector3)
  - Vim.Math3d.MathOps.Tan(Vim.Math3d.DVector4)
  - Vim.Math3d.MathOps.Tan(Vim.Math3d.Vector2)
  - Vim.Math3d.MathOps.Tan(Vim.Math3d.Vector3)
  - Vim.Math3d.MathOps.Tan(Vim.Math3d.Vector4)
  - Vim.Math3d.MathOps.Tanh(System.Double)
  - Vim.Math3d.MathOps.Tanh(System.Single)
  - Vim.Math3d.MathOps.Tanh(Vim.Math3d.DVector2)
  - Vim.Math3d.MathOps.Tanh(Vim.Math3d.DVector3)
  - Vim.Math3d.MathOps.Tanh(Vim.Math3d.DVector4)
  - Vim.Math3d.MathOps.Tanh(Vim.Math3d.Vector2)
  - Vim.Math3d.MathOps.Tanh(Vim.Math3d.Vector3)
  - Vim.Math3d.MathOps.Tanh(Vim.Math3d.Vector4)
  - Vim.Math3d.MathOps.ToAABoxArray(System.Single[])
  - Vim.Math3d.MathOps.ToBox(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector3})
  - Vim.Math3d.MathOps.ToBox(Vim.Math3d.Stats{Vim.Math3d.DVector3})
  - Vim.Math3d.MathOps.ToBox(Vim.Math3d.Stats{Vim.Math3d.Vector3})
  - Vim.Math3d.MathOps.ToDegrees(System.Double)
  - Vim.Math3d.MathOps.ToDegrees(System.Single)
  - Vim.Math3d.MathOps.ToDegrees(Vim.Math3d.DVector2)
  - Vim.Math3d.MathOps.ToDegrees(Vim.Math3d.DVector3)
  - Vim.Math3d.MathOps.ToDegrees(Vim.Math3d.DVector4)
  - Vim.Math3d.MathOps.ToDegrees(Vim.Math3d.Vector2)
  - Vim.Math3d.MathOps.ToDegrees(Vim.Math3d.Vector3)
  - Vim.Math3d.MathOps.ToDegrees(Vim.Math3d.Vector4)
  - Vim.Math3d.MathOps.ToFloats(Vim.Math3d.Matrix4x4)
  - Vim.Math3d.MathOps.ToFloats(Vim.Math3d.Matrix4x4[])
  - Vim.Math3d.MathOps.ToLine(Vim.Math3d.Vector3)
  - Vim.Math3d.MathOps.ToMatrix(System.Single[])
  - Vim.Math3d.MathOps.ToMatrix(Vim.Math3d.Quaternion)
  - Vim.Math3d.MathOps.ToMatrix(Vim.Math3d.Transform)
  - Vim.Math3d.MathOps.ToMatrix(Vim.Math3d.Vector3)
  - Vim.Math3d.MathOps.ToMatrixArray(System.Single[])
  - Vim.Math3d.MathOps.ToNearestPowOf2(System.Int32)
  - Vim.Math3d.MathOps.ToRadians(System.Double)
  - Vim.Math3d.MathOps.ToRadians(System.Single)
  - Vim.Math3d.MathOps.ToRadians(Vim.Math3d.DVector2)
  - Vim.Math3d.MathOps.ToRadians(Vim.Math3d.DVector3)
  - Vim.Math3d.MathOps.ToRadians(Vim.Math3d.DVector4)
  - Vim.Math3d.MathOps.ToRadians(Vim.Math3d.Vector2)
  - Vim.Math3d.MathOps.ToRadians(Vim.Math3d.Vector3)
  - Vim.Math3d.MathOps.ToRadians(Vim.Math3d.Vector4)
  - Vim.Math3d.MathOps.ToVector2(System.Single)
  - Vim.Math3d.MathOps.ToVector2(Vim.Math3d.Int2)
  - Vim.Math3d.MathOps.ToVector2(Vim.Math3d.Vector3)
  - Vim.Math3d.MathOps.ToVector2(Vim.Math3d.Vector4)
  - Vim.Math3d.MathOps.ToVector3(System.Single)
  - Vim.Math3d.MathOps.ToVector3(Vim.Math3d.Int3)
  - Vim.Math3d.MathOps.ToVector3(Vim.Math3d.Vector2)
  - Vim.Math3d.MathOps.ToVector3(Vim.Math3d.Vector4)
  - Vim.Math3d.MathOps.ToVector4(System.Single)
  - Vim.Math3d.MathOps.ToVector4(Vim.Math3d.Vector2)
  - Vim.Math3d.MathOps.ToVector4(Vim.Math3d.Vector3)
  - Vim.Math3d.MathOps.Transform(Vim.Math3d.Vector2,Vim.Math3d.Matrix4x4)
  - Vim.Math3d.MathOps.Transform(Vim.Math3d.Vector2,Vim.Math3d.Quaternion)
  - Vim.Math3d.MathOps.Transform(Vim.Math3d.Vector3,Vim.Math3d.Quaternion)
  - Vim.Math3d.MathOps.Transform(Vim.Math3d.Vector4,Vim.Math3d.Matrix4x4)
  - Vim.Math3d.MathOps.Transform(Vim.Math3d.Vector4,Vim.Math3d.Quaternion)
  - Vim.Math3d.MathOps.TransformNormal(Vim.Math3d.Vector2,Vim.Math3d.Matrix4x4)
  - Vim.Math3d.MathOps.TransformNormal(Vim.Math3d.Vector3,Vim.Math3d.Matrix4x4)
  - Vim.Math3d.MathOps.TransformNormal(Vim.Math3d.Vector4,Vim.Math3d.Matrix4x4)
  - Vim.Math3d.MathOps.TransformToVector4(Vim.Math3d.Vector2,Vim.Math3d.Matrix4x4)
  - Vim.Math3d.MathOps.TransformToVector4(Vim.Math3d.Vector2,Vim.Math3d.Quaternion)
  - Vim.Math3d.MathOps.TransformToVector4(Vim.Math3d.Vector3,Vim.Math3d.Matrix4x4)
  - Vim.Math3d.MathOps.TransformToVector4(Vim.Math3d.Vector3,Vim.Math3d.Quaternion)
  - Vim.Math3d.MathOps.Truncate(System.Double)
  - Vim.Math3d.MathOps.Truncate(System.Single)
  - Vim.Math3d.MathOps.Truncate(Vim.Math3d.DVector2)
  - Vim.Math3d.MathOps.Truncate(Vim.Math3d.DVector3)
  - Vim.Math3d.MathOps.Truncate(Vim.Math3d.DVector4)
  - Vim.Math3d.MathOps.Truncate(Vim.Math3d.Vector2)
  - Vim.Math3d.MathOps.Truncate(Vim.Math3d.Vector3)
  - Vim.Math3d.MathOps.Truncate(Vim.Math3d.Vector4)
  - Vim.Math3d.MathOps.Within(System.Double,System.Double,System.Double)
  - Vim.Math3d.MathOps.Within(System.Int32,System.Int32,System.Int32)
  - Vim.Math3d.MathOps.Within(System.Int64,System.Int64,System.Int64)
  - Vim.Math3d.MathOps.Within(System.Single,System.Single,System.Single)
  - Vim.Math3d.MathOps.WrapAngle(System.Single)
  - Vim.Math3d.MathOps.XOr(System.Boolean,System.Boolean)
  - Vim.Math3d.MathOps.XOr(System.Int32,System.Int32)
  - Vim.Math3d.MathOps.XOr(System.Int64,System.Int64)
  langs:
  - csharp
  - vb
  name: MathOps
  nameWithType: MathOps
  fullName: Vim.Math3d.MathOps
  type: Class
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MathOps
    path: ../src/MathOpsPartial.cs
    startLine: 16
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static class MathOps
    content.vb: Public Module MathOps
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Vim.Math3d.MathOps.Abs(System.Double)
  commentId: M:Vim.Math3d.MathOps.Abs(System.Double)
  id: Abs(System.Double)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Abs(Double)
  nameWithType: MathOps.Abs(Double)
  fullName: Vim.Math3d.MathOps.Abs(System.Double)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Abs
    path: ../src/MathOps.cs
    startLine: 12
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double Abs(this double x)
    parameters:
    - id: x
      type: System.Double
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Abs(x As Double) As Double
  overload: Vim.Math3d.MathOps.Abs*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Acos(System.Double)
  commentId: M:Vim.Math3d.MathOps.Acos(System.Double)
  id: Acos(System.Double)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Acos(Double)
  nameWithType: MathOps.Acos(Double)
  fullName: Vim.Math3d.MathOps.Acos(System.Double)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Acos
    path: ../src/MathOps.cs
    startLine: 13
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double Acos(this double x)
    parameters:
    - id: x
      type: System.Double
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Acos(x As Double) As Double
  overload: Vim.Math3d.MathOps.Acos*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Asin(System.Double)
  commentId: M:Vim.Math3d.MathOps.Asin(System.Double)
  id: Asin(System.Double)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Asin(Double)
  nameWithType: MathOps.Asin(Double)
  fullName: Vim.Math3d.MathOps.Asin(System.Double)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Asin
    path: ../src/MathOps.cs
    startLine: 14
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double Asin(this double x)
    parameters:
    - id: x
      type: System.Double
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Asin(x As Double) As Double
  overload: Vim.Math3d.MathOps.Asin*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Atan(System.Double)
  commentId: M:Vim.Math3d.MathOps.Atan(System.Double)
  id: Atan(System.Double)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Atan(Double)
  nameWithType: MathOps.Atan(Double)
  fullName: Vim.Math3d.MathOps.Atan(System.Double)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Atan
    path: ../src/MathOps.cs
    startLine: 15
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double Atan(this double x)
    parameters:
    - id: x
      type: System.Double
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Atan(x As Double) As Double
  overload: Vim.Math3d.MathOps.Atan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Cos(System.Double)
  commentId: M:Vim.Math3d.MathOps.Cos(System.Double)
  id: Cos(System.Double)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Cos(Double)
  nameWithType: MathOps.Cos(Double)
  fullName: Vim.Math3d.MathOps.Cos(System.Double)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Cos
    path: ../src/MathOps.cs
    startLine: 16
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double Cos(this double x)
    parameters:
    - id: x
      type: System.Double
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Cos(x As Double) As Double
  overload: Vim.Math3d.MathOps.Cos*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Cosh(System.Double)
  commentId: M:Vim.Math3d.MathOps.Cosh(System.Double)
  id: Cosh(System.Double)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Cosh(Double)
  nameWithType: MathOps.Cosh(Double)
  fullName: Vim.Math3d.MathOps.Cosh(System.Double)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Cosh
    path: ../src/MathOps.cs
    startLine: 17
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double Cosh(this double x)
    parameters:
    - id: x
      type: System.Double
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Cosh(x As Double) As Double
  overload: Vim.Math3d.MathOps.Cosh*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Exp(System.Double)
  commentId: M:Vim.Math3d.MathOps.Exp(System.Double)
  id: Exp(System.Double)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Exp(Double)
  nameWithType: MathOps.Exp(Double)
  fullName: Vim.Math3d.MathOps.Exp(System.Double)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Exp
    path: ../src/MathOps.cs
    startLine: 18
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double Exp(this double x)
    parameters:
    - id: x
      type: System.Double
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Exp(x As Double) As Double
  overload: Vim.Math3d.MathOps.Exp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Log(System.Double)
  commentId: M:Vim.Math3d.MathOps.Log(System.Double)
  id: Log(System.Double)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Log(Double)
  nameWithType: MathOps.Log(Double)
  fullName: Vim.Math3d.MathOps.Log(System.Double)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Log
    path: ../src/MathOps.cs
    startLine: 19
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double Log(this double x)
    parameters:
    - id: x
      type: System.Double
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Log(x As Double) As Double
  overload: Vim.Math3d.MathOps.Log*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Log10(System.Double)
  commentId: M:Vim.Math3d.MathOps.Log10(System.Double)
  id: Log10(System.Double)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Log10(Double)
  nameWithType: MathOps.Log10(Double)
  fullName: Vim.Math3d.MathOps.Log10(System.Double)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Log10
    path: ../src/MathOps.cs
    startLine: 20
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double Log10(this double x)
    parameters:
    - id: x
      type: System.Double
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Log10(x As Double) As Double
  overload: Vim.Math3d.MathOps.Log10*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Sin(System.Double)
  commentId: M:Vim.Math3d.MathOps.Sin(System.Double)
  id: Sin(System.Double)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Sin(Double)
  nameWithType: MathOps.Sin(Double)
  fullName: Vim.Math3d.MathOps.Sin(System.Double)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Sin
    path: ../src/MathOps.cs
    startLine: 21
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double Sin(this double x)
    parameters:
    - id: x
      type: System.Double
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sin(x As Double) As Double
  overload: Vim.Math3d.MathOps.Sin*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Sinh(System.Double)
  commentId: M:Vim.Math3d.MathOps.Sinh(System.Double)
  id: Sinh(System.Double)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Sinh(Double)
  nameWithType: MathOps.Sinh(Double)
  fullName: Vim.Math3d.MathOps.Sinh(System.Double)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Sinh
    path: ../src/MathOps.cs
    startLine: 22
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double Sinh(this double x)
    parameters:
    - id: x
      type: System.Double
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sinh(x As Double) As Double
  overload: Vim.Math3d.MathOps.Sinh*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Sqrt(System.Double)
  commentId: M:Vim.Math3d.MathOps.Sqrt(System.Double)
  id: Sqrt(System.Double)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Sqrt(Double)
  nameWithType: MathOps.Sqrt(Double)
  fullName: Vim.Math3d.MathOps.Sqrt(System.Double)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Sqrt
    path: ../src/MathOps.cs
    startLine: 23
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double Sqrt(this double x)
    parameters:
    - id: x
      type: System.Double
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sqrt(x As Double) As Double
  overload: Vim.Math3d.MathOps.Sqrt*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Tan(System.Double)
  commentId: M:Vim.Math3d.MathOps.Tan(System.Double)
  id: Tan(System.Double)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Tan(Double)
  nameWithType: MathOps.Tan(Double)
  fullName: Vim.Math3d.MathOps.Tan(System.Double)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Tan
    path: ../src/MathOps.cs
    startLine: 24
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double Tan(this double x)
    parameters:
    - id: x
      type: System.Double
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Tan(x As Double) As Double
  overload: Vim.Math3d.MathOps.Tan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Tanh(System.Double)
  commentId: M:Vim.Math3d.MathOps.Tanh(System.Double)
  id: Tanh(System.Double)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Tanh(Double)
  nameWithType: MathOps.Tanh(Double)
  fullName: Vim.Math3d.MathOps.Tanh(System.Double)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Tanh
    path: ../src/MathOps.cs
    startLine: 25
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double Tanh(this double x)
    parameters:
    - id: x
      type: System.Double
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Tanh(x As Double) As Double
  overload: Vim.Math3d.MathOps.Tanh*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Abs(System.Single)
  commentId: M:Vim.Math3d.MathOps.Abs(System.Single)
  id: Abs(System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Abs(Single)
  nameWithType: MathOps.Abs(Single)
  fullName: Vim.Math3d.MathOps.Abs(System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Abs
    path: ../src/MathOps.cs
    startLine: 27
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float Abs(this float x)
    parameters:
    - id: x
      type: System.Single
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Abs(x As Single) As Single
  overload: Vim.Math3d.MathOps.Abs*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Acos(System.Single)
  commentId: M:Vim.Math3d.MathOps.Acos(System.Single)
  id: Acos(System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Acos(Single)
  nameWithType: MathOps.Acos(Single)
  fullName: Vim.Math3d.MathOps.Acos(System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Acos
    path: ../src/MathOps.cs
    startLine: 28
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float Acos(this float x)
    parameters:
    - id: x
      type: System.Single
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Acos(x As Single) As Single
  overload: Vim.Math3d.MathOps.Acos*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Asin(System.Single)
  commentId: M:Vim.Math3d.MathOps.Asin(System.Single)
  id: Asin(System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Asin(Single)
  nameWithType: MathOps.Asin(Single)
  fullName: Vim.Math3d.MathOps.Asin(System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Asin
    path: ../src/MathOps.cs
    startLine: 29
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float Asin(this float x)
    parameters:
    - id: x
      type: System.Single
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Asin(x As Single) As Single
  overload: Vim.Math3d.MathOps.Asin*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Atan(System.Single)
  commentId: M:Vim.Math3d.MathOps.Atan(System.Single)
  id: Atan(System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Atan(Single)
  nameWithType: MathOps.Atan(Single)
  fullName: Vim.Math3d.MathOps.Atan(System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Atan
    path: ../src/MathOps.cs
    startLine: 30
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float Atan(this float x)
    parameters:
    - id: x
      type: System.Single
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Atan(x As Single) As Single
  overload: Vim.Math3d.MathOps.Atan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Cos(System.Single)
  commentId: M:Vim.Math3d.MathOps.Cos(System.Single)
  id: Cos(System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Cos(Single)
  nameWithType: MathOps.Cos(Single)
  fullName: Vim.Math3d.MathOps.Cos(System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Cos
    path: ../src/MathOps.cs
    startLine: 31
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float Cos(this float x)
    parameters:
    - id: x
      type: System.Single
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Cos(x As Single) As Single
  overload: Vim.Math3d.MathOps.Cos*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Cosh(System.Single)
  commentId: M:Vim.Math3d.MathOps.Cosh(System.Single)
  id: Cosh(System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Cosh(Single)
  nameWithType: MathOps.Cosh(Single)
  fullName: Vim.Math3d.MathOps.Cosh(System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Cosh
    path: ../src/MathOps.cs
    startLine: 32
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float Cosh(this float x)
    parameters:
    - id: x
      type: System.Single
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Cosh(x As Single) As Single
  overload: Vim.Math3d.MathOps.Cosh*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Exp(System.Single)
  commentId: M:Vim.Math3d.MathOps.Exp(System.Single)
  id: Exp(System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Exp(Single)
  nameWithType: MathOps.Exp(Single)
  fullName: Vim.Math3d.MathOps.Exp(System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Exp
    path: ../src/MathOps.cs
    startLine: 33
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float Exp(this float x)
    parameters:
    - id: x
      type: System.Single
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Exp(x As Single) As Single
  overload: Vim.Math3d.MathOps.Exp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Log(System.Single)
  commentId: M:Vim.Math3d.MathOps.Log(System.Single)
  id: Log(System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Log(Single)
  nameWithType: MathOps.Log(Single)
  fullName: Vim.Math3d.MathOps.Log(System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Log
    path: ../src/MathOps.cs
    startLine: 34
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float Log(this float x)
    parameters:
    - id: x
      type: System.Single
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Log(x As Single) As Single
  overload: Vim.Math3d.MathOps.Log*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Log10(System.Single)
  commentId: M:Vim.Math3d.MathOps.Log10(System.Single)
  id: Log10(System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Log10(Single)
  nameWithType: MathOps.Log10(Single)
  fullName: Vim.Math3d.MathOps.Log10(System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Log10
    path: ../src/MathOps.cs
    startLine: 35
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float Log10(this float x)
    parameters:
    - id: x
      type: System.Single
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Log10(x As Single) As Single
  overload: Vim.Math3d.MathOps.Log10*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Sin(System.Single)
  commentId: M:Vim.Math3d.MathOps.Sin(System.Single)
  id: Sin(System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Sin(Single)
  nameWithType: MathOps.Sin(Single)
  fullName: Vim.Math3d.MathOps.Sin(System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Sin
    path: ../src/MathOps.cs
    startLine: 36
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float Sin(this float x)
    parameters:
    - id: x
      type: System.Single
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sin(x As Single) As Single
  overload: Vim.Math3d.MathOps.Sin*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Sinh(System.Single)
  commentId: M:Vim.Math3d.MathOps.Sinh(System.Single)
  id: Sinh(System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Sinh(Single)
  nameWithType: MathOps.Sinh(Single)
  fullName: Vim.Math3d.MathOps.Sinh(System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Sinh
    path: ../src/MathOps.cs
    startLine: 37
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float Sinh(this float x)
    parameters:
    - id: x
      type: System.Single
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sinh(x As Single) As Single
  overload: Vim.Math3d.MathOps.Sinh*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Sqrt(System.Single)
  commentId: M:Vim.Math3d.MathOps.Sqrt(System.Single)
  id: Sqrt(System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Sqrt(Single)
  nameWithType: MathOps.Sqrt(Single)
  fullName: Vim.Math3d.MathOps.Sqrt(System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Sqrt
    path: ../src/MathOps.cs
    startLine: 38
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float Sqrt(this float x)
    parameters:
    - id: x
      type: System.Single
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sqrt(x As Single) As Single
  overload: Vim.Math3d.MathOps.Sqrt*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Tan(System.Single)
  commentId: M:Vim.Math3d.MathOps.Tan(System.Single)
  id: Tan(System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Tan(Single)
  nameWithType: MathOps.Tan(Single)
  fullName: Vim.Math3d.MathOps.Tan(System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Tan
    path: ../src/MathOps.cs
    startLine: 39
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float Tan(this float x)
    parameters:
    - id: x
      type: System.Single
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Tan(x As Single) As Single
  overload: Vim.Math3d.MathOps.Tan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Tanh(System.Single)
  commentId: M:Vim.Math3d.MathOps.Tanh(System.Single)
  id: Tanh(System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Tanh(Single)
  nameWithType: MathOps.Tanh(Single)
  fullName: Vim.Math3d.MathOps.Tanh(System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Tanh
    path: ../src/MathOps.cs
    startLine: 40
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float Tanh(this float x)
    parameters:
    - id: x
      type: System.Single
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Tanh(x As Single) As Single
  overload: Vim.Math3d.MathOps.Tanh*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Sign(System.Single)
  commentId: M:Vim.Math3d.MathOps.Sign(System.Single)
  id: Sign(System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Sign(Single)
  nameWithType: MathOps.Sign(Single)
  fullName: Vim.Math3d.MathOps.Sign(System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Sign
    path: ../src/MathOps.cs
    startLine: 42
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static int Sign(this float x)
    parameters:
    - id: x
      type: System.Single
    return:
      type: System.Int32
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sign(x As Single) As Integer
  overload: Vim.Math3d.MathOps.Sign*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Magnitude(System.Single)
  commentId: M:Vim.Math3d.MathOps.Magnitude(System.Single)
  id: Magnitude(System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Magnitude(Single)
  nameWithType: MathOps.Magnitude(Single)
  fullName: Vim.Math3d.MathOps.Magnitude(System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Magnitude
    path: ../src/MathOps.cs
    startLine: 43
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float Magnitude(this float x)
    parameters:
    - id: x
      type: System.Single
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Magnitude(x As Single) As Single
  overload: Vim.Math3d.MathOps.Magnitude*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.MagnitudeSquared(System.Single)
  commentId: M:Vim.Math3d.MathOps.MagnitudeSquared(System.Single)
  id: MagnitudeSquared(System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: MagnitudeSquared(Single)
  nameWithType: MathOps.MagnitudeSquared(Single)
  fullName: Vim.Math3d.MathOps.MagnitudeSquared(System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MagnitudeSquared
    path: ../src/MathOps.cs
    startLine: 44
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float MagnitudeSquared(this float x)
    parameters:
    - id: x
      type: System.Single
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MagnitudeSquared(x As Single) As Single
  overload: Vim.Math3d.MathOps.MagnitudeSquared*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Inverse(System.Single)
  commentId: M:Vim.Math3d.MathOps.Inverse(System.Single)
  id: Inverse(System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Inverse(Single)
  nameWithType: MathOps.Inverse(Single)
  fullName: Vim.Math3d.MathOps.Inverse(System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Inverse
    path: ../src/MathOps.cs
    startLine: 45
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float Inverse(this float x)
    parameters:
    - id: x
      type: System.Single
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Inverse(x As Single) As Single
  overload: Vim.Math3d.MathOps.Inverse*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Truncate(System.Single)
  commentId: M:Vim.Math3d.MathOps.Truncate(System.Single)
  id: Truncate(System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Truncate(Single)
  nameWithType: MathOps.Truncate(Single)
  fullName: Vim.Math3d.MathOps.Truncate(System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Truncate
    path: ../src/MathOps.cs
    startLine: 46
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float Truncate(this float x)
    parameters:
    - id: x
      type: System.Single
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Truncate(x As Single) As Single
  overload: Vim.Math3d.MathOps.Truncate*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Ceiling(System.Single)
  commentId: M:Vim.Math3d.MathOps.Ceiling(System.Single)
  id: Ceiling(System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Ceiling(Single)
  nameWithType: MathOps.Ceiling(Single)
  fullName: Vim.Math3d.MathOps.Ceiling(System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Ceiling
    path: ../src/MathOps.cs
    startLine: 47
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float Ceiling(this float x)
    parameters:
    - id: x
      type: System.Single
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Ceiling(x As Single) As Single
  overload: Vim.Math3d.MathOps.Ceiling*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Floor(System.Single)
  commentId: M:Vim.Math3d.MathOps.Floor(System.Single)
  id: Floor(System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Floor(Single)
  nameWithType: MathOps.Floor(Single)
  fullName: Vim.Math3d.MathOps.Floor(System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Floor
    path: ../src/MathOps.cs
    startLine: 48
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float Floor(this float x)
    parameters:
    - id: x
      type: System.Single
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Floor(x As Single) As Single
  overload: Vim.Math3d.MathOps.Floor*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Round(System.Single)
  commentId: M:Vim.Math3d.MathOps.Round(System.Single)
  id: Round(System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Round(Single)
  nameWithType: MathOps.Round(Single)
  fullName: Vim.Math3d.MathOps.Round(System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Round
    path: ../src/MathOps.cs
    startLine: 49
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float Round(this float x)
    parameters:
    - id: x
      type: System.Single
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Round(x As Single) As Single
  overload: Vim.Math3d.MathOps.Round*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.ToRadians(System.Single)
  commentId: M:Vim.Math3d.MathOps.ToRadians(System.Single)
  id: ToRadians(System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: ToRadians(Single)
  nameWithType: MathOps.ToRadians(Single)
  fullName: Vim.Math3d.MathOps.ToRadians(System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToRadians
    path: ../src/MathOps.cs
    startLine: 50
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float ToRadians(this float x)
    parameters:
    - id: x
      type: System.Single
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToRadians(x As Single) As Single
  overload: Vim.Math3d.MathOps.ToRadians*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.ToDegrees(System.Single)
  commentId: M:Vim.Math3d.MathOps.ToDegrees(System.Single)
  id: ToDegrees(System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: ToDegrees(Single)
  nameWithType: MathOps.ToDegrees(Single)
  fullName: Vim.Math3d.MathOps.ToDegrees(System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToDegrees
    path: ../src/MathOps.cs
    startLine: 51
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float ToDegrees(this float x)
    parameters:
    - id: x
      type: System.Single
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDegrees(x As Single) As Single
  overload: Vim.Math3d.MathOps.ToDegrees*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Distance(System.Single,System.Single)
  commentId: M:Vim.Math3d.MathOps.Distance(System.Single,System.Single)
  id: Distance(System.Single,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Distance(Single, Single)
  nameWithType: MathOps.Distance(Single, Single)
  fullName: Vim.Math3d.MathOps.Distance(System.Single, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Distance
    path: ../src/MathOps.cs
    startLine: 52
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float Distance(this float v1, float v2)
    parameters:
    - id: v1
      type: System.Single
    - id: v2
      type: System.Single
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Distance(v1 As Single, v2 As Single) As Single
  overload: Vim.Math3d.MathOps.Distance*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.IsInfinity(System.Single)
  commentId: M:Vim.Math3d.MathOps.IsInfinity(System.Single)
  id: IsInfinity(System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: IsInfinity(Single)
  nameWithType: MathOps.IsInfinity(Single)
  fullName: Vim.Math3d.MathOps.IsInfinity(System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: IsInfinity
    path: ../src/MathOps.cs
    startLine: 53
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool IsInfinity(this float v)
    parameters:
    - id: v
      type: System.Single
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsInfinity(v As Single) As Boolean
  overload: Vim.Math3d.MathOps.IsInfinity*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.IsNaN(System.Single)
  commentId: M:Vim.Math3d.MathOps.IsNaN(System.Single)
  id: IsNaN(System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: IsNaN(Single)
  nameWithType: MathOps.IsNaN(Single)
  fullName: Vim.Math3d.MathOps.IsNaN(System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: IsNaN
    path: ../src/MathOps.cs
    startLine: 54
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool IsNaN(this float v)
    parameters:
    - id: v
      type: System.Single
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsNaN(v As Single) As Boolean
  overload: Vim.Math3d.MathOps.IsNaN*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.AlmostEquals(System.Single,System.Single,System.Single)
  commentId: M:Vim.Math3d.MathOps.AlmostEquals(System.Single,System.Single,System.Single)
  id: AlmostEquals(System.Single,System.Single,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: AlmostEquals(Single, Single, Single)
  nameWithType: MathOps.AlmostEquals(Single, Single, Single)
  fullName: Vim.Math3d.MathOps.AlmostEquals(System.Single, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: AlmostEquals
    path: ../src/MathOps.cs
    startLine: 55
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool AlmostEquals(this float v1, float v2, float tolerance = 1E-07F)
    parameters:
    - id: v1
      type: System.Single
    - id: v2
      type: System.Single
    - id: tolerance
      type: System.Single
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AlmostEquals(v1 As Single, v2 As Single, tolerance As Single = 1E-07F) As Boolean
  overload: Vim.Math3d.MathOps.AlmostEquals*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.AlmostZero(System.Single,System.Single)
  commentId: M:Vim.Math3d.MathOps.AlmostZero(System.Single,System.Single)
  id: AlmostZero(System.Single,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: AlmostZero(Single, Single)
  nameWithType: MathOps.AlmostZero(Single, Single)
  fullName: Vim.Math3d.MathOps.AlmostZero(System.Single, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: AlmostZero
    path: ../src/MathOps.cs
    startLine: 56
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool AlmostZero(this float v, float tolerance = 1E-07F)
    parameters:
    - id: v
      type: System.Single
    - id: tolerance
      type: System.Single
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AlmostZero(v As Single, tolerance As Single = 1E-07F) As Boolean
  overload: Vim.Math3d.MathOps.AlmostZero*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Smoothstep(System.Single)
  commentId: M:Vim.Math3d.MathOps.Smoothstep(System.Single)
  id: Smoothstep(System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Smoothstep(Single)
  nameWithType: MathOps.Smoothstep(Single)
  fullName: Vim.Math3d.MathOps.Smoothstep(System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Smoothstep
    path: ../src/MathOps.cs
    startLine: 57
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float Smoothstep(this float v)
    parameters:
    - id: v
      type: System.Single
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Smoothstep(v As Single) As Single
  overload: Vim.Math3d.MathOps.Smoothstep*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Sign(System.Double)
  commentId: M:Vim.Math3d.MathOps.Sign(System.Double)
  id: Sign(System.Double)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Sign(Double)
  nameWithType: MathOps.Sign(Double)
  fullName: Vim.Math3d.MathOps.Sign(System.Double)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Sign
    path: ../src/MathOps.cs
    startLine: 58
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static int Sign(this double x)
    parameters:
    - id: x
      type: System.Double
    return:
      type: System.Int32
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sign(x As Double) As Integer
  overload: Vim.Math3d.MathOps.Sign*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Magnitude(System.Double)
  commentId: M:Vim.Math3d.MathOps.Magnitude(System.Double)
  id: Magnitude(System.Double)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Magnitude(Double)
  nameWithType: MathOps.Magnitude(Double)
  fullName: Vim.Math3d.MathOps.Magnitude(System.Double)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Magnitude
    path: ../src/MathOps.cs
    startLine: 59
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double Magnitude(this double x)
    parameters:
    - id: x
      type: System.Double
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Magnitude(x As Double) As Double
  overload: Vim.Math3d.MathOps.Magnitude*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.MagnitudeSquared(System.Double)
  commentId: M:Vim.Math3d.MathOps.MagnitudeSquared(System.Double)
  id: MagnitudeSquared(System.Double)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: MagnitudeSquared(Double)
  nameWithType: MathOps.MagnitudeSquared(Double)
  fullName: Vim.Math3d.MathOps.MagnitudeSquared(System.Double)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MagnitudeSquared
    path: ../src/MathOps.cs
    startLine: 60
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double MagnitudeSquared(this double x)
    parameters:
    - id: x
      type: System.Double
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MagnitudeSquared(x As Double) As Double
  overload: Vim.Math3d.MathOps.MagnitudeSquared*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Inverse(System.Double)
  commentId: M:Vim.Math3d.MathOps.Inverse(System.Double)
  id: Inverse(System.Double)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Inverse(Double)
  nameWithType: MathOps.Inverse(Double)
  fullName: Vim.Math3d.MathOps.Inverse(System.Double)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Inverse
    path: ../src/MathOps.cs
    startLine: 61
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double Inverse(this double x)
    parameters:
    - id: x
      type: System.Double
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Inverse(x As Double) As Double
  overload: Vim.Math3d.MathOps.Inverse*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Truncate(System.Double)
  commentId: M:Vim.Math3d.MathOps.Truncate(System.Double)
  id: Truncate(System.Double)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Truncate(Double)
  nameWithType: MathOps.Truncate(Double)
  fullName: Vim.Math3d.MathOps.Truncate(System.Double)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Truncate
    path: ../src/MathOps.cs
    startLine: 62
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double Truncate(this double x)
    parameters:
    - id: x
      type: System.Double
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Truncate(x As Double) As Double
  overload: Vim.Math3d.MathOps.Truncate*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Ceiling(System.Double)
  commentId: M:Vim.Math3d.MathOps.Ceiling(System.Double)
  id: Ceiling(System.Double)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Ceiling(Double)
  nameWithType: MathOps.Ceiling(Double)
  fullName: Vim.Math3d.MathOps.Ceiling(System.Double)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Ceiling
    path: ../src/MathOps.cs
    startLine: 63
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double Ceiling(this double x)
    parameters:
    - id: x
      type: System.Double
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Ceiling(x As Double) As Double
  overload: Vim.Math3d.MathOps.Ceiling*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Floor(System.Double)
  commentId: M:Vim.Math3d.MathOps.Floor(System.Double)
  id: Floor(System.Double)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Floor(Double)
  nameWithType: MathOps.Floor(Double)
  fullName: Vim.Math3d.MathOps.Floor(System.Double)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Floor
    path: ../src/MathOps.cs
    startLine: 64
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double Floor(this double x)
    parameters:
    - id: x
      type: System.Double
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Floor(x As Double) As Double
  overload: Vim.Math3d.MathOps.Floor*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Round(System.Double)
  commentId: M:Vim.Math3d.MathOps.Round(System.Double)
  id: Round(System.Double)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Round(Double)
  nameWithType: MathOps.Round(Double)
  fullName: Vim.Math3d.MathOps.Round(System.Double)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Round
    path: ../src/MathOps.cs
    startLine: 65
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double Round(this double x)
    parameters:
    - id: x
      type: System.Double
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Round(x As Double) As Double
  overload: Vim.Math3d.MathOps.Round*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.ToRadians(System.Double)
  commentId: M:Vim.Math3d.MathOps.ToRadians(System.Double)
  id: ToRadians(System.Double)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: ToRadians(Double)
  nameWithType: MathOps.ToRadians(Double)
  fullName: Vim.Math3d.MathOps.ToRadians(System.Double)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToRadians
    path: ../src/MathOps.cs
    startLine: 66
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double ToRadians(this double x)
    parameters:
    - id: x
      type: System.Double
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToRadians(x As Double) As Double
  overload: Vim.Math3d.MathOps.ToRadians*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.ToDegrees(System.Double)
  commentId: M:Vim.Math3d.MathOps.ToDegrees(System.Double)
  id: ToDegrees(System.Double)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: ToDegrees(Double)
  nameWithType: MathOps.ToDegrees(Double)
  fullName: Vim.Math3d.MathOps.ToDegrees(System.Double)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToDegrees
    path: ../src/MathOps.cs
    startLine: 67
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double ToDegrees(this double x)
    parameters:
    - id: x
      type: System.Double
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDegrees(x As Double) As Double
  overload: Vim.Math3d.MathOps.ToDegrees*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Distance(System.Double,System.Double)
  commentId: M:Vim.Math3d.MathOps.Distance(System.Double,System.Double)
  id: Distance(System.Double,System.Double)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Distance(Double, Double)
  nameWithType: MathOps.Distance(Double, Double)
  fullName: Vim.Math3d.MathOps.Distance(System.Double, System.Double)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Distance
    path: ../src/MathOps.cs
    startLine: 68
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double Distance(this double v1, double v2)
    parameters:
    - id: v1
      type: System.Double
    - id: v2
      type: System.Double
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Distance(v1 As Double, v2 As Double) As Double
  overload: Vim.Math3d.MathOps.Distance*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.IsInfinity(System.Double)
  commentId: M:Vim.Math3d.MathOps.IsInfinity(System.Double)
  id: IsInfinity(System.Double)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: IsInfinity(Double)
  nameWithType: MathOps.IsInfinity(Double)
  fullName: Vim.Math3d.MathOps.IsInfinity(System.Double)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: IsInfinity
    path: ../src/MathOps.cs
    startLine: 69
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool IsInfinity(this double v)
    parameters:
    - id: v
      type: System.Double
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsInfinity(v As Double) As Boolean
  overload: Vim.Math3d.MathOps.IsInfinity*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.IsNaN(System.Double)
  commentId: M:Vim.Math3d.MathOps.IsNaN(System.Double)
  id: IsNaN(System.Double)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: IsNaN(Double)
  nameWithType: MathOps.IsNaN(Double)
  fullName: Vim.Math3d.MathOps.IsNaN(System.Double)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: IsNaN
    path: ../src/MathOps.cs
    startLine: 70
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool IsNaN(this double v)
    parameters:
    - id: v
      type: System.Double
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsNaN(v As Double) As Boolean
  overload: Vim.Math3d.MathOps.IsNaN*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.AlmostEquals(System.Double,System.Double,System.Single)
  commentId: M:Vim.Math3d.MathOps.AlmostEquals(System.Double,System.Double,System.Single)
  id: AlmostEquals(System.Double,System.Double,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: AlmostEquals(Double, Double, Single)
  nameWithType: MathOps.AlmostEquals(Double, Double, Single)
  fullName: Vim.Math3d.MathOps.AlmostEquals(System.Double, System.Double, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: AlmostEquals
    path: ../src/MathOps.cs
    startLine: 71
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool AlmostEquals(this double v1, double v2, float tolerance = 1E-07F)
    parameters:
    - id: v1
      type: System.Double
    - id: v2
      type: System.Double
    - id: tolerance
      type: System.Single
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AlmostEquals(v1 As Double, v2 As Double, tolerance As Single = 1E-07F) As Boolean
  overload: Vim.Math3d.MathOps.AlmostEquals*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.AlmostZero(System.Double,System.Single)
  commentId: M:Vim.Math3d.MathOps.AlmostZero(System.Double,System.Single)
  id: AlmostZero(System.Double,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: AlmostZero(Double, Single)
  nameWithType: MathOps.AlmostZero(Double, Single)
  fullName: Vim.Math3d.MathOps.AlmostZero(System.Double, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: AlmostZero
    path: ../src/MathOps.cs
    startLine: 72
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool AlmostZero(this double v, float tolerance = 1E-07F)
    parameters:
    - id: v
      type: System.Double
    - id: tolerance
      type: System.Single
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AlmostZero(v As Double, tolerance As Single = 1E-07F) As Boolean
  overload: Vim.Math3d.MathOps.AlmostZero*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Smoothstep(System.Double)
  commentId: M:Vim.Math3d.MathOps.Smoothstep(System.Double)
  id: Smoothstep(System.Double)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Smoothstep(Double)
  nameWithType: MathOps.Smoothstep(Double)
  fullName: Vim.Math3d.MathOps.Smoothstep(System.Double)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Smoothstep
    path: ../src/MathOps.cs
    startLine: 73
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double Smoothstep(this double v)
    parameters:
    - id: v
      type: System.Double
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Smoothstep(v As Double) As Double
  overload: Vim.Math3d.MathOps.Smoothstep*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Add(System.Int32,System.Int32)
  commentId: M:Vim.Math3d.MathOps.Add(System.Int32,System.Int32)
  id: Add(System.Int32,System.Int32)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Add(Int32, Int32)
  nameWithType: MathOps.Add(Int32, Int32)
  fullName: Vim.Math3d.MathOps.Add(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Add
    path: ../src/MathOps.cs
    startLine: 75
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static int Add(this int v1, int v2)
    parameters:
    - id: v1
      type: System.Int32
    - id: v2
      type: System.Int32
    return:
      type: System.Int32
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Add(v1 As Integer, v2 As Integer) As Integer
  overload: Vim.Math3d.MathOps.Add*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Subtract(System.Int32,System.Int32)
  commentId: M:Vim.Math3d.MathOps.Subtract(System.Int32,System.Int32)
  id: Subtract(System.Int32,System.Int32)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Subtract(Int32, Int32)
  nameWithType: MathOps.Subtract(Int32, Int32)
  fullName: Vim.Math3d.MathOps.Subtract(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Subtract
    path: ../src/MathOps.cs
    startLine: 76
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static int Subtract(this int v1, int v2)
    parameters:
    - id: v1
      type: System.Int32
    - id: v2
      type: System.Int32
    return:
      type: System.Int32
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Subtract(v1 As Integer, v2 As Integer) As Integer
  overload: Vim.Math3d.MathOps.Subtract*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Multiply(System.Int32,System.Int32)
  commentId: M:Vim.Math3d.MathOps.Multiply(System.Int32,System.Int32)
  id: Multiply(System.Int32,System.Int32)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Multiply(Int32, Int32)
  nameWithType: MathOps.Multiply(Int32, Int32)
  fullName: Vim.Math3d.MathOps.Multiply(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Multiply
    path: ../src/MathOps.cs
    startLine: 77
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static int Multiply(this int v1, int v2)
    parameters:
    - id: v1
      type: System.Int32
    - id: v2
      type: System.Int32
    return:
      type: System.Int32
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Multiply(v1 As Integer, v2 As Integer) As Integer
  overload: Vim.Math3d.MathOps.Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Divide(System.Int32,System.Int32)
  commentId: M:Vim.Math3d.MathOps.Divide(System.Int32,System.Int32)
  id: Divide(System.Int32,System.Int32)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Divide(Int32, Int32)
  nameWithType: MathOps.Divide(Int32, Int32)
  fullName: Vim.Math3d.MathOps.Divide(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Divide
    path: ../src/MathOps.cs
    startLine: 78
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static int Divide(this int v1, int v2)
    parameters:
    - id: v1
      type: System.Int32
    - id: v2
      type: System.Int32
    return:
      type: System.Int32
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Divide(v1 As Integer, v2 As Integer) As Integer
  overload: Vim.Math3d.MathOps.Divide*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Negate(System.Int32)
  commentId: M:Vim.Math3d.MathOps.Negate(System.Int32)
  id: Negate(System.Int32)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Negate(Int32)
  nameWithType: MathOps.Negate(Int32)
  fullName: Vim.Math3d.MathOps.Negate(System.Int32)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Negate
    path: ../src/MathOps.cs
    startLine: 79
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static int Negate(this int v)
    parameters:
    - id: v
      type: System.Int32
    return:
      type: System.Int32
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Negate(v As Integer) As Integer
  overload: Vim.Math3d.MathOps.Negate*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Add(System.Int64,System.Int64)
  commentId: M:Vim.Math3d.MathOps.Add(System.Int64,System.Int64)
  id: Add(System.Int64,System.Int64)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Add(Int64, Int64)
  nameWithType: MathOps.Add(Int64, Int64)
  fullName: Vim.Math3d.MathOps.Add(System.Int64, System.Int64)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Add
    path: ../src/MathOps.cs
    startLine: 80
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static long Add(this long v1, long v2)
    parameters:
    - id: v1
      type: System.Int64
    - id: v2
      type: System.Int64
    return:
      type: System.Int64
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Add(v1 As Long, v2 As Long) As Long
  overload: Vim.Math3d.MathOps.Add*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Subtract(System.Int64,System.Int64)
  commentId: M:Vim.Math3d.MathOps.Subtract(System.Int64,System.Int64)
  id: Subtract(System.Int64,System.Int64)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Subtract(Int64, Int64)
  nameWithType: MathOps.Subtract(Int64, Int64)
  fullName: Vim.Math3d.MathOps.Subtract(System.Int64, System.Int64)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Subtract
    path: ../src/MathOps.cs
    startLine: 81
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static long Subtract(this long v1, long v2)
    parameters:
    - id: v1
      type: System.Int64
    - id: v2
      type: System.Int64
    return:
      type: System.Int64
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Subtract(v1 As Long, v2 As Long) As Long
  overload: Vim.Math3d.MathOps.Subtract*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Multiply(System.Int64,System.Int64)
  commentId: M:Vim.Math3d.MathOps.Multiply(System.Int64,System.Int64)
  id: Multiply(System.Int64,System.Int64)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Multiply(Int64, Int64)
  nameWithType: MathOps.Multiply(Int64, Int64)
  fullName: Vim.Math3d.MathOps.Multiply(System.Int64, System.Int64)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Multiply
    path: ../src/MathOps.cs
    startLine: 82
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static long Multiply(this long v1, long v2)
    parameters:
    - id: v1
      type: System.Int64
    - id: v2
      type: System.Int64
    return:
      type: System.Int64
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Multiply(v1 As Long, v2 As Long) As Long
  overload: Vim.Math3d.MathOps.Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Divide(System.Int64,System.Int64)
  commentId: M:Vim.Math3d.MathOps.Divide(System.Int64,System.Int64)
  id: Divide(System.Int64,System.Int64)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Divide(Int64, Int64)
  nameWithType: MathOps.Divide(Int64, Int64)
  fullName: Vim.Math3d.MathOps.Divide(System.Int64, System.Int64)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Divide
    path: ../src/MathOps.cs
    startLine: 83
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static long Divide(this long v1, long v2)
    parameters:
    - id: v1
      type: System.Int64
    - id: v2
      type: System.Int64
    return:
      type: System.Int64
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Divide(v1 As Long, v2 As Long) As Long
  overload: Vim.Math3d.MathOps.Divide*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Negate(System.Int64)
  commentId: M:Vim.Math3d.MathOps.Negate(System.Int64)
  id: Negate(System.Int64)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Negate(Int64)
  nameWithType: MathOps.Negate(Int64)
  fullName: Vim.Math3d.MathOps.Negate(System.Int64)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Negate
    path: ../src/MathOps.cs
    startLine: 84
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static long Negate(this long v)
    parameters:
    - id: v
      type: System.Int64
    return:
      type: System.Int64
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Negate(v As Long) As Long
  overload: Vim.Math3d.MathOps.Negate*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Add(System.Single,System.Single)
  commentId: M:Vim.Math3d.MathOps.Add(System.Single,System.Single)
  id: Add(System.Single,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Add(Single, Single)
  nameWithType: MathOps.Add(Single, Single)
  fullName: Vim.Math3d.MathOps.Add(System.Single, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Add
    path: ../src/MathOps.cs
    startLine: 85
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float Add(this float v1, float v2)
    parameters:
    - id: v1
      type: System.Single
    - id: v2
      type: System.Single
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Add(v1 As Single, v2 As Single) As Single
  overload: Vim.Math3d.MathOps.Add*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Subtract(System.Single,System.Single)
  commentId: M:Vim.Math3d.MathOps.Subtract(System.Single,System.Single)
  id: Subtract(System.Single,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Subtract(Single, Single)
  nameWithType: MathOps.Subtract(Single, Single)
  fullName: Vim.Math3d.MathOps.Subtract(System.Single, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Subtract
    path: ../src/MathOps.cs
    startLine: 86
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float Subtract(this float v1, float v2)
    parameters:
    - id: v1
      type: System.Single
    - id: v2
      type: System.Single
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Subtract(v1 As Single, v2 As Single) As Single
  overload: Vim.Math3d.MathOps.Subtract*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Multiply(System.Single,System.Single)
  commentId: M:Vim.Math3d.MathOps.Multiply(System.Single,System.Single)
  id: Multiply(System.Single,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Multiply(Single, Single)
  nameWithType: MathOps.Multiply(Single, Single)
  fullName: Vim.Math3d.MathOps.Multiply(System.Single, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Multiply
    path: ../src/MathOps.cs
    startLine: 87
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float Multiply(this float v1, float v2)
    parameters:
    - id: v1
      type: System.Single
    - id: v2
      type: System.Single
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Multiply(v1 As Single, v2 As Single) As Single
  overload: Vim.Math3d.MathOps.Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Divide(System.Single,System.Single)
  commentId: M:Vim.Math3d.MathOps.Divide(System.Single,System.Single)
  id: Divide(System.Single,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Divide(Single, Single)
  nameWithType: MathOps.Divide(Single, Single)
  fullName: Vim.Math3d.MathOps.Divide(System.Single, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Divide
    path: ../src/MathOps.cs
    startLine: 88
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float Divide(this float v1, float v2)
    parameters:
    - id: v1
      type: System.Single
    - id: v2
      type: System.Single
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Divide(v1 As Single, v2 As Single) As Single
  overload: Vim.Math3d.MathOps.Divide*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Negate(System.Single)
  commentId: M:Vim.Math3d.MathOps.Negate(System.Single)
  id: Negate(System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Negate(Single)
  nameWithType: MathOps.Negate(Single)
  fullName: Vim.Math3d.MathOps.Negate(System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Negate
    path: ../src/MathOps.cs
    startLine: 89
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float Negate(this float v)
    parameters:
    - id: v
      type: System.Single
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Negate(v As Single) As Single
  overload: Vim.Math3d.MathOps.Negate*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Add(System.Double,System.Double)
  commentId: M:Vim.Math3d.MathOps.Add(System.Double,System.Double)
  id: Add(System.Double,System.Double)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Add(Double, Double)
  nameWithType: MathOps.Add(Double, Double)
  fullName: Vim.Math3d.MathOps.Add(System.Double, System.Double)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Add
    path: ../src/MathOps.cs
    startLine: 90
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double Add(this double v1, double v2)
    parameters:
    - id: v1
      type: System.Double
    - id: v2
      type: System.Double
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Add(v1 As Double, v2 As Double) As Double
  overload: Vim.Math3d.MathOps.Add*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Subtract(System.Double,System.Double)
  commentId: M:Vim.Math3d.MathOps.Subtract(System.Double,System.Double)
  id: Subtract(System.Double,System.Double)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Subtract(Double, Double)
  nameWithType: MathOps.Subtract(Double, Double)
  fullName: Vim.Math3d.MathOps.Subtract(System.Double, System.Double)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Subtract
    path: ../src/MathOps.cs
    startLine: 91
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double Subtract(this double v1, double v2)
    parameters:
    - id: v1
      type: System.Double
    - id: v2
      type: System.Double
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Subtract(v1 As Double, v2 As Double) As Double
  overload: Vim.Math3d.MathOps.Subtract*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Multiply(System.Double,System.Double)
  commentId: M:Vim.Math3d.MathOps.Multiply(System.Double,System.Double)
  id: Multiply(System.Double,System.Double)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Multiply(Double, Double)
  nameWithType: MathOps.Multiply(Double, Double)
  fullName: Vim.Math3d.MathOps.Multiply(System.Double, System.Double)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Multiply
    path: ../src/MathOps.cs
    startLine: 92
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double Multiply(this double v1, double v2)
    parameters:
    - id: v1
      type: System.Double
    - id: v2
      type: System.Double
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Multiply(v1 As Double, v2 As Double) As Double
  overload: Vim.Math3d.MathOps.Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Divide(System.Double,System.Double)
  commentId: M:Vim.Math3d.MathOps.Divide(System.Double,System.Double)
  id: Divide(System.Double,System.Double)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Divide(Double, Double)
  nameWithType: MathOps.Divide(Double, Double)
  fullName: Vim.Math3d.MathOps.Divide(System.Double, System.Double)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Divide
    path: ../src/MathOps.cs
    startLine: 93
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double Divide(this double v1, double v2)
    parameters:
    - id: v1
      type: System.Double
    - id: v2
      type: System.Double
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Divide(v1 As Double, v2 As Double) As Double
  overload: Vim.Math3d.MathOps.Divide*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Negate(System.Double)
  commentId: M:Vim.Math3d.MathOps.Negate(System.Double)
  id: Negate(System.Double)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Negate(Double)
  nameWithType: MathOps.Negate(Double)
  fullName: Vim.Math3d.MathOps.Negate(System.Double)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Negate
    path: ../src/MathOps.cs
    startLine: 94
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double Negate(this double v)
    parameters:
    - id: v
      type: System.Double
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Negate(v As Double) As Double
  overload: Vim.Math3d.MathOps.Negate*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Add(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.MathOps.Add(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  id: Add(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Add(Vector2, Vector2)
  nameWithType: MathOps.Add(Vector2, Vector2)
  fullName: Vim.Math3d.MathOps.Add(Vim.Math3d.Vector2, Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Add
    path: ../src/MathOps.cs
    startLine: 95
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector2 Add(this Vector2 v1, Vector2 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.Vector2
    - id: v2
      type: Vim.Math3d.Vector2
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Add(v1 As Vector2, v2 As Vector2) As Vector2
  overload: Vim.Math3d.MathOps.Add*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Subtract(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.MathOps.Subtract(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  id: Subtract(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Subtract(Vector2, Vector2)
  nameWithType: MathOps.Subtract(Vector2, Vector2)
  fullName: Vim.Math3d.MathOps.Subtract(Vim.Math3d.Vector2, Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Subtract
    path: ../src/MathOps.cs
    startLine: 96
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector2 Subtract(this Vector2 v1, Vector2 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.Vector2
    - id: v2
      type: Vim.Math3d.Vector2
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Subtract(v1 As Vector2, v2 As Vector2) As Vector2
  overload: Vim.Math3d.MathOps.Subtract*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Multiply(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.MathOps.Multiply(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  id: Multiply(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Multiply(Vector2, Vector2)
  nameWithType: MathOps.Multiply(Vector2, Vector2)
  fullName: Vim.Math3d.MathOps.Multiply(Vim.Math3d.Vector2, Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Multiply
    path: ../src/MathOps.cs
    startLine: 97
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector2 Multiply(this Vector2 v1, Vector2 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.Vector2
    - id: v2
      type: Vim.Math3d.Vector2
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Multiply(v1 As Vector2, v2 As Vector2) As Vector2
  overload: Vim.Math3d.MathOps.Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Divide(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.MathOps.Divide(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  id: Divide(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Divide(Vector2, Vector2)
  nameWithType: MathOps.Divide(Vector2, Vector2)
  fullName: Vim.Math3d.MathOps.Divide(Vim.Math3d.Vector2, Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Divide
    path: ../src/MathOps.cs
    startLine: 98
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector2 Divide(this Vector2 v1, Vector2 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.Vector2
    - id: v2
      type: Vim.Math3d.Vector2
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Divide(v1 As Vector2, v2 As Vector2) As Vector2
  overload: Vim.Math3d.MathOps.Divide*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Negate(Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.MathOps.Negate(Vim.Math3d.Vector2)
  id: Negate(Vim.Math3d.Vector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Negate(Vector2)
  nameWithType: MathOps.Negate(Vector2)
  fullName: Vim.Math3d.MathOps.Negate(Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Negate
    path: ../src/MathOps.cs
    startLine: 99
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector2 Negate(this Vector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector2
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Negate(v As Vector2) As Vector2
  overload: Vim.Math3d.MathOps.Negate*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Add(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.MathOps.Add(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  id: Add(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Add(Vector3, Vector3)
  nameWithType: MathOps.Add(Vector3, Vector3)
  fullName: Vim.Math3d.MathOps.Add(Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Add
    path: ../src/MathOps.cs
    startLine: 100
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 Add(this Vector3 v1, Vector3 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.Vector3
    - id: v2
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Add(v1 As Vector3, v2 As Vector3) As Vector3
  overload: Vim.Math3d.MathOps.Add*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Subtract(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.MathOps.Subtract(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  id: Subtract(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Subtract(Vector3, Vector3)
  nameWithType: MathOps.Subtract(Vector3, Vector3)
  fullName: Vim.Math3d.MathOps.Subtract(Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Subtract
    path: ../src/MathOps.cs
    startLine: 101
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 Subtract(this Vector3 v1, Vector3 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.Vector3
    - id: v2
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Subtract(v1 As Vector3, v2 As Vector3) As Vector3
  overload: Vim.Math3d.MathOps.Subtract*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Multiply(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.MathOps.Multiply(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  id: Multiply(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Multiply(Vector3, Vector3)
  nameWithType: MathOps.Multiply(Vector3, Vector3)
  fullName: Vim.Math3d.MathOps.Multiply(Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Multiply
    path: ../src/MathOps.cs
    startLine: 102
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 Multiply(this Vector3 v1, Vector3 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.Vector3
    - id: v2
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Multiply(v1 As Vector3, v2 As Vector3) As Vector3
  overload: Vim.Math3d.MathOps.Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Divide(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.MathOps.Divide(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  id: Divide(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Divide(Vector3, Vector3)
  nameWithType: MathOps.Divide(Vector3, Vector3)
  fullName: Vim.Math3d.MathOps.Divide(Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Divide
    path: ../src/MathOps.cs
    startLine: 103
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 Divide(this Vector3 v1, Vector3 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.Vector3
    - id: v2
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Divide(v1 As Vector3, v2 As Vector3) As Vector3
  overload: Vim.Math3d.MathOps.Divide*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Negate(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.MathOps.Negate(Vim.Math3d.Vector3)
  id: Negate(Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Negate(Vector3)
  nameWithType: MathOps.Negate(Vector3)
  fullName: Vim.Math3d.MathOps.Negate(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Negate
    path: ../src/MathOps.cs
    startLine: 104
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 Negate(this Vector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Negate(v As Vector3) As Vector3
  overload: Vim.Math3d.MathOps.Negate*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Add(Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  commentId: M:Vim.Math3d.MathOps.Add(Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  id: Add(Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Add(Vector4, Vector4)
  nameWithType: MathOps.Add(Vector4, Vector4)
  fullName: Vim.Math3d.MathOps.Add(Vim.Math3d.Vector4, Vim.Math3d.Vector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Add
    path: ../src/MathOps.cs
    startLine: 105
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector4 Add(this Vector4 v1, Vector4 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.Vector4
    - id: v2
      type: Vim.Math3d.Vector4
    return:
      type: Vim.Math3d.Vector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Add(v1 As Vector4, v2 As Vector4) As Vector4
  overload: Vim.Math3d.MathOps.Add*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Subtract(Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  commentId: M:Vim.Math3d.MathOps.Subtract(Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  id: Subtract(Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Subtract(Vector4, Vector4)
  nameWithType: MathOps.Subtract(Vector4, Vector4)
  fullName: Vim.Math3d.MathOps.Subtract(Vim.Math3d.Vector4, Vim.Math3d.Vector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Subtract
    path: ../src/MathOps.cs
    startLine: 106
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector4 Subtract(this Vector4 v1, Vector4 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.Vector4
    - id: v2
      type: Vim.Math3d.Vector4
    return:
      type: Vim.Math3d.Vector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Subtract(v1 As Vector4, v2 As Vector4) As Vector4
  overload: Vim.Math3d.MathOps.Subtract*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Multiply(Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  commentId: M:Vim.Math3d.MathOps.Multiply(Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  id: Multiply(Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Multiply(Vector4, Vector4)
  nameWithType: MathOps.Multiply(Vector4, Vector4)
  fullName: Vim.Math3d.MathOps.Multiply(Vim.Math3d.Vector4, Vim.Math3d.Vector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Multiply
    path: ../src/MathOps.cs
    startLine: 107
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector4 Multiply(this Vector4 v1, Vector4 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.Vector4
    - id: v2
      type: Vim.Math3d.Vector4
    return:
      type: Vim.Math3d.Vector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Multiply(v1 As Vector4, v2 As Vector4) As Vector4
  overload: Vim.Math3d.MathOps.Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Divide(Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  commentId: M:Vim.Math3d.MathOps.Divide(Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  id: Divide(Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Divide(Vector4, Vector4)
  nameWithType: MathOps.Divide(Vector4, Vector4)
  fullName: Vim.Math3d.MathOps.Divide(Vim.Math3d.Vector4, Vim.Math3d.Vector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Divide
    path: ../src/MathOps.cs
    startLine: 108
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector4 Divide(this Vector4 v1, Vector4 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.Vector4
    - id: v2
      type: Vim.Math3d.Vector4
    return:
      type: Vim.Math3d.Vector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Divide(v1 As Vector4, v2 As Vector4) As Vector4
  overload: Vim.Math3d.MathOps.Divide*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Negate(Vim.Math3d.Vector4)
  commentId: M:Vim.Math3d.MathOps.Negate(Vim.Math3d.Vector4)
  id: Negate(Vim.Math3d.Vector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Negate(Vector4)
  nameWithType: MathOps.Negate(Vector4)
  fullName: Vim.Math3d.MathOps.Negate(Vim.Math3d.Vector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Negate
    path: ../src/MathOps.cs
    startLine: 109
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector4 Negate(this Vector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector4
    return:
      type: Vim.Math3d.Vector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Negate(v As Vector4) As Vector4
  overload: Vim.Math3d.MathOps.Negate*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Add(Vim.Math3d.DVector2,Vim.Math3d.DVector2)
  commentId: M:Vim.Math3d.MathOps.Add(Vim.Math3d.DVector2,Vim.Math3d.DVector2)
  id: Add(Vim.Math3d.DVector2,Vim.Math3d.DVector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Add(DVector2, DVector2)
  nameWithType: MathOps.Add(DVector2, DVector2)
  fullName: Vim.Math3d.MathOps.Add(Vim.Math3d.DVector2, Vim.Math3d.DVector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Add
    path: ../src/MathOps.cs
    startLine: 110
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector2 Add(this DVector2 v1, DVector2 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.DVector2
    - id: v2
      type: Vim.Math3d.DVector2
    return:
      type: Vim.Math3d.DVector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Add(v1 As DVector2, v2 As DVector2) As DVector2
  overload: Vim.Math3d.MathOps.Add*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Subtract(Vim.Math3d.DVector2,Vim.Math3d.DVector2)
  commentId: M:Vim.Math3d.MathOps.Subtract(Vim.Math3d.DVector2,Vim.Math3d.DVector2)
  id: Subtract(Vim.Math3d.DVector2,Vim.Math3d.DVector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Subtract(DVector2, DVector2)
  nameWithType: MathOps.Subtract(DVector2, DVector2)
  fullName: Vim.Math3d.MathOps.Subtract(Vim.Math3d.DVector2, Vim.Math3d.DVector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Subtract
    path: ../src/MathOps.cs
    startLine: 111
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector2 Subtract(this DVector2 v1, DVector2 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.DVector2
    - id: v2
      type: Vim.Math3d.DVector2
    return:
      type: Vim.Math3d.DVector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Subtract(v1 As DVector2, v2 As DVector2) As DVector2
  overload: Vim.Math3d.MathOps.Subtract*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Multiply(Vim.Math3d.DVector2,Vim.Math3d.DVector2)
  commentId: M:Vim.Math3d.MathOps.Multiply(Vim.Math3d.DVector2,Vim.Math3d.DVector2)
  id: Multiply(Vim.Math3d.DVector2,Vim.Math3d.DVector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Multiply(DVector2, DVector2)
  nameWithType: MathOps.Multiply(DVector2, DVector2)
  fullName: Vim.Math3d.MathOps.Multiply(Vim.Math3d.DVector2, Vim.Math3d.DVector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Multiply
    path: ../src/MathOps.cs
    startLine: 112
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector2 Multiply(this DVector2 v1, DVector2 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.DVector2
    - id: v2
      type: Vim.Math3d.DVector2
    return:
      type: Vim.Math3d.DVector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Multiply(v1 As DVector2, v2 As DVector2) As DVector2
  overload: Vim.Math3d.MathOps.Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Divide(Vim.Math3d.DVector2,Vim.Math3d.DVector2)
  commentId: M:Vim.Math3d.MathOps.Divide(Vim.Math3d.DVector2,Vim.Math3d.DVector2)
  id: Divide(Vim.Math3d.DVector2,Vim.Math3d.DVector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Divide(DVector2, DVector2)
  nameWithType: MathOps.Divide(DVector2, DVector2)
  fullName: Vim.Math3d.MathOps.Divide(Vim.Math3d.DVector2, Vim.Math3d.DVector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Divide
    path: ../src/MathOps.cs
    startLine: 113
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector2 Divide(this DVector2 v1, DVector2 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.DVector2
    - id: v2
      type: Vim.Math3d.DVector2
    return:
      type: Vim.Math3d.DVector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Divide(v1 As DVector2, v2 As DVector2) As DVector2
  overload: Vim.Math3d.MathOps.Divide*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Negate(Vim.Math3d.DVector2)
  commentId: M:Vim.Math3d.MathOps.Negate(Vim.Math3d.DVector2)
  id: Negate(Vim.Math3d.DVector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Negate(DVector2)
  nameWithType: MathOps.Negate(DVector2)
  fullName: Vim.Math3d.MathOps.Negate(Vim.Math3d.DVector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Negate
    path: ../src/MathOps.cs
    startLine: 114
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector2 Negate(this DVector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector2
    return:
      type: Vim.Math3d.DVector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Negate(v As DVector2) As DVector2
  overload: Vim.Math3d.MathOps.Negate*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Add(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  commentId: M:Vim.Math3d.MathOps.Add(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  id: Add(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Add(DVector3, DVector3)
  nameWithType: MathOps.Add(DVector3, DVector3)
  fullName: Vim.Math3d.MathOps.Add(Vim.Math3d.DVector3, Vim.Math3d.DVector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Add
    path: ../src/MathOps.cs
    startLine: 115
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector3 Add(this DVector3 v1, DVector3 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.DVector3
    - id: v2
      type: Vim.Math3d.DVector3
    return:
      type: Vim.Math3d.DVector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Add(v1 As DVector3, v2 As DVector3) As DVector3
  overload: Vim.Math3d.MathOps.Add*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Subtract(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  commentId: M:Vim.Math3d.MathOps.Subtract(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  id: Subtract(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Subtract(DVector3, DVector3)
  nameWithType: MathOps.Subtract(DVector3, DVector3)
  fullName: Vim.Math3d.MathOps.Subtract(Vim.Math3d.DVector3, Vim.Math3d.DVector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Subtract
    path: ../src/MathOps.cs
    startLine: 116
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector3 Subtract(this DVector3 v1, DVector3 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.DVector3
    - id: v2
      type: Vim.Math3d.DVector3
    return:
      type: Vim.Math3d.DVector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Subtract(v1 As DVector3, v2 As DVector3) As DVector3
  overload: Vim.Math3d.MathOps.Subtract*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Multiply(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  commentId: M:Vim.Math3d.MathOps.Multiply(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  id: Multiply(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Multiply(DVector3, DVector3)
  nameWithType: MathOps.Multiply(DVector3, DVector3)
  fullName: Vim.Math3d.MathOps.Multiply(Vim.Math3d.DVector3, Vim.Math3d.DVector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Multiply
    path: ../src/MathOps.cs
    startLine: 117
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector3 Multiply(this DVector3 v1, DVector3 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.DVector3
    - id: v2
      type: Vim.Math3d.DVector3
    return:
      type: Vim.Math3d.DVector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Multiply(v1 As DVector3, v2 As DVector3) As DVector3
  overload: Vim.Math3d.MathOps.Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Divide(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  commentId: M:Vim.Math3d.MathOps.Divide(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  id: Divide(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Divide(DVector3, DVector3)
  nameWithType: MathOps.Divide(DVector3, DVector3)
  fullName: Vim.Math3d.MathOps.Divide(Vim.Math3d.DVector3, Vim.Math3d.DVector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Divide
    path: ../src/MathOps.cs
    startLine: 118
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector3 Divide(this DVector3 v1, DVector3 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.DVector3
    - id: v2
      type: Vim.Math3d.DVector3
    return:
      type: Vim.Math3d.DVector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Divide(v1 As DVector3, v2 As DVector3) As DVector3
  overload: Vim.Math3d.MathOps.Divide*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Negate(Vim.Math3d.DVector3)
  commentId: M:Vim.Math3d.MathOps.Negate(Vim.Math3d.DVector3)
  id: Negate(Vim.Math3d.DVector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Negate(DVector3)
  nameWithType: MathOps.Negate(DVector3)
  fullName: Vim.Math3d.MathOps.Negate(Vim.Math3d.DVector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Negate
    path: ../src/MathOps.cs
    startLine: 119
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector3 Negate(this DVector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector3
    return:
      type: Vim.Math3d.DVector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Negate(v As DVector3) As DVector3
  overload: Vim.Math3d.MathOps.Negate*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Add(Vim.Math3d.DVector4,Vim.Math3d.DVector4)
  commentId: M:Vim.Math3d.MathOps.Add(Vim.Math3d.DVector4,Vim.Math3d.DVector4)
  id: Add(Vim.Math3d.DVector4,Vim.Math3d.DVector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Add(DVector4, DVector4)
  nameWithType: MathOps.Add(DVector4, DVector4)
  fullName: Vim.Math3d.MathOps.Add(Vim.Math3d.DVector4, Vim.Math3d.DVector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Add
    path: ../src/MathOps.cs
    startLine: 120
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector4 Add(this DVector4 v1, DVector4 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.DVector4
    - id: v2
      type: Vim.Math3d.DVector4
    return:
      type: Vim.Math3d.DVector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Add(v1 As DVector4, v2 As DVector4) As DVector4
  overload: Vim.Math3d.MathOps.Add*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Subtract(Vim.Math3d.DVector4,Vim.Math3d.DVector4)
  commentId: M:Vim.Math3d.MathOps.Subtract(Vim.Math3d.DVector4,Vim.Math3d.DVector4)
  id: Subtract(Vim.Math3d.DVector4,Vim.Math3d.DVector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Subtract(DVector4, DVector4)
  nameWithType: MathOps.Subtract(DVector4, DVector4)
  fullName: Vim.Math3d.MathOps.Subtract(Vim.Math3d.DVector4, Vim.Math3d.DVector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Subtract
    path: ../src/MathOps.cs
    startLine: 121
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector4 Subtract(this DVector4 v1, DVector4 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.DVector4
    - id: v2
      type: Vim.Math3d.DVector4
    return:
      type: Vim.Math3d.DVector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Subtract(v1 As DVector4, v2 As DVector4) As DVector4
  overload: Vim.Math3d.MathOps.Subtract*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Multiply(Vim.Math3d.DVector4,Vim.Math3d.DVector4)
  commentId: M:Vim.Math3d.MathOps.Multiply(Vim.Math3d.DVector4,Vim.Math3d.DVector4)
  id: Multiply(Vim.Math3d.DVector4,Vim.Math3d.DVector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Multiply(DVector4, DVector4)
  nameWithType: MathOps.Multiply(DVector4, DVector4)
  fullName: Vim.Math3d.MathOps.Multiply(Vim.Math3d.DVector4, Vim.Math3d.DVector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Multiply
    path: ../src/MathOps.cs
    startLine: 122
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector4 Multiply(this DVector4 v1, DVector4 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.DVector4
    - id: v2
      type: Vim.Math3d.DVector4
    return:
      type: Vim.Math3d.DVector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Multiply(v1 As DVector4, v2 As DVector4) As DVector4
  overload: Vim.Math3d.MathOps.Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Divide(Vim.Math3d.DVector4,Vim.Math3d.DVector4)
  commentId: M:Vim.Math3d.MathOps.Divide(Vim.Math3d.DVector4,Vim.Math3d.DVector4)
  id: Divide(Vim.Math3d.DVector4,Vim.Math3d.DVector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Divide(DVector4, DVector4)
  nameWithType: MathOps.Divide(DVector4, DVector4)
  fullName: Vim.Math3d.MathOps.Divide(Vim.Math3d.DVector4, Vim.Math3d.DVector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Divide
    path: ../src/MathOps.cs
    startLine: 123
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector4 Divide(this DVector4 v1, DVector4 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.DVector4
    - id: v2
      type: Vim.Math3d.DVector4
    return:
      type: Vim.Math3d.DVector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Divide(v1 As DVector4, v2 As DVector4) As DVector4
  overload: Vim.Math3d.MathOps.Divide*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Negate(Vim.Math3d.DVector4)
  commentId: M:Vim.Math3d.MathOps.Negate(Vim.Math3d.DVector4)
  id: Negate(Vim.Math3d.DVector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Negate(DVector4)
  nameWithType: MathOps.Negate(DVector4)
  fullName: Vim.Math3d.MathOps.Negate(Vim.Math3d.DVector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Negate
    path: ../src/MathOps.cs
    startLine: 124
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector4 Negate(this DVector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector4
    return:
      type: Vim.Math3d.DVector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Negate(v As DVector4) As DVector4
  overload: Vim.Math3d.MathOps.Negate*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Within(System.Int32,System.Int32,System.Int32)
  commentId: M:Vim.Math3d.MathOps.Within(System.Int32,System.Int32,System.Int32)
  id: Within(System.Int32,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Within(Int32, Int32, Int32)
  nameWithType: MathOps.Within(Int32, Int32, Int32)
  fullName: Vim.Math3d.MathOps.Within(System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Within
    path: ../src/MathOps.cs
    startLine: 126
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool Within(this int v, int min, int max)
    parameters:
    - id: v
      type: System.Int32
    - id: min
      type: System.Int32
    - id: max
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Within(v As Integer, min As Integer, max As Integer) As Boolean
  overload: Vim.Math3d.MathOps.Within*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Sqr(System.Int32)
  commentId: M:Vim.Math3d.MathOps.Sqr(System.Int32)
  id: Sqr(System.Int32)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Sqr(Int32)
  nameWithType: MathOps.Sqr(Int32)
  fullName: Vim.Math3d.MathOps.Sqr(System.Int32)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Sqr
    path: ../src/MathOps.cs
    startLine: 127
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static int Sqr(this int x)
    parameters:
    - id: x
      type: System.Int32
    return:
      type: System.Int32
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sqr(x As Integer) As Integer
  overload: Vim.Math3d.MathOps.Sqr*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Cube(System.Int32)
  commentId: M:Vim.Math3d.MathOps.Cube(System.Int32)
  id: Cube(System.Int32)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Cube(Int32)
  nameWithType: MathOps.Cube(Int32)
  fullName: Vim.Math3d.MathOps.Cube(System.Int32)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Cube
    path: ../src/MathOps.cs
    startLine: 128
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static int Cube(this int x)
    parameters:
    - id: x
      type: System.Int32
    return:
      type: System.Int32
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Cube(x As Integer) As Integer
  overload: Vim.Math3d.MathOps.Cube*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Min(System.Int32,System.Int32)
  commentId: M:Vim.Math3d.MathOps.Min(System.Int32,System.Int32)
  id: Min(System.Int32,System.Int32)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Min(Int32, Int32)
  nameWithType: MathOps.Min(Int32, Int32)
  fullName: Vim.Math3d.MathOps.Min(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Min
    path: ../src/MathOps.cs
    startLine: 129
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static int Min(this int v1, int v2)
    parameters:
    - id: v1
      type: System.Int32
    - id: v2
      type: System.Int32
    return:
      type: System.Int32
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(v1 As Integer, v2 As Integer) As Integer
  overload: Vim.Math3d.MathOps.Min*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Max(System.Int32,System.Int32)
  commentId: M:Vim.Math3d.MathOps.Max(System.Int32,System.Int32)
  id: Max(System.Int32,System.Int32)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Max(Int32, Int32)
  nameWithType: MathOps.Max(Int32, Int32)
  fullName: Vim.Math3d.MathOps.Max(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Max
    path: ../src/MathOps.cs
    startLine: 130
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static int Max(this int v1, int v2)
    parameters:
    - id: v1
      type: System.Int32
    - id: v2
      type: System.Int32
    return:
      type: System.Int32
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(v1 As Integer, v2 As Integer) As Integer
  overload: Vim.Math3d.MathOps.Max*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Within(System.Int64,System.Int64,System.Int64)
  commentId: M:Vim.Math3d.MathOps.Within(System.Int64,System.Int64,System.Int64)
  id: Within(System.Int64,System.Int64,System.Int64)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Within(Int64, Int64, Int64)
  nameWithType: MathOps.Within(Int64, Int64, Int64)
  fullName: Vim.Math3d.MathOps.Within(System.Int64, System.Int64, System.Int64)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Within
    path: ../src/MathOps.cs
    startLine: 131
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool Within(this long v, long min, long max)
    parameters:
    - id: v
      type: System.Int64
    - id: min
      type: System.Int64
    - id: max
      type: System.Int64
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Within(v As Long, min As Long, max As Long) As Boolean
  overload: Vim.Math3d.MathOps.Within*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Sqr(System.Int64)
  commentId: M:Vim.Math3d.MathOps.Sqr(System.Int64)
  id: Sqr(System.Int64)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Sqr(Int64)
  nameWithType: MathOps.Sqr(Int64)
  fullName: Vim.Math3d.MathOps.Sqr(System.Int64)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Sqr
    path: ../src/MathOps.cs
    startLine: 132
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static long Sqr(this long x)
    parameters:
    - id: x
      type: System.Int64
    return:
      type: System.Int64
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sqr(x As Long) As Long
  overload: Vim.Math3d.MathOps.Sqr*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Cube(System.Int64)
  commentId: M:Vim.Math3d.MathOps.Cube(System.Int64)
  id: Cube(System.Int64)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Cube(Int64)
  nameWithType: MathOps.Cube(Int64)
  fullName: Vim.Math3d.MathOps.Cube(System.Int64)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Cube
    path: ../src/MathOps.cs
    startLine: 133
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static long Cube(this long x)
    parameters:
    - id: x
      type: System.Int64
    return:
      type: System.Int64
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Cube(x As Long) As Long
  overload: Vim.Math3d.MathOps.Cube*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Min(System.Int64,System.Int64)
  commentId: M:Vim.Math3d.MathOps.Min(System.Int64,System.Int64)
  id: Min(System.Int64,System.Int64)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Min(Int64, Int64)
  nameWithType: MathOps.Min(Int64, Int64)
  fullName: Vim.Math3d.MathOps.Min(System.Int64, System.Int64)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Min
    path: ../src/MathOps.cs
    startLine: 134
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static long Min(this long v1, long v2)
    parameters:
    - id: v1
      type: System.Int64
    - id: v2
      type: System.Int64
    return:
      type: System.Int64
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(v1 As Long, v2 As Long) As Long
  overload: Vim.Math3d.MathOps.Min*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Max(System.Int64,System.Int64)
  commentId: M:Vim.Math3d.MathOps.Max(System.Int64,System.Int64)
  id: Max(System.Int64,System.Int64)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Max(Int64, Int64)
  nameWithType: MathOps.Max(Int64, Int64)
  fullName: Vim.Math3d.MathOps.Max(System.Int64, System.Int64)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Max
    path: ../src/MathOps.cs
    startLine: 135
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static long Max(this long v1, long v2)
    parameters:
    - id: v1
      type: System.Int64
    - id: v2
      type: System.Int64
    return:
      type: System.Int64
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(v1 As Long, v2 As Long) As Long
  overload: Vim.Math3d.MathOps.Max*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Within(System.Single,System.Single,System.Single)
  commentId: M:Vim.Math3d.MathOps.Within(System.Single,System.Single,System.Single)
  id: Within(System.Single,System.Single,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Within(Single, Single, Single)
  nameWithType: MathOps.Within(Single, Single, Single)
  fullName: Vim.Math3d.MathOps.Within(System.Single, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Within
    path: ../src/MathOps.cs
    startLine: 136
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool Within(this float v, float min, float max)
    parameters:
    - id: v
      type: System.Single
    - id: min
      type: System.Single
    - id: max
      type: System.Single
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Within(v As Single, min As Single, max As Single) As Boolean
  overload: Vim.Math3d.MathOps.Within*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Sqr(System.Single)
  commentId: M:Vim.Math3d.MathOps.Sqr(System.Single)
  id: Sqr(System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Sqr(Single)
  nameWithType: MathOps.Sqr(Single)
  fullName: Vim.Math3d.MathOps.Sqr(System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Sqr
    path: ../src/MathOps.cs
    startLine: 137
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float Sqr(this float x)
    parameters:
    - id: x
      type: System.Single
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sqr(x As Single) As Single
  overload: Vim.Math3d.MathOps.Sqr*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Cube(System.Single)
  commentId: M:Vim.Math3d.MathOps.Cube(System.Single)
  id: Cube(System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Cube(Single)
  nameWithType: MathOps.Cube(Single)
  fullName: Vim.Math3d.MathOps.Cube(System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Cube
    path: ../src/MathOps.cs
    startLine: 138
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float Cube(this float x)
    parameters:
    - id: x
      type: System.Single
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Cube(x As Single) As Single
  overload: Vim.Math3d.MathOps.Cube*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Min(System.Single,System.Single)
  commentId: M:Vim.Math3d.MathOps.Min(System.Single,System.Single)
  id: Min(System.Single,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Min(Single, Single)
  nameWithType: MathOps.Min(Single, Single)
  fullName: Vim.Math3d.MathOps.Min(System.Single, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Min
    path: ../src/MathOps.cs
    startLine: 139
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float Min(this float v1, float v2)
    parameters:
    - id: v1
      type: System.Single
    - id: v2
      type: System.Single
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(v1 As Single, v2 As Single) As Single
  overload: Vim.Math3d.MathOps.Min*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Max(System.Single,System.Single)
  commentId: M:Vim.Math3d.MathOps.Max(System.Single,System.Single)
  id: Max(System.Single,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Max(Single, Single)
  nameWithType: MathOps.Max(Single, Single)
  fullName: Vim.Math3d.MathOps.Max(System.Single, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Max
    path: ../src/MathOps.cs
    startLine: 140
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float Max(this float v1, float v2)
    parameters:
    - id: v1
      type: System.Single
    - id: v2
      type: System.Single
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(v1 As Single, v2 As Single) As Single
  overload: Vim.Math3d.MathOps.Max*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Within(System.Double,System.Double,System.Double)
  commentId: M:Vim.Math3d.MathOps.Within(System.Double,System.Double,System.Double)
  id: Within(System.Double,System.Double,System.Double)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Within(Double, Double, Double)
  nameWithType: MathOps.Within(Double, Double, Double)
  fullName: Vim.Math3d.MathOps.Within(System.Double, System.Double, System.Double)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Within
    path: ../src/MathOps.cs
    startLine: 141
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool Within(this double v, double min, double max)
    parameters:
    - id: v
      type: System.Double
    - id: min
      type: System.Double
    - id: max
      type: System.Double
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Within(v As Double, min As Double, max As Double) As Boolean
  overload: Vim.Math3d.MathOps.Within*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Sqr(System.Double)
  commentId: M:Vim.Math3d.MathOps.Sqr(System.Double)
  id: Sqr(System.Double)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Sqr(Double)
  nameWithType: MathOps.Sqr(Double)
  fullName: Vim.Math3d.MathOps.Sqr(System.Double)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Sqr
    path: ../src/MathOps.cs
    startLine: 142
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double Sqr(this double x)
    parameters:
    - id: x
      type: System.Double
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sqr(x As Double) As Double
  overload: Vim.Math3d.MathOps.Sqr*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Cube(System.Double)
  commentId: M:Vim.Math3d.MathOps.Cube(System.Double)
  id: Cube(System.Double)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Cube(Double)
  nameWithType: MathOps.Cube(Double)
  fullName: Vim.Math3d.MathOps.Cube(System.Double)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Cube
    path: ../src/MathOps.cs
    startLine: 143
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double Cube(this double x)
    parameters:
    - id: x
      type: System.Double
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Cube(x As Double) As Double
  overload: Vim.Math3d.MathOps.Cube*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Min(System.Double,System.Double)
  commentId: M:Vim.Math3d.MathOps.Min(System.Double,System.Double)
  id: Min(System.Double,System.Double)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Min(Double, Double)
  nameWithType: MathOps.Min(Double, Double)
  fullName: Vim.Math3d.MathOps.Min(System.Double, System.Double)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Min
    path: ../src/MathOps.cs
    startLine: 144
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double Min(this double v1, double v2)
    parameters:
    - id: v1
      type: System.Double
    - id: v2
      type: System.Double
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(v1 As Double, v2 As Double) As Double
  overload: Vim.Math3d.MathOps.Min*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Max(System.Double,System.Double)
  commentId: M:Vim.Math3d.MathOps.Max(System.Double,System.Double)
  id: Max(System.Double,System.Double)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Max(Double, Double)
  nameWithType: MathOps.Max(Double, Double)
  fullName: Vim.Math3d.MathOps.Max(System.Double, System.Double)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Max
    path: ../src/MathOps.cs
    startLine: 145
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double Max(this double v1, double v2)
    parameters:
    - id: v1
      type: System.Double
    - id: v2
      type: System.Double
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(v1 As Double, v2 As Double) As Double
  overload: Vim.Math3d.MathOps.Max*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Gt(System.Int32,System.Int32)
  commentId: M:Vim.Math3d.MathOps.Gt(System.Int32,System.Int32)
  id: Gt(System.Int32,System.Int32)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Gt(Int32, Int32)
  nameWithType: MathOps.Gt(Int32, Int32)
  fullName: Vim.Math3d.MathOps.Gt(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Gt
    path: ../src/MathOps.cs
    startLine: 147
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool Gt(this int v1, int v2)
    parameters:
    - id: v1
      type: System.Int32
    - id: v2
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Gt(v1 As Integer, v2 As Integer) As Boolean
  overload: Vim.Math3d.MathOps.Gt*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Lt(System.Int32,System.Int32)
  commentId: M:Vim.Math3d.MathOps.Lt(System.Int32,System.Int32)
  id: Lt(System.Int32,System.Int32)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Lt(Int32, Int32)
  nameWithType: MathOps.Lt(Int32, Int32)
  fullName: Vim.Math3d.MathOps.Lt(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Lt
    path: ../src/MathOps.cs
    startLine: 148
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool Lt(this int v1, int v2)
    parameters:
    - id: v1
      type: System.Int32
    - id: v2
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Lt(v1 As Integer, v2 As Integer) As Boolean
  overload: Vim.Math3d.MathOps.Lt*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.GtEq(System.Int32,System.Int32)
  commentId: M:Vim.Math3d.MathOps.GtEq(System.Int32,System.Int32)
  id: GtEq(System.Int32,System.Int32)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: GtEq(Int32, Int32)
  nameWithType: MathOps.GtEq(Int32, Int32)
  fullName: Vim.Math3d.MathOps.GtEq(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: GtEq
    path: ../src/MathOps.cs
    startLine: 149
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool GtEq(this int v1, int v2)
    parameters:
    - id: v1
      type: System.Int32
    - id: v2
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GtEq(v1 As Integer, v2 As Integer) As Boolean
  overload: Vim.Math3d.MathOps.GtEq*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.LtEq(System.Int32,System.Int32)
  commentId: M:Vim.Math3d.MathOps.LtEq(System.Int32,System.Int32)
  id: LtEq(System.Int32,System.Int32)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: LtEq(Int32, Int32)
  nameWithType: MathOps.LtEq(Int32, Int32)
  fullName: Vim.Math3d.MathOps.LtEq(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: LtEq
    path: ../src/MathOps.cs
    startLine: 150
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool LtEq(this int v1, int v2)
    parameters:
    - id: v1
      type: System.Int32
    - id: v2
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LtEq(v1 As Integer, v2 As Integer) As Boolean
  overload: Vim.Math3d.MathOps.LtEq*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Eq(System.Int32,System.Int32)
  commentId: M:Vim.Math3d.MathOps.Eq(System.Int32,System.Int32)
  id: Eq(System.Int32,System.Int32)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Eq(Int32, Int32)
  nameWithType: MathOps.Eq(Int32, Int32)
  fullName: Vim.Math3d.MathOps.Eq(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Eq
    path: ../src/MathOps.cs
    startLine: 151
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool Eq(this int v1, int v2)
    parameters:
    - id: v1
      type: System.Int32
    - id: v2
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Eq(v1 As Integer, v2 As Integer) As Boolean
  overload: Vim.Math3d.MathOps.Eq*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.NEq(System.Int32,System.Int32)
  commentId: M:Vim.Math3d.MathOps.NEq(System.Int32,System.Int32)
  id: NEq(System.Int32,System.Int32)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: NEq(Int32, Int32)
  nameWithType: MathOps.NEq(Int32, Int32)
  fullName: Vim.Math3d.MathOps.NEq(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: NEq
    path: ../src/MathOps.cs
    startLine: 152
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool NEq(this int v1, int v2)
    parameters:
    - id: v1
      type: System.Int32
    - id: v2
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function NEq(v1 As Integer, v2 As Integer) As Boolean
  overload: Vim.Math3d.MathOps.NEq*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Gt(System.Int64,System.Int64)
  commentId: M:Vim.Math3d.MathOps.Gt(System.Int64,System.Int64)
  id: Gt(System.Int64,System.Int64)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Gt(Int64, Int64)
  nameWithType: MathOps.Gt(Int64, Int64)
  fullName: Vim.Math3d.MathOps.Gt(System.Int64, System.Int64)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Gt
    path: ../src/MathOps.cs
    startLine: 153
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool Gt(this long v1, long v2)
    parameters:
    - id: v1
      type: System.Int64
    - id: v2
      type: System.Int64
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Gt(v1 As Long, v2 As Long) As Boolean
  overload: Vim.Math3d.MathOps.Gt*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Lt(System.Int64,System.Int64)
  commentId: M:Vim.Math3d.MathOps.Lt(System.Int64,System.Int64)
  id: Lt(System.Int64,System.Int64)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Lt(Int64, Int64)
  nameWithType: MathOps.Lt(Int64, Int64)
  fullName: Vim.Math3d.MathOps.Lt(System.Int64, System.Int64)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Lt
    path: ../src/MathOps.cs
    startLine: 154
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool Lt(this long v1, long v2)
    parameters:
    - id: v1
      type: System.Int64
    - id: v2
      type: System.Int64
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Lt(v1 As Long, v2 As Long) As Boolean
  overload: Vim.Math3d.MathOps.Lt*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.GtEq(System.Int64,System.Int64)
  commentId: M:Vim.Math3d.MathOps.GtEq(System.Int64,System.Int64)
  id: GtEq(System.Int64,System.Int64)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: GtEq(Int64, Int64)
  nameWithType: MathOps.GtEq(Int64, Int64)
  fullName: Vim.Math3d.MathOps.GtEq(System.Int64, System.Int64)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: GtEq
    path: ../src/MathOps.cs
    startLine: 155
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool GtEq(this long v1, long v2)
    parameters:
    - id: v1
      type: System.Int64
    - id: v2
      type: System.Int64
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GtEq(v1 As Long, v2 As Long) As Boolean
  overload: Vim.Math3d.MathOps.GtEq*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.LtEq(System.Int64,System.Int64)
  commentId: M:Vim.Math3d.MathOps.LtEq(System.Int64,System.Int64)
  id: LtEq(System.Int64,System.Int64)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: LtEq(Int64, Int64)
  nameWithType: MathOps.LtEq(Int64, Int64)
  fullName: Vim.Math3d.MathOps.LtEq(System.Int64, System.Int64)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: LtEq
    path: ../src/MathOps.cs
    startLine: 156
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool LtEq(this long v1, long v2)
    parameters:
    - id: v1
      type: System.Int64
    - id: v2
      type: System.Int64
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LtEq(v1 As Long, v2 As Long) As Boolean
  overload: Vim.Math3d.MathOps.LtEq*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Eq(System.Int64,System.Int64)
  commentId: M:Vim.Math3d.MathOps.Eq(System.Int64,System.Int64)
  id: Eq(System.Int64,System.Int64)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Eq(Int64, Int64)
  nameWithType: MathOps.Eq(Int64, Int64)
  fullName: Vim.Math3d.MathOps.Eq(System.Int64, System.Int64)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Eq
    path: ../src/MathOps.cs
    startLine: 157
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool Eq(this long v1, long v2)
    parameters:
    - id: v1
      type: System.Int64
    - id: v2
      type: System.Int64
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Eq(v1 As Long, v2 As Long) As Boolean
  overload: Vim.Math3d.MathOps.Eq*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.NEq(System.Int64,System.Int64)
  commentId: M:Vim.Math3d.MathOps.NEq(System.Int64,System.Int64)
  id: NEq(System.Int64,System.Int64)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: NEq(Int64, Int64)
  nameWithType: MathOps.NEq(Int64, Int64)
  fullName: Vim.Math3d.MathOps.NEq(System.Int64, System.Int64)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: NEq
    path: ../src/MathOps.cs
    startLine: 158
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool NEq(this long v1, long v2)
    parameters:
    - id: v1
      type: System.Int64
    - id: v2
      type: System.Int64
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function NEq(v1 As Long, v2 As Long) As Boolean
  overload: Vim.Math3d.MathOps.NEq*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Gt(System.Single,System.Single)
  commentId: M:Vim.Math3d.MathOps.Gt(System.Single,System.Single)
  id: Gt(System.Single,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Gt(Single, Single)
  nameWithType: MathOps.Gt(Single, Single)
  fullName: Vim.Math3d.MathOps.Gt(System.Single, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Gt
    path: ../src/MathOps.cs
    startLine: 159
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool Gt(this float v1, float v2)
    parameters:
    - id: v1
      type: System.Single
    - id: v2
      type: System.Single
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Gt(v1 As Single, v2 As Single) As Boolean
  overload: Vim.Math3d.MathOps.Gt*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Lt(System.Single,System.Single)
  commentId: M:Vim.Math3d.MathOps.Lt(System.Single,System.Single)
  id: Lt(System.Single,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Lt(Single, Single)
  nameWithType: MathOps.Lt(Single, Single)
  fullName: Vim.Math3d.MathOps.Lt(System.Single, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Lt
    path: ../src/MathOps.cs
    startLine: 160
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool Lt(this float v1, float v2)
    parameters:
    - id: v1
      type: System.Single
    - id: v2
      type: System.Single
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Lt(v1 As Single, v2 As Single) As Boolean
  overload: Vim.Math3d.MathOps.Lt*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.GtEq(System.Single,System.Single)
  commentId: M:Vim.Math3d.MathOps.GtEq(System.Single,System.Single)
  id: GtEq(System.Single,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: GtEq(Single, Single)
  nameWithType: MathOps.GtEq(Single, Single)
  fullName: Vim.Math3d.MathOps.GtEq(System.Single, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: GtEq
    path: ../src/MathOps.cs
    startLine: 161
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool GtEq(this float v1, float v2)
    parameters:
    - id: v1
      type: System.Single
    - id: v2
      type: System.Single
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GtEq(v1 As Single, v2 As Single) As Boolean
  overload: Vim.Math3d.MathOps.GtEq*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.LtEq(System.Single,System.Single)
  commentId: M:Vim.Math3d.MathOps.LtEq(System.Single,System.Single)
  id: LtEq(System.Single,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: LtEq(Single, Single)
  nameWithType: MathOps.LtEq(Single, Single)
  fullName: Vim.Math3d.MathOps.LtEq(System.Single, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: LtEq
    path: ../src/MathOps.cs
    startLine: 162
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool LtEq(this float v1, float v2)
    parameters:
    - id: v1
      type: System.Single
    - id: v2
      type: System.Single
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LtEq(v1 As Single, v2 As Single) As Boolean
  overload: Vim.Math3d.MathOps.LtEq*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Eq(System.Single,System.Single)
  commentId: M:Vim.Math3d.MathOps.Eq(System.Single,System.Single)
  id: Eq(System.Single,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Eq(Single, Single)
  nameWithType: MathOps.Eq(Single, Single)
  fullName: Vim.Math3d.MathOps.Eq(System.Single, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Eq
    path: ../src/MathOps.cs
    startLine: 163
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool Eq(this float v1, float v2)
    parameters:
    - id: v1
      type: System.Single
    - id: v2
      type: System.Single
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Eq(v1 As Single, v2 As Single) As Boolean
  overload: Vim.Math3d.MathOps.Eq*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.NEq(System.Single,System.Single)
  commentId: M:Vim.Math3d.MathOps.NEq(System.Single,System.Single)
  id: NEq(System.Single,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: NEq(Single, Single)
  nameWithType: MathOps.NEq(Single, Single)
  fullName: Vim.Math3d.MathOps.NEq(System.Single, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: NEq
    path: ../src/MathOps.cs
    startLine: 164
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool NEq(this float v1, float v2)
    parameters:
    - id: v1
      type: System.Single
    - id: v2
      type: System.Single
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function NEq(v1 As Single, v2 As Single) As Boolean
  overload: Vim.Math3d.MathOps.NEq*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Gt(System.Double,System.Double)
  commentId: M:Vim.Math3d.MathOps.Gt(System.Double,System.Double)
  id: Gt(System.Double,System.Double)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Gt(Double, Double)
  nameWithType: MathOps.Gt(Double, Double)
  fullName: Vim.Math3d.MathOps.Gt(System.Double, System.Double)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Gt
    path: ../src/MathOps.cs
    startLine: 165
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool Gt(this double v1, double v2)
    parameters:
    - id: v1
      type: System.Double
    - id: v2
      type: System.Double
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Gt(v1 As Double, v2 As Double) As Boolean
  overload: Vim.Math3d.MathOps.Gt*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Lt(System.Double,System.Double)
  commentId: M:Vim.Math3d.MathOps.Lt(System.Double,System.Double)
  id: Lt(System.Double,System.Double)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Lt(Double, Double)
  nameWithType: MathOps.Lt(Double, Double)
  fullName: Vim.Math3d.MathOps.Lt(System.Double, System.Double)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Lt
    path: ../src/MathOps.cs
    startLine: 166
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool Lt(this double v1, double v2)
    parameters:
    - id: v1
      type: System.Double
    - id: v2
      type: System.Double
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Lt(v1 As Double, v2 As Double) As Boolean
  overload: Vim.Math3d.MathOps.Lt*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.GtEq(System.Double,System.Double)
  commentId: M:Vim.Math3d.MathOps.GtEq(System.Double,System.Double)
  id: GtEq(System.Double,System.Double)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: GtEq(Double, Double)
  nameWithType: MathOps.GtEq(Double, Double)
  fullName: Vim.Math3d.MathOps.GtEq(System.Double, System.Double)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: GtEq
    path: ../src/MathOps.cs
    startLine: 167
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool GtEq(this double v1, double v2)
    parameters:
    - id: v1
      type: System.Double
    - id: v2
      type: System.Double
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GtEq(v1 As Double, v2 As Double) As Boolean
  overload: Vim.Math3d.MathOps.GtEq*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.LtEq(System.Double,System.Double)
  commentId: M:Vim.Math3d.MathOps.LtEq(System.Double,System.Double)
  id: LtEq(System.Double,System.Double)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: LtEq(Double, Double)
  nameWithType: MathOps.LtEq(Double, Double)
  fullName: Vim.Math3d.MathOps.LtEq(System.Double, System.Double)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: LtEq
    path: ../src/MathOps.cs
    startLine: 168
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool LtEq(this double v1, double v2)
    parameters:
    - id: v1
      type: System.Double
    - id: v2
      type: System.Double
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LtEq(v1 As Double, v2 As Double) As Boolean
  overload: Vim.Math3d.MathOps.LtEq*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Eq(System.Double,System.Double)
  commentId: M:Vim.Math3d.MathOps.Eq(System.Double,System.Double)
  id: Eq(System.Double,System.Double)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Eq(Double, Double)
  nameWithType: MathOps.Eq(Double, Double)
  fullName: Vim.Math3d.MathOps.Eq(System.Double, System.Double)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Eq
    path: ../src/MathOps.cs
    startLine: 169
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool Eq(this double v1, double v2)
    parameters:
    - id: v1
      type: System.Double
    - id: v2
      type: System.Double
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Eq(v1 As Double, v2 As Double) As Boolean
  overload: Vim.Math3d.MathOps.Eq*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.NEq(System.Double,System.Double)
  commentId: M:Vim.Math3d.MathOps.NEq(System.Double,System.Double)
  id: NEq(System.Double,System.Double)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: NEq(Double, Double)
  nameWithType: MathOps.NEq(Double, Double)
  fullName: Vim.Math3d.MathOps.NEq(System.Double, System.Double)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: NEq
    path: ../src/MathOps.cs
    startLine: 170
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool NEq(this double v1, double v2)
    parameters:
    - id: v1
      type: System.Double
    - id: v2
      type: System.Double
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function NEq(v1 As Double, v2 As Double) As Boolean
  overload: Vim.Math3d.MathOps.NEq*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.And(System.Boolean,System.Boolean)
  commentId: M:Vim.Math3d.MathOps.And(System.Boolean,System.Boolean)
  id: And(System.Boolean,System.Boolean)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: And(Boolean, Boolean)
  nameWithType: MathOps.And(Boolean, Boolean)
  fullName: Vim.Math3d.MathOps.And(System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: And
    path: ../src/MathOps.cs
    startLine: 172
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool And(this bool a, bool b)
    parameters:
    - id: a
      type: System.Boolean
    - id: b
      type: System.Boolean
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function And(a As Boolean, b As Boolean) As Boolean
  overload: Vim.Math3d.MathOps.And*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Or(System.Boolean,System.Boolean)
  commentId: M:Vim.Math3d.MathOps.Or(System.Boolean,System.Boolean)
  id: Or(System.Boolean,System.Boolean)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Or(Boolean, Boolean)
  nameWithType: MathOps.Or(Boolean, Boolean)
  fullName: Vim.Math3d.MathOps.Or(System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Or
    path: ../src/MathOps.cs
    startLine: 173
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool Or(this bool a, bool b)
    parameters:
    - id: a
      type: System.Boolean
    - id: b
      type: System.Boolean
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Or(a As Boolean, b As Boolean) As Boolean
  overload: Vim.Math3d.MathOps.Or*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.NAnd(System.Boolean,System.Boolean)
  commentId: M:Vim.Math3d.MathOps.NAnd(System.Boolean,System.Boolean)
  id: NAnd(System.Boolean,System.Boolean)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: NAnd(Boolean, Boolean)
  nameWithType: MathOps.NAnd(Boolean, Boolean)
  fullName: Vim.Math3d.MathOps.NAnd(System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: NAnd
    path: ../src/MathOps.cs
    startLine: 174
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool NAnd(this bool a, bool b)
    parameters:
    - id: a
      type: System.Boolean
    - id: b
      type: System.Boolean
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function NAnd(a As Boolean, b As Boolean) As Boolean
  overload: Vim.Math3d.MathOps.NAnd*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.XOr(System.Boolean,System.Boolean)
  commentId: M:Vim.Math3d.MathOps.XOr(System.Boolean,System.Boolean)
  id: XOr(System.Boolean,System.Boolean)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: XOr(Boolean, Boolean)
  nameWithType: MathOps.XOr(Boolean, Boolean)
  fullName: Vim.Math3d.MathOps.XOr(System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: XOr
    path: ../src/MathOps.cs
    startLine: 175
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool XOr(this bool a, bool b)
    parameters:
    - id: a
      type: System.Boolean
    - id: b
      type: System.Boolean
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function XOr(a As Boolean, b As Boolean) As Boolean
  overload: Vim.Math3d.MathOps.XOr*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.NOr(System.Boolean,System.Boolean)
  commentId: M:Vim.Math3d.MathOps.NOr(System.Boolean,System.Boolean)
  id: NOr(System.Boolean,System.Boolean)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: NOr(Boolean, Boolean)
  nameWithType: MathOps.NOr(Boolean, Boolean)
  fullName: Vim.Math3d.MathOps.NOr(System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: NOr
    path: ../src/MathOps.cs
    startLine: 176
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool NOr(this bool a, bool b)
    parameters:
    - id: a
      type: System.Boolean
    - id: b
      type: System.Boolean
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function NOr(a As Boolean, b As Boolean) As Boolean
  overload: Vim.Math3d.MathOps.NOr*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Not(System.Boolean)
  commentId: M:Vim.Math3d.MathOps.Not(System.Boolean)
  id: Not(System.Boolean)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Not(Boolean)
  nameWithType: MathOps.Not(Boolean)
  fullName: Vim.Math3d.MathOps.Not(System.Boolean)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Not
    path: ../src/MathOps.cs
    startLine: 177
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool Not(this bool a)
    parameters:
    - id: a
      type: System.Boolean
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Not(a As Boolean) As Boolean
  overload: Vim.Math3d.MathOps.Not*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Eq(System.Boolean,System.Boolean)
  commentId: M:Vim.Math3d.MathOps.Eq(System.Boolean,System.Boolean)
  id: Eq(System.Boolean,System.Boolean)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Eq(Boolean, Boolean)
  nameWithType: MathOps.Eq(Boolean, Boolean)
  fullName: Vim.Math3d.MathOps.Eq(System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Eq
    path: ../src/MathOps.cs
    startLine: 178
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool Eq(this bool a, bool b)
    parameters:
    - id: a
      type: System.Boolean
    - id: b
      type: System.Boolean
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Eq(a As Boolean, b As Boolean) As Boolean
  overload: Vim.Math3d.MathOps.Eq*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.NEq(System.Boolean,System.Boolean)
  commentId: M:Vim.Math3d.MathOps.NEq(System.Boolean,System.Boolean)
  id: NEq(System.Boolean,System.Boolean)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: NEq(Boolean, Boolean)
  nameWithType: MathOps.NEq(Boolean, Boolean)
  fullName: Vim.Math3d.MathOps.NEq(System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: NEq
    path: ../src/MathOps.cs
    startLine: 179
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool NEq(this bool a, bool b)
    parameters:
    - id: a
      type: System.Boolean
    - id: b
      type: System.Boolean
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function NEq(a As Boolean, b As Boolean) As Boolean
  overload: Vim.Math3d.MathOps.NEq*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Magnitude(System.Int32)
  commentId: M:Vim.Math3d.MathOps.Magnitude(System.Int32)
  id: Magnitude(System.Int32)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Magnitude(Int32)
  nameWithType: MathOps.Magnitude(Int32)
  fullName: Vim.Math3d.MathOps.Magnitude(System.Int32)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Magnitude
    path: ../src/MathOps.cs
    startLine: 181
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static int Magnitude(this int x)
    parameters:
    - id: x
      type: System.Int32
    return:
      type: System.Int32
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Magnitude(x As Integer) As Integer
  overload: Vim.Math3d.MathOps.Magnitude*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.MagnitudeSquared(System.Int32)
  commentId: M:Vim.Math3d.MathOps.MagnitudeSquared(System.Int32)
  id: MagnitudeSquared(System.Int32)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: MagnitudeSquared(Int32)
  nameWithType: MathOps.MagnitudeSquared(Int32)
  fullName: Vim.Math3d.MathOps.MagnitudeSquared(System.Int32)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MagnitudeSquared
    path: ../src/MathOps.cs
    startLine: 182
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static int MagnitudeSquared(this int x)
    parameters:
    - id: x
      type: System.Int32
    return:
      type: System.Int32
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MagnitudeSquared(x As Integer) As Integer
  overload: Vim.Math3d.MathOps.MagnitudeSquared*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.And(System.Int32,System.Int32)
  commentId: M:Vim.Math3d.MathOps.And(System.Int32,System.Int32)
  id: And(System.Int32,System.Int32)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: And(Int32, Int32)
  nameWithType: MathOps.And(Int32, Int32)
  fullName: Vim.Math3d.MathOps.And(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: And
    path: ../src/MathOps.cs
    startLine: 183
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static int And(this int a, int b)
    parameters:
    - id: a
      type: System.Int32
    - id: b
      type: System.Int32
    return:
      type: System.Int32
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function And(a As Integer, b As Integer) As Integer
  overload: Vim.Math3d.MathOps.And*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Or(System.Int32,System.Int32)
  commentId: M:Vim.Math3d.MathOps.Or(System.Int32,System.Int32)
  id: Or(System.Int32,System.Int32)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Or(Int32, Int32)
  nameWithType: MathOps.Or(Int32, Int32)
  fullName: Vim.Math3d.MathOps.Or(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Or
    path: ../src/MathOps.cs
    startLine: 184
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static int Or(this int a, int b)
    parameters:
    - id: a
      type: System.Int32
    - id: b
      type: System.Int32
    return:
      type: System.Int32
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Or(a As Integer, b As Integer) As Integer
  overload: Vim.Math3d.MathOps.Or*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.NAnd(System.Int32,System.Int32)
  commentId: M:Vim.Math3d.MathOps.NAnd(System.Int32,System.Int32)
  id: NAnd(System.Int32,System.Int32)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: NAnd(Int32, Int32)
  nameWithType: MathOps.NAnd(Int32, Int32)
  fullName: Vim.Math3d.MathOps.NAnd(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: NAnd
    path: ../src/MathOps.cs
    startLine: 185
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static int NAnd(this int a, int b)
    parameters:
    - id: a
      type: System.Int32
    - id: b
      type: System.Int32
    return:
      type: System.Int32
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function NAnd(a As Integer, b As Integer) As Integer
  overload: Vim.Math3d.MathOps.NAnd*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.XOr(System.Int32,System.Int32)
  commentId: M:Vim.Math3d.MathOps.XOr(System.Int32,System.Int32)
  id: XOr(System.Int32,System.Int32)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: XOr(Int32, Int32)
  nameWithType: MathOps.XOr(Int32, Int32)
  fullName: Vim.Math3d.MathOps.XOr(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: XOr
    path: ../src/MathOps.cs
    startLine: 186
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static int XOr(this int a, int b)
    parameters:
    - id: a
      type: System.Int32
    - id: b
      type: System.Int32
    return:
      type: System.Int32
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function XOr(a As Integer, b As Integer) As Integer
  overload: Vim.Math3d.MathOps.XOr*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.NOr(System.Int32,System.Int32)
  commentId: M:Vim.Math3d.MathOps.NOr(System.Int32,System.Int32)
  id: NOr(System.Int32,System.Int32)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: NOr(Int32, Int32)
  nameWithType: MathOps.NOr(Int32, Int32)
  fullName: Vim.Math3d.MathOps.NOr(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: NOr
    path: ../src/MathOps.cs
    startLine: 187
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static int NOr(this int a, int b)
    parameters:
    - id: a
      type: System.Int32
    - id: b
      type: System.Int32
    return:
      type: System.Int32
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function NOr(a As Integer, b As Integer) As Integer
  overload: Vim.Math3d.MathOps.NOr*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Not(System.Int32)
  commentId: M:Vim.Math3d.MathOps.Not(System.Int32)
  id: Not(System.Int32)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Not(Int32)
  nameWithType: MathOps.Not(Int32)
  fullName: Vim.Math3d.MathOps.Not(System.Int32)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Not
    path: ../src/MathOps.cs
    startLine: 188
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static int Not(this int a)
    parameters:
    - id: a
      type: System.Int32
    return:
      type: System.Int32
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Not(a As Integer) As Integer
  overload: Vim.Math3d.MathOps.Not*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Abs(System.Int32)
  commentId: M:Vim.Math3d.MathOps.Abs(System.Int32)
  id: Abs(System.Int32)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Abs(Int32)
  nameWithType: MathOps.Abs(Int32)
  fullName: Vim.Math3d.MathOps.Abs(System.Int32)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Abs
    path: ../src/MathOps.cs
    startLine: 189
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static int Abs(this int a)
    parameters:
    - id: a
      type: System.Int32
    return:
      type: System.Int32
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Abs(a As Integer) As Integer
  overload: Vim.Math3d.MathOps.Abs*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.DivideRoundUp(System.Int32,System.Int32)
  commentId: M:Vim.Math3d.MathOps.DivideRoundUp(System.Int32,System.Int32)
  id: DivideRoundUp(System.Int32,System.Int32)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: DivideRoundUp(Int32, Int32)
  nameWithType: MathOps.DivideRoundUp(Int32, Int32)
  fullName: Vim.Math3d.MathOps.DivideRoundUp(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: DivideRoundUp
    path: ../src/MathOps.cs
    startLine: 190
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static int DivideRoundUp(this int a, int b)
    parameters:
    - id: a
      type: System.Int32
    - id: b
      type: System.Int32
    return:
      type: System.Int32
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DivideRoundUp(a As Integer, b As Integer) As Integer
  overload: Vim.Math3d.MathOps.DivideRoundUp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.IsEven(System.Int32)
  commentId: M:Vim.Math3d.MathOps.IsEven(System.Int32)
  id: IsEven(System.Int32)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: IsEven(Int32)
  nameWithType: MathOps.IsEven(Int32)
  fullName: Vim.Math3d.MathOps.IsEven(System.Int32)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: IsEven
    path: ../src/MathOps.cs
    startLine: 191
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool IsEven(this int n)
    parameters:
    - id: n
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsEven(n As Integer) As Boolean
  overload: Vim.Math3d.MathOps.IsEven*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.IsOdd(System.Int32)
  commentId: M:Vim.Math3d.MathOps.IsOdd(System.Int32)
  id: IsOdd(System.Int32)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: IsOdd(Int32)
  nameWithType: MathOps.IsOdd(Int32)
  fullName: Vim.Math3d.MathOps.IsOdd(System.Int32)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: IsOdd
    path: ../src/MathOps.cs
    startLine: 192
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool IsOdd(this int n)
    parameters:
    - id: n
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsOdd(n As Integer) As Boolean
  overload: Vim.Math3d.MathOps.IsOdd*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.IsPowerOfTwo(System.Int32)
  commentId: M:Vim.Math3d.MathOps.IsPowerOfTwo(System.Int32)
  id: IsPowerOfTwo(System.Int32)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: IsPowerOfTwo(Int32)
  nameWithType: MathOps.IsPowerOfTwo(Int32)
  fullName: Vim.Math3d.MathOps.IsPowerOfTwo(System.Int32)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: IsPowerOfTwo
    path: ../src/MathOps.cs
    startLine: 193
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool IsPowerOfTwo(this int v)
    parameters:
    - id: v
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsPowerOfTwo(v As Integer) As Boolean
  overload: Vim.Math3d.MathOps.IsPowerOfTwo*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.IsInfinity(System.Int32)
  commentId: M:Vim.Math3d.MathOps.IsInfinity(System.Int32)
  id: IsInfinity(System.Int32)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: IsInfinity(Int32)
  nameWithType: MathOps.IsInfinity(Int32)
  fullName: Vim.Math3d.MathOps.IsInfinity(System.Int32)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: IsInfinity
    path: ../src/MathOps.cs
    startLine: 194
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool IsInfinity(this int n)
    parameters:
    - id: n
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsInfinity(n As Integer) As Boolean
  overload: Vim.Math3d.MathOps.IsInfinity*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.IsNaN(System.Int32)
  commentId: M:Vim.Math3d.MathOps.IsNaN(System.Int32)
  id: IsNaN(System.Int32)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: IsNaN(Int32)
  nameWithType: MathOps.IsNaN(Int32)
  fullName: Vim.Math3d.MathOps.IsNaN(System.Int32)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: IsNaN
    path: ../src/MathOps.cs
    startLine: 195
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool IsNaN(this int n)
    parameters:
    - id: n
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsNaN(n As Integer) As Boolean
  overload: Vim.Math3d.MathOps.IsNaN*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Clamp(System.Int32,System.Int32,System.Int32)
  commentId: M:Vim.Math3d.MathOps.Clamp(System.Int32,System.Int32,System.Int32)
  id: Clamp(System.Int32,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Clamp(Int32, Int32, Int32)
  nameWithType: MathOps.Clamp(Int32, Int32, Int32)
  fullName: Vim.Math3d.MathOps.Clamp(System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Clamp
    path: ../src/MathOps.cs
    startLine: 196
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static int Clamp(this int v, int min, int max)
    parameters:
    - id: v
      type: System.Int32
    - id: min
      type: System.Int32
    - id: max
      type: System.Int32
    return:
      type: System.Int32
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Clamp(v As Integer, min As Integer, max As Integer) As Integer
  overload: Vim.Math3d.MathOps.Clamp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Magnitude(System.Int64)
  commentId: M:Vim.Math3d.MathOps.Magnitude(System.Int64)
  id: Magnitude(System.Int64)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Magnitude(Int64)
  nameWithType: MathOps.Magnitude(Int64)
  fullName: Vim.Math3d.MathOps.Magnitude(System.Int64)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Magnitude
    path: ../src/MathOps.cs
    startLine: 197
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static long Magnitude(this long x)
    parameters:
    - id: x
      type: System.Int64
    return:
      type: System.Int64
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Magnitude(x As Long) As Long
  overload: Vim.Math3d.MathOps.Magnitude*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.MagnitudeSquared(System.Int64)
  commentId: M:Vim.Math3d.MathOps.MagnitudeSquared(System.Int64)
  id: MagnitudeSquared(System.Int64)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: MagnitudeSquared(Int64)
  nameWithType: MathOps.MagnitudeSquared(Int64)
  fullName: Vim.Math3d.MathOps.MagnitudeSquared(System.Int64)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MagnitudeSquared
    path: ../src/MathOps.cs
    startLine: 198
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static long MagnitudeSquared(this long x)
    parameters:
    - id: x
      type: System.Int64
    return:
      type: System.Int64
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MagnitudeSquared(x As Long) As Long
  overload: Vim.Math3d.MathOps.MagnitudeSquared*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.And(System.Int64,System.Int64)
  commentId: M:Vim.Math3d.MathOps.And(System.Int64,System.Int64)
  id: And(System.Int64,System.Int64)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: And(Int64, Int64)
  nameWithType: MathOps.And(Int64, Int64)
  fullName: Vim.Math3d.MathOps.And(System.Int64, System.Int64)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: And
    path: ../src/MathOps.cs
    startLine: 199
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static long And(this long a, long b)
    parameters:
    - id: a
      type: System.Int64
    - id: b
      type: System.Int64
    return:
      type: System.Int64
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function And(a As Long, b As Long) As Long
  overload: Vim.Math3d.MathOps.And*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Or(System.Int64,System.Int64)
  commentId: M:Vim.Math3d.MathOps.Or(System.Int64,System.Int64)
  id: Or(System.Int64,System.Int64)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Or(Int64, Int64)
  nameWithType: MathOps.Or(Int64, Int64)
  fullName: Vim.Math3d.MathOps.Or(System.Int64, System.Int64)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Or
    path: ../src/MathOps.cs
    startLine: 200
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static long Or(this long a, long b)
    parameters:
    - id: a
      type: System.Int64
    - id: b
      type: System.Int64
    return:
      type: System.Int64
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Or(a As Long, b As Long) As Long
  overload: Vim.Math3d.MathOps.Or*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.NAnd(System.Int64,System.Int64)
  commentId: M:Vim.Math3d.MathOps.NAnd(System.Int64,System.Int64)
  id: NAnd(System.Int64,System.Int64)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: NAnd(Int64, Int64)
  nameWithType: MathOps.NAnd(Int64, Int64)
  fullName: Vim.Math3d.MathOps.NAnd(System.Int64, System.Int64)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: NAnd
    path: ../src/MathOps.cs
    startLine: 201
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static long NAnd(this long a, long b)
    parameters:
    - id: a
      type: System.Int64
    - id: b
      type: System.Int64
    return:
      type: System.Int64
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function NAnd(a As Long, b As Long) As Long
  overload: Vim.Math3d.MathOps.NAnd*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.XOr(System.Int64,System.Int64)
  commentId: M:Vim.Math3d.MathOps.XOr(System.Int64,System.Int64)
  id: XOr(System.Int64,System.Int64)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: XOr(Int64, Int64)
  nameWithType: MathOps.XOr(Int64, Int64)
  fullName: Vim.Math3d.MathOps.XOr(System.Int64, System.Int64)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: XOr
    path: ../src/MathOps.cs
    startLine: 202
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static long XOr(this long a, long b)
    parameters:
    - id: a
      type: System.Int64
    - id: b
      type: System.Int64
    return:
      type: System.Int64
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function XOr(a As Long, b As Long) As Long
  overload: Vim.Math3d.MathOps.XOr*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.NOr(System.Int64,System.Int64)
  commentId: M:Vim.Math3d.MathOps.NOr(System.Int64,System.Int64)
  id: NOr(System.Int64,System.Int64)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: NOr(Int64, Int64)
  nameWithType: MathOps.NOr(Int64, Int64)
  fullName: Vim.Math3d.MathOps.NOr(System.Int64, System.Int64)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: NOr
    path: ../src/MathOps.cs
    startLine: 203
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static long NOr(this long a, long b)
    parameters:
    - id: a
      type: System.Int64
    - id: b
      type: System.Int64
    return:
      type: System.Int64
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function NOr(a As Long, b As Long) As Long
  overload: Vim.Math3d.MathOps.NOr*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Not(System.Int64)
  commentId: M:Vim.Math3d.MathOps.Not(System.Int64)
  id: Not(System.Int64)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Not(Int64)
  nameWithType: MathOps.Not(Int64)
  fullName: Vim.Math3d.MathOps.Not(System.Int64)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Not
    path: ../src/MathOps.cs
    startLine: 204
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static long Not(this long a)
    parameters:
    - id: a
      type: System.Int64
    return:
      type: System.Int64
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Not(a As Long) As Long
  overload: Vim.Math3d.MathOps.Not*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Abs(System.Int64)
  commentId: M:Vim.Math3d.MathOps.Abs(System.Int64)
  id: Abs(System.Int64)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Abs(Int64)
  nameWithType: MathOps.Abs(Int64)
  fullName: Vim.Math3d.MathOps.Abs(System.Int64)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Abs
    path: ../src/MathOps.cs
    startLine: 205
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static long Abs(this long a)
    parameters:
    - id: a
      type: System.Int64
    return:
      type: System.Int64
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Abs(a As Long) As Long
  overload: Vim.Math3d.MathOps.Abs*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.DivideRoundUp(System.Int64,System.Int64)
  commentId: M:Vim.Math3d.MathOps.DivideRoundUp(System.Int64,System.Int64)
  id: DivideRoundUp(System.Int64,System.Int64)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: DivideRoundUp(Int64, Int64)
  nameWithType: MathOps.DivideRoundUp(Int64, Int64)
  fullName: Vim.Math3d.MathOps.DivideRoundUp(System.Int64, System.Int64)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: DivideRoundUp
    path: ../src/MathOps.cs
    startLine: 206
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static long DivideRoundUp(this long a, long b)
    parameters:
    - id: a
      type: System.Int64
    - id: b
      type: System.Int64
    return:
      type: System.Int64
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DivideRoundUp(a As Long, b As Long) As Long
  overload: Vim.Math3d.MathOps.DivideRoundUp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.IsEven(System.Int64)
  commentId: M:Vim.Math3d.MathOps.IsEven(System.Int64)
  id: IsEven(System.Int64)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: IsEven(Int64)
  nameWithType: MathOps.IsEven(Int64)
  fullName: Vim.Math3d.MathOps.IsEven(System.Int64)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: IsEven
    path: ../src/MathOps.cs
    startLine: 207
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool IsEven(this long n)
    parameters:
    - id: n
      type: System.Int64
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsEven(n As Long) As Boolean
  overload: Vim.Math3d.MathOps.IsEven*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.IsOdd(System.Int64)
  commentId: M:Vim.Math3d.MathOps.IsOdd(System.Int64)
  id: IsOdd(System.Int64)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: IsOdd(Int64)
  nameWithType: MathOps.IsOdd(Int64)
  fullName: Vim.Math3d.MathOps.IsOdd(System.Int64)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: IsOdd
    path: ../src/MathOps.cs
    startLine: 208
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool IsOdd(this long n)
    parameters:
    - id: n
      type: System.Int64
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsOdd(n As Long) As Boolean
  overload: Vim.Math3d.MathOps.IsOdd*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.IsPowerOfTwo(System.Int64)
  commentId: M:Vim.Math3d.MathOps.IsPowerOfTwo(System.Int64)
  id: IsPowerOfTwo(System.Int64)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: IsPowerOfTwo(Int64)
  nameWithType: MathOps.IsPowerOfTwo(Int64)
  fullName: Vim.Math3d.MathOps.IsPowerOfTwo(System.Int64)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: IsPowerOfTwo
    path: ../src/MathOps.cs
    startLine: 209
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool IsPowerOfTwo(this long v)
    parameters:
    - id: v
      type: System.Int64
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsPowerOfTwo(v As Long) As Boolean
  overload: Vim.Math3d.MathOps.IsPowerOfTwo*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.IsInfinity(System.Int64)
  commentId: M:Vim.Math3d.MathOps.IsInfinity(System.Int64)
  id: IsInfinity(System.Int64)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: IsInfinity(Int64)
  nameWithType: MathOps.IsInfinity(Int64)
  fullName: Vim.Math3d.MathOps.IsInfinity(System.Int64)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: IsInfinity
    path: ../src/MathOps.cs
    startLine: 210
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool IsInfinity(this long n)
    parameters:
    - id: n
      type: System.Int64
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsInfinity(n As Long) As Boolean
  overload: Vim.Math3d.MathOps.IsInfinity*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.IsNaN(System.Int64)
  commentId: M:Vim.Math3d.MathOps.IsNaN(System.Int64)
  id: IsNaN(System.Int64)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: IsNaN(Int64)
  nameWithType: MathOps.IsNaN(Int64)
  fullName: Vim.Math3d.MathOps.IsNaN(System.Int64)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: IsNaN
    path: ../src/MathOps.cs
    startLine: 211
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool IsNaN(this long n)
    parameters:
    - id: n
      type: System.Int64
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsNaN(n As Long) As Boolean
  overload: Vim.Math3d.MathOps.IsNaN*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Clamp(System.Int64,System.Int64,System.Int64)
  commentId: M:Vim.Math3d.MathOps.Clamp(System.Int64,System.Int64,System.Int64)
  id: Clamp(System.Int64,System.Int64,System.Int64)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Clamp(Int64, Int64, Int64)
  nameWithType: MathOps.Clamp(Int64, Int64, Int64)
  fullName: Vim.Math3d.MathOps.Clamp(System.Int64, System.Int64, System.Int64)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Clamp
    path: ../src/MathOps.cs
    startLine: 212
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static long Clamp(this long v, long min, long max)
    parameters:
    - id: v
      type: System.Int64
    - id: min
      type: System.Int64
    - id: max
      type: System.Int64
    return:
      type: System.Int64
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Clamp(v As Long, min As Long, max As Long) As Long
  overload: Vim.Math3d.MathOps.Clamp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Lerp(System.Single,System.Single,System.Single)
  commentId: M:Vim.Math3d.MathOps.Lerp(System.Single,System.Single,System.Single)
  id: Lerp(System.Single,System.Single,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Lerp(Single, Single, Single)
  nameWithType: MathOps.Lerp(Single, Single, Single)
  fullName: Vim.Math3d.MathOps.Lerp(System.Single, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Lerp
    path: ../src/MathOps.cs
    startLine: 214
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float Lerp(this float v1, float v2, float t)
    parameters:
    - id: v1
      type: System.Single
    - id: v2
      type: System.Single
    - id: t
      type: System.Single
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Lerp(v1 As Single, v2 As Single, t As Single) As Single
  overload: Vim.Math3d.MathOps.Lerp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.InverseLerp(System.Single,System.Single,System.Single)
  commentId: M:Vim.Math3d.MathOps.InverseLerp(System.Single,System.Single,System.Single)
  id: InverseLerp(System.Single,System.Single,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: InverseLerp(Single, Single, Single)
  nameWithType: MathOps.InverseLerp(Single, Single, Single)
  fullName: Vim.Math3d.MathOps.InverseLerp(System.Single, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: InverseLerp
    path: ../src/MathOps.cs
    startLine: 215
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float InverseLerp(this float v, float a, float b)
    parameters:
    - id: v
      type: System.Single
    - id: a
      type: System.Single
    - id: b
      type: System.Single
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function InverseLerp(v As Single, a As Single, b As Single) As Single
  overload: Vim.Math3d.MathOps.InverseLerp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.LerpPrecise(System.Single,System.Single,System.Single)
  commentId: M:Vim.Math3d.MathOps.LerpPrecise(System.Single,System.Single,System.Single)
  id: LerpPrecise(System.Single,System.Single,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: LerpPrecise(Single, Single, Single)
  nameWithType: MathOps.LerpPrecise(Single, Single, Single)
  fullName: Vim.Math3d.MathOps.LerpPrecise(System.Single, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: LerpPrecise
    path: ../src/MathOps.cs
    startLine: 216
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float LerpPrecise(this float v1, float v2, float t)
    parameters:
    - id: v1
      type: System.Single
    - id: v2
      type: System.Single
    - id: t
      type: System.Single
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LerpPrecise(v1 As Single, v2 As Single, t As Single) As Single
  overload: Vim.Math3d.MathOps.LerpPrecise*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.ClampLower(System.Single,System.Single)
  commentId: M:Vim.Math3d.MathOps.ClampLower(System.Single,System.Single)
  id: ClampLower(System.Single,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: ClampLower(Single, Single)
  nameWithType: MathOps.ClampLower(Single, Single)
  fullName: Vim.Math3d.MathOps.ClampLower(System.Single, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ClampLower
    path: ../src/MathOps.cs
    startLine: 217
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float ClampLower(this float v, float min)
    parameters:
    - id: v
      type: System.Single
    - id: min
      type: System.Single
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ClampLower(v As Single, min As Single) As Single
  overload: Vim.Math3d.MathOps.ClampLower*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.ClampUpper(System.Single,System.Single)
  commentId: M:Vim.Math3d.MathOps.ClampUpper(System.Single,System.Single)
  id: ClampUpper(System.Single,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: ClampUpper(Single, Single)
  nameWithType: MathOps.ClampUpper(Single, Single)
  fullName: Vim.Math3d.MathOps.ClampUpper(System.Single, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ClampUpper
    path: ../src/MathOps.cs
    startLine: 218
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float ClampUpper(this float v, float max)
    parameters:
    - id: v
      type: System.Single
    - id: max
      type: System.Single
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ClampUpper(v As Single, max As Single) As Single
  overload: Vim.Math3d.MathOps.ClampUpper*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Clamp(System.Single,System.Single,System.Single)
  commentId: M:Vim.Math3d.MathOps.Clamp(System.Single,System.Single,System.Single)
  id: Clamp(System.Single,System.Single,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Clamp(Single, Single, Single)
  nameWithType: MathOps.Clamp(Single, Single, Single)
  fullName: Vim.Math3d.MathOps.Clamp(System.Single, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Clamp
    path: ../src/MathOps.cs
    startLine: 219
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float Clamp(this float v, float min, float max)
    parameters:
    - id: v
      type: System.Single
    - id: min
      type: System.Single
    - id: max
      type: System.Single
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Clamp(v As Single, min As Single, max As Single) As Single
  overload: Vim.Math3d.MathOps.Clamp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Average(System.Single,System.Single)
  commentId: M:Vim.Math3d.MathOps.Average(System.Single,System.Single)
  id: Average(System.Single,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Average(Single, Single)
  nameWithType: MathOps.Average(Single, Single)
  fullName: Vim.Math3d.MathOps.Average(System.Single, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Average
    path: ../src/MathOps.cs
    startLine: 220
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float Average(this float v1, float v2)
    parameters:
    - id: v1
      type: System.Single
    - id: v2
      type: System.Single
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(v1 As Single, v2 As Single) As Single
  overload: Vim.Math3d.MathOps.Average*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Barycentric(System.Single,System.Single,System.Single,System.Single,System.Single)
  commentId: M:Vim.Math3d.MathOps.Barycentric(System.Single,System.Single,System.Single,System.Single,System.Single)
  id: Barycentric(System.Single,System.Single,System.Single,System.Single,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Barycentric(Single, Single, Single, Single, Single)
  nameWithType: MathOps.Barycentric(Single, Single, Single, Single, Single)
  fullName: Vim.Math3d.MathOps.Barycentric(System.Single, System.Single, System.Single, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Barycentric
    path: ../src/MathOps.cs
    startLine: 221
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float Barycentric(this float v1, float v2, float v3, float u, float v)
    parameters:
    - id: v1
      type: System.Single
    - id: v2
      type: System.Single
    - id: v3
      type: System.Single
    - id: u
      type: System.Single
    - id: v
      type: System.Single
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Barycentric(v1 As Single, v2 As Single, v3 As Single, u As Single, v As Single) As Single
  overload: Vim.Math3d.MathOps.Barycentric*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Lerp(System.Double,System.Double,System.Single)
  commentId: M:Vim.Math3d.MathOps.Lerp(System.Double,System.Double,System.Single)
  id: Lerp(System.Double,System.Double,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Lerp(Double, Double, Single)
  nameWithType: MathOps.Lerp(Double, Double, Single)
  fullName: Vim.Math3d.MathOps.Lerp(System.Double, System.Double, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Lerp
    path: ../src/MathOps.cs
    startLine: 222
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double Lerp(this double v1, double v2, float t)
    parameters:
    - id: v1
      type: System.Double
    - id: v2
      type: System.Double
    - id: t
      type: System.Single
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Lerp(v1 As Double, v2 As Double, t As Single) As Double
  overload: Vim.Math3d.MathOps.Lerp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.InverseLerp(System.Double,System.Double,System.Double)
  commentId: M:Vim.Math3d.MathOps.InverseLerp(System.Double,System.Double,System.Double)
  id: InverseLerp(System.Double,System.Double,System.Double)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: InverseLerp(Double, Double, Double)
  nameWithType: MathOps.InverseLerp(Double, Double, Double)
  fullName: Vim.Math3d.MathOps.InverseLerp(System.Double, System.Double, System.Double)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: InverseLerp
    path: ../src/MathOps.cs
    startLine: 223
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double InverseLerp(this double v, double a, double b)
    parameters:
    - id: v
      type: System.Double
    - id: a
      type: System.Double
    - id: b
      type: System.Double
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function InverseLerp(v As Double, a As Double, b As Double) As Double
  overload: Vim.Math3d.MathOps.InverseLerp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.LerpPrecise(System.Double,System.Double,System.Single)
  commentId: M:Vim.Math3d.MathOps.LerpPrecise(System.Double,System.Double,System.Single)
  id: LerpPrecise(System.Double,System.Double,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: LerpPrecise(Double, Double, Single)
  nameWithType: MathOps.LerpPrecise(Double, Double, Single)
  fullName: Vim.Math3d.MathOps.LerpPrecise(System.Double, System.Double, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: LerpPrecise
    path: ../src/MathOps.cs
    startLine: 224
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double LerpPrecise(this double v1, double v2, float t)
    parameters:
    - id: v1
      type: System.Double
    - id: v2
      type: System.Double
    - id: t
      type: System.Single
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LerpPrecise(v1 As Double, v2 As Double, t As Single) As Double
  overload: Vim.Math3d.MathOps.LerpPrecise*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.ClampLower(System.Double,System.Double)
  commentId: M:Vim.Math3d.MathOps.ClampLower(System.Double,System.Double)
  id: ClampLower(System.Double,System.Double)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: ClampLower(Double, Double)
  nameWithType: MathOps.ClampLower(Double, Double)
  fullName: Vim.Math3d.MathOps.ClampLower(System.Double, System.Double)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ClampLower
    path: ../src/MathOps.cs
    startLine: 225
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double ClampLower(this double v, double min)
    parameters:
    - id: v
      type: System.Double
    - id: min
      type: System.Double
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ClampLower(v As Double, min As Double) As Double
  overload: Vim.Math3d.MathOps.ClampLower*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.ClampUpper(System.Double,System.Double)
  commentId: M:Vim.Math3d.MathOps.ClampUpper(System.Double,System.Double)
  id: ClampUpper(System.Double,System.Double)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: ClampUpper(Double, Double)
  nameWithType: MathOps.ClampUpper(Double, Double)
  fullName: Vim.Math3d.MathOps.ClampUpper(System.Double, System.Double)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ClampUpper
    path: ../src/MathOps.cs
    startLine: 226
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double ClampUpper(this double v, double max)
    parameters:
    - id: v
      type: System.Double
    - id: max
      type: System.Double
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ClampUpper(v As Double, max As Double) As Double
  overload: Vim.Math3d.MathOps.ClampUpper*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Clamp(System.Double,System.Double,System.Double)
  commentId: M:Vim.Math3d.MathOps.Clamp(System.Double,System.Double,System.Double)
  id: Clamp(System.Double,System.Double,System.Double)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Clamp(Double, Double, Double)
  nameWithType: MathOps.Clamp(Double, Double, Double)
  fullName: Vim.Math3d.MathOps.Clamp(System.Double, System.Double, System.Double)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Clamp
    path: ../src/MathOps.cs
    startLine: 227
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double Clamp(this double v, double min, double max)
    parameters:
    - id: v
      type: System.Double
    - id: min
      type: System.Double
    - id: max
      type: System.Double
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Clamp(v As Double, min As Double, max As Double) As Double
  overload: Vim.Math3d.MathOps.Clamp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Average(System.Double,System.Double)
  commentId: M:Vim.Math3d.MathOps.Average(System.Double,System.Double)
  id: Average(System.Double,System.Double)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Average(Double, Double)
  nameWithType: MathOps.Average(Double, Double)
  fullName: Vim.Math3d.MathOps.Average(System.Double, System.Double)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Average
    path: ../src/MathOps.cs
    startLine: 228
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double Average(this double v1, double v2)
    parameters:
    - id: v1
      type: System.Double
    - id: v2
      type: System.Double
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(v1 As Double, v2 As Double) As Double
  overload: Vim.Math3d.MathOps.Average*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Barycentric(System.Double,System.Double,System.Double,System.Single,System.Single)
  commentId: M:Vim.Math3d.MathOps.Barycentric(System.Double,System.Double,System.Double,System.Single,System.Single)
  id: Barycentric(System.Double,System.Double,System.Double,System.Single,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Barycentric(Double, Double, Double, Single, Single)
  nameWithType: MathOps.Barycentric(Double, Double, Double, Single, Single)
  fullName: Vim.Math3d.MathOps.Barycentric(System.Double, System.Double, System.Double, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Barycentric
    path: ../src/MathOps.cs
    startLine: 229
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double Barycentric(this double v1, double v2, double v3, float u, float v)
    parameters:
    - id: v1
      type: System.Double
    - id: v2
      type: System.Double
    - id: v3
      type: System.Double
    - id: u
      type: System.Single
    - id: v
      type: System.Single
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Barycentric(v1 As Double, v2 As Double, v3 As Double, u As Single, v As Single) As Double
  overload: Vim.Math3d.MathOps.Barycentric*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Lerp(Vim.Math3d.Vector2,Vim.Math3d.Vector2,System.Single)
  commentId: M:Vim.Math3d.MathOps.Lerp(Vim.Math3d.Vector2,Vim.Math3d.Vector2,System.Single)
  id: Lerp(Vim.Math3d.Vector2,Vim.Math3d.Vector2,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Lerp(Vector2, Vector2, Single)
  nameWithType: MathOps.Lerp(Vector2, Vector2, Single)
  fullName: Vim.Math3d.MathOps.Lerp(Vim.Math3d.Vector2, Vim.Math3d.Vector2, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Lerp
    path: ../src/MathOps.cs
    startLine: 230
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector2 Lerp(this Vector2 v1, Vector2 v2, float t)
    parameters:
    - id: v1
      type: Vim.Math3d.Vector2
    - id: v2
      type: Vim.Math3d.Vector2
    - id: t
      type: System.Single
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Lerp(v1 As Vector2, v2 As Vector2, t As Single) As Vector2
  overload: Vim.Math3d.MathOps.Lerp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.InverseLerp(Vim.Math3d.Vector2,Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.MathOps.InverseLerp(Vim.Math3d.Vector2,Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  id: InverseLerp(Vim.Math3d.Vector2,Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: InverseLerp(Vector2, Vector2, Vector2)
  nameWithType: MathOps.InverseLerp(Vector2, Vector2, Vector2)
  fullName: Vim.Math3d.MathOps.InverseLerp(Vim.Math3d.Vector2, Vim.Math3d.Vector2, Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: InverseLerp
    path: ../src/MathOps.cs
    startLine: 231
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector2 InverseLerp(this Vector2 v, Vector2 a, Vector2 b)
    parameters:
    - id: v
      type: Vim.Math3d.Vector2
    - id: a
      type: Vim.Math3d.Vector2
    - id: b
      type: Vim.Math3d.Vector2
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function InverseLerp(v As Vector2, a As Vector2, b As Vector2) As Vector2
  overload: Vim.Math3d.MathOps.InverseLerp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.LerpPrecise(Vim.Math3d.Vector2,Vim.Math3d.Vector2,System.Single)
  commentId: M:Vim.Math3d.MathOps.LerpPrecise(Vim.Math3d.Vector2,Vim.Math3d.Vector2,System.Single)
  id: LerpPrecise(Vim.Math3d.Vector2,Vim.Math3d.Vector2,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: LerpPrecise(Vector2, Vector2, Single)
  nameWithType: MathOps.LerpPrecise(Vector2, Vector2, Single)
  fullName: Vim.Math3d.MathOps.LerpPrecise(Vim.Math3d.Vector2, Vim.Math3d.Vector2, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: LerpPrecise
    path: ../src/MathOps.cs
    startLine: 232
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector2 LerpPrecise(this Vector2 v1, Vector2 v2, float t)
    parameters:
    - id: v1
      type: Vim.Math3d.Vector2
    - id: v2
      type: Vim.Math3d.Vector2
    - id: t
      type: System.Single
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LerpPrecise(v1 As Vector2, v2 As Vector2, t As Single) As Vector2
  overload: Vim.Math3d.MathOps.LerpPrecise*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.ClampLower(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.MathOps.ClampLower(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  id: ClampLower(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: ClampLower(Vector2, Vector2)
  nameWithType: MathOps.ClampLower(Vector2, Vector2)
  fullName: Vim.Math3d.MathOps.ClampLower(Vim.Math3d.Vector2, Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ClampLower
    path: ../src/MathOps.cs
    startLine: 233
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector2 ClampLower(this Vector2 v, Vector2 min)
    parameters:
    - id: v
      type: Vim.Math3d.Vector2
    - id: min
      type: Vim.Math3d.Vector2
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ClampLower(v As Vector2, min As Vector2) As Vector2
  overload: Vim.Math3d.MathOps.ClampLower*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.ClampUpper(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.MathOps.ClampUpper(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  id: ClampUpper(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: ClampUpper(Vector2, Vector2)
  nameWithType: MathOps.ClampUpper(Vector2, Vector2)
  fullName: Vim.Math3d.MathOps.ClampUpper(Vim.Math3d.Vector2, Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ClampUpper
    path: ../src/MathOps.cs
    startLine: 234
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector2 ClampUpper(this Vector2 v, Vector2 max)
    parameters:
    - id: v
      type: Vim.Math3d.Vector2
    - id: max
      type: Vim.Math3d.Vector2
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ClampUpper(v As Vector2, max As Vector2) As Vector2
  overload: Vim.Math3d.MathOps.ClampUpper*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Clamp(Vim.Math3d.Vector2,Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.MathOps.Clamp(Vim.Math3d.Vector2,Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  id: Clamp(Vim.Math3d.Vector2,Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Clamp(Vector2, Vector2, Vector2)
  nameWithType: MathOps.Clamp(Vector2, Vector2, Vector2)
  fullName: Vim.Math3d.MathOps.Clamp(Vim.Math3d.Vector2, Vim.Math3d.Vector2, Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Clamp
    path: ../src/MathOps.cs
    startLine: 235
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector2 Clamp(this Vector2 v, Vector2 min, Vector2 max)
    parameters:
    - id: v
      type: Vim.Math3d.Vector2
    - id: min
      type: Vim.Math3d.Vector2
    - id: max
      type: Vim.Math3d.Vector2
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Clamp(v As Vector2, min As Vector2, max As Vector2) As Vector2
  overload: Vim.Math3d.MathOps.Clamp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Average(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.MathOps.Average(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  id: Average(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Average(Vector2, Vector2)
  nameWithType: MathOps.Average(Vector2, Vector2)
  fullName: Vim.Math3d.MathOps.Average(Vim.Math3d.Vector2, Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Average
    path: ../src/MathOps.cs
    startLine: 236
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector2 Average(this Vector2 v1, Vector2 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.Vector2
    - id: v2
      type: Vim.Math3d.Vector2
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(v1 As Vector2, v2 As Vector2) As Vector2
  overload: Vim.Math3d.MathOps.Average*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Barycentric(Vim.Math3d.Vector2,Vim.Math3d.Vector2,Vim.Math3d.Vector2,System.Single,System.Single)
  commentId: M:Vim.Math3d.MathOps.Barycentric(Vim.Math3d.Vector2,Vim.Math3d.Vector2,Vim.Math3d.Vector2,System.Single,System.Single)
  id: Barycentric(Vim.Math3d.Vector2,Vim.Math3d.Vector2,Vim.Math3d.Vector2,System.Single,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Barycentric(Vector2, Vector2, Vector2, Single, Single)
  nameWithType: MathOps.Barycentric(Vector2, Vector2, Vector2, Single, Single)
  fullName: Vim.Math3d.MathOps.Barycentric(Vim.Math3d.Vector2, Vim.Math3d.Vector2, Vim.Math3d.Vector2, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Barycentric
    path: ../src/MathOps.cs
    startLine: 237
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector2 Barycentric(this Vector2 v1, Vector2 v2, Vector2 v3, float u, float v)
    parameters:
    - id: v1
      type: Vim.Math3d.Vector2
    - id: v2
      type: Vim.Math3d.Vector2
    - id: v3
      type: Vim.Math3d.Vector2
    - id: u
      type: System.Single
    - id: v
      type: System.Single
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Barycentric(v1 As Vector2, v2 As Vector2, v3 As Vector2, u As Single, v As Single) As Vector2
  overload: Vim.Math3d.MathOps.Barycentric*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Lerp(Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single)
  commentId: M:Vim.Math3d.MathOps.Lerp(Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single)
  id: Lerp(Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Lerp(Vector3, Vector3, Single)
  nameWithType: MathOps.Lerp(Vector3, Vector3, Single)
  fullName: Vim.Math3d.MathOps.Lerp(Vim.Math3d.Vector3, Vim.Math3d.Vector3, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Lerp
    path: ../src/MathOps.cs
    startLine: 238
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 Lerp(this Vector3 v1, Vector3 v2, float t)
    parameters:
    - id: v1
      type: Vim.Math3d.Vector3
    - id: v2
      type: Vim.Math3d.Vector3
    - id: t
      type: System.Single
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Lerp(v1 As Vector3, v2 As Vector3, t As Single) As Vector3
  overload: Vim.Math3d.MathOps.Lerp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.InverseLerp(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.MathOps.InverseLerp(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  id: InverseLerp(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: InverseLerp(Vector3, Vector3, Vector3)
  nameWithType: MathOps.InverseLerp(Vector3, Vector3, Vector3)
  fullName: Vim.Math3d.MathOps.InverseLerp(Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: InverseLerp
    path: ../src/MathOps.cs
    startLine: 239
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 InverseLerp(this Vector3 v, Vector3 a, Vector3 b)
    parameters:
    - id: v
      type: Vim.Math3d.Vector3
    - id: a
      type: Vim.Math3d.Vector3
    - id: b
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function InverseLerp(v As Vector3, a As Vector3, b As Vector3) As Vector3
  overload: Vim.Math3d.MathOps.InverseLerp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.LerpPrecise(Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single)
  commentId: M:Vim.Math3d.MathOps.LerpPrecise(Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single)
  id: LerpPrecise(Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: LerpPrecise(Vector3, Vector3, Single)
  nameWithType: MathOps.LerpPrecise(Vector3, Vector3, Single)
  fullName: Vim.Math3d.MathOps.LerpPrecise(Vim.Math3d.Vector3, Vim.Math3d.Vector3, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: LerpPrecise
    path: ../src/MathOps.cs
    startLine: 240
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 LerpPrecise(this Vector3 v1, Vector3 v2, float t)
    parameters:
    - id: v1
      type: Vim.Math3d.Vector3
    - id: v2
      type: Vim.Math3d.Vector3
    - id: t
      type: System.Single
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LerpPrecise(v1 As Vector3, v2 As Vector3, t As Single) As Vector3
  overload: Vim.Math3d.MathOps.LerpPrecise*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.ClampLower(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.MathOps.ClampLower(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  id: ClampLower(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: ClampLower(Vector3, Vector3)
  nameWithType: MathOps.ClampLower(Vector3, Vector3)
  fullName: Vim.Math3d.MathOps.ClampLower(Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ClampLower
    path: ../src/MathOps.cs
    startLine: 241
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 ClampLower(this Vector3 v, Vector3 min)
    parameters:
    - id: v
      type: Vim.Math3d.Vector3
    - id: min
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ClampLower(v As Vector3, min As Vector3) As Vector3
  overload: Vim.Math3d.MathOps.ClampLower*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.ClampUpper(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.MathOps.ClampUpper(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  id: ClampUpper(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: ClampUpper(Vector3, Vector3)
  nameWithType: MathOps.ClampUpper(Vector3, Vector3)
  fullName: Vim.Math3d.MathOps.ClampUpper(Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ClampUpper
    path: ../src/MathOps.cs
    startLine: 242
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 ClampUpper(this Vector3 v, Vector3 max)
    parameters:
    - id: v
      type: Vim.Math3d.Vector3
    - id: max
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ClampUpper(v As Vector3, max As Vector3) As Vector3
  overload: Vim.Math3d.MathOps.ClampUpper*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Clamp(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.MathOps.Clamp(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  id: Clamp(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Clamp(Vector3, Vector3, Vector3)
  nameWithType: MathOps.Clamp(Vector3, Vector3, Vector3)
  fullName: Vim.Math3d.MathOps.Clamp(Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Clamp
    path: ../src/MathOps.cs
    startLine: 243
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 Clamp(this Vector3 v, Vector3 min, Vector3 max)
    parameters:
    - id: v
      type: Vim.Math3d.Vector3
    - id: min
      type: Vim.Math3d.Vector3
    - id: max
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Clamp(v As Vector3, min As Vector3, max As Vector3) As Vector3
  overload: Vim.Math3d.MathOps.Clamp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Average(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.MathOps.Average(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  id: Average(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Average(Vector3, Vector3)
  nameWithType: MathOps.Average(Vector3, Vector3)
  fullName: Vim.Math3d.MathOps.Average(Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Average
    path: ../src/MathOps.cs
    startLine: 244
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 Average(this Vector3 v1, Vector3 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.Vector3
    - id: v2
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(v1 As Vector3, v2 As Vector3) As Vector3
  overload: Vim.Math3d.MathOps.Average*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Barycentric(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single,System.Single)
  commentId: M:Vim.Math3d.MathOps.Barycentric(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single,System.Single)
  id: Barycentric(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Barycentric(Vector3, Vector3, Vector3, Single, Single)
  nameWithType: MathOps.Barycentric(Vector3, Vector3, Vector3, Single, Single)
  fullName: Vim.Math3d.MathOps.Barycentric(Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Barycentric
    path: ../src/MathOps.cs
    startLine: 245
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 Barycentric(this Vector3 v1, Vector3 v2, Vector3 v3, float u, float v)
    parameters:
    - id: v1
      type: Vim.Math3d.Vector3
    - id: v2
      type: Vim.Math3d.Vector3
    - id: v3
      type: Vim.Math3d.Vector3
    - id: u
      type: System.Single
    - id: v
      type: System.Single
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Barycentric(v1 As Vector3, v2 As Vector3, v3 As Vector3, u As Single, v As Single) As Vector3
  overload: Vim.Math3d.MathOps.Barycentric*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Lerp(Vim.Math3d.Vector4,Vim.Math3d.Vector4,System.Single)
  commentId: M:Vim.Math3d.MathOps.Lerp(Vim.Math3d.Vector4,Vim.Math3d.Vector4,System.Single)
  id: Lerp(Vim.Math3d.Vector4,Vim.Math3d.Vector4,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Lerp(Vector4, Vector4, Single)
  nameWithType: MathOps.Lerp(Vector4, Vector4, Single)
  fullName: Vim.Math3d.MathOps.Lerp(Vim.Math3d.Vector4, Vim.Math3d.Vector4, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Lerp
    path: ../src/MathOps.cs
    startLine: 246
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector4 Lerp(this Vector4 v1, Vector4 v2, float t)
    parameters:
    - id: v1
      type: Vim.Math3d.Vector4
    - id: v2
      type: Vim.Math3d.Vector4
    - id: t
      type: System.Single
    return:
      type: Vim.Math3d.Vector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Lerp(v1 As Vector4, v2 As Vector4, t As Single) As Vector4
  overload: Vim.Math3d.MathOps.Lerp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.InverseLerp(Vim.Math3d.Vector4,Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  commentId: M:Vim.Math3d.MathOps.InverseLerp(Vim.Math3d.Vector4,Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  id: InverseLerp(Vim.Math3d.Vector4,Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: InverseLerp(Vector4, Vector4, Vector4)
  nameWithType: MathOps.InverseLerp(Vector4, Vector4, Vector4)
  fullName: Vim.Math3d.MathOps.InverseLerp(Vim.Math3d.Vector4, Vim.Math3d.Vector4, Vim.Math3d.Vector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: InverseLerp
    path: ../src/MathOps.cs
    startLine: 247
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector4 InverseLerp(this Vector4 v, Vector4 a, Vector4 b)
    parameters:
    - id: v
      type: Vim.Math3d.Vector4
    - id: a
      type: Vim.Math3d.Vector4
    - id: b
      type: Vim.Math3d.Vector4
    return:
      type: Vim.Math3d.Vector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function InverseLerp(v As Vector4, a As Vector4, b As Vector4) As Vector4
  overload: Vim.Math3d.MathOps.InverseLerp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.LerpPrecise(Vim.Math3d.Vector4,Vim.Math3d.Vector4,System.Single)
  commentId: M:Vim.Math3d.MathOps.LerpPrecise(Vim.Math3d.Vector4,Vim.Math3d.Vector4,System.Single)
  id: LerpPrecise(Vim.Math3d.Vector4,Vim.Math3d.Vector4,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: LerpPrecise(Vector4, Vector4, Single)
  nameWithType: MathOps.LerpPrecise(Vector4, Vector4, Single)
  fullName: Vim.Math3d.MathOps.LerpPrecise(Vim.Math3d.Vector4, Vim.Math3d.Vector4, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: LerpPrecise
    path: ../src/MathOps.cs
    startLine: 248
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector4 LerpPrecise(this Vector4 v1, Vector4 v2, float t)
    parameters:
    - id: v1
      type: Vim.Math3d.Vector4
    - id: v2
      type: Vim.Math3d.Vector4
    - id: t
      type: System.Single
    return:
      type: Vim.Math3d.Vector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LerpPrecise(v1 As Vector4, v2 As Vector4, t As Single) As Vector4
  overload: Vim.Math3d.MathOps.LerpPrecise*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.ClampLower(Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  commentId: M:Vim.Math3d.MathOps.ClampLower(Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  id: ClampLower(Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: ClampLower(Vector4, Vector4)
  nameWithType: MathOps.ClampLower(Vector4, Vector4)
  fullName: Vim.Math3d.MathOps.ClampLower(Vim.Math3d.Vector4, Vim.Math3d.Vector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ClampLower
    path: ../src/MathOps.cs
    startLine: 249
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector4 ClampLower(this Vector4 v, Vector4 min)
    parameters:
    - id: v
      type: Vim.Math3d.Vector4
    - id: min
      type: Vim.Math3d.Vector4
    return:
      type: Vim.Math3d.Vector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ClampLower(v As Vector4, min As Vector4) As Vector4
  overload: Vim.Math3d.MathOps.ClampLower*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.ClampUpper(Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  commentId: M:Vim.Math3d.MathOps.ClampUpper(Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  id: ClampUpper(Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: ClampUpper(Vector4, Vector4)
  nameWithType: MathOps.ClampUpper(Vector4, Vector4)
  fullName: Vim.Math3d.MathOps.ClampUpper(Vim.Math3d.Vector4, Vim.Math3d.Vector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ClampUpper
    path: ../src/MathOps.cs
    startLine: 250
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector4 ClampUpper(this Vector4 v, Vector4 max)
    parameters:
    - id: v
      type: Vim.Math3d.Vector4
    - id: max
      type: Vim.Math3d.Vector4
    return:
      type: Vim.Math3d.Vector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ClampUpper(v As Vector4, max As Vector4) As Vector4
  overload: Vim.Math3d.MathOps.ClampUpper*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Clamp(Vim.Math3d.Vector4,Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  commentId: M:Vim.Math3d.MathOps.Clamp(Vim.Math3d.Vector4,Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  id: Clamp(Vim.Math3d.Vector4,Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Clamp(Vector4, Vector4, Vector4)
  nameWithType: MathOps.Clamp(Vector4, Vector4, Vector4)
  fullName: Vim.Math3d.MathOps.Clamp(Vim.Math3d.Vector4, Vim.Math3d.Vector4, Vim.Math3d.Vector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Clamp
    path: ../src/MathOps.cs
    startLine: 251
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector4 Clamp(this Vector4 v, Vector4 min, Vector4 max)
    parameters:
    - id: v
      type: Vim.Math3d.Vector4
    - id: min
      type: Vim.Math3d.Vector4
    - id: max
      type: Vim.Math3d.Vector4
    return:
      type: Vim.Math3d.Vector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Clamp(v As Vector4, min As Vector4, max As Vector4) As Vector4
  overload: Vim.Math3d.MathOps.Clamp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Average(Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  commentId: M:Vim.Math3d.MathOps.Average(Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  id: Average(Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Average(Vector4, Vector4)
  nameWithType: MathOps.Average(Vector4, Vector4)
  fullName: Vim.Math3d.MathOps.Average(Vim.Math3d.Vector4, Vim.Math3d.Vector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Average
    path: ../src/MathOps.cs
    startLine: 252
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector4 Average(this Vector4 v1, Vector4 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.Vector4
    - id: v2
      type: Vim.Math3d.Vector4
    return:
      type: Vim.Math3d.Vector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(v1 As Vector4, v2 As Vector4) As Vector4
  overload: Vim.Math3d.MathOps.Average*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Barycentric(Vim.Math3d.Vector4,Vim.Math3d.Vector4,Vim.Math3d.Vector4,System.Single,System.Single)
  commentId: M:Vim.Math3d.MathOps.Barycentric(Vim.Math3d.Vector4,Vim.Math3d.Vector4,Vim.Math3d.Vector4,System.Single,System.Single)
  id: Barycentric(Vim.Math3d.Vector4,Vim.Math3d.Vector4,Vim.Math3d.Vector4,System.Single,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Barycentric(Vector4, Vector4, Vector4, Single, Single)
  nameWithType: MathOps.Barycentric(Vector4, Vector4, Vector4, Single, Single)
  fullName: Vim.Math3d.MathOps.Barycentric(Vim.Math3d.Vector4, Vim.Math3d.Vector4, Vim.Math3d.Vector4, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Barycentric
    path: ../src/MathOps.cs
    startLine: 253
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector4 Barycentric(this Vector4 v1, Vector4 v2, Vector4 v3, float u, float v)
    parameters:
    - id: v1
      type: Vim.Math3d.Vector4
    - id: v2
      type: Vim.Math3d.Vector4
    - id: v3
      type: Vim.Math3d.Vector4
    - id: u
      type: System.Single
    - id: v
      type: System.Single
    return:
      type: Vim.Math3d.Vector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Barycentric(v1 As Vector4, v2 As Vector4, v3 As Vector4, u As Single, v As Single) As Vector4
  overload: Vim.Math3d.MathOps.Barycentric*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Lerp(Vim.Math3d.DVector2,Vim.Math3d.DVector2,System.Single)
  commentId: M:Vim.Math3d.MathOps.Lerp(Vim.Math3d.DVector2,Vim.Math3d.DVector2,System.Single)
  id: Lerp(Vim.Math3d.DVector2,Vim.Math3d.DVector2,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Lerp(DVector2, DVector2, Single)
  nameWithType: MathOps.Lerp(DVector2, DVector2, Single)
  fullName: Vim.Math3d.MathOps.Lerp(Vim.Math3d.DVector2, Vim.Math3d.DVector2, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Lerp
    path: ../src/MathOps.cs
    startLine: 254
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector2 Lerp(this DVector2 v1, DVector2 v2, float t)
    parameters:
    - id: v1
      type: Vim.Math3d.DVector2
    - id: v2
      type: Vim.Math3d.DVector2
    - id: t
      type: System.Single
    return:
      type: Vim.Math3d.DVector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Lerp(v1 As DVector2, v2 As DVector2, t As Single) As DVector2
  overload: Vim.Math3d.MathOps.Lerp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.InverseLerp(Vim.Math3d.DVector2,Vim.Math3d.DVector2,Vim.Math3d.DVector2)
  commentId: M:Vim.Math3d.MathOps.InverseLerp(Vim.Math3d.DVector2,Vim.Math3d.DVector2,Vim.Math3d.DVector2)
  id: InverseLerp(Vim.Math3d.DVector2,Vim.Math3d.DVector2,Vim.Math3d.DVector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: InverseLerp(DVector2, DVector2, DVector2)
  nameWithType: MathOps.InverseLerp(DVector2, DVector2, DVector2)
  fullName: Vim.Math3d.MathOps.InverseLerp(Vim.Math3d.DVector2, Vim.Math3d.DVector2, Vim.Math3d.DVector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: InverseLerp
    path: ../src/MathOps.cs
    startLine: 255
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector2 InverseLerp(this DVector2 v, DVector2 a, DVector2 b)
    parameters:
    - id: v
      type: Vim.Math3d.DVector2
    - id: a
      type: Vim.Math3d.DVector2
    - id: b
      type: Vim.Math3d.DVector2
    return:
      type: Vim.Math3d.DVector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function InverseLerp(v As DVector2, a As DVector2, b As DVector2) As DVector2
  overload: Vim.Math3d.MathOps.InverseLerp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.LerpPrecise(Vim.Math3d.DVector2,Vim.Math3d.DVector2,System.Single)
  commentId: M:Vim.Math3d.MathOps.LerpPrecise(Vim.Math3d.DVector2,Vim.Math3d.DVector2,System.Single)
  id: LerpPrecise(Vim.Math3d.DVector2,Vim.Math3d.DVector2,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: LerpPrecise(DVector2, DVector2, Single)
  nameWithType: MathOps.LerpPrecise(DVector2, DVector2, Single)
  fullName: Vim.Math3d.MathOps.LerpPrecise(Vim.Math3d.DVector2, Vim.Math3d.DVector2, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: LerpPrecise
    path: ../src/MathOps.cs
    startLine: 256
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector2 LerpPrecise(this DVector2 v1, DVector2 v2, float t)
    parameters:
    - id: v1
      type: Vim.Math3d.DVector2
    - id: v2
      type: Vim.Math3d.DVector2
    - id: t
      type: System.Single
    return:
      type: Vim.Math3d.DVector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LerpPrecise(v1 As DVector2, v2 As DVector2, t As Single) As DVector2
  overload: Vim.Math3d.MathOps.LerpPrecise*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.ClampLower(Vim.Math3d.DVector2,Vim.Math3d.DVector2)
  commentId: M:Vim.Math3d.MathOps.ClampLower(Vim.Math3d.DVector2,Vim.Math3d.DVector2)
  id: ClampLower(Vim.Math3d.DVector2,Vim.Math3d.DVector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: ClampLower(DVector2, DVector2)
  nameWithType: MathOps.ClampLower(DVector2, DVector2)
  fullName: Vim.Math3d.MathOps.ClampLower(Vim.Math3d.DVector2, Vim.Math3d.DVector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ClampLower
    path: ../src/MathOps.cs
    startLine: 257
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector2 ClampLower(this DVector2 v, DVector2 min)
    parameters:
    - id: v
      type: Vim.Math3d.DVector2
    - id: min
      type: Vim.Math3d.DVector2
    return:
      type: Vim.Math3d.DVector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ClampLower(v As DVector2, min As DVector2) As DVector2
  overload: Vim.Math3d.MathOps.ClampLower*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.ClampUpper(Vim.Math3d.DVector2,Vim.Math3d.DVector2)
  commentId: M:Vim.Math3d.MathOps.ClampUpper(Vim.Math3d.DVector2,Vim.Math3d.DVector2)
  id: ClampUpper(Vim.Math3d.DVector2,Vim.Math3d.DVector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: ClampUpper(DVector2, DVector2)
  nameWithType: MathOps.ClampUpper(DVector2, DVector2)
  fullName: Vim.Math3d.MathOps.ClampUpper(Vim.Math3d.DVector2, Vim.Math3d.DVector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ClampUpper
    path: ../src/MathOps.cs
    startLine: 258
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector2 ClampUpper(this DVector2 v, DVector2 max)
    parameters:
    - id: v
      type: Vim.Math3d.DVector2
    - id: max
      type: Vim.Math3d.DVector2
    return:
      type: Vim.Math3d.DVector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ClampUpper(v As DVector2, max As DVector2) As DVector2
  overload: Vim.Math3d.MathOps.ClampUpper*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Clamp(Vim.Math3d.DVector2,Vim.Math3d.DVector2,Vim.Math3d.DVector2)
  commentId: M:Vim.Math3d.MathOps.Clamp(Vim.Math3d.DVector2,Vim.Math3d.DVector2,Vim.Math3d.DVector2)
  id: Clamp(Vim.Math3d.DVector2,Vim.Math3d.DVector2,Vim.Math3d.DVector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Clamp(DVector2, DVector2, DVector2)
  nameWithType: MathOps.Clamp(DVector2, DVector2, DVector2)
  fullName: Vim.Math3d.MathOps.Clamp(Vim.Math3d.DVector2, Vim.Math3d.DVector2, Vim.Math3d.DVector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Clamp
    path: ../src/MathOps.cs
    startLine: 259
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector2 Clamp(this DVector2 v, DVector2 min, DVector2 max)
    parameters:
    - id: v
      type: Vim.Math3d.DVector2
    - id: min
      type: Vim.Math3d.DVector2
    - id: max
      type: Vim.Math3d.DVector2
    return:
      type: Vim.Math3d.DVector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Clamp(v As DVector2, min As DVector2, max As DVector2) As DVector2
  overload: Vim.Math3d.MathOps.Clamp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Average(Vim.Math3d.DVector2,Vim.Math3d.DVector2)
  commentId: M:Vim.Math3d.MathOps.Average(Vim.Math3d.DVector2,Vim.Math3d.DVector2)
  id: Average(Vim.Math3d.DVector2,Vim.Math3d.DVector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Average(DVector2, DVector2)
  nameWithType: MathOps.Average(DVector2, DVector2)
  fullName: Vim.Math3d.MathOps.Average(Vim.Math3d.DVector2, Vim.Math3d.DVector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Average
    path: ../src/MathOps.cs
    startLine: 260
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector2 Average(this DVector2 v1, DVector2 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.DVector2
    - id: v2
      type: Vim.Math3d.DVector2
    return:
      type: Vim.Math3d.DVector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(v1 As DVector2, v2 As DVector2) As DVector2
  overload: Vim.Math3d.MathOps.Average*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Barycentric(Vim.Math3d.DVector2,Vim.Math3d.DVector2,Vim.Math3d.DVector2,System.Single,System.Single)
  commentId: M:Vim.Math3d.MathOps.Barycentric(Vim.Math3d.DVector2,Vim.Math3d.DVector2,Vim.Math3d.DVector2,System.Single,System.Single)
  id: Barycentric(Vim.Math3d.DVector2,Vim.Math3d.DVector2,Vim.Math3d.DVector2,System.Single,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Barycentric(DVector2, DVector2, DVector2, Single, Single)
  nameWithType: MathOps.Barycentric(DVector2, DVector2, DVector2, Single, Single)
  fullName: Vim.Math3d.MathOps.Barycentric(Vim.Math3d.DVector2, Vim.Math3d.DVector2, Vim.Math3d.DVector2, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Barycentric
    path: ../src/MathOps.cs
    startLine: 261
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector2 Barycentric(this DVector2 v1, DVector2 v2, DVector2 v3, float u, float v)
    parameters:
    - id: v1
      type: Vim.Math3d.DVector2
    - id: v2
      type: Vim.Math3d.DVector2
    - id: v3
      type: Vim.Math3d.DVector2
    - id: u
      type: System.Single
    - id: v
      type: System.Single
    return:
      type: Vim.Math3d.DVector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Barycentric(v1 As DVector2, v2 As DVector2, v3 As DVector2, u As Single, v As Single) As DVector2
  overload: Vim.Math3d.MathOps.Barycentric*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Lerp(Vim.Math3d.DVector3,Vim.Math3d.DVector3,System.Single)
  commentId: M:Vim.Math3d.MathOps.Lerp(Vim.Math3d.DVector3,Vim.Math3d.DVector3,System.Single)
  id: Lerp(Vim.Math3d.DVector3,Vim.Math3d.DVector3,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Lerp(DVector3, DVector3, Single)
  nameWithType: MathOps.Lerp(DVector3, DVector3, Single)
  fullName: Vim.Math3d.MathOps.Lerp(Vim.Math3d.DVector3, Vim.Math3d.DVector3, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Lerp
    path: ../src/MathOps.cs
    startLine: 262
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector3 Lerp(this DVector3 v1, DVector3 v2, float t)
    parameters:
    - id: v1
      type: Vim.Math3d.DVector3
    - id: v2
      type: Vim.Math3d.DVector3
    - id: t
      type: System.Single
    return:
      type: Vim.Math3d.DVector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Lerp(v1 As DVector3, v2 As DVector3, t As Single) As DVector3
  overload: Vim.Math3d.MathOps.Lerp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.InverseLerp(Vim.Math3d.DVector3,Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  commentId: M:Vim.Math3d.MathOps.InverseLerp(Vim.Math3d.DVector3,Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  id: InverseLerp(Vim.Math3d.DVector3,Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: InverseLerp(DVector3, DVector3, DVector3)
  nameWithType: MathOps.InverseLerp(DVector3, DVector3, DVector3)
  fullName: Vim.Math3d.MathOps.InverseLerp(Vim.Math3d.DVector3, Vim.Math3d.DVector3, Vim.Math3d.DVector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: InverseLerp
    path: ../src/MathOps.cs
    startLine: 263
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector3 InverseLerp(this DVector3 v, DVector3 a, DVector3 b)
    parameters:
    - id: v
      type: Vim.Math3d.DVector3
    - id: a
      type: Vim.Math3d.DVector3
    - id: b
      type: Vim.Math3d.DVector3
    return:
      type: Vim.Math3d.DVector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function InverseLerp(v As DVector3, a As DVector3, b As DVector3) As DVector3
  overload: Vim.Math3d.MathOps.InverseLerp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.LerpPrecise(Vim.Math3d.DVector3,Vim.Math3d.DVector3,System.Single)
  commentId: M:Vim.Math3d.MathOps.LerpPrecise(Vim.Math3d.DVector3,Vim.Math3d.DVector3,System.Single)
  id: LerpPrecise(Vim.Math3d.DVector3,Vim.Math3d.DVector3,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: LerpPrecise(DVector3, DVector3, Single)
  nameWithType: MathOps.LerpPrecise(DVector3, DVector3, Single)
  fullName: Vim.Math3d.MathOps.LerpPrecise(Vim.Math3d.DVector3, Vim.Math3d.DVector3, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: LerpPrecise
    path: ../src/MathOps.cs
    startLine: 264
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector3 LerpPrecise(this DVector3 v1, DVector3 v2, float t)
    parameters:
    - id: v1
      type: Vim.Math3d.DVector3
    - id: v2
      type: Vim.Math3d.DVector3
    - id: t
      type: System.Single
    return:
      type: Vim.Math3d.DVector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LerpPrecise(v1 As DVector3, v2 As DVector3, t As Single) As DVector3
  overload: Vim.Math3d.MathOps.LerpPrecise*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.ClampLower(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  commentId: M:Vim.Math3d.MathOps.ClampLower(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  id: ClampLower(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: ClampLower(DVector3, DVector3)
  nameWithType: MathOps.ClampLower(DVector3, DVector3)
  fullName: Vim.Math3d.MathOps.ClampLower(Vim.Math3d.DVector3, Vim.Math3d.DVector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ClampLower
    path: ../src/MathOps.cs
    startLine: 265
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector3 ClampLower(this DVector3 v, DVector3 min)
    parameters:
    - id: v
      type: Vim.Math3d.DVector3
    - id: min
      type: Vim.Math3d.DVector3
    return:
      type: Vim.Math3d.DVector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ClampLower(v As DVector3, min As DVector3) As DVector3
  overload: Vim.Math3d.MathOps.ClampLower*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.ClampUpper(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  commentId: M:Vim.Math3d.MathOps.ClampUpper(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  id: ClampUpper(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: ClampUpper(DVector3, DVector3)
  nameWithType: MathOps.ClampUpper(DVector3, DVector3)
  fullName: Vim.Math3d.MathOps.ClampUpper(Vim.Math3d.DVector3, Vim.Math3d.DVector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ClampUpper
    path: ../src/MathOps.cs
    startLine: 266
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector3 ClampUpper(this DVector3 v, DVector3 max)
    parameters:
    - id: v
      type: Vim.Math3d.DVector3
    - id: max
      type: Vim.Math3d.DVector3
    return:
      type: Vim.Math3d.DVector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ClampUpper(v As DVector3, max As DVector3) As DVector3
  overload: Vim.Math3d.MathOps.ClampUpper*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Clamp(Vim.Math3d.DVector3,Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  commentId: M:Vim.Math3d.MathOps.Clamp(Vim.Math3d.DVector3,Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  id: Clamp(Vim.Math3d.DVector3,Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Clamp(DVector3, DVector3, DVector3)
  nameWithType: MathOps.Clamp(DVector3, DVector3, DVector3)
  fullName: Vim.Math3d.MathOps.Clamp(Vim.Math3d.DVector3, Vim.Math3d.DVector3, Vim.Math3d.DVector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Clamp
    path: ../src/MathOps.cs
    startLine: 267
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector3 Clamp(this DVector3 v, DVector3 min, DVector3 max)
    parameters:
    - id: v
      type: Vim.Math3d.DVector3
    - id: min
      type: Vim.Math3d.DVector3
    - id: max
      type: Vim.Math3d.DVector3
    return:
      type: Vim.Math3d.DVector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Clamp(v As DVector3, min As DVector3, max As DVector3) As DVector3
  overload: Vim.Math3d.MathOps.Clamp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Average(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  commentId: M:Vim.Math3d.MathOps.Average(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  id: Average(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Average(DVector3, DVector3)
  nameWithType: MathOps.Average(DVector3, DVector3)
  fullName: Vim.Math3d.MathOps.Average(Vim.Math3d.DVector3, Vim.Math3d.DVector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Average
    path: ../src/MathOps.cs
    startLine: 268
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector3 Average(this DVector3 v1, DVector3 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.DVector3
    - id: v2
      type: Vim.Math3d.DVector3
    return:
      type: Vim.Math3d.DVector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(v1 As DVector3, v2 As DVector3) As DVector3
  overload: Vim.Math3d.MathOps.Average*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Barycentric(Vim.Math3d.DVector3,Vim.Math3d.DVector3,Vim.Math3d.DVector3,System.Single,System.Single)
  commentId: M:Vim.Math3d.MathOps.Barycentric(Vim.Math3d.DVector3,Vim.Math3d.DVector3,Vim.Math3d.DVector3,System.Single,System.Single)
  id: Barycentric(Vim.Math3d.DVector3,Vim.Math3d.DVector3,Vim.Math3d.DVector3,System.Single,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Barycentric(DVector3, DVector3, DVector3, Single, Single)
  nameWithType: MathOps.Barycentric(DVector3, DVector3, DVector3, Single, Single)
  fullName: Vim.Math3d.MathOps.Barycentric(Vim.Math3d.DVector3, Vim.Math3d.DVector3, Vim.Math3d.DVector3, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Barycentric
    path: ../src/MathOps.cs
    startLine: 269
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector3 Barycentric(this DVector3 v1, DVector3 v2, DVector3 v3, float u, float v)
    parameters:
    - id: v1
      type: Vim.Math3d.DVector3
    - id: v2
      type: Vim.Math3d.DVector3
    - id: v3
      type: Vim.Math3d.DVector3
    - id: u
      type: System.Single
    - id: v
      type: System.Single
    return:
      type: Vim.Math3d.DVector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Barycentric(v1 As DVector3, v2 As DVector3, v3 As DVector3, u As Single, v As Single) As DVector3
  overload: Vim.Math3d.MathOps.Barycentric*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Lerp(Vim.Math3d.DVector4,Vim.Math3d.DVector4,System.Single)
  commentId: M:Vim.Math3d.MathOps.Lerp(Vim.Math3d.DVector4,Vim.Math3d.DVector4,System.Single)
  id: Lerp(Vim.Math3d.DVector4,Vim.Math3d.DVector4,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Lerp(DVector4, DVector4, Single)
  nameWithType: MathOps.Lerp(DVector4, DVector4, Single)
  fullName: Vim.Math3d.MathOps.Lerp(Vim.Math3d.DVector4, Vim.Math3d.DVector4, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Lerp
    path: ../src/MathOps.cs
    startLine: 270
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector4 Lerp(this DVector4 v1, DVector4 v2, float t)
    parameters:
    - id: v1
      type: Vim.Math3d.DVector4
    - id: v2
      type: Vim.Math3d.DVector4
    - id: t
      type: System.Single
    return:
      type: Vim.Math3d.DVector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Lerp(v1 As DVector4, v2 As DVector4, t As Single) As DVector4
  overload: Vim.Math3d.MathOps.Lerp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.InverseLerp(Vim.Math3d.DVector4,Vim.Math3d.DVector4,Vim.Math3d.DVector4)
  commentId: M:Vim.Math3d.MathOps.InverseLerp(Vim.Math3d.DVector4,Vim.Math3d.DVector4,Vim.Math3d.DVector4)
  id: InverseLerp(Vim.Math3d.DVector4,Vim.Math3d.DVector4,Vim.Math3d.DVector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: InverseLerp(DVector4, DVector4, DVector4)
  nameWithType: MathOps.InverseLerp(DVector4, DVector4, DVector4)
  fullName: Vim.Math3d.MathOps.InverseLerp(Vim.Math3d.DVector4, Vim.Math3d.DVector4, Vim.Math3d.DVector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: InverseLerp
    path: ../src/MathOps.cs
    startLine: 271
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector4 InverseLerp(this DVector4 v, DVector4 a, DVector4 b)
    parameters:
    - id: v
      type: Vim.Math3d.DVector4
    - id: a
      type: Vim.Math3d.DVector4
    - id: b
      type: Vim.Math3d.DVector4
    return:
      type: Vim.Math3d.DVector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function InverseLerp(v As DVector4, a As DVector4, b As DVector4) As DVector4
  overload: Vim.Math3d.MathOps.InverseLerp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.LerpPrecise(Vim.Math3d.DVector4,Vim.Math3d.DVector4,System.Single)
  commentId: M:Vim.Math3d.MathOps.LerpPrecise(Vim.Math3d.DVector4,Vim.Math3d.DVector4,System.Single)
  id: LerpPrecise(Vim.Math3d.DVector4,Vim.Math3d.DVector4,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: LerpPrecise(DVector4, DVector4, Single)
  nameWithType: MathOps.LerpPrecise(DVector4, DVector4, Single)
  fullName: Vim.Math3d.MathOps.LerpPrecise(Vim.Math3d.DVector4, Vim.Math3d.DVector4, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: LerpPrecise
    path: ../src/MathOps.cs
    startLine: 272
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector4 LerpPrecise(this DVector4 v1, DVector4 v2, float t)
    parameters:
    - id: v1
      type: Vim.Math3d.DVector4
    - id: v2
      type: Vim.Math3d.DVector4
    - id: t
      type: System.Single
    return:
      type: Vim.Math3d.DVector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LerpPrecise(v1 As DVector4, v2 As DVector4, t As Single) As DVector4
  overload: Vim.Math3d.MathOps.LerpPrecise*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.ClampLower(Vim.Math3d.DVector4,Vim.Math3d.DVector4)
  commentId: M:Vim.Math3d.MathOps.ClampLower(Vim.Math3d.DVector4,Vim.Math3d.DVector4)
  id: ClampLower(Vim.Math3d.DVector4,Vim.Math3d.DVector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: ClampLower(DVector4, DVector4)
  nameWithType: MathOps.ClampLower(DVector4, DVector4)
  fullName: Vim.Math3d.MathOps.ClampLower(Vim.Math3d.DVector4, Vim.Math3d.DVector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ClampLower
    path: ../src/MathOps.cs
    startLine: 273
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector4 ClampLower(this DVector4 v, DVector4 min)
    parameters:
    - id: v
      type: Vim.Math3d.DVector4
    - id: min
      type: Vim.Math3d.DVector4
    return:
      type: Vim.Math3d.DVector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ClampLower(v As DVector4, min As DVector4) As DVector4
  overload: Vim.Math3d.MathOps.ClampLower*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.ClampUpper(Vim.Math3d.DVector4,Vim.Math3d.DVector4)
  commentId: M:Vim.Math3d.MathOps.ClampUpper(Vim.Math3d.DVector4,Vim.Math3d.DVector4)
  id: ClampUpper(Vim.Math3d.DVector4,Vim.Math3d.DVector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: ClampUpper(DVector4, DVector4)
  nameWithType: MathOps.ClampUpper(DVector4, DVector4)
  fullName: Vim.Math3d.MathOps.ClampUpper(Vim.Math3d.DVector4, Vim.Math3d.DVector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ClampUpper
    path: ../src/MathOps.cs
    startLine: 274
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector4 ClampUpper(this DVector4 v, DVector4 max)
    parameters:
    - id: v
      type: Vim.Math3d.DVector4
    - id: max
      type: Vim.Math3d.DVector4
    return:
      type: Vim.Math3d.DVector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ClampUpper(v As DVector4, max As DVector4) As DVector4
  overload: Vim.Math3d.MathOps.ClampUpper*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Clamp(Vim.Math3d.DVector4,Vim.Math3d.DVector4,Vim.Math3d.DVector4)
  commentId: M:Vim.Math3d.MathOps.Clamp(Vim.Math3d.DVector4,Vim.Math3d.DVector4,Vim.Math3d.DVector4)
  id: Clamp(Vim.Math3d.DVector4,Vim.Math3d.DVector4,Vim.Math3d.DVector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Clamp(DVector4, DVector4, DVector4)
  nameWithType: MathOps.Clamp(DVector4, DVector4, DVector4)
  fullName: Vim.Math3d.MathOps.Clamp(Vim.Math3d.DVector4, Vim.Math3d.DVector4, Vim.Math3d.DVector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Clamp
    path: ../src/MathOps.cs
    startLine: 275
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector4 Clamp(this DVector4 v, DVector4 min, DVector4 max)
    parameters:
    - id: v
      type: Vim.Math3d.DVector4
    - id: min
      type: Vim.Math3d.DVector4
    - id: max
      type: Vim.Math3d.DVector4
    return:
      type: Vim.Math3d.DVector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Clamp(v As DVector4, min As DVector4, max As DVector4) As DVector4
  overload: Vim.Math3d.MathOps.Clamp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Average(Vim.Math3d.DVector4,Vim.Math3d.DVector4)
  commentId: M:Vim.Math3d.MathOps.Average(Vim.Math3d.DVector4,Vim.Math3d.DVector4)
  id: Average(Vim.Math3d.DVector4,Vim.Math3d.DVector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Average(DVector4, DVector4)
  nameWithType: MathOps.Average(DVector4, DVector4)
  fullName: Vim.Math3d.MathOps.Average(Vim.Math3d.DVector4, Vim.Math3d.DVector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Average
    path: ../src/MathOps.cs
    startLine: 276
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector4 Average(this DVector4 v1, DVector4 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.DVector4
    - id: v2
      type: Vim.Math3d.DVector4
    return:
      type: Vim.Math3d.DVector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(v1 As DVector4, v2 As DVector4) As DVector4
  overload: Vim.Math3d.MathOps.Average*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Barycentric(Vim.Math3d.DVector4,Vim.Math3d.DVector4,Vim.Math3d.DVector4,System.Single,System.Single)
  commentId: M:Vim.Math3d.MathOps.Barycentric(Vim.Math3d.DVector4,Vim.Math3d.DVector4,Vim.Math3d.DVector4,System.Single,System.Single)
  id: Barycentric(Vim.Math3d.DVector4,Vim.Math3d.DVector4,Vim.Math3d.DVector4,System.Single,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Barycentric(DVector4, DVector4, DVector4, Single, Single)
  nameWithType: MathOps.Barycentric(DVector4, DVector4, DVector4, Single, Single)
  fullName: Vim.Math3d.MathOps.Barycentric(Vim.Math3d.DVector4, Vim.Math3d.DVector4, Vim.Math3d.DVector4, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Barycentric
    path: ../src/MathOps.cs
    startLine: 277
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector4 Barycentric(this DVector4 v1, DVector4 v2, DVector4 v3, float u, float v)
    parameters:
    - id: v1
      type: Vim.Math3d.DVector4
    - id: v2
      type: Vim.Math3d.DVector4
    - id: v3
      type: Vim.Math3d.DVector4
    - id: u
      type: System.Single
    - id: v
      type: System.Single
    return:
      type: Vim.Math3d.DVector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Barycentric(v1 As DVector4, v2 As DVector4, v3 As DVector4, u As Single, v As Single) As DVector4
  overload: Vim.Math3d.MathOps.Barycentric*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Stats(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector2})
  commentId: M:Vim.Math3d.MathOps.Stats(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector2})
  id: Stats(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector2})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Stats(IEnumerable<Vector2>)
  nameWithType: MathOps.Stats(IEnumerable<Vector2>)
  fullName: Vim.Math3d.MathOps.Stats(System.Collections.Generic.IEnumerable<Vim.Math3d.Vector2>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Stats
    path: ../src/MathOps.cs
    startLine: 280
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Stats<Vector2> Stats(this IEnumerable<Vector2> self)
    parameters:
    - id: self
      type: System.Collections.Generic.IEnumerable{Vim.Math3d.Vector2}
    return:
      type: Vim.Math3d.Stats{Vim.Math3d.Vector2}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Stats(self As IEnumerable(Of Vector2)) As Stats(Of Vector2)
  overload: Vim.Math3d.MathOps.Stats*
  nameWithType.vb: MathOps.Stats(IEnumerable(Of Vector2))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Stats(System.Collections.Generic.IEnumerable(Of Vim.Math3d.Vector2))
  name.vb: Stats(IEnumerable(Of Vector2))
- uid: Vim.Math3d.MathOps.Average(Vim.Math3d.Stats{Vim.Math3d.Vector2})
  commentId: M:Vim.Math3d.MathOps.Average(Vim.Math3d.Stats{Vim.Math3d.Vector2})
  id: Average(Vim.Math3d.Stats{Vim.Math3d.Vector2})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Average(Stats<Vector2>)
  nameWithType: MathOps.Average(Stats<Vector2>)
  fullName: Vim.Math3d.MathOps.Average(Vim.Math3d.Stats<Vim.Math3d.Vector2>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Average
    path: ../src/MathOps.cs
    startLine: 283
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector2 Average(this Stats<Vector2> self)
    parameters:
    - id: self
      type: Vim.Math3d.Stats{Vim.Math3d.Vector2}
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(self As Stats(Of Vector2)) As Vector2
  overload: Vim.Math3d.MathOps.Average*
  nameWithType.vb: MathOps.Average(Stats(Of Vector2))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Average(Vim.Math3d.Stats(Of Vim.Math3d.Vector2))
  name.vb: Average(Stats(Of Vector2))
- uid: Vim.Math3d.MathOps.Extents(Vim.Math3d.Stats{Vim.Math3d.Vector2})
  commentId: M:Vim.Math3d.MathOps.Extents(Vim.Math3d.Stats{Vim.Math3d.Vector2})
  id: Extents(Vim.Math3d.Stats{Vim.Math3d.Vector2})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Extents(Stats<Vector2>)
  nameWithType: MathOps.Extents(Stats<Vector2>)
  fullName: Vim.Math3d.MathOps.Extents(Vim.Math3d.Stats<Vim.Math3d.Vector2>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Extents
    path: ../src/MathOps.cs
    startLine: 284
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector2 Extents(this Stats<Vector2> self)
    parameters:
    - id: self
      type: Vim.Math3d.Stats{Vim.Math3d.Vector2}
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Extents(self As Stats(Of Vector2)) As Vector2
  overload: Vim.Math3d.MathOps.Extents*
  nameWithType.vb: MathOps.Extents(Stats(Of Vector2))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Extents(Vim.Math3d.Stats(Of Vim.Math3d.Vector2))
  name.vb: Extents(Stats(Of Vector2))
- uid: Vim.Math3d.MathOps.Middle(Vim.Math3d.Stats{Vim.Math3d.Vector2})
  commentId: M:Vim.Math3d.MathOps.Middle(Vim.Math3d.Stats{Vim.Math3d.Vector2})
  id: Middle(Vim.Math3d.Stats{Vim.Math3d.Vector2})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Middle(Stats<Vector2>)
  nameWithType: MathOps.Middle(Stats<Vector2>)
  fullName: Vim.Math3d.MathOps.Middle(Vim.Math3d.Stats<Vim.Math3d.Vector2>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Middle
    path: ../src/MathOps.cs
    startLine: 285
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector2 Middle(this Stats<Vector2> self)
    parameters:
    - id: self
      type: Vim.Math3d.Stats{Vim.Math3d.Vector2}
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Middle(self As Stats(Of Vector2)) As Vector2
  overload: Vim.Math3d.MathOps.Middle*
  nameWithType.vb: MathOps.Middle(Stats(Of Vector2))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Middle(Vim.Math3d.Stats(Of Vim.Math3d.Vector2))
  name.vb: Middle(Stats(Of Vector2))
- uid: Vim.Math3d.MathOps.Sum(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector2})
  commentId: M:Vim.Math3d.MathOps.Sum(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector2})
  id: Sum(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector2})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Sum(IEnumerable<Vector2>)
  nameWithType: MathOps.Sum(IEnumerable<Vector2>)
  fullName: Vim.Math3d.MathOps.Sum(System.Collections.Generic.IEnumerable<Vim.Math3d.Vector2>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Sum
    path: ../src/MathOps.cs
    startLine: 287
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector2 Sum(this IEnumerable<Vector2> self)
    parameters:
    - id: self
      type: System.Collections.Generic.IEnumerable{Vim.Math3d.Vector2}
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(self As IEnumerable(Of Vector2)) As Vector2
  overload: Vim.Math3d.MathOps.Sum*
  nameWithType.vb: MathOps.Sum(IEnumerable(Of Vector2))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Sum(System.Collections.Generic.IEnumerable(Of Vim.Math3d.Vector2))
  name.vb: Sum(IEnumerable(Of Vector2))
- uid: Vim.Math3d.MathOps.Average(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector2})
  commentId: M:Vim.Math3d.MathOps.Average(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector2})
  id: Average(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector2})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Average(IEnumerable<Vector2>)
  nameWithType: MathOps.Average(IEnumerable<Vector2>)
  fullName: Vim.Math3d.MathOps.Average(System.Collections.Generic.IEnumerable<Vim.Math3d.Vector2>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Average
    path: ../src/MathOps.cs
    startLine: 288
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector2 Average(this IEnumerable<Vector2> self)
    parameters:
    - id: self
      type: System.Collections.Generic.IEnumerable{Vim.Math3d.Vector2}
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(self As IEnumerable(Of Vector2)) As Vector2
  overload: Vim.Math3d.MathOps.Average*
  nameWithType.vb: MathOps.Average(IEnumerable(Of Vector2))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Average(System.Collections.Generic.IEnumerable(Of Vim.Math3d.Vector2))
  name.vb: Average(IEnumerable(Of Vector2))
- uid: Vim.Math3d.MathOps.Min(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector2})
  commentId: M:Vim.Math3d.MathOps.Min(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector2})
  id: Min(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector2})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Min(IEnumerable<Vector2>)
  nameWithType: MathOps.Min(IEnumerable<Vector2>)
  fullName: Vim.Math3d.MathOps.Min(System.Collections.Generic.IEnumerable<Vim.Math3d.Vector2>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Min
    path: ../src/MathOps.cs
    startLine: 289
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector2 Min(this IEnumerable<Vector2> self)
    parameters:
    - id: self
      type: System.Collections.Generic.IEnumerable{Vim.Math3d.Vector2}
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(self As IEnumerable(Of Vector2)) As Vector2
  overload: Vim.Math3d.MathOps.Min*
  nameWithType.vb: MathOps.Min(IEnumerable(Of Vector2))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Min(System.Collections.Generic.IEnumerable(Of Vim.Math3d.Vector2))
  name.vb: Min(IEnumerable(Of Vector2))
- uid: Vim.Math3d.MathOps.Max(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector2})
  commentId: M:Vim.Math3d.MathOps.Max(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector2})
  id: Max(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector2})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Max(IEnumerable<Vector2>)
  nameWithType: MathOps.Max(IEnumerable<Vector2>)
  fullName: Vim.Math3d.MathOps.Max(System.Collections.Generic.IEnumerable<Vim.Math3d.Vector2>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Max
    path: ../src/MathOps.cs
    startLine: 290
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector2 Max(this IEnumerable<Vector2> self)
    parameters:
    - id: self
      type: System.Collections.Generic.IEnumerable{Vim.Math3d.Vector2}
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(self As IEnumerable(Of Vector2)) As Vector2
  overload: Vim.Math3d.MathOps.Max*
  nameWithType.vb: MathOps.Max(IEnumerable(Of Vector2))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Max(System.Collections.Generic.IEnumerable(Of Vim.Math3d.Vector2))
  name.vb: Max(IEnumerable(Of Vector2))
- uid: Vim.Math3d.MathOps.Extents(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector2})
  commentId: M:Vim.Math3d.MathOps.Extents(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector2})
  id: Extents(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector2})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Extents(IEnumerable<Vector2>)
  nameWithType: MathOps.Extents(IEnumerable<Vector2>)
  fullName: Vim.Math3d.MathOps.Extents(System.Collections.Generic.IEnumerable<Vim.Math3d.Vector2>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Extents
    path: ../src/MathOps.cs
    startLine: 291
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector2 Extents(this IEnumerable<Vector2> self)
    parameters:
    - id: self
      type: System.Collections.Generic.IEnumerable{Vim.Math3d.Vector2}
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Extents(self As IEnumerable(Of Vector2)) As Vector2
  overload: Vim.Math3d.MathOps.Extents*
  nameWithType.vb: MathOps.Extents(IEnumerable(Of Vector2))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Extents(System.Collections.Generic.IEnumerable(Of Vim.Math3d.Vector2))
  name.vb: Extents(IEnumerable(Of Vector2))
- uid: Vim.Math3d.MathOps.Middle(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector2})
  commentId: M:Vim.Math3d.MathOps.Middle(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector2})
  id: Middle(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector2})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Middle(IEnumerable<Vector2>)
  nameWithType: MathOps.Middle(IEnumerable<Vector2>)
  fullName: Vim.Math3d.MathOps.Middle(System.Collections.Generic.IEnumerable<Vim.Math3d.Vector2>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Middle
    path: ../src/MathOps.cs
    startLine: 292
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector2 Middle(this IEnumerable<Vector2> self)
    parameters:
    - id: self
      type: System.Collections.Generic.IEnumerable{Vim.Math3d.Vector2}
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Middle(self As IEnumerable(Of Vector2)) As Vector2
  overload: Vim.Math3d.MathOps.Middle*
  nameWithType.vb: MathOps.Middle(IEnumerable(Of Vector2))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Middle(System.Collections.Generic.IEnumerable(Of Vim.Math3d.Vector2))
  name.vb: Middle(IEnumerable(Of Vector2))
- uid: Vim.Math3d.MathOps.Stats(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector3})
  commentId: M:Vim.Math3d.MathOps.Stats(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector3})
  id: Stats(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector3})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Stats(IEnumerable<Vector3>)
  nameWithType: MathOps.Stats(IEnumerable<Vector3>)
  fullName: Vim.Math3d.MathOps.Stats(System.Collections.Generic.IEnumerable<Vim.Math3d.Vector3>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Stats
    path: ../src/MathOps.cs
    startLine: 293
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Stats<Vector3> Stats(this IEnumerable<Vector3> self)
    parameters:
    - id: self
      type: System.Collections.Generic.IEnumerable{Vim.Math3d.Vector3}
    return:
      type: Vim.Math3d.Stats{Vim.Math3d.Vector3}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Stats(self As IEnumerable(Of Vector3)) As Stats(Of Vector3)
  overload: Vim.Math3d.MathOps.Stats*
  nameWithType.vb: MathOps.Stats(IEnumerable(Of Vector3))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Stats(System.Collections.Generic.IEnumerable(Of Vim.Math3d.Vector3))
  name.vb: Stats(IEnumerable(Of Vector3))
- uid: Vim.Math3d.MathOps.Average(Vim.Math3d.Stats{Vim.Math3d.Vector3})
  commentId: M:Vim.Math3d.MathOps.Average(Vim.Math3d.Stats{Vim.Math3d.Vector3})
  id: Average(Vim.Math3d.Stats{Vim.Math3d.Vector3})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Average(Stats<Vector3>)
  nameWithType: MathOps.Average(Stats<Vector3>)
  fullName: Vim.Math3d.MathOps.Average(Vim.Math3d.Stats<Vim.Math3d.Vector3>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Average
    path: ../src/MathOps.cs
    startLine: 296
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 Average(this Stats<Vector3> self)
    parameters:
    - id: self
      type: Vim.Math3d.Stats{Vim.Math3d.Vector3}
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(self As Stats(Of Vector3)) As Vector3
  overload: Vim.Math3d.MathOps.Average*
  nameWithType.vb: MathOps.Average(Stats(Of Vector3))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Average(Vim.Math3d.Stats(Of Vim.Math3d.Vector3))
  name.vb: Average(Stats(Of Vector3))
- uid: Vim.Math3d.MathOps.Extents(Vim.Math3d.Stats{Vim.Math3d.Vector3})
  commentId: M:Vim.Math3d.MathOps.Extents(Vim.Math3d.Stats{Vim.Math3d.Vector3})
  id: Extents(Vim.Math3d.Stats{Vim.Math3d.Vector3})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Extents(Stats<Vector3>)
  nameWithType: MathOps.Extents(Stats<Vector3>)
  fullName: Vim.Math3d.MathOps.Extents(Vim.Math3d.Stats<Vim.Math3d.Vector3>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Extents
    path: ../src/MathOps.cs
    startLine: 297
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 Extents(this Stats<Vector3> self)
    parameters:
    - id: self
      type: Vim.Math3d.Stats{Vim.Math3d.Vector3}
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Extents(self As Stats(Of Vector3)) As Vector3
  overload: Vim.Math3d.MathOps.Extents*
  nameWithType.vb: MathOps.Extents(Stats(Of Vector3))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Extents(Vim.Math3d.Stats(Of Vim.Math3d.Vector3))
  name.vb: Extents(Stats(Of Vector3))
- uid: Vim.Math3d.MathOps.Middle(Vim.Math3d.Stats{Vim.Math3d.Vector3})
  commentId: M:Vim.Math3d.MathOps.Middle(Vim.Math3d.Stats{Vim.Math3d.Vector3})
  id: Middle(Vim.Math3d.Stats{Vim.Math3d.Vector3})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Middle(Stats<Vector3>)
  nameWithType: MathOps.Middle(Stats<Vector3>)
  fullName: Vim.Math3d.MathOps.Middle(Vim.Math3d.Stats<Vim.Math3d.Vector3>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Middle
    path: ../src/MathOps.cs
    startLine: 298
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 Middle(this Stats<Vector3> self)
    parameters:
    - id: self
      type: Vim.Math3d.Stats{Vim.Math3d.Vector3}
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Middle(self As Stats(Of Vector3)) As Vector3
  overload: Vim.Math3d.MathOps.Middle*
  nameWithType.vb: MathOps.Middle(Stats(Of Vector3))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Middle(Vim.Math3d.Stats(Of Vim.Math3d.Vector3))
  name.vb: Middle(Stats(Of Vector3))
- uid: Vim.Math3d.MathOps.Sum(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector3})
  commentId: M:Vim.Math3d.MathOps.Sum(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector3})
  id: Sum(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector3})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Sum(IEnumerable<Vector3>)
  nameWithType: MathOps.Sum(IEnumerable<Vector3>)
  fullName: Vim.Math3d.MathOps.Sum(System.Collections.Generic.IEnumerable<Vim.Math3d.Vector3>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Sum
    path: ../src/MathOps.cs
    startLine: 300
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 Sum(this IEnumerable<Vector3> self)
    parameters:
    - id: self
      type: System.Collections.Generic.IEnumerable{Vim.Math3d.Vector3}
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(self As IEnumerable(Of Vector3)) As Vector3
  overload: Vim.Math3d.MathOps.Sum*
  nameWithType.vb: MathOps.Sum(IEnumerable(Of Vector3))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Sum(System.Collections.Generic.IEnumerable(Of Vim.Math3d.Vector3))
  name.vb: Sum(IEnumerable(Of Vector3))
- uid: Vim.Math3d.MathOps.Average(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector3})
  commentId: M:Vim.Math3d.MathOps.Average(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector3})
  id: Average(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector3})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Average(IEnumerable<Vector3>)
  nameWithType: MathOps.Average(IEnumerable<Vector3>)
  fullName: Vim.Math3d.MathOps.Average(System.Collections.Generic.IEnumerable<Vim.Math3d.Vector3>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Average
    path: ../src/MathOps.cs
    startLine: 301
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 Average(this IEnumerable<Vector3> self)
    parameters:
    - id: self
      type: System.Collections.Generic.IEnumerable{Vim.Math3d.Vector3}
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(self As IEnumerable(Of Vector3)) As Vector3
  overload: Vim.Math3d.MathOps.Average*
  nameWithType.vb: MathOps.Average(IEnumerable(Of Vector3))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Average(System.Collections.Generic.IEnumerable(Of Vim.Math3d.Vector3))
  name.vb: Average(IEnumerable(Of Vector3))
- uid: Vim.Math3d.MathOps.Min(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector3})
  commentId: M:Vim.Math3d.MathOps.Min(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector3})
  id: Min(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector3})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Min(IEnumerable<Vector3>)
  nameWithType: MathOps.Min(IEnumerable<Vector3>)
  fullName: Vim.Math3d.MathOps.Min(System.Collections.Generic.IEnumerable<Vim.Math3d.Vector3>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Min
    path: ../src/MathOps.cs
    startLine: 302
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 Min(this IEnumerable<Vector3> self)
    parameters:
    - id: self
      type: System.Collections.Generic.IEnumerable{Vim.Math3d.Vector3}
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(self As IEnumerable(Of Vector3)) As Vector3
  overload: Vim.Math3d.MathOps.Min*
  nameWithType.vb: MathOps.Min(IEnumerable(Of Vector3))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Min(System.Collections.Generic.IEnumerable(Of Vim.Math3d.Vector3))
  name.vb: Min(IEnumerable(Of Vector3))
- uid: Vim.Math3d.MathOps.Max(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector3})
  commentId: M:Vim.Math3d.MathOps.Max(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector3})
  id: Max(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector3})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Max(IEnumerable<Vector3>)
  nameWithType: MathOps.Max(IEnumerable<Vector3>)
  fullName: Vim.Math3d.MathOps.Max(System.Collections.Generic.IEnumerable<Vim.Math3d.Vector3>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Max
    path: ../src/MathOps.cs
    startLine: 303
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 Max(this IEnumerable<Vector3> self)
    parameters:
    - id: self
      type: System.Collections.Generic.IEnumerable{Vim.Math3d.Vector3}
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(self As IEnumerable(Of Vector3)) As Vector3
  overload: Vim.Math3d.MathOps.Max*
  nameWithType.vb: MathOps.Max(IEnumerable(Of Vector3))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Max(System.Collections.Generic.IEnumerable(Of Vim.Math3d.Vector3))
  name.vb: Max(IEnumerable(Of Vector3))
- uid: Vim.Math3d.MathOps.Extents(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector3})
  commentId: M:Vim.Math3d.MathOps.Extents(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector3})
  id: Extents(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector3})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Extents(IEnumerable<Vector3>)
  nameWithType: MathOps.Extents(IEnumerable<Vector3>)
  fullName: Vim.Math3d.MathOps.Extents(System.Collections.Generic.IEnumerable<Vim.Math3d.Vector3>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Extents
    path: ../src/MathOps.cs
    startLine: 304
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 Extents(this IEnumerable<Vector3> self)
    parameters:
    - id: self
      type: System.Collections.Generic.IEnumerable{Vim.Math3d.Vector3}
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Extents(self As IEnumerable(Of Vector3)) As Vector3
  overload: Vim.Math3d.MathOps.Extents*
  nameWithType.vb: MathOps.Extents(IEnumerable(Of Vector3))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Extents(System.Collections.Generic.IEnumerable(Of Vim.Math3d.Vector3))
  name.vb: Extents(IEnumerable(Of Vector3))
- uid: Vim.Math3d.MathOps.Middle(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector3})
  commentId: M:Vim.Math3d.MathOps.Middle(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector3})
  id: Middle(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector3})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Middle(IEnumerable<Vector3>)
  nameWithType: MathOps.Middle(IEnumerable<Vector3>)
  fullName: Vim.Math3d.MathOps.Middle(System.Collections.Generic.IEnumerable<Vim.Math3d.Vector3>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Middle
    path: ../src/MathOps.cs
    startLine: 305
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 Middle(this IEnumerable<Vector3> self)
    parameters:
    - id: self
      type: System.Collections.Generic.IEnumerable{Vim.Math3d.Vector3}
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Middle(self As IEnumerable(Of Vector3)) As Vector3
  overload: Vim.Math3d.MathOps.Middle*
  nameWithType.vb: MathOps.Middle(IEnumerable(Of Vector3))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Middle(System.Collections.Generic.IEnumerable(Of Vim.Math3d.Vector3))
  name.vb: Middle(IEnumerable(Of Vector3))
- uid: Vim.Math3d.MathOps.Stats(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector4})
  commentId: M:Vim.Math3d.MathOps.Stats(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector4})
  id: Stats(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector4})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Stats(IEnumerable<Vector4>)
  nameWithType: MathOps.Stats(IEnumerable<Vector4>)
  fullName: Vim.Math3d.MathOps.Stats(System.Collections.Generic.IEnumerable<Vim.Math3d.Vector4>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Stats
    path: ../src/MathOps.cs
    startLine: 306
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Stats<Vector4> Stats(this IEnumerable<Vector4> self)
    parameters:
    - id: self
      type: System.Collections.Generic.IEnumerable{Vim.Math3d.Vector4}
    return:
      type: Vim.Math3d.Stats{Vim.Math3d.Vector4}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Stats(self As IEnumerable(Of Vector4)) As Stats(Of Vector4)
  overload: Vim.Math3d.MathOps.Stats*
  nameWithType.vb: MathOps.Stats(IEnumerable(Of Vector4))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Stats(System.Collections.Generic.IEnumerable(Of Vim.Math3d.Vector4))
  name.vb: Stats(IEnumerable(Of Vector4))
- uid: Vim.Math3d.MathOps.Average(Vim.Math3d.Stats{Vim.Math3d.Vector4})
  commentId: M:Vim.Math3d.MathOps.Average(Vim.Math3d.Stats{Vim.Math3d.Vector4})
  id: Average(Vim.Math3d.Stats{Vim.Math3d.Vector4})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Average(Stats<Vector4>)
  nameWithType: MathOps.Average(Stats<Vector4>)
  fullName: Vim.Math3d.MathOps.Average(Vim.Math3d.Stats<Vim.Math3d.Vector4>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Average
    path: ../src/MathOps.cs
    startLine: 309
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector4 Average(this Stats<Vector4> self)
    parameters:
    - id: self
      type: Vim.Math3d.Stats{Vim.Math3d.Vector4}
    return:
      type: Vim.Math3d.Vector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(self As Stats(Of Vector4)) As Vector4
  overload: Vim.Math3d.MathOps.Average*
  nameWithType.vb: MathOps.Average(Stats(Of Vector4))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Average(Vim.Math3d.Stats(Of Vim.Math3d.Vector4))
  name.vb: Average(Stats(Of Vector4))
- uid: Vim.Math3d.MathOps.Extents(Vim.Math3d.Stats{Vim.Math3d.Vector4})
  commentId: M:Vim.Math3d.MathOps.Extents(Vim.Math3d.Stats{Vim.Math3d.Vector4})
  id: Extents(Vim.Math3d.Stats{Vim.Math3d.Vector4})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Extents(Stats<Vector4>)
  nameWithType: MathOps.Extents(Stats<Vector4>)
  fullName: Vim.Math3d.MathOps.Extents(Vim.Math3d.Stats<Vim.Math3d.Vector4>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Extents
    path: ../src/MathOps.cs
    startLine: 310
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector4 Extents(this Stats<Vector4> self)
    parameters:
    - id: self
      type: Vim.Math3d.Stats{Vim.Math3d.Vector4}
    return:
      type: Vim.Math3d.Vector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Extents(self As Stats(Of Vector4)) As Vector4
  overload: Vim.Math3d.MathOps.Extents*
  nameWithType.vb: MathOps.Extents(Stats(Of Vector4))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Extents(Vim.Math3d.Stats(Of Vim.Math3d.Vector4))
  name.vb: Extents(Stats(Of Vector4))
- uid: Vim.Math3d.MathOps.Middle(Vim.Math3d.Stats{Vim.Math3d.Vector4})
  commentId: M:Vim.Math3d.MathOps.Middle(Vim.Math3d.Stats{Vim.Math3d.Vector4})
  id: Middle(Vim.Math3d.Stats{Vim.Math3d.Vector4})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Middle(Stats<Vector4>)
  nameWithType: MathOps.Middle(Stats<Vector4>)
  fullName: Vim.Math3d.MathOps.Middle(Vim.Math3d.Stats<Vim.Math3d.Vector4>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Middle
    path: ../src/MathOps.cs
    startLine: 311
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector4 Middle(this Stats<Vector4> self)
    parameters:
    - id: self
      type: Vim.Math3d.Stats{Vim.Math3d.Vector4}
    return:
      type: Vim.Math3d.Vector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Middle(self As Stats(Of Vector4)) As Vector4
  overload: Vim.Math3d.MathOps.Middle*
  nameWithType.vb: MathOps.Middle(Stats(Of Vector4))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Middle(Vim.Math3d.Stats(Of Vim.Math3d.Vector4))
  name.vb: Middle(Stats(Of Vector4))
- uid: Vim.Math3d.MathOps.Sum(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector4})
  commentId: M:Vim.Math3d.MathOps.Sum(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector4})
  id: Sum(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector4})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Sum(IEnumerable<Vector4>)
  nameWithType: MathOps.Sum(IEnumerable<Vector4>)
  fullName: Vim.Math3d.MathOps.Sum(System.Collections.Generic.IEnumerable<Vim.Math3d.Vector4>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Sum
    path: ../src/MathOps.cs
    startLine: 313
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector4 Sum(this IEnumerable<Vector4> self)
    parameters:
    - id: self
      type: System.Collections.Generic.IEnumerable{Vim.Math3d.Vector4}
    return:
      type: Vim.Math3d.Vector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(self As IEnumerable(Of Vector4)) As Vector4
  overload: Vim.Math3d.MathOps.Sum*
  nameWithType.vb: MathOps.Sum(IEnumerable(Of Vector4))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Sum(System.Collections.Generic.IEnumerable(Of Vim.Math3d.Vector4))
  name.vb: Sum(IEnumerable(Of Vector4))
- uid: Vim.Math3d.MathOps.Average(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector4})
  commentId: M:Vim.Math3d.MathOps.Average(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector4})
  id: Average(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector4})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Average(IEnumerable<Vector4>)
  nameWithType: MathOps.Average(IEnumerable<Vector4>)
  fullName: Vim.Math3d.MathOps.Average(System.Collections.Generic.IEnumerable<Vim.Math3d.Vector4>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Average
    path: ../src/MathOps.cs
    startLine: 314
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector4 Average(this IEnumerable<Vector4> self)
    parameters:
    - id: self
      type: System.Collections.Generic.IEnumerable{Vim.Math3d.Vector4}
    return:
      type: Vim.Math3d.Vector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(self As IEnumerable(Of Vector4)) As Vector4
  overload: Vim.Math3d.MathOps.Average*
  nameWithType.vb: MathOps.Average(IEnumerable(Of Vector4))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Average(System.Collections.Generic.IEnumerable(Of Vim.Math3d.Vector4))
  name.vb: Average(IEnumerable(Of Vector4))
- uid: Vim.Math3d.MathOps.Min(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector4})
  commentId: M:Vim.Math3d.MathOps.Min(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector4})
  id: Min(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector4})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Min(IEnumerable<Vector4>)
  nameWithType: MathOps.Min(IEnumerable<Vector4>)
  fullName: Vim.Math3d.MathOps.Min(System.Collections.Generic.IEnumerable<Vim.Math3d.Vector4>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Min
    path: ../src/MathOps.cs
    startLine: 315
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector4 Min(this IEnumerable<Vector4> self)
    parameters:
    - id: self
      type: System.Collections.Generic.IEnumerable{Vim.Math3d.Vector4}
    return:
      type: Vim.Math3d.Vector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(self As IEnumerable(Of Vector4)) As Vector4
  overload: Vim.Math3d.MathOps.Min*
  nameWithType.vb: MathOps.Min(IEnumerable(Of Vector4))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Min(System.Collections.Generic.IEnumerable(Of Vim.Math3d.Vector4))
  name.vb: Min(IEnumerable(Of Vector4))
- uid: Vim.Math3d.MathOps.Max(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector4})
  commentId: M:Vim.Math3d.MathOps.Max(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector4})
  id: Max(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector4})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Max(IEnumerable<Vector4>)
  nameWithType: MathOps.Max(IEnumerable<Vector4>)
  fullName: Vim.Math3d.MathOps.Max(System.Collections.Generic.IEnumerable<Vim.Math3d.Vector4>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Max
    path: ../src/MathOps.cs
    startLine: 316
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector4 Max(this IEnumerable<Vector4> self)
    parameters:
    - id: self
      type: System.Collections.Generic.IEnumerable{Vim.Math3d.Vector4}
    return:
      type: Vim.Math3d.Vector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(self As IEnumerable(Of Vector4)) As Vector4
  overload: Vim.Math3d.MathOps.Max*
  nameWithType.vb: MathOps.Max(IEnumerable(Of Vector4))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Max(System.Collections.Generic.IEnumerable(Of Vim.Math3d.Vector4))
  name.vb: Max(IEnumerable(Of Vector4))
- uid: Vim.Math3d.MathOps.Extents(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector4})
  commentId: M:Vim.Math3d.MathOps.Extents(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector4})
  id: Extents(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector4})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Extents(IEnumerable<Vector4>)
  nameWithType: MathOps.Extents(IEnumerable<Vector4>)
  fullName: Vim.Math3d.MathOps.Extents(System.Collections.Generic.IEnumerable<Vim.Math3d.Vector4>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Extents
    path: ../src/MathOps.cs
    startLine: 317
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector4 Extents(this IEnumerable<Vector4> self)
    parameters:
    - id: self
      type: System.Collections.Generic.IEnumerable{Vim.Math3d.Vector4}
    return:
      type: Vim.Math3d.Vector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Extents(self As IEnumerable(Of Vector4)) As Vector4
  overload: Vim.Math3d.MathOps.Extents*
  nameWithType.vb: MathOps.Extents(IEnumerable(Of Vector4))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Extents(System.Collections.Generic.IEnumerable(Of Vim.Math3d.Vector4))
  name.vb: Extents(IEnumerable(Of Vector4))
- uid: Vim.Math3d.MathOps.Middle(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector4})
  commentId: M:Vim.Math3d.MathOps.Middle(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector4})
  id: Middle(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector4})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Middle(IEnumerable<Vector4>)
  nameWithType: MathOps.Middle(IEnumerable<Vector4>)
  fullName: Vim.Math3d.MathOps.Middle(System.Collections.Generic.IEnumerable<Vim.Math3d.Vector4>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Middle
    path: ../src/MathOps.cs
    startLine: 318
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector4 Middle(this IEnumerable<Vector4> self)
    parameters:
    - id: self
      type: System.Collections.Generic.IEnumerable{Vim.Math3d.Vector4}
    return:
      type: Vim.Math3d.Vector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Middle(self As IEnumerable(Of Vector4)) As Vector4
  overload: Vim.Math3d.MathOps.Middle*
  nameWithType.vb: MathOps.Middle(IEnumerable(Of Vector4))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Middle(System.Collections.Generic.IEnumerable(Of Vim.Math3d.Vector4))
  name.vb: Middle(IEnumerable(Of Vector4))
- uid: Vim.Math3d.MathOps.Stats(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector2})
  commentId: M:Vim.Math3d.MathOps.Stats(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector2})
  id: Stats(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector2})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Stats(IEnumerable<DVector2>)
  nameWithType: MathOps.Stats(IEnumerable<DVector2>)
  fullName: Vim.Math3d.MathOps.Stats(System.Collections.Generic.IEnumerable<Vim.Math3d.DVector2>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Stats
    path: ../src/MathOps.cs
    startLine: 319
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Stats<DVector2> Stats(this IEnumerable<DVector2> self)
    parameters:
    - id: self
      type: System.Collections.Generic.IEnumerable{Vim.Math3d.DVector2}
    return:
      type: Vim.Math3d.Stats{Vim.Math3d.DVector2}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Stats(self As IEnumerable(Of DVector2)) As Stats(Of DVector2)
  overload: Vim.Math3d.MathOps.Stats*
  nameWithType.vb: MathOps.Stats(IEnumerable(Of DVector2))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Stats(System.Collections.Generic.IEnumerable(Of Vim.Math3d.DVector2))
  name.vb: Stats(IEnumerable(Of DVector2))
- uid: Vim.Math3d.MathOps.Average(Vim.Math3d.Stats{Vim.Math3d.DVector2})
  commentId: M:Vim.Math3d.MathOps.Average(Vim.Math3d.Stats{Vim.Math3d.DVector2})
  id: Average(Vim.Math3d.Stats{Vim.Math3d.DVector2})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Average(Stats<DVector2>)
  nameWithType: MathOps.Average(Stats<DVector2>)
  fullName: Vim.Math3d.MathOps.Average(Vim.Math3d.Stats<Vim.Math3d.DVector2>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Average
    path: ../src/MathOps.cs
    startLine: 322
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector2 Average(this Stats<DVector2> self)
    parameters:
    - id: self
      type: Vim.Math3d.Stats{Vim.Math3d.DVector2}
    return:
      type: Vim.Math3d.DVector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(self As Stats(Of DVector2)) As DVector2
  overload: Vim.Math3d.MathOps.Average*
  nameWithType.vb: MathOps.Average(Stats(Of DVector2))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Average(Vim.Math3d.Stats(Of Vim.Math3d.DVector2))
  name.vb: Average(Stats(Of DVector2))
- uid: Vim.Math3d.MathOps.Extents(Vim.Math3d.Stats{Vim.Math3d.DVector2})
  commentId: M:Vim.Math3d.MathOps.Extents(Vim.Math3d.Stats{Vim.Math3d.DVector2})
  id: Extents(Vim.Math3d.Stats{Vim.Math3d.DVector2})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Extents(Stats<DVector2>)
  nameWithType: MathOps.Extents(Stats<DVector2>)
  fullName: Vim.Math3d.MathOps.Extents(Vim.Math3d.Stats<Vim.Math3d.DVector2>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Extents
    path: ../src/MathOps.cs
    startLine: 323
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector2 Extents(this Stats<DVector2> self)
    parameters:
    - id: self
      type: Vim.Math3d.Stats{Vim.Math3d.DVector2}
    return:
      type: Vim.Math3d.DVector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Extents(self As Stats(Of DVector2)) As DVector2
  overload: Vim.Math3d.MathOps.Extents*
  nameWithType.vb: MathOps.Extents(Stats(Of DVector2))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Extents(Vim.Math3d.Stats(Of Vim.Math3d.DVector2))
  name.vb: Extents(Stats(Of DVector2))
- uid: Vim.Math3d.MathOps.Middle(Vim.Math3d.Stats{Vim.Math3d.DVector2})
  commentId: M:Vim.Math3d.MathOps.Middle(Vim.Math3d.Stats{Vim.Math3d.DVector2})
  id: Middle(Vim.Math3d.Stats{Vim.Math3d.DVector2})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Middle(Stats<DVector2>)
  nameWithType: MathOps.Middle(Stats<DVector2>)
  fullName: Vim.Math3d.MathOps.Middle(Vim.Math3d.Stats<Vim.Math3d.DVector2>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Middle
    path: ../src/MathOps.cs
    startLine: 324
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector2 Middle(this Stats<DVector2> self)
    parameters:
    - id: self
      type: Vim.Math3d.Stats{Vim.Math3d.DVector2}
    return:
      type: Vim.Math3d.DVector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Middle(self As Stats(Of DVector2)) As DVector2
  overload: Vim.Math3d.MathOps.Middle*
  nameWithType.vb: MathOps.Middle(Stats(Of DVector2))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Middle(Vim.Math3d.Stats(Of Vim.Math3d.DVector2))
  name.vb: Middle(Stats(Of DVector2))
- uid: Vim.Math3d.MathOps.Sum(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector2})
  commentId: M:Vim.Math3d.MathOps.Sum(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector2})
  id: Sum(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector2})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Sum(IEnumerable<DVector2>)
  nameWithType: MathOps.Sum(IEnumerable<DVector2>)
  fullName: Vim.Math3d.MathOps.Sum(System.Collections.Generic.IEnumerable<Vim.Math3d.DVector2>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Sum
    path: ../src/MathOps.cs
    startLine: 326
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector2 Sum(this IEnumerable<DVector2> self)
    parameters:
    - id: self
      type: System.Collections.Generic.IEnumerable{Vim.Math3d.DVector2}
    return:
      type: Vim.Math3d.DVector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(self As IEnumerable(Of DVector2)) As DVector2
  overload: Vim.Math3d.MathOps.Sum*
  nameWithType.vb: MathOps.Sum(IEnumerable(Of DVector2))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Sum(System.Collections.Generic.IEnumerable(Of Vim.Math3d.DVector2))
  name.vb: Sum(IEnumerable(Of DVector2))
- uid: Vim.Math3d.MathOps.Average(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector2})
  commentId: M:Vim.Math3d.MathOps.Average(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector2})
  id: Average(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector2})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Average(IEnumerable<DVector2>)
  nameWithType: MathOps.Average(IEnumerable<DVector2>)
  fullName: Vim.Math3d.MathOps.Average(System.Collections.Generic.IEnumerable<Vim.Math3d.DVector2>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Average
    path: ../src/MathOps.cs
    startLine: 327
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector2 Average(this IEnumerable<DVector2> self)
    parameters:
    - id: self
      type: System.Collections.Generic.IEnumerable{Vim.Math3d.DVector2}
    return:
      type: Vim.Math3d.DVector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(self As IEnumerable(Of DVector2)) As DVector2
  overload: Vim.Math3d.MathOps.Average*
  nameWithType.vb: MathOps.Average(IEnumerable(Of DVector2))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Average(System.Collections.Generic.IEnumerable(Of Vim.Math3d.DVector2))
  name.vb: Average(IEnumerable(Of DVector2))
- uid: Vim.Math3d.MathOps.Min(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector2})
  commentId: M:Vim.Math3d.MathOps.Min(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector2})
  id: Min(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector2})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Min(IEnumerable<DVector2>)
  nameWithType: MathOps.Min(IEnumerable<DVector2>)
  fullName: Vim.Math3d.MathOps.Min(System.Collections.Generic.IEnumerable<Vim.Math3d.DVector2>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Min
    path: ../src/MathOps.cs
    startLine: 328
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector2 Min(this IEnumerable<DVector2> self)
    parameters:
    - id: self
      type: System.Collections.Generic.IEnumerable{Vim.Math3d.DVector2}
    return:
      type: Vim.Math3d.DVector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(self As IEnumerable(Of DVector2)) As DVector2
  overload: Vim.Math3d.MathOps.Min*
  nameWithType.vb: MathOps.Min(IEnumerable(Of DVector2))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Min(System.Collections.Generic.IEnumerable(Of Vim.Math3d.DVector2))
  name.vb: Min(IEnumerable(Of DVector2))
- uid: Vim.Math3d.MathOps.Max(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector2})
  commentId: M:Vim.Math3d.MathOps.Max(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector2})
  id: Max(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector2})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Max(IEnumerable<DVector2>)
  nameWithType: MathOps.Max(IEnumerable<DVector2>)
  fullName: Vim.Math3d.MathOps.Max(System.Collections.Generic.IEnumerable<Vim.Math3d.DVector2>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Max
    path: ../src/MathOps.cs
    startLine: 329
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector2 Max(this IEnumerable<DVector2> self)
    parameters:
    - id: self
      type: System.Collections.Generic.IEnumerable{Vim.Math3d.DVector2}
    return:
      type: Vim.Math3d.DVector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(self As IEnumerable(Of DVector2)) As DVector2
  overload: Vim.Math3d.MathOps.Max*
  nameWithType.vb: MathOps.Max(IEnumerable(Of DVector2))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Max(System.Collections.Generic.IEnumerable(Of Vim.Math3d.DVector2))
  name.vb: Max(IEnumerable(Of DVector2))
- uid: Vim.Math3d.MathOps.Extents(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector2})
  commentId: M:Vim.Math3d.MathOps.Extents(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector2})
  id: Extents(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector2})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Extents(IEnumerable<DVector2>)
  nameWithType: MathOps.Extents(IEnumerable<DVector2>)
  fullName: Vim.Math3d.MathOps.Extents(System.Collections.Generic.IEnumerable<Vim.Math3d.DVector2>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Extents
    path: ../src/MathOps.cs
    startLine: 330
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector2 Extents(this IEnumerable<DVector2> self)
    parameters:
    - id: self
      type: System.Collections.Generic.IEnumerable{Vim.Math3d.DVector2}
    return:
      type: Vim.Math3d.DVector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Extents(self As IEnumerable(Of DVector2)) As DVector2
  overload: Vim.Math3d.MathOps.Extents*
  nameWithType.vb: MathOps.Extents(IEnumerable(Of DVector2))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Extents(System.Collections.Generic.IEnumerable(Of Vim.Math3d.DVector2))
  name.vb: Extents(IEnumerable(Of DVector2))
- uid: Vim.Math3d.MathOps.Middle(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector2})
  commentId: M:Vim.Math3d.MathOps.Middle(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector2})
  id: Middle(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector2})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Middle(IEnumerable<DVector2>)
  nameWithType: MathOps.Middle(IEnumerable<DVector2>)
  fullName: Vim.Math3d.MathOps.Middle(System.Collections.Generic.IEnumerable<Vim.Math3d.DVector2>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Middle
    path: ../src/MathOps.cs
    startLine: 331
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector2 Middle(this IEnumerable<DVector2> self)
    parameters:
    - id: self
      type: System.Collections.Generic.IEnumerable{Vim.Math3d.DVector2}
    return:
      type: Vim.Math3d.DVector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Middle(self As IEnumerable(Of DVector2)) As DVector2
  overload: Vim.Math3d.MathOps.Middle*
  nameWithType.vb: MathOps.Middle(IEnumerable(Of DVector2))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Middle(System.Collections.Generic.IEnumerable(Of Vim.Math3d.DVector2))
  name.vb: Middle(IEnumerable(Of DVector2))
- uid: Vim.Math3d.MathOps.Stats(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector3})
  commentId: M:Vim.Math3d.MathOps.Stats(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector3})
  id: Stats(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector3})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Stats(IEnumerable<DVector3>)
  nameWithType: MathOps.Stats(IEnumerable<DVector3>)
  fullName: Vim.Math3d.MathOps.Stats(System.Collections.Generic.IEnumerable<Vim.Math3d.DVector3>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Stats
    path: ../src/MathOps.cs
    startLine: 332
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Stats<DVector3> Stats(this IEnumerable<DVector3> self)
    parameters:
    - id: self
      type: System.Collections.Generic.IEnumerable{Vim.Math3d.DVector3}
    return:
      type: Vim.Math3d.Stats{Vim.Math3d.DVector3}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Stats(self As IEnumerable(Of DVector3)) As Stats(Of DVector3)
  overload: Vim.Math3d.MathOps.Stats*
  nameWithType.vb: MathOps.Stats(IEnumerable(Of DVector3))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Stats(System.Collections.Generic.IEnumerable(Of Vim.Math3d.DVector3))
  name.vb: Stats(IEnumerable(Of DVector3))
- uid: Vim.Math3d.MathOps.Average(Vim.Math3d.Stats{Vim.Math3d.DVector3})
  commentId: M:Vim.Math3d.MathOps.Average(Vim.Math3d.Stats{Vim.Math3d.DVector3})
  id: Average(Vim.Math3d.Stats{Vim.Math3d.DVector3})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Average(Stats<DVector3>)
  nameWithType: MathOps.Average(Stats<DVector3>)
  fullName: Vim.Math3d.MathOps.Average(Vim.Math3d.Stats<Vim.Math3d.DVector3>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Average
    path: ../src/MathOps.cs
    startLine: 335
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector3 Average(this Stats<DVector3> self)
    parameters:
    - id: self
      type: Vim.Math3d.Stats{Vim.Math3d.DVector3}
    return:
      type: Vim.Math3d.DVector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(self As Stats(Of DVector3)) As DVector3
  overload: Vim.Math3d.MathOps.Average*
  nameWithType.vb: MathOps.Average(Stats(Of DVector3))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Average(Vim.Math3d.Stats(Of Vim.Math3d.DVector3))
  name.vb: Average(Stats(Of DVector3))
- uid: Vim.Math3d.MathOps.Extents(Vim.Math3d.Stats{Vim.Math3d.DVector3})
  commentId: M:Vim.Math3d.MathOps.Extents(Vim.Math3d.Stats{Vim.Math3d.DVector3})
  id: Extents(Vim.Math3d.Stats{Vim.Math3d.DVector3})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Extents(Stats<DVector3>)
  nameWithType: MathOps.Extents(Stats<DVector3>)
  fullName: Vim.Math3d.MathOps.Extents(Vim.Math3d.Stats<Vim.Math3d.DVector3>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Extents
    path: ../src/MathOps.cs
    startLine: 336
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector3 Extents(this Stats<DVector3> self)
    parameters:
    - id: self
      type: Vim.Math3d.Stats{Vim.Math3d.DVector3}
    return:
      type: Vim.Math3d.DVector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Extents(self As Stats(Of DVector3)) As DVector3
  overload: Vim.Math3d.MathOps.Extents*
  nameWithType.vb: MathOps.Extents(Stats(Of DVector3))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Extents(Vim.Math3d.Stats(Of Vim.Math3d.DVector3))
  name.vb: Extents(Stats(Of DVector3))
- uid: Vim.Math3d.MathOps.Middle(Vim.Math3d.Stats{Vim.Math3d.DVector3})
  commentId: M:Vim.Math3d.MathOps.Middle(Vim.Math3d.Stats{Vim.Math3d.DVector3})
  id: Middle(Vim.Math3d.Stats{Vim.Math3d.DVector3})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Middle(Stats<DVector3>)
  nameWithType: MathOps.Middle(Stats<DVector3>)
  fullName: Vim.Math3d.MathOps.Middle(Vim.Math3d.Stats<Vim.Math3d.DVector3>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Middle
    path: ../src/MathOps.cs
    startLine: 337
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector3 Middle(this Stats<DVector3> self)
    parameters:
    - id: self
      type: Vim.Math3d.Stats{Vim.Math3d.DVector3}
    return:
      type: Vim.Math3d.DVector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Middle(self As Stats(Of DVector3)) As DVector3
  overload: Vim.Math3d.MathOps.Middle*
  nameWithType.vb: MathOps.Middle(Stats(Of DVector3))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Middle(Vim.Math3d.Stats(Of Vim.Math3d.DVector3))
  name.vb: Middle(Stats(Of DVector3))
- uid: Vim.Math3d.MathOps.Sum(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector3})
  commentId: M:Vim.Math3d.MathOps.Sum(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector3})
  id: Sum(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector3})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Sum(IEnumerable<DVector3>)
  nameWithType: MathOps.Sum(IEnumerable<DVector3>)
  fullName: Vim.Math3d.MathOps.Sum(System.Collections.Generic.IEnumerable<Vim.Math3d.DVector3>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Sum
    path: ../src/MathOps.cs
    startLine: 339
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector3 Sum(this IEnumerable<DVector3> self)
    parameters:
    - id: self
      type: System.Collections.Generic.IEnumerable{Vim.Math3d.DVector3}
    return:
      type: Vim.Math3d.DVector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(self As IEnumerable(Of DVector3)) As DVector3
  overload: Vim.Math3d.MathOps.Sum*
  nameWithType.vb: MathOps.Sum(IEnumerable(Of DVector3))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Sum(System.Collections.Generic.IEnumerable(Of Vim.Math3d.DVector3))
  name.vb: Sum(IEnumerable(Of DVector3))
- uid: Vim.Math3d.MathOps.Average(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector3})
  commentId: M:Vim.Math3d.MathOps.Average(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector3})
  id: Average(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector3})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Average(IEnumerable<DVector3>)
  nameWithType: MathOps.Average(IEnumerable<DVector3>)
  fullName: Vim.Math3d.MathOps.Average(System.Collections.Generic.IEnumerable<Vim.Math3d.DVector3>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Average
    path: ../src/MathOps.cs
    startLine: 340
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector3 Average(this IEnumerable<DVector3> self)
    parameters:
    - id: self
      type: System.Collections.Generic.IEnumerable{Vim.Math3d.DVector3}
    return:
      type: Vim.Math3d.DVector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(self As IEnumerable(Of DVector3)) As DVector3
  overload: Vim.Math3d.MathOps.Average*
  nameWithType.vb: MathOps.Average(IEnumerable(Of DVector3))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Average(System.Collections.Generic.IEnumerable(Of Vim.Math3d.DVector3))
  name.vb: Average(IEnumerable(Of DVector3))
- uid: Vim.Math3d.MathOps.Min(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector3})
  commentId: M:Vim.Math3d.MathOps.Min(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector3})
  id: Min(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector3})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Min(IEnumerable<DVector3>)
  nameWithType: MathOps.Min(IEnumerable<DVector3>)
  fullName: Vim.Math3d.MathOps.Min(System.Collections.Generic.IEnumerable<Vim.Math3d.DVector3>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Min
    path: ../src/MathOps.cs
    startLine: 341
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector3 Min(this IEnumerable<DVector3> self)
    parameters:
    - id: self
      type: System.Collections.Generic.IEnumerable{Vim.Math3d.DVector3}
    return:
      type: Vim.Math3d.DVector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(self As IEnumerable(Of DVector3)) As DVector3
  overload: Vim.Math3d.MathOps.Min*
  nameWithType.vb: MathOps.Min(IEnumerable(Of DVector3))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Min(System.Collections.Generic.IEnumerable(Of Vim.Math3d.DVector3))
  name.vb: Min(IEnumerable(Of DVector3))
- uid: Vim.Math3d.MathOps.Max(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector3})
  commentId: M:Vim.Math3d.MathOps.Max(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector3})
  id: Max(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector3})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Max(IEnumerable<DVector3>)
  nameWithType: MathOps.Max(IEnumerable<DVector3>)
  fullName: Vim.Math3d.MathOps.Max(System.Collections.Generic.IEnumerable<Vim.Math3d.DVector3>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Max
    path: ../src/MathOps.cs
    startLine: 342
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector3 Max(this IEnumerable<DVector3> self)
    parameters:
    - id: self
      type: System.Collections.Generic.IEnumerable{Vim.Math3d.DVector3}
    return:
      type: Vim.Math3d.DVector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(self As IEnumerable(Of DVector3)) As DVector3
  overload: Vim.Math3d.MathOps.Max*
  nameWithType.vb: MathOps.Max(IEnumerable(Of DVector3))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Max(System.Collections.Generic.IEnumerable(Of Vim.Math3d.DVector3))
  name.vb: Max(IEnumerable(Of DVector3))
- uid: Vim.Math3d.MathOps.Extents(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector3})
  commentId: M:Vim.Math3d.MathOps.Extents(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector3})
  id: Extents(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector3})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Extents(IEnumerable<DVector3>)
  nameWithType: MathOps.Extents(IEnumerable<DVector3>)
  fullName: Vim.Math3d.MathOps.Extents(System.Collections.Generic.IEnumerable<Vim.Math3d.DVector3>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Extents
    path: ../src/MathOps.cs
    startLine: 343
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector3 Extents(this IEnumerable<DVector3> self)
    parameters:
    - id: self
      type: System.Collections.Generic.IEnumerable{Vim.Math3d.DVector3}
    return:
      type: Vim.Math3d.DVector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Extents(self As IEnumerable(Of DVector3)) As DVector3
  overload: Vim.Math3d.MathOps.Extents*
  nameWithType.vb: MathOps.Extents(IEnumerable(Of DVector3))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Extents(System.Collections.Generic.IEnumerable(Of Vim.Math3d.DVector3))
  name.vb: Extents(IEnumerable(Of DVector3))
- uid: Vim.Math3d.MathOps.Middle(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector3})
  commentId: M:Vim.Math3d.MathOps.Middle(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector3})
  id: Middle(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector3})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Middle(IEnumerable<DVector3>)
  nameWithType: MathOps.Middle(IEnumerable<DVector3>)
  fullName: Vim.Math3d.MathOps.Middle(System.Collections.Generic.IEnumerable<Vim.Math3d.DVector3>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Middle
    path: ../src/MathOps.cs
    startLine: 344
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector3 Middle(this IEnumerable<DVector3> self)
    parameters:
    - id: self
      type: System.Collections.Generic.IEnumerable{Vim.Math3d.DVector3}
    return:
      type: Vim.Math3d.DVector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Middle(self As IEnumerable(Of DVector3)) As DVector3
  overload: Vim.Math3d.MathOps.Middle*
  nameWithType.vb: MathOps.Middle(IEnumerable(Of DVector3))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Middle(System.Collections.Generic.IEnumerable(Of Vim.Math3d.DVector3))
  name.vb: Middle(IEnumerable(Of DVector3))
- uid: Vim.Math3d.MathOps.Stats(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector4})
  commentId: M:Vim.Math3d.MathOps.Stats(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector4})
  id: Stats(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector4})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Stats(IEnumerable<DVector4>)
  nameWithType: MathOps.Stats(IEnumerable<DVector4>)
  fullName: Vim.Math3d.MathOps.Stats(System.Collections.Generic.IEnumerable<Vim.Math3d.DVector4>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Stats
    path: ../src/MathOps.cs
    startLine: 345
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Stats<DVector4> Stats(this IEnumerable<DVector4> self)
    parameters:
    - id: self
      type: System.Collections.Generic.IEnumerable{Vim.Math3d.DVector4}
    return:
      type: Vim.Math3d.Stats{Vim.Math3d.DVector4}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Stats(self As IEnumerable(Of DVector4)) As Stats(Of DVector4)
  overload: Vim.Math3d.MathOps.Stats*
  nameWithType.vb: MathOps.Stats(IEnumerable(Of DVector4))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Stats(System.Collections.Generic.IEnumerable(Of Vim.Math3d.DVector4))
  name.vb: Stats(IEnumerable(Of DVector4))
- uid: Vim.Math3d.MathOps.Average(Vim.Math3d.Stats{Vim.Math3d.DVector4})
  commentId: M:Vim.Math3d.MathOps.Average(Vim.Math3d.Stats{Vim.Math3d.DVector4})
  id: Average(Vim.Math3d.Stats{Vim.Math3d.DVector4})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Average(Stats<DVector4>)
  nameWithType: MathOps.Average(Stats<DVector4>)
  fullName: Vim.Math3d.MathOps.Average(Vim.Math3d.Stats<Vim.Math3d.DVector4>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Average
    path: ../src/MathOps.cs
    startLine: 348
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector4 Average(this Stats<DVector4> self)
    parameters:
    - id: self
      type: Vim.Math3d.Stats{Vim.Math3d.DVector4}
    return:
      type: Vim.Math3d.DVector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(self As Stats(Of DVector4)) As DVector4
  overload: Vim.Math3d.MathOps.Average*
  nameWithType.vb: MathOps.Average(Stats(Of DVector4))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Average(Vim.Math3d.Stats(Of Vim.Math3d.DVector4))
  name.vb: Average(Stats(Of DVector4))
- uid: Vim.Math3d.MathOps.Extents(Vim.Math3d.Stats{Vim.Math3d.DVector4})
  commentId: M:Vim.Math3d.MathOps.Extents(Vim.Math3d.Stats{Vim.Math3d.DVector4})
  id: Extents(Vim.Math3d.Stats{Vim.Math3d.DVector4})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Extents(Stats<DVector4>)
  nameWithType: MathOps.Extents(Stats<DVector4>)
  fullName: Vim.Math3d.MathOps.Extents(Vim.Math3d.Stats<Vim.Math3d.DVector4>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Extents
    path: ../src/MathOps.cs
    startLine: 349
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector4 Extents(this Stats<DVector4> self)
    parameters:
    - id: self
      type: Vim.Math3d.Stats{Vim.Math3d.DVector4}
    return:
      type: Vim.Math3d.DVector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Extents(self As Stats(Of DVector4)) As DVector4
  overload: Vim.Math3d.MathOps.Extents*
  nameWithType.vb: MathOps.Extents(Stats(Of DVector4))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Extents(Vim.Math3d.Stats(Of Vim.Math3d.DVector4))
  name.vb: Extents(Stats(Of DVector4))
- uid: Vim.Math3d.MathOps.Middle(Vim.Math3d.Stats{Vim.Math3d.DVector4})
  commentId: M:Vim.Math3d.MathOps.Middle(Vim.Math3d.Stats{Vim.Math3d.DVector4})
  id: Middle(Vim.Math3d.Stats{Vim.Math3d.DVector4})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Middle(Stats<DVector4>)
  nameWithType: MathOps.Middle(Stats<DVector4>)
  fullName: Vim.Math3d.MathOps.Middle(Vim.Math3d.Stats<Vim.Math3d.DVector4>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Middle
    path: ../src/MathOps.cs
    startLine: 350
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector4 Middle(this Stats<DVector4> self)
    parameters:
    - id: self
      type: Vim.Math3d.Stats{Vim.Math3d.DVector4}
    return:
      type: Vim.Math3d.DVector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Middle(self As Stats(Of DVector4)) As DVector4
  overload: Vim.Math3d.MathOps.Middle*
  nameWithType.vb: MathOps.Middle(Stats(Of DVector4))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Middle(Vim.Math3d.Stats(Of Vim.Math3d.DVector4))
  name.vb: Middle(Stats(Of DVector4))
- uid: Vim.Math3d.MathOps.Sum(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector4})
  commentId: M:Vim.Math3d.MathOps.Sum(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector4})
  id: Sum(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector4})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Sum(IEnumerable<DVector4>)
  nameWithType: MathOps.Sum(IEnumerable<DVector4>)
  fullName: Vim.Math3d.MathOps.Sum(System.Collections.Generic.IEnumerable<Vim.Math3d.DVector4>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Sum
    path: ../src/MathOps.cs
    startLine: 352
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector4 Sum(this IEnumerable<DVector4> self)
    parameters:
    - id: self
      type: System.Collections.Generic.IEnumerable{Vim.Math3d.DVector4}
    return:
      type: Vim.Math3d.DVector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(self As IEnumerable(Of DVector4)) As DVector4
  overload: Vim.Math3d.MathOps.Sum*
  nameWithType.vb: MathOps.Sum(IEnumerable(Of DVector4))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Sum(System.Collections.Generic.IEnumerable(Of Vim.Math3d.DVector4))
  name.vb: Sum(IEnumerable(Of DVector4))
- uid: Vim.Math3d.MathOps.Average(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector4})
  commentId: M:Vim.Math3d.MathOps.Average(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector4})
  id: Average(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector4})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Average(IEnumerable<DVector4>)
  nameWithType: MathOps.Average(IEnumerable<DVector4>)
  fullName: Vim.Math3d.MathOps.Average(System.Collections.Generic.IEnumerable<Vim.Math3d.DVector4>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Average
    path: ../src/MathOps.cs
    startLine: 353
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector4 Average(this IEnumerable<DVector4> self)
    parameters:
    - id: self
      type: System.Collections.Generic.IEnumerable{Vim.Math3d.DVector4}
    return:
      type: Vim.Math3d.DVector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(self As IEnumerable(Of DVector4)) As DVector4
  overload: Vim.Math3d.MathOps.Average*
  nameWithType.vb: MathOps.Average(IEnumerable(Of DVector4))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Average(System.Collections.Generic.IEnumerable(Of Vim.Math3d.DVector4))
  name.vb: Average(IEnumerable(Of DVector4))
- uid: Vim.Math3d.MathOps.Min(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector4})
  commentId: M:Vim.Math3d.MathOps.Min(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector4})
  id: Min(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector4})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Min(IEnumerable<DVector4>)
  nameWithType: MathOps.Min(IEnumerable<DVector4>)
  fullName: Vim.Math3d.MathOps.Min(System.Collections.Generic.IEnumerable<Vim.Math3d.DVector4>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Min
    path: ../src/MathOps.cs
    startLine: 354
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector4 Min(this IEnumerable<DVector4> self)
    parameters:
    - id: self
      type: System.Collections.Generic.IEnumerable{Vim.Math3d.DVector4}
    return:
      type: Vim.Math3d.DVector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(self As IEnumerable(Of DVector4)) As DVector4
  overload: Vim.Math3d.MathOps.Min*
  nameWithType.vb: MathOps.Min(IEnumerable(Of DVector4))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Min(System.Collections.Generic.IEnumerable(Of Vim.Math3d.DVector4))
  name.vb: Min(IEnumerable(Of DVector4))
- uid: Vim.Math3d.MathOps.Max(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector4})
  commentId: M:Vim.Math3d.MathOps.Max(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector4})
  id: Max(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector4})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Max(IEnumerable<DVector4>)
  nameWithType: MathOps.Max(IEnumerable<DVector4>)
  fullName: Vim.Math3d.MathOps.Max(System.Collections.Generic.IEnumerable<Vim.Math3d.DVector4>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Max
    path: ../src/MathOps.cs
    startLine: 355
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector4 Max(this IEnumerable<DVector4> self)
    parameters:
    - id: self
      type: System.Collections.Generic.IEnumerable{Vim.Math3d.DVector4}
    return:
      type: Vim.Math3d.DVector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(self As IEnumerable(Of DVector4)) As DVector4
  overload: Vim.Math3d.MathOps.Max*
  nameWithType.vb: MathOps.Max(IEnumerable(Of DVector4))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Max(System.Collections.Generic.IEnumerable(Of Vim.Math3d.DVector4))
  name.vb: Max(IEnumerable(Of DVector4))
- uid: Vim.Math3d.MathOps.Extents(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector4})
  commentId: M:Vim.Math3d.MathOps.Extents(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector4})
  id: Extents(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector4})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Extents(IEnumerable<DVector4>)
  nameWithType: MathOps.Extents(IEnumerable<DVector4>)
  fullName: Vim.Math3d.MathOps.Extents(System.Collections.Generic.IEnumerable<Vim.Math3d.DVector4>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Extents
    path: ../src/MathOps.cs
    startLine: 356
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector4 Extents(this IEnumerable<DVector4> self)
    parameters:
    - id: self
      type: System.Collections.Generic.IEnumerable{Vim.Math3d.DVector4}
    return:
      type: Vim.Math3d.DVector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Extents(self As IEnumerable(Of DVector4)) As DVector4
  overload: Vim.Math3d.MathOps.Extents*
  nameWithType.vb: MathOps.Extents(IEnumerable(Of DVector4))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Extents(System.Collections.Generic.IEnumerable(Of Vim.Math3d.DVector4))
  name.vb: Extents(IEnumerable(Of DVector4))
- uid: Vim.Math3d.MathOps.Middle(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector4})
  commentId: M:Vim.Math3d.MathOps.Middle(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector4})
  id: Middle(System.Collections.Generic.IEnumerable{Vim.Math3d.DVector4})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Middle(IEnumerable<DVector4>)
  nameWithType: MathOps.Middle(IEnumerable<DVector4>)
  fullName: Vim.Math3d.MathOps.Middle(System.Collections.Generic.IEnumerable<Vim.Math3d.DVector4>)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Middle
    path: ../src/MathOps.cs
    startLine: 357
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector4 Middle(this IEnumerable<DVector4> self)
    parameters:
    - id: self
      type: System.Collections.Generic.IEnumerable{Vim.Math3d.DVector4}
    return:
      type: Vim.Math3d.DVector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Middle(self As IEnumerable(Of DVector4)) As DVector4
  overload: Vim.Math3d.MathOps.Middle*
  nameWithType.vb: MathOps.Middle(IEnumerable(Of DVector4))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.Middle(System.Collections.Generic.IEnumerable(Of Vim.Math3d.DVector4))
  name.vb: Middle(IEnumerable(Of DVector4))
- uid: Vim.Math3d.MathOps.DistanceSquared(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.MathOps.DistanceSquared(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  id: DistanceSquared(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: DistanceSquared(Vector2, Vector2)
  nameWithType: MathOps.DistanceSquared(Vector2, Vector2)
  fullName: Vim.Math3d.MathOps.DistanceSquared(Vim.Math3d.Vector2, Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: DistanceSquared
    path: ../src/MathOps.cs
    startLine: 360
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float DistanceSquared(this Vector2 v1, Vector2 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.Vector2
    - id: v2
      type: Vim.Math3d.Vector2
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DistanceSquared(v1 As Vector2, v2 As Vector2) As Single
  overload: Vim.Math3d.MathOps.DistanceSquared*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Distance(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.MathOps.Distance(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  id: Distance(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Distance(Vector2, Vector2)
  nameWithType: MathOps.Distance(Vector2, Vector2)
  fullName: Vim.Math3d.MathOps.Distance(Vim.Math3d.Vector2, Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Distance
    path: ../src/MathOps.cs
    startLine: 361
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float Distance(this Vector2 v1, Vector2 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.Vector2
    - id: v2
      type: Vim.Math3d.Vector2
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Distance(v1 As Vector2, v2 As Vector2) As Single
  overload: Vim.Math3d.MathOps.Distance*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.LengthSquared(Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.MathOps.LengthSquared(Vim.Math3d.Vector2)
  id: LengthSquared(Vim.Math3d.Vector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: LengthSquared(Vector2)
  nameWithType: MathOps.LengthSquared(Vector2)
  fullName: Vim.Math3d.MathOps.LengthSquared(Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: LengthSquared
    path: ../src/MathOps.cs
    startLine: 362
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float LengthSquared(this Vector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector2
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LengthSquared(v As Vector2) As Single
  overload: Vim.Math3d.MathOps.LengthSquared*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Length(Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.MathOps.Length(Vim.Math3d.Vector2)
  id: Length(Vim.Math3d.Vector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Length(Vector2)
  nameWithType: MathOps.Length(Vector2)
  fullName: Vim.Math3d.MathOps.Length(Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Length
    path: ../src/MathOps.cs
    startLine: 363
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float Length(this Vector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector2
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Length(v As Vector2) As Single
  overload: Vim.Math3d.MathOps.Length*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Normalize(Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.MathOps.Normalize(Vim.Math3d.Vector2)
  id: Normalize(Vim.Math3d.Vector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Normalize(Vector2)
  nameWithType: MathOps.Normalize(Vector2)
  fullName: Vim.Math3d.MathOps.Normalize(Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Normalize
    path: ../src/MathOps.cs
    startLine: 364
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector2 Normalize(this Vector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector2
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Normalize(v As Vector2) As Vector2
  overload: Vim.Math3d.MathOps.Normalize*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.SafeNormalize(Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.MathOps.SafeNormalize(Vim.Math3d.Vector2)
  id: SafeNormalize(Vim.Math3d.Vector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: SafeNormalize(Vector2)
  nameWithType: MathOps.SafeNormalize(Vector2)
  fullName: Vim.Math3d.MathOps.SafeNormalize(Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SafeNormalize
    path: ../src/MathOps.cs
    startLine: 365
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector2 SafeNormalize(this Vector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector2
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SafeNormalize(v As Vector2) As Vector2
  overload: Vim.Math3d.MathOps.SafeNormalize*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Dot(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.MathOps.Dot(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  id: Dot(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Dot(Vector2, Vector2)
  nameWithType: MathOps.Dot(Vector2, Vector2)
  fullName: Vim.Math3d.MathOps.Dot(Vim.Math3d.Vector2, Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Dot
    path: ../src/MathOps.cs
    startLine: 366
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float Dot(this Vector2 v1, Vector2 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.Vector2
    - id: v2
      type: Vim.Math3d.Vector2
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Dot(v1 As Vector2, v2 As Vector2) As Single
  overload: Vim.Math3d.MathOps.Dot*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Min(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.MathOps.Min(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  id: Min(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Min(Vector2, Vector2)
  nameWithType: MathOps.Min(Vector2, Vector2)
  fullName: Vim.Math3d.MathOps.Min(Vim.Math3d.Vector2, Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Min
    path: ../src/MathOps.cs
    startLine: 367
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector2 Min(this Vector2 v1, Vector2 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.Vector2
    - id: v2
      type: Vim.Math3d.Vector2
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(v1 As Vector2, v2 As Vector2) As Vector2
  overload: Vim.Math3d.MathOps.Min*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Max(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.MathOps.Max(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  id: Max(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Max(Vector2, Vector2)
  nameWithType: MathOps.Max(Vector2, Vector2)
  fullName: Vim.Math3d.MathOps.Max(Vim.Math3d.Vector2, Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Max
    path: ../src/MathOps.cs
    startLine: 368
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector2 Max(this Vector2 v1, Vector2 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.Vector2
    - id: v2
      type: Vim.Math3d.Vector2
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(v1 As Vector2, v2 As Vector2) As Vector2
  overload: Vim.Math3d.MathOps.Max*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.SquareRoot(Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.MathOps.SquareRoot(Vim.Math3d.Vector2)
  id: SquareRoot(Vim.Math3d.Vector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: SquareRoot(Vector2)
  nameWithType: MathOps.SquareRoot(Vector2)
  fullName: Vim.Math3d.MathOps.SquareRoot(Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SquareRoot
    path: ../src/MathOps.cs
    startLine: 369
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector2 SquareRoot(this Vector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector2
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SquareRoot(v As Vector2) As Vector2
  overload: Vim.Math3d.MathOps.SquareRoot*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Abs(Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.MathOps.Abs(Vim.Math3d.Vector2)
  id: Abs(Vim.Math3d.Vector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Abs(Vector2)
  nameWithType: MathOps.Abs(Vector2)
  fullName: Vim.Math3d.MathOps.Abs(Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Abs
    path: ../src/MathOps.cs
    startLine: 371
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector2 Abs(this Vector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector2
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Abs(v As Vector2) As Vector2
  overload: Vim.Math3d.MathOps.Abs*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Acos(Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.MathOps.Acos(Vim.Math3d.Vector2)
  id: Acos(Vim.Math3d.Vector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Acos(Vector2)
  nameWithType: MathOps.Acos(Vector2)
  fullName: Vim.Math3d.MathOps.Acos(Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Acos
    path: ../src/MathOps.cs
    startLine: 372
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector2 Acos(this Vector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector2
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Acos(v As Vector2) As Vector2
  overload: Vim.Math3d.MathOps.Acos*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Asin(Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.MathOps.Asin(Vim.Math3d.Vector2)
  id: Asin(Vim.Math3d.Vector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Asin(Vector2)
  nameWithType: MathOps.Asin(Vector2)
  fullName: Vim.Math3d.MathOps.Asin(Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Asin
    path: ../src/MathOps.cs
    startLine: 373
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector2 Asin(this Vector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector2
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Asin(v As Vector2) As Vector2
  overload: Vim.Math3d.MathOps.Asin*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Atan(Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.MathOps.Atan(Vim.Math3d.Vector2)
  id: Atan(Vim.Math3d.Vector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Atan(Vector2)
  nameWithType: MathOps.Atan(Vector2)
  fullName: Vim.Math3d.MathOps.Atan(Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Atan
    path: ../src/MathOps.cs
    startLine: 374
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector2 Atan(this Vector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector2
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Atan(v As Vector2) As Vector2
  overload: Vim.Math3d.MathOps.Atan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Cos(Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.MathOps.Cos(Vim.Math3d.Vector2)
  id: Cos(Vim.Math3d.Vector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Cos(Vector2)
  nameWithType: MathOps.Cos(Vector2)
  fullName: Vim.Math3d.MathOps.Cos(Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Cos
    path: ../src/MathOps.cs
    startLine: 375
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector2 Cos(this Vector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector2
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Cos(v As Vector2) As Vector2
  overload: Vim.Math3d.MathOps.Cos*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Cosh(Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.MathOps.Cosh(Vim.Math3d.Vector2)
  id: Cosh(Vim.Math3d.Vector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Cosh(Vector2)
  nameWithType: MathOps.Cosh(Vector2)
  fullName: Vim.Math3d.MathOps.Cosh(Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Cosh
    path: ../src/MathOps.cs
    startLine: 376
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector2 Cosh(this Vector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector2
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Cosh(v As Vector2) As Vector2
  overload: Vim.Math3d.MathOps.Cosh*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Exp(Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.MathOps.Exp(Vim.Math3d.Vector2)
  id: Exp(Vim.Math3d.Vector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Exp(Vector2)
  nameWithType: MathOps.Exp(Vector2)
  fullName: Vim.Math3d.MathOps.Exp(Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Exp
    path: ../src/MathOps.cs
    startLine: 377
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector2 Exp(this Vector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector2
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Exp(v As Vector2) As Vector2
  overload: Vim.Math3d.MathOps.Exp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Log(Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.MathOps.Log(Vim.Math3d.Vector2)
  id: Log(Vim.Math3d.Vector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Log(Vector2)
  nameWithType: MathOps.Log(Vector2)
  fullName: Vim.Math3d.MathOps.Log(Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Log
    path: ../src/MathOps.cs
    startLine: 378
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector2 Log(this Vector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector2
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Log(v As Vector2) As Vector2
  overload: Vim.Math3d.MathOps.Log*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Log10(Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.MathOps.Log10(Vim.Math3d.Vector2)
  id: Log10(Vim.Math3d.Vector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Log10(Vector2)
  nameWithType: MathOps.Log10(Vector2)
  fullName: Vim.Math3d.MathOps.Log10(Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Log10
    path: ../src/MathOps.cs
    startLine: 379
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector2 Log10(this Vector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector2
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Log10(v As Vector2) As Vector2
  overload: Vim.Math3d.MathOps.Log10*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Sin(Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.MathOps.Sin(Vim.Math3d.Vector2)
  id: Sin(Vim.Math3d.Vector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Sin(Vector2)
  nameWithType: MathOps.Sin(Vector2)
  fullName: Vim.Math3d.MathOps.Sin(Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Sin
    path: ../src/MathOps.cs
    startLine: 380
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector2 Sin(this Vector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector2
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sin(v As Vector2) As Vector2
  overload: Vim.Math3d.MathOps.Sin*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Sinh(Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.MathOps.Sinh(Vim.Math3d.Vector2)
  id: Sinh(Vim.Math3d.Vector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Sinh(Vector2)
  nameWithType: MathOps.Sinh(Vector2)
  fullName: Vim.Math3d.MathOps.Sinh(Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Sinh
    path: ../src/MathOps.cs
    startLine: 381
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector2 Sinh(this Vector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector2
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sinh(v As Vector2) As Vector2
  overload: Vim.Math3d.MathOps.Sinh*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Sqrt(Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.MathOps.Sqrt(Vim.Math3d.Vector2)
  id: Sqrt(Vim.Math3d.Vector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Sqrt(Vector2)
  nameWithType: MathOps.Sqrt(Vector2)
  fullName: Vim.Math3d.MathOps.Sqrt(Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Sqrt
    path: ../src/MathOps.cs
    startLine: 382
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector2 Sqrt(this Vector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector2
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sqrt(v As Vector2) As Vector2
  overload: Vim.Math3d.MathOps.Sqrt*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Tan(Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.MathOps.Tan(Vim.Math3d.Vector2)
  id: Tan(Vim.Math3d.Vector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Tan(Vector2)
  nameWithType: MathOps.Tan(Vector2)
  fullName: Vim.Math3d.MathOps.Tan(Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Tan
    path: ../src/MathOps.cs
    startLine: 383
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector2 Tan(this Vector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector2
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Tan(v As Vector2) As Vector2
  overload: Vim.Math3d.MathOps.Tan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Tanh(Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.MathOps.Tanh(Vim.Math3d.Vector2)
  id: Tanh(Vim.Math3d.Vector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Tanh(Vector2)
  nameWithType: MathOps.Tanh(Vector2)
  fullName: Vim.Math3d.MathOps.Tanh(Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Tanh
    path: ../src/MathOps.cs
    startLine: 384
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector2 Tanh(this Vector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector2
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Tanh(v As Vector2) As Vector2
  overload: Vim.Math3d.MathOps.Tanh*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Inverse(Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.MathOps.Inverse(Vim.Math3d.Vector2)
  id: Inverse(Vim.Math3d.Vector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Inverse(Vector2)
  nameWithType: MathOps.Inverse(Vector2)
  fullName: Vim.Math3d.MathOps.Inverse(Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Inverse
    path: ../src/MathOps.cs
    startLine: 385
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector2 Inverse(this Vector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector2
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Inverse(v As Vector2) As Vector2
  overload: Vim.Math3d.MathOps.Inverse*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Ceiling(Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.MathOps.Ceiling(Vim.Math3d.Vector2)
  id: Ceiling(Vim.Math3d.Vector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Ceiling(Vector2)
  nameWithType: MathOps.Ceiling(Vector2)
  fullName: Vim.Math3d.MathOps.Ceiling(Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Ceiling
    path: ../src/MathOps.cs
    startLine: 386
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector2 Ceiling(this Vector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector2
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Ceiling(v As Vector2) As Vector2
  overload: Vim.Math3d.MathOps.Ceiling*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Floor(Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.MathOps.Floor(Vim.Math3d.Vector2)
  id: Floor(Vim.Math3d.Vector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Floor(Vector2)
  nameWithType: MathOps.Floor(Vector2)
  fullName: Vim.Math3d.MathOps.Floor(Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Floor
    path: ../src/MathOps.cs
    startLine: 387
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector2 Floor(this Vector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector2
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Floor(v As Vector2) As Vector2
  overload: Vim.Math3d.MathOps.Floor*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Round(Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.MathOps.Round(Vim.Math3d.Vector2)
  id: Round(Vim.Math3d.Vector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Round(Vector2)
  nameWithType: MathOps.Round(Vector2)
  fullName: Vim.Math3d.MathOps.Round(Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Round
    path: ../src/MathOps.cs
    startLine: 388
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector2 Round(this Vector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector2
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Round(v As Vector2) As Vector2
  overload: Vim.Math3d.MathOps.Round*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Truncate(Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.MathOps.Truncate(Vim.Math3d.Vector2)
  id: Truncate(Vim.Math3d.Vector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Truncate(Vector2)
  nameWithType: MathOps.Truncate(Vector2)
  fullName: Vim.Math3d.MathOps.Truncate(Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Truncate
    path: ../src/MathOps.cs
    startLine: 389
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector2 Truncate(this Vector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector2
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Truncate(v As Vector2) As Vector2
  overload: Vim.Math3d.MathOps.Truncate*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Sqr(Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.MathOps.Sqr(Vim.Math3d.Vector2)
  id: Sqr(Vim.Math3d.Vector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Sqr(Vector2)
  nameWithType: MathOps.Sqr(Vector2)
  fullName: Vim.Math3d.MathOps.Sqr(Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Sqr
    path: ../src/MathOps.cs
    startLine: 390
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector2 Sqr(this Vector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector2
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sqr(v As Vector2) As Vector2
  overload: Vim.Math3d.MathOps.Sqr*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Cube(Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.MathOps.Cube(Vim.Math3d.Vector2)
  id: Cube(Vim.Math3d.Vector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Cube(Vector2)
  nameWithType: MathOps.Cube(Vector2)
  fullName: Vim.Math3d.MathOps.Cube(Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Cube
    path: ../src/MathOps.cs
    startLine: 391
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector2 Cube(this Vector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector2
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Cube(v As Vector2) As Vector2
  overload: Vim.Math3d.MathOps.Cube*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.ToRadians(Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.MathOps.ToRadians(Vim.Math3d.Vector2)
  id: ToRadians(Vim.Math3d.Vector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: ToRadians(Vector2)
  nameWithType: MathOps.ToRadians(Vector2)
  fullName: Vim.Math3d.MathOps.ToRadians(Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToRadians
    path: ../src/MathOps.cs
    startLine: 392
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector2 ToRadians(this Vector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector2
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToRadians(v As Vector2) As Vector2
  overload: Vim.Math3d.MathOps.ToRadians*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.ToDegrees(Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.MathOps.ToDegrees(Vim.Math3d.Vector2)
  id: ToDegrees(Vim.Math3d.Vector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: ToDegrees(Vector2)
  nameWithType: MathOps.ToDegrees(Vector2)
  fullName: Vim.Math3d.MathOps.ToDegrees(Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToDegrees
    path: ../src/MathOps.cs
    startLine: 393
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector2 ToDegrees(this Vector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector2
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDegrees(v As Vector2) As Vector2
  overload: Vim.Math3d.MathOps.ToDegrees*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.DistanceSquared(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.MathOps.DistanceSquared(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  id: DistanceSquared(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: DistanceSquared(Vector3, Vector3)
  nameWithType: MathOps.DistanceSquared(Vector3, Vector3)
  fullName: Vim.Math3d.MathOps.DistanceSquared(Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: DistanceSquared
    path: ../src/MathOps.cs
    startLine: 395
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float DistanceSquared(this Vector3 v1, Vector3 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.Vector3
    - id: v2
      type: Vim.Math3d.Vector3
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DistanceSquared(v1 As Vector3, v2 As Vector3) As Single
  overload: Vim.Math3d.MathOps.DistanceSquared*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Distance(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.MathOps.Distance(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  id: Distance(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Distance(Vector3, Vector3)
  nameWithType: MathOps.Distance(Vector3, Vector3)
  fullName: Vim.Math3d.MathOps.Distance(Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Distance
    path: ../src/MathOps.cs
    startLine: 396
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float Distance(this Vector3 v1, Vector3 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.Vector3
    - id: v2
      type: Vim.Math3d.Vector3
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Distance(v1 As Vector3, v2 As Vector3) As Single
  overload: Vim.Math3d.MathOps.Distance*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.LengthSquared(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.MathOps.LengthSquared(Vim.Math3d.Vector3)
  id: LengthSquared(Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: LengthSquared(Vector3)
  nameWithType: MathOps.LengthSquared(Vector3)
  fullName: Vim.Math3d.MathOps.LengthSquared(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: LengthSquared
    path: ../src/MathOps.cs
    startLine: 397
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float LengthSquared(this Vector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector3
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LengthSquared(v As Vector3) As Single
  overload: Vim.Math3d.MathOps.LengthSquared*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Length(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.MathOps.Length(Vim.Math3d.Vector3)
  id: Length(Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Length(Vector3)
  nameWithType: MathOps.Length(Vector3)
  fullName: Vim.Math3d.MathOps.Length(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Length
    path: ../src/MathOps.cs
    startLine: 398
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float Length(this Vector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector3
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Length(v As Vector3) As Single
  overload: Vim.Math3d.MathOps.Length*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Normalize(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.MathOps.Normalize(Vim.Math3d.Vector3)
  id: Normalize(Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Normalize(Vector3)
  nameWithType: MathOps.Normalize(Vector3)
  fullName: Vim.Math3d.MathOps.Normalize(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Normalize
    path: ../src/MathOps.cs
    startLine: 399
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 Normalize(this Vector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Normalize(v As Vector3) As Vector3
  overload: Vim.Math3d.MathOps.Normalize*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.SafeNormalize(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.MathOps.SafeNormalize(Vim.Math3d.Vector3)
  id: SafeNormalize(Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: SafeNormalize(Vector3)
  nameWithType: MathOps.SafeNormalize(Vector3)
  fullName: Vim.Math3d.MathOps.SafeNormalize(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SafeNormalize
    path: ../src/MathOps.cs
    startLine: 400
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 SafeNormalize(this Vector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SafeNormalize(v As Vector3) As Vector3
  overload: Vim.Math3d.MathOps.SafeNormalize*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Dot(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.MathOps.Dot(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  id: Dot(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Dot(Vector3, Vector3)
  nameWithType: MathOps.Dot(Vector3, Vector3)
  fullName: Vim.Math3d.MathOps.Dot(Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Dot
    path: ../src/MathOps.cs
    startLine: 401
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float Dot(this Vector3 v1, Vector3 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.Vector3
    - id: v2
      type: Vim.Math3d.Vector3
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Dot(v1 As Vector3, v2 As Vector3) As Single
  overload: Vim.Math3d.MathOps.Dot*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Min(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.MathOps.Min(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  id: Min(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Min(Vector3, Vector3)
  nameWithType: MathOps.Min(Vector3, Vector3)
  fullName: Vim.Math3d.MathOps.Min(Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Min
    path: ../src/MathOps.cs
    startLine: 402
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 Min(this Vector3 v1, Vector3 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.Vector3
    - id: v2
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(v1 As Vector3, v2 As Vector3) As Vector3
  overload: Vim.Math3d.MathOps.Min*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Max(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.MathOps.Max(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  id: Max(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Max(Vector3, Vector3)
  nameWithType: MathOps.Max(Vector3, Vector3)
  fullName: Vim.Math3d.MathOps.Max(Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Max
    path: ../src/MathOps.cs
    startLine: 403
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 Max(this Vector3 v1, Vector3 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.Vector3
    - id: v2
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(v1 As Vector3, v2 As Vector3) As Vector3
  overload: Vim.Math3d.MathOps.Max*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.SquareRoot(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.MathOps.SquareRoot(Vim.Math3d.Vector3)
  id: SquareRoot(Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: SquareRoot(Vector3)
  nameWithType: MathOps.SquareRoot(Vector3)
  fullName: Vim.Math3d.MathOps.SquareRoot(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SquareRoot
    path: ../src/MathOps.cs
    startLine: 404
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 SquareRoot(this Vector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SquareRoot(v As Vector3) As Vector3
  overload: Vim.Math3d.MathOps.SquareRoot*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Abs(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.MathOps.Abs(Vim.Math3d.Vector3)
  id: Abs(Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Abs(Vector3)
  nameWithType: MathOps.Abs(Vector3)
  fullName: Vim.Math3d.MathOps.Abs(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Abs
    path: ../src/MathOps.cs
    startLine: 406
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 Abs(this Vector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Abs(v As Vector3) As Vector3
  overload: Vim.Math3d.MathOps.Abs*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Acos(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.MathOps.Acos(Vim.Math3d.Vector3)
  id: Acos(Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Acos(Vector3)
  nameWithType: MathOps.Acos(Vector3)
  fullName: Vim.Math3d.MathOps.Acos(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Acos
    path: ../src/MathOps.cs
    startLine: 407
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 Acos(this Vector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Acos(v As Vector3) As Vector3
  overload: Vim.Math3d.MathOps.Acos*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Asin(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.MathOps.Asin(Vim.Math3d.Vector3)
  id: Asin(Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Asin(Vector3)
  nameWithType: MathOps.Asin(Vector3)
  fullName: Vim.Math3d.MathOps.Asin(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Asin
    path: ../src/MathOps.cs
    startLine: 408
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 Asin(this Vector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Asin(v As Vector3) As Vector3
  overload: Vim.Math3d.MathOps.Asin*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Atan(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.MathOps.Atan(Vim.Math3d.Vector3)
  id: Atan(Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Atan(Vector3)
  nameWithType: MathOps.Atan(Vector3)
  fullName: Vim.Math3d.MathOps.Atan(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Atan
    path: ../src/MathOps.cs
    startLine: 409
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 Atan(this Vector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Atan(v As Vector3) As Vector3
  overload: Vim.Math3d.MathOps.Atan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Cos(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.MathOps.Cos(Vim.Math3d.Vector3)
  id: Cos(Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Cos(Vector3)
  nameWithType: MathOps.Cos(Vector3)
  fullName: Vim.Math3d.MathOps.Cos(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Cos
    path: ../src/MathOps.cs
    startLine: 410
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 Cos(this Vector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Cos(v As Vector3) As Vector3
  overload: Vim.Math3d.MathOps.Cos*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Cosh(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.MathOps.Cosh(Vim.Math3d.Vector3)
  id: Cosh(Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Cosh(Vector3)
  nameWithType: MathOps.Cosh(Vector3)
  fullName: Vim.Math3d.MathOps.Cosh(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Cosh
    path: ../src/MathOps.cs
    startLine: 411
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 Cosh(this Vector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Cosh(v As Vector3) As Vector3
  overload: Vim.Math3d.MathOps.Cosh*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Exp(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.MathOps.Exp(Vim.Math3d.Vector3)
  id: Exp(Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Exp(Vector3)
  nameWithType: MathOps.Exp(Vector3)
  fullName: Vim.Math3d.MathOps.Exp(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Exp
    path: ../src/MathOps.cs
    startLine: 412
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 Exp(this Vector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Exp(v As Vector3) As Vector3
  overload: Vim.Math3d.MathOps.Exp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Log(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.MathOps.Log(Vim.Math3d.Vector3)
  id: Log(Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Log(Vector3)
  nameWithType: MathOps.Log(Vector3)
  fullName: Vim.Math3d.MathOps.Log(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Log
    path: ../src/MathOps.cs
    startLine: 413
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 Log(this Vector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Log(v As Vector3) As Vector3
  overload: Vim.Math3d.MathOps.Log*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Log10(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.MathOps.Log10(Vim.Math3d.Vector3)
  id: Log10(Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Log10(Vector3)
  nameWithType: MathOps.Log10(Vector3)
  fullName: Vim.Math3d.MathOps.Log10(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Log10
    path: ../src/MathOps.cs
    startLine: 414
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 Log10(this Vector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Log10(v As Vector3) As Vector3
  overload: Vim.Math3d.MathOps.Log10*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Sin(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.MathOps.Sin(Vim.Math3d.Vector3)
  id: Sin(Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Sin(Vector3)
  nameWithType: MathOps.Sin(Vector3)
  fullName: Vim.Math3d.MathOps.Sin(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Sin
    path: ../src/MathOps.cs
    startLine: 415
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 Sin(this Vector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sin(v As Vector3) As Vector3
  overload: Vim.Math3d.MathOps.Sin*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Sinh(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.MathOps.Sinh(Vim.Math3d.Vector3)
  id: Sinh(Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Sinh(Vector3)
  nameWithType: MathOps.Sinh(Vector3)
  fullName: Vim.Math3d.MathOps.Sinh(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Sinh
    path: ../src/MathOps.cs
    startLine: 416
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 Sinh(this Vector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sinh(v As Vector3) As Vector3
  overload: Vim.Math3d.MathOps.Sinh*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Sqrt(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.MathOps.Sqrt(Vim.Math3d.Vector3)
  id: Sqrt(Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Sqrt(Vector3)
  nameWithType: MathOps.Sqrt(Vector3)
  fullName: Vim.Math3d.MathOps.Sqrt(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Sqrt
    path: ../src/MathOps.cs
    startLine: 417
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 Sqrt(this Vector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sqrt(v As Vector3) As Vector3
  overload: Vim.Math3d.MathOps.Sqrt*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Tan(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.MathOps.Tan(Vim.Math3d.Vector3)
  id: Tan(Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Tan(Vector3)
  nameWithType: MathOps.Tan(Vector3)
  fullName: Vim.Math3d.MathOps.Tan(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Tan
    path: ../src/MathOps.cs
    startLine: 418
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 Tan(this Vector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Tan(v As Vector3) As Vector3
  overload: Vim.Math3d.MathOps.Tan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Tanh(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.MathOps.Tanh(Vim.Math3d.Vector3)
  id: Tanh(Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Tanh(Vector3)
  nameWithType: MathOps.Tanh(Vector3)
  fullName: Vim.Math3d.MathOps.Tanh(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Tanh
    path: ../src/MathOps.cs
    startLine: 419
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 Tanh(this Vector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Tanh(v As Vector3) As Vector3
  overload: Vim.Math3d.MathOps.Tanh*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Inverse(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.MathOps.Inverse(Vim.Math3d.Vector3)
  id: Inverse(Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Inverse(Vector3)
  nameWithType: MathOps.Inverse(Vector3)
  fullName: Vim.Math3d.MathOps.Inverse(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Inverse
    path: ../src/MathOps.cs
    startLine: 420
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 Inverse(this Vector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Inverse(v As Vector3) As Vector3
  overload: Vim.Math3d.MathOps.Inverse*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Ceiling(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.MathOps.Ceiling(Vim.Math3d.Vector3)
  id: Ceiling(Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Ceiling(Vector3)
  nameWithType: MathOps.Ceiling(Vector3)
  fullName: Vim.Math3d.MathOps.Ceiling(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Ceiling
    path: ../src/MathOps.cs
    startLine: 421
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 Ceiling(this Vector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Ceiling(v As Vector3) As Vector3
  overload: Vim.Math3d.MathOps.Ceiling*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Floor(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.MathOps.Floor(Vim.Math3d.Vector3)
  id: Floor(Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Floor(Vector3)
  nameWithType: MathOps.Floor(Vector3)
  fullName: Vim.Math3d.MathOps.Floor(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Floor
    path: ../src/MathOps.cs
    startLine: 422
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 Floor(this Vector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Floor(v As Vector3) As Vector3
  overload: Vim.Math3d.MathOps.Floor*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Round(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.MathOps.Round(Vim.Math3d.Vector3)
  id: Round(Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Round(Vector3)
  nameWithType: MathOps.Round(Vector3)
  fullName: Vim.Math3d.MathOps.Round(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Round
    path: ../src/MathOps.cs
    startLine: 423
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 Round(this Vector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Round(v As Vector3) As Vector3
  overload: Vim.Math3d.MathOps.Round*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Truncate(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.MathOps.Truncate(Vim.Math3d.Vector3)
  id: Truncate(Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Truncate(Vector3)
  nameWithType: MathOps.Truncate(Vector3)
  fullName: Vim.Math3d.MathOps.Truncate(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Truncate
    path: ../src/MathOps.cs
    startLine: 424
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 Truncate(this Vector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Truncate(v As Vector3) As Vector3
  overload: Vim.Math3d.MathOps.Truncate*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Sqr(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.MathOps.Sqr(Vim.Math3d.Vector3)
  id: Sqr(Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Sqr(Vector3)
  nameWithType: MathOps.Sqr(Vector3)
  fullName: Vim.Math3d.MathOps.Sqr(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Sqr
    path: ../src/MathOps.cs
    startLine: 425
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 Sqr(this Vector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sqr(v As Vector3) As Vector3
  overload: Vim.Math3d.MathOps.Sqr*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Cube(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.MathOps.Cube(Vim.Math3d.Vector3)
  id: Cube(Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Cube(Vector3)
  nameWithType: MathOps.Cube(Vector3)
  fullName: Vim.Math3d.MathOps.Cube(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Cube
    path: ../src/MathOps.cs
    startLine: 426
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 Cube(this Vector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Cube(v As Vector3) As Vector3
  overload: Vim.Math3d.MathOps.Cube*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.ToRadians(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.MathOps.ToRadians(Vim.Math3d.Vector3)
  id: ToRadians(Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: ToRadians(Vector3)
  nameWithType: MathOps.ToRadians(Vector3)
  fullName: Vim.Math3d.MathOps.ToRadians(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToRadians
    path: ../src/MathOps.cs
    startLine: 427
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 ToRadians(this Vector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToRadians(v As Vector3) As Vector3
  overload: Vim.Math3d.MathOps.ToRadians*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.ToDegrees(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.MathOps.ToDegrees(Vim.Math3d.Vector3)
  id: ToDegrees(Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: ToDegrees(Vector3)
  nameWithType: MathOps.ToDegrees(Vector3)
  fullName: Vim.Math3d.MathOps.ToDegrees(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToDegrees
    path: ../src/MathOps.cs
    startLine: 428
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 ToDegrees(this Vector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDegrees(v As Vector3) As Vector3
  overload: Vim.Math3d.MathOps.ToDegrees*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.DistanceSquared(Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  commentId: M:Vim.Math3d.MathOps.DistanceSquared(Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  id: DistanceSquared(Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: DistanceSquared(Vector4, Vector4)
  nameWithType: MathOps.DistanceSquared(Vector4, Vector4)
  fullName: Vim.Math3d.MathOps.DistanceSquared(Vim.Math3d.Vector4, Vim.Math3d.Vector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: DistanceSquared
    path: ../src/MathOps.cs
    startLine: 430
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float DistanceSquared(this Vector4 v1, Vector4 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.Vector4
    - id: v2
      type: Vim.Math3d.Vector4
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DistanceSquared(v1 As Vector4, v2 As Vector4) As Single
  overload: Vim.Math3d.MathOps.DistanceSquared*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Distance(Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  commentId: M:Vim.Math3d.MathOps.Distance(Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  id: Distance(Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Distance(Vector4, Vector4)
  nameWithType: MathOps.Distance(Vector4, Vector4)
  fullName: Vim.Math3d.MathOps.Distance(Vim.Math3d.Vector4, Vim.Math3d.Vector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Distance
    path: ../src/MathOps.cs
    startLine: 431
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float Distance(this Vector4 v1, Vector4 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.Vector4
    - id: v2
      type: Vim.Math3d.Vector4
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Distance(v1 As Vector4, v2 As Vector4) As Single
  overload: Vim.Math3d.MathOps.Distance*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.LengthSquared(Vim.Math3d.Vector4)
  commentId: M:Vim.Math3d.MathOps.LengthSquared(Vim.Math3d.Vector4)
  id: LengthSquared(Vim.Math3d.Vector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: LengthSquared(Vector4)
  nameWithType: MathOps.LengthSquared(Vector4)
  fullName: Vim.Math3d.MathOps.LengthSquared(Vim.Math3d.Vector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: LengthSquared
    path: ../src/MathOps.cs
    startLine: 432
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float LengthSquared(this Vector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector4
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LengthSquared(v As Vector4) As Single
  overload: Vim.Math3d.MathOps.LengthSquared*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Length(Vim.Math3d.Vector4)
  commentId: M:Vim.Math3d.MathOps.Length(Vim.Math3d.Vector4)
  id: Length(Vim.Math3d.Vector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Length(Vector4)
  nameWithType: MathOps.Length(Vector4)
  fullName: Vim.Math3d.MathOps.Length(Vim.Math3d.Vector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Length
    path: ../src/MathOps.cs
    startLine: 433
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float Length(this Vector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector4
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Length(v As Vector4) As Single
  overload: Vim.Math3d.MathOps.Length*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Normalize(Vim.Math3d.Vector4)
  commentId: M:Vim.Math3d.MathOps.Normalize(Vim.Math3d.Vector4)
  id: Normalize(Vim.Math3d.Vector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Normalize(Vector4)
  nameWithType: MathOps.Normalize(Vector4)
  fullName: Vim.Math3d.MathOps.Normalize(Vim.Math3d.Vector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Normalize
    path: ../src/MathOps.cs
    startLine: 434
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector4 Normalize(this Vector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector4
    return:
      type: Vim.Math3d.Vector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Normalize(v As Vector4) As Vector4
  overload: Vim.Math3d.MathOps.Normalize*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.SafeNormalize(Vim.Math3d.Vector4)
  commentId: M:Vim.Math3d.MathOps.SafeNormalize(Vim.Math3d.Vector4)
  id: SafeNormalize(Vim.Math3d.Vector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: SafeNormalize(Vector4)
  nameWithType: MathOps.SafeNormalize(Vector4)
  fullName: Vim.Math3d.MathOps.SafeNormalize(Vim.Math3d.Vector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SafeNormalize
    path: ../src/MathOps.cs
    startLine: 435
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector4 SafeNormalize(this Vector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector4
    return:
      type: Vim.Math3d.Vector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SafeNormalize(v As Vector4) As Vector4
  overload: Vim.Math3d.MathOps.SafeNormalize*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Dot(Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  commentId: M:Vim.Math3d.MathOps.Dot(Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  id: Dot(Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Dot(Vector4, Vector4)
  nameWithType: MathOps.Dot(Vector4, Vector4)
  fullName: Vim.Math3d.MathOps.Dot(Vim.Math3d.Vector4, Vim.Math3d.Vector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Dot
    path: ../src/MathOps.cs
    startLine: 436
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float Dot(this Vector4 v1, Vector4 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.Vector4
    - id: v2
      type: Vim.Math3d.Vector4
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Dot(v1 As Vector4, v2 As Vector4) As Single
  overload: Vim.Math3d.MathOps.Dot*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Min(Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  commentId: M:Vim.Math3d.MathOps.Min(Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  id: Min(Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Min(Vector4, Vector4)
  nameWithType: MathOps.Min(Vector4, Vector4)
  fullName: Vim.Math3d.MathOps.Min(Vim.Math3d.Vector4, Vim.Math3d.Vector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Min
    path: ../src/MathOps.cs
    startLine: 437
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector4 Min(this Vector4 v1, Vector4 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.Vector4
    - id: v2
      type: Vim.Math3d.Vector4
    return:
      type: Vim.Math3d.Vector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(v1 As Vector4, v2 As Vector4) As Vector4
  overload: Vim.Math3d.MathOps.Min*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Max(Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  commentId: M:Vim.Math3d.MathOps.Max(Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  id: Max(Vim.Math3d.Vector4,Vim.Math3d.Vector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Max(Vector4, Vector4)
  nameWithType: MathOps.Max(Vector4, Vector4)
  fullName: Vim.Math3d.MathOps.Max(Vim.Math3d.Vector4, Vim.Math3d.Vector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Max
    path: ../src/MathOps.cs
    startLine: 438
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector4 Max(this Vector4 v1, Vector4 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.Vector4
    - id: v2
      type: Vim.Math3d.Vector4
    return:
      type: Vim.Math3d.Vector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(v1 As Vector4, v2 As Vector4) As Vector4
  overload: Vim.Math3d.MathOps.Max*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.SquareRoot(Vim.Math3d.Vector4)
  commentId: M:Vim.Math3d.MathOps.SquareRoot(Vim.Math3d.Vector4)
  id: SquareRoot(Vim.Math3d.Vector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: SquareRoot(Vector4)
  nameWithType: MathOps.SquareRoot(Vector4)
  fullName: Vim.Math3d.MathOps.SquareRoot(Vim.Math3d.Vector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SquareRoot
    path: ../src/MathOps.cs
    startLine: 439
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector4 SquareRoot(this Vector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector4
    return:
      type: Vim.Math3d.Vector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SquareRoot(v As Vector4) As Vector4
  overload: Vim.Math3d.MathOps.SquareRoot*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Abs(Vim.Math3d.Vector4)
  commentId: M:Vim.Math3d.MathOps.Abs(Vim.Math3d.Vector4)
  id: Abs(Vim.Math3d.Vector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Abs(Vector4)
  nameWithType: MathOps.Abs(Vector4)
  fullName: Vim.Math3d.MathOps.Abs(Vim.Math3d.Vector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Abs
    path: ../src/MathOps.cs
    startLine: 441
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector4 Abs(this Vector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector4
    return:
      type: Vim.Math3d.Vector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Abs(v As Vector4) As Vector4
  overload: Vim.Math3d.MathOps.Abs*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Acos(Vim.Math3d.Vector4)
  commentId: M:Vim.Math3d.MathOps.Acos(Vim.Math3d.Vector4)
  id: Acos(Vim.Math3d.Vector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Acos(Vector4)
  nameWithType: MathOps.Acos(Vector4)
  fullName: Vim.Math3d.MathOps.Acos(Vim.Math3d.Vector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Acos
    path: ../src/MathOps.cs
    startLine: 442
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector4 Acos(this Vector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector4
    return:
      type: Vim.Math3d.Vector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Acos(v As Vector4) As Vector4
  overload: Vim.Math3d.MathOps.Acos*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Asin(Vim.Math3d.Vector4)
  commentId: M:Vim.Math3d.MathOps.Asin(Vim.Math3d.Vector4)
  id: Asin(Vim.Math3d.Vector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Asin(Vector4)
  nameWithType: MathOps.Asin(Vector4)
  fullName: Vim.Math3d.MathOps.Asin(Vim.Math3d.Vector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Asin
    path: ../src/MathOps.cs
    startLine: 443
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector4 Asin(this Vector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector4
    return:
      type: Vim.Math3d.Vector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Asin(v As Vector4) As Vector4
  overload: Vim.Math3d.MathOps.Asin*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Atan(Vim.Math3d.Vector4)
  commentId: M:Vim.Math3d.MathOps.Atan(Vim.Math3d.Vector4)
  id: Atan(Vim.Math3d.Vector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Atan(Vector4)
  nameWithType: MathOps.Atan(Vector4)
  fullName: Vim.Math3d.MathOps.Atan(Vim.Math3d.Vector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Atan
    path: ../src/MathOps.cs
    startLine: 444
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector4 Atan(this Vector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector4
    return:
      type: Vim.Math3d.Vector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Atan(v As Vector4) As Vector4
  overload: Vim.Math3d.MathOps.Atan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Cos(Vim.Math3d.Vector4)
  commentId: M:Vim.Math3d.MathOps.Cos(Vim.Math3d.Vector4)
  id: Cos(Vim.Math3d.Vector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Cos(Vector4)
  nameWithType: MathOps.Cos(Vector4)
  fullName: Vim.Math3d.MathOps.Cos(Vim.Math3d.Vector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Cos
    path: ../src/MathOps.cs
    startLine: 445
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector4 Cos(this Vector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector4
    return:
      type: Vim.Math3d.Vector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Cos(v As Vector4) As Vector4
  overload: Vim.Math3d.MathOps.Cos*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Cosh(Vim.Math3d.Vector4)
  commentId: M:Vim.Math3d.MathOps.Cosh(Vim.Math3d.Vector4)
  id: Cosh(Vim.Math3d.Vector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Cosh(Vector4)
  nameWithType: MathOps.Cosh(Vector4)
  fullName: Vim.Math3d.MathOps.Cosh(Vim.Math3d.Vector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Cosh
    path: ../src/MathOps.cs
    startLine: 446
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector4 Cosh(this Vector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector4
    return:
      type: Vim.Math3d.Vector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Cosh(v As Vector4) As Vector4
  overload: Vim.Math3d.MathOps.Cosh*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Exp(Vim.Math3d.Vector4)
  commentId: M:Vim.Math3d.MathOps.Exp(Vim.Math3d.Vector4)
  id: Exp(Vim.Math3d.Vector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Exp(Vector4)
  nameWithType: MathOps.Exp(Vector4)
  fullName: Vim.Math3d.MathOps.Exp(Vim.Math3d.Vector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Exp
    path: ../src/MathOps.cs
    startLine: 447
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector4 Exp(this Vector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector4
    return:
      type: Vim.Math3d.Vector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Exp(v As Vector4) As Vector4
  overload: Vim.Math3d.MathOps.Exp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Log(Vim.Math3d.Vector4)
  commentId: M:Vim.Math3d.MathOps.Log(Vim.Math3d.Vector4)
  id: Log(Vim.Math3d.Vector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Log(Vector4)
  nameWithType: MathOps.Log(Vector4)
  fullName: Vim.Math3d.MathOps.Log(Vim.Math3d.Vector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Log
    path: ../src/MathOps.cs
    startLine: 448
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector4 Log(this Vector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector4
    return:
      type: Vim.Math3d.Vector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Log(v As Vector4) As Vector4
  overload: Vim.Math3d.MathOps.Log*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Log10(Vim.Math3d.Vector4)
  commentId: M:Vim.Math3d.MathOps.Log10(Vim.Math3d.Vector4)
  id: Log10(Vim.Math3d.Vector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Log10(Vector4)
  nameWithType: MathOps.Log10(Vector4)
  fullName: Vim.Math3d.MathOps.Log10(Vim.Math3d.Vector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Log10
    path: ../src/MathOps.cs
    startLine: 449
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector4 Log10(this Vector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector4
    return:
      type: Vim.Math3d.Vector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Log10(v As Vector4) As Vector4
  overload: Vim.Math3d.MathOps.Log10*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Sin(Vim.Math3d.Vector4)
  commentId: M:Vim.Math3d.MathOps.Sin(Vim.Math3d.Vector4)
  id: Sin(Vim.Math3d.Vector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Sin(Vector4)
  nameWithType: MathOps.Sin(Vector4)
  fullName: Vim.Math3d.MathOps.Sin(Vim.Math3d.Vector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Sin
    path: ../src/MathOps.cs
    startLine: 450
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector4 Sin(this Vector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector4
    return:
      type: Vim.Math3d.Vector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sin(v As Vector4) As Vector4
  overload: Vim.Math3d.MathOps.Sin*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Sinh(Vim.Math3d.Vector4)
  commentId: M:Vim.Math3d.MathOps.Sinh(Vim.Math3d.Vector4)
  id: Sinh(Vim.Math3d.Vector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Sinh(Vector4)
  nameWithType: MathOps.Sinh(Vector4)
  fullName: Vim.Math3d.MathOps.Sinh(Vim.Math3d.Vector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Sinh
    path: ../src/MathOps.cs
    startLine: 451
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector4 Sinh(this Vector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector4
    return:
      type: Vim.Math3d.Vector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sinh(v As Vector4) As Vector4
  overload: Vim.Math3d.MathOps.Sinh*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Sqrt(Vim.Math3d.Vector4)
  commentId: M:Vim.Math3d.MathOps.Sqrt(Vim.Math3d.Vector4)
  id: Sqrt(Vim.Math3d.Vector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Sqrt(Vector4)
  nameWithType: MathOps.Sqrt(Vector4)
  fullName: Vim.Math3d.MathOps.Sqrt(Vim.Math3d.Vector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Sqrt
    path: ../src/MathOps.cs
    startLine: 452
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector4 Sqrt(this Vector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector4
    return:
      type: Vim.Math3d.Vector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sqrt(v As Vector4) As Vector4
  overload: Vim.Math3d.MathOps.Sqrt*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Tan(Vim.Math3d.Vector4)
  commentId: M:Vim.Math3d.MathOps.Tan(Vim.Math3d.Vector4)
  id: Tan(Vim.Math3d.Vector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Tan(Vector4)
  nameWithType: MathOps.Tan(Vector4)
  fullName: Vim.Math3d.MathOps.Tan(Vim.Math3d.Vector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Tan
    path: ../src/MathOps.cs
    startLine: 453
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector4 Tan(this Vector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector4
    return:
      type: Vim.Math3d.Vector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Tan(v As Vector4) As Vector4
  overload: Vim.Math3d.MathOps.Tan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Tanh(Vim.Math3d.Vector4)
  commentId: M:Vim.Math3d.MathOps.Tanh(Vim.Math3d.Vector4)
  id: Tanh(Vim.Math3d.Vector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Tanh(Vector4)
  nameWithType: MathOps.Tanh(Vector4)
  fullName: Vim.Math3d.MathOps.Tanh(Vim.Math3d.Vector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Tanh
    path: ../src/MathOps.cs
    startLine: 454
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector4 Tanh(this Vector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector4
    return:
      type: Vim.Math3d.Vector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Tanh(v As Vector4) As Vector4
  overload: Vim.Math3d.MathOps.Tanh*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Inverse(Vim.Math3d.Vector4)
  commentId: M:Vim.Math3d.MathOps.Inverse(Vim.Math3d.Vector4)
  id: Inverse(Vim.Math3d.Vector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Inverse(Vector4)
  nameWithType: MathOps.Inverse(Vector4)
  fullName: Vim.Math3d.MathOps.Inverse(Vim.Math3d.Vector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Inverse
    path: ../src/MathOps.cs
    startLine: 455
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector4 Inverse(this Vector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector4
    return:
      type: Vim.Math3d.Vector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Inverse(v As Vector4) As Vector4
  overload: Vim.Math3d.MathOps.Inverse*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Ceiling(Vim.Math3d.Vector4)
  commentId: M:Vim.Math3d.MathOps.Ceiling(Vim.Math3d.Vector4)
  id: Ceiling(Vim.Math3d.Vector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Ceiling(Vector4)
  nameWithType: MathOps.Ceiling(Vector4)
  fullName: Vim.Math3d.MathOps.Ceiling(Vim.Math3d.Vector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Ceiling
    path: ../src/MathOps.cs
    startLine: 456
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector4 Ceiling(this Vector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector4
    return:
      type: Vim.Math3d.Vector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Ceiling(v As Vector4) As Vector4
  overload: Vim.Math3d.MathOps.Ceiling*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Floor(Vim.Math3d.Vector4)
  commentId: M:Vim.Math3d.MathOps.Floor(Vim.Math3d.Vector4)
  id: Floor(Vim.Math3d.Vector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Floor(Vector4)
  nameWithType: MathOps.Floor(Vector4)
  fullName: Vim.Math3d.MathOps.Floor(Vim.Math3d.Vector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Floor
    path: ../src/MathOps.cs
    startLine: 457
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector4 Floor(this Vector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector4
    return:
      type: Vim.Math3d.Vector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Floor(v As Vector4) As Vector4
  overload: Vim.Math3d.MathOps.Floor*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Round(Vim.Math3d.Vector4)
  commentId: M:Vim.Math3d.MathOps.Round(Vim.Math3d.Vector4)
  id: Round(Vim.Math3d.Vector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Round(Vector4)
  nameWithType: MathOps.Round(Vector4)
  fullName: Vim.Math3d.MathOps.Round(Vim.Math3d.Vector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Round
    path: ../src/MathOps.cs
    startLine: 458
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector4 Round(this Vector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector4
    return:
      type: Vim.Math3d.Vector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Round(v As Vector4) As Vector4
  overload: Vim.Math3d.MathOps.Round*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Truncate(Vim.Math3d.Vector4)
  commentId: M:Vim.Math3d.MathOps.Truncate(Vim.Math3d.Vector4)
  id: Truncate(Vim.Math3d.Vector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Truncate(Vector4)
  nameWithType: MathOps.Truncate(Vector4)
  fullName: Vim.Math3d.MathOps.Truncate(Vim.Math3d.Vector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Truncate
    path: ../src/MathOps.cs
    startLine: 459
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector4 Truncate(this Vector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector4
    return:
      type: Vim.Math3d.Vector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Truncate(v As Vector4) As Vector4
  overload: Vim.Math3d.MathOps.Truncate*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Sqr(Vim.Math3d.Vector4)
  commentId: M:Vim.Math3d.MathOps.Sqr(Vim.Math3d.Vector4)
  id: Sqr(Vim.Math3d.Vector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Sqr(Vector4)
  nameWithType: MathOps.Sqr(Vector4)
  fullName: Vim.Math3d.MathOps.Sqr(Vim.Math3d.Vector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Sqr
    path: ../src/MathOps.cs
    startLine: 460
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector4 Sqr(this Vector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector4
    return:
      type: Vim.Math3d.Vector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sqr(v As Vector4) As Vector4
  overload: Vim.Math3d.MathOps.Sqr*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Cube(Vim.Math3d.Vector4)
  commentId: M:Vim.Math3d.MathOps.Cube(Vim.Math3d.Vector4)
  id: Cube(Vim.Math3d.Vector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Cube(Vector4)
  nameWithType: MathOps.Cube(Vector4)
  fullName: Vim.Math3d.MathOps.Cube(Vim.Math3d.Vector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Cube
    path: ../src/MathOps.cs
    startLine: 461
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector4 Cube(this Vector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector4
    return:
      type: Vim.Math3d.Vector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Cube(v As Vector4) As Vector4
  overload: Vim.Math3d.MathOps.Cube*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.ToRadians(Vim.Math3d.Vector4)
  commentId: M:Vim.Math3d.MathOps.ToRadians(Vim.Math3d.Vector4)
  id: ToRadians(Vim.Math3d.Vector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: ToRadians(Vector4)
  nameWithType: MathOps.ToRadians(Vector4)
  fullName: Vim.Math3d.MathOps.ToRadians(Vim.Math3d.Vector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToRadians
    path: ../src/MathOps.cs
    startLine: 462
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector4 ToRadians(this Vector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector4
    return:
      type: Vim.Math3d.Vector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToRadians(v As Vector4) As Vector4
  overload: Vim.Math3d.MathOps.ToRadians*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.ToDegrees(Vim.Math3d.Vector4)
  commentId: M:Vim.Math3d.MathOps.ToDegrees(Vim.Math3d.Vector4)
  id: ToDegrees(Vim.Math3d.Vector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: ToDegrees(Vector4)
  nameWithType: MathOps.ToDegrees(Vector4)
  fullName: Vim.Math3d.MathOps.ToDegrees(Vim.Math3d.Vector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToDegrees
    path: ../src/MathOps.cs
    startLine: 463
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector4 ToDegrees(this Vector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector4
    return:
      type: Vim.Math3d.Vector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDegrees(v As Vector4) As Vector4
  overload: Vim.Math3d.MathOps.ToDegrees*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.DistanceSquared(Vim.Math3d.DVector2,Vim.Math3d.DVector2)
  commentId: M:Vim.Math3d.MathOps.DistanceSquared(Vim.Math3d.DVector2,Vim.Math3d.DVector2)
  id: DistanceSquared(Vim.Math3d.DVector2,Vim.Math3d.DVector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: DistanceSquared(DVector2, DVector2)
  nameWithType: MathOps.DistanceSquared(DVector2, DVector2)
  fullName: Vim.Math3d.MathOps.DistanceSquared(Vim.Math3d.DVector2, Vim.Math3d.DVector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: DistanceSquared
    path: ../src/MathOps.cs
    startLine: 465
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double DistanceSquared(this DVector2 v1, DVector2 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.DVector2
    - id: v2
      type: Vim.Math3d.DVector2
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DistanceSquared(v1 As DVector2, v2 As DVector2) As Double
  overload: Vim.Math3d.MathOps.DistanceSquared*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Distance(Vim.Math3d.DVector2,Vim.Math3d.DVector2)
  commentId: M:Vim.Math3d.MathOps.Distance(Vim.Math3d.DVector2,Vim.Math3d.DVector2)
  id: Distance(Vim.Math3d.DVector2,Vim.Math3d.DVector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Distance(DVector2, DVector2)
  nameWithType: MathOps.Distance(DVector2, DVector2)
  fullName: Vim.Math3d.MathOps.Distance(Vim.Math3d.DVector2, Vim.Math3d.DVector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Distance
    path: ../src/MathOps.cs
    startLine: 466
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double Distance(this DVector2 v1, DVector2 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.DVector2
    - id: v2
      type: Vim.Math3d.DVector2
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Distance(v1 As DVector2, v2 As DVector2) As Double
  overload: Vim.Math3d.MathOps.Distance*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.LengthSquared(Vim.Math3d.DVector2)
  commentId: M:Vim.Math3d.MathOps.LengthSquared(Vim.Math3d.DVector2)
  id: LengthSquared(Vim.Math3d.DVector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: LengthSquared(DVector2)
  nameWithType: MathOps.LengthSquared(DVector2)
  fullName: Vim.Math3d.MathOps.LengthSquared(Vim.Math3d.DVector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: LengthSquared
    path: ../src/MathOps.cs
    startLine: 467
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double LengthSquared(this DVector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector2
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LengthSquared(v As DVector2) As Double
  overload: Vim.Math3d.MathOps.LengthSquared*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Length(Vim.Math3d.DVector2)
  commentId: M:Vim.Math3d.MathOps.Length(Vim.Math3d.DVector2)
  id: Length(Vim.Math3d.DVector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Length(DVector2)
  nameWithType: MathOps.Length(DVector2)
  fullName: Vim.Math3d.MathOps.Length(Vim.Math3d.DVector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Length
    path: ../src/MathOps.cs
    startLine: 468
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double Length(this DVector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector2
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Length(v As DVector2) As Double
  overload: Vim.Math3d.MathOps.Length*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Normalize(Vim.Math3d.DVector2)
  commentId: M:Vim.Math3d.MathOps.Normalize(Vim.Math3d.DVector2)
  id: Normalize(Vim.Math3d.DVector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Normalize(DVector2)
  nameWithType: MathOps.Normalize(DVector2)
  fullName: Vim.Math3d.MathOps.Normalize(Vim.Math3d.DVector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Normalize
    path: ../src/MathOps.cs
    startLine: 469
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector2 Normalize(this DVector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector2
    return:
      type: Vim.Math3d.DVector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Normalize(v As DVector2) As DVector2
  overload: Vim.Math3d.MathOps.Normalize*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.SafeNormalize(Vim.Math3d.DVector2)
  commentId: M:Vim.Math3d.MathOps.SafeNormalize(Vim.Math3d.DVector2)
  id: SafeNormalize(Vim.Math3d.DVector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: SafeNormalize(DVector2)
  nameWithType: MathOps.SafeNormalize(DVector2)
  fullName: Vim.Math3d.MathOps.SafeNormalize(Vim.Math3d.DVector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SafeNormalize
    path: ../src/MathOps.cs
    startLine: 470
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector2 SafeNormalize(this DVector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector2
    return:
      type: Vim.Math3d.DVector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SafeNormalize(v As DVector2) As DVector2
  overload: Vim.Math3d.MathOps.SafeNormalize*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Dot(Vim.Math3d.DVector2,Vim.Math3d.DVector2)
  commentId: M:Vim.Math3d.MathOps.Dot(Vim.Math3d.DVector2,Vim.Math3d.DVector2)
  id: Dot(Vim.Math3d.DVector2,Vim.Math3d.DVector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Dot(DVector2, DVector2)
  nameWithType: MathOps.Dot(DVector2, DVector2)
  fullName: Vim.Math3d.MathOps.Dot(Vim.Math3d.DVector2, Vim.Math3d.DVector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Dot
    path: ../src/MathOps.cs
    startLine: 471
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double Dot(this DVector2 v1, DVector2 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.DVector2
    - id: v2
      type: Vim.Math3d.DVector2
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Dot(v1 As DVector2, v2 As DVector2) As Double
  overload: Vim.Math3d.MathOps.Dot*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Min(Vim.Math3d.DVector2,Vim.Math3d.DVector2)
  commentId: M:Vim.Math3d.MathOps.Min(Vim.Math3d.DVector2,Vim.Math3d.DVector2)
  id: Min(Vim.Math3d.DVector2,Vim.Math3d.DVector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Min(DVector2, DVector2)
  nameWithType: MathOps.Min(DVector2, DVector2)
  fullName: Vim.Math3d.MathOps.Min(Vim.Math3d.DVector2, Vim.Math3d.DVector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Min
    path: ../src/MathOps.cs
    startLine: 472
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector2 Min(this DVector2 v1, DVector2 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.DVector2
    - id: v2
      type: Vim.Math3d.DVector2
    return:
      type: Vim.Math3d.DVector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(v1 As DVector2, v2 As DVector2) As DVector2
  overload: Vim.Math3d.MathOps.Min*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Max(Vim.Math3d.DVector2,Vim.Math3d.DVector2)
  commentId: M:Vim.Math3d.MathOps.Max(Vim.Math3d.DVector2,Vim.Math3d.DVector2)
  id: Max(Vim.Math3d.DVector2,Vim.Math3d.DVector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Max(DVector2, DVector2)
  nameWithType: MathOps.Max(DVector2, DVector2)
  fullName: Vim.Math3d.MathOps.Max(Vim.Math3d.DVector2, Vim.Math3d.DVector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Max
    path: ../src/MathOps.cs
    startLine: 473
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector2 Max(this DVector2 v1, DVector2 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.DVector2
    - id: v2
      type: Vim.Math3d.DVector2
    return:
      type: Vim.Math3d.DVector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(v1 As DVector2, v2 As DVector2) As DVector2
  overload: Vim.Math3d.MathOps.Max*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.SquareRoot(Vim.Math3d.DVector2)
  commentId: M:Vim.Math3d.MathOps.SquareRoot(Vim.Math3d.DVector2)
  id: SquareRoot(Vim.Math3d.DVector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: SquareRoot(DVector2)
  nameWithType: MathOps.SquareRoot(DVector2)
  fullName: Vim.Math3d.MathOps.SquareRoot(Vim.Math3d.DVector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SquareRoot
    path: ../src/MathOps.cs
    startLine: 474
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector2 SquareRoot(this DVector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector2
    return:
      type: Vim.Math3d.DVector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SquareRoot(v As DVector2) As DVector2
  overload: Vim.Math3d.MathOps.SquareRoot*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Abs(Vim.Math3d.DVector2)
  commentId: M:Vim.Math3d.MathOps.Abs(Vim.Math3d.DVector2)
  id: Abs(Vim.Math3d.DVector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Abs(DVector2)
  nameWithType: MathOps.Abs(DVector2)
  fullName: Vim.Math3d.MathOps.Abs(Vim.Math3d.DVector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Abs
    path: ../src/MathOps.cs
    startLine: 476
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector2 Abs(this DVector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector2
    return:
      type: Vim.Math3d.DVector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Abs(v As DVector2) As DVector2
  overload: Vim.Math3d.MathOps.Abs*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Acos(Vim.Math3d.DVector2)
  commentId: M:Vim.Math3d.MathOps.Acos(Vim.Math3d.DVector2)
  id: Acos(Vim.Math3d.DVector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Acos(DVector2)
  nameWithType: MathOps.Acos(DVector2)
  fullName: Vim.Math3d.MathOps.Acos(Vim.Math3d.DVector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Acos
    path: ../src/MathOps.cs
    startLine: 477
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector2 Acos(this DVector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector2
    return:
      type: Vim.Math3d.DVector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Acos(v As DVector2) As DVector2
  overload: Vim.Math3d.MathOps.Acos*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Asin(Vim.Math3d.DVector2)
  commentId: M:Vim.Math3d.MathOps.Asin(Vim.Math3d.DVector2)
  id: Asin(Vim.Math3d.DVector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Asin(DVector2)
  nameWithType: MathOps.Asin(DVector2)
  fullName: Vim.Math3d.MathOps.Asin(Vim.Math3d.DVector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Asin
    path: ../src/MathOps.cs
    startLine: 478
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector2 Asin(this DVector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector2
    return:
      type: Vim.Math3d.DVector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Asin(v As DVector2) As DVector2
  overload: Vim.Math3d.MathOps.Asin*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Atan(Vim.Math3d.DVector2)
  commentId: M:Vim.Math3d.MathOps.Atan(Vim.Math3d.DVector2)
  id: Atan(Vim.Math3d.DVector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Atan(DVector2)
  nameWithType: MathOps.Atan(DVector2)
  fullName: Vim.Math3d.MathOps.Atan(Vim.Math3d.DVector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Atan
    path: ../src/MathOps.cs
    startLine: 479
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector2 Atan(this DVector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector2
    return:
      type: Vim.Math3d.DVector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Atan(v As DVector2) As DVector2
  overload: Vim.Math3d.MathOps.Atan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Cos(Vim.Math3d.DVector2)
  commentId: M:Vim.Math3d.MathOps.Cos(Vim.Math3d.DVector2)
  id: Cos(Vim.Math3d.DVector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Cos(DVector2)
  nameWithType: MathOps.Cos(DVector2)
  fullName: Vim.Math3d.MathOps.Cos(Vim.Math3d.DVector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Cos
    path: ../src/MathOps.cs
    startLine: 480
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector2 Cos(this DVector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector2
    return:
      type: Vim.Math3d.DVector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Cos(v As DVector2) As DVector2
  overload: Vim.Math3d.MathOps.Cos*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Cosh(Vim.Math3d.DVector2)
  commentId: M:Vim.Math3d.MathOps.Cosh(Vim.Math3d.DVector2)
  id: Cosh(Vim.Math3d.DVector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Cosh(DVector2)
  nameWithType: MathOps.Cosh(DVector2)
  fullName: Vim.Math3d.MathOps.Cosh(Vim.Math3d.DVector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Cosh
    path: ../src/MathOps.cs
    startLine: 481
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector2 Cosh(this DVector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector2
    return:
      type: Vim.Math3d.DVector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Cosh(v As DVector2) As DVector2
  overload: Vim.Math3d.MathOps.Cosh*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Exp(Vim.Math3d.DVector2)
  commentId: M:Vim.Math3d.MathOps.Exp(Vim.Math3d.DVector2)
  id: Exp(Vim.Math3d.DVector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Exp(DVector2)
  nameWithType: MathOps.Exp(DVector2)
  fullName: Vim.Math3d.MathOps.Exp(Vim.Math3d.DVector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Exp
    path: ../src/MathOps.cs
    startLine: 482
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector2 Exp(this DVector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector2
    return:
      type: Vim.Math3d.DVector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Exp(v As DVector2) As DVector2
  overload: Vim.Math3d.MathOps.Exp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Log(Vim.Math3d.DVector2)
  commentId: M:Vim.Math3d.MathOps.Log(Vim.Math3d.DVector2)
  id: Log(Vim.Math3d.DVector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Log(DVector2)
  nameWithType: MathOps.Log(DVector2)
  fullName: Vim.Math3d.MathOps.Log(Vim.Math3d.DVector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Log
    path: ../src/MathOps.cs
    startLine: 483
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector2 Log(this DVector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector2
    return:
      type: Vim.Math3d.DVector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Log(v As DVector2) As DVector2
  overload: Vim.Math3d.MathOps.Log*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Log10(Vim.Math3d.DVector2)
  commentId: M:Vim.Math3d.MathOps.Log10(Vim.Math3d.DVector2)
  id: Log10(Vim.Math3d.DVector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Log10(DVector2)
  nameWithType: MathOps.Log10(DVector2)
  fullName: Vim.Math3d.MathOps.Log10(Vim.Math3d.DVector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Log10
    path: ../src/MathOps.cs
    startLine: 484
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector2 Log10(this DVector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector2
    return:
      type: Vim.Math3d.DVector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Log10(v As DVector2) As DVector2
  overload: Vim.Math3d.MathOps.Log10*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Sin(Vim.Math3d.DVector2)
  commentId: M:Vim.Math3d.MathOps.Sin(Vim.Math3d.DVector2)
  id: Sin(Vim.Math3d.DVector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Sin(DVector2)
  nameWithType: MathOps.Sin(DVector2)
  fullName: Vim.Math3d.MathOps.Sin(Vim.Math3d.DVector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Sin
    path: ../src/MathOps.cs
    startLine: 485
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector2 Sin(this DVector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector2
    return:
      type: Vim.Math3d.DVector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sin(v As DVector2) As DVector2
  overload: Vim.Math3d.MathOps.Sin*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Sinh(Vim.Math3d.DVector2)
  commentId: M:Vim.Math3d.MathOps.Sinh(Vim.Math3d.DVector2)
  id: Sinh(Vim.Math3d.DVector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Sinh(DVector2)
  nameWithType: MathOps.Sinh(DVector2)
  fullName: Vim.Math3d.MathOps.Sinh(Vim.Math3d.DVector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Sinh
    path: ../src/MathOps.cs
    startLine: 486
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector2 Sinh(this DVector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector2
    return:
      type: Vim.Math3d.DVector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sinh(v As DVector2) As DVector2
  overload: Vim.Math3d.MathOps.Sinh*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Sqrt(Vim.Math3d.DVector2)
  commentId: M:Vim.Math3d.MathOps.Sqrt(Vim.Math3d.DVector2)
  id: Sqrt(Vim.Math3d.DVector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Sqrt(DVector2)
  nameWithType: MathOps.Sqrt(DVector2)
  fullName: Vim.Math3d.MathOps.Sqrt(Vim.Math3d.DVector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Sqrt
    path: ../src/MathOps.cs
    startLine: 487
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector2 Sqrt(this DVector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector2
    return:
      type: Vim.Math3d.DVector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sqrt(v As DVector2) As DVector2
  overload: Vim.Math3d.MathOps.Sqrt*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Tan(Vim.Math3d.DVector2)
  commentId: M:Vim.Math3d.MathOps.Tan(Vim.Math3d.DVector2)
  id: Tan(Vim.Math3d.DVector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Tan(DVector2)
  nameWithType: MathOps.Tan(DVector2)
  fullName: Vim.Math3d.MathOps.Tan(Vim.Math3d.DVector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Tan
    path: ../src/MathOps.cs
    startLine: 488
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector2 Tan(this DVector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector2
    return:
      type: Vim.Math3d.DVector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Tan(v As DVector2) As DVector2
  overload: Vim.Math3d.MathOps.Tan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Tanh(Vim.Math3d.DVector2)
  commentId: M:Vim.Math3d.MathOps.Tanh(Vim.Math3d.DVector2)
  id: Tanh(Vim.Math3d.DVector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Tanh(DVector2)
  nameWithType: MathOps.Tanh(DVector2)
  fullName: Vim.Math3d.MathOps.Tanh(Vim.Math3d.DVector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Tanh
    path: ../src/MathOps.cs
    startLine: 489
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector2 Tanh(this DVector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector2
    return:
      type: Vim.Math3d.DVector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Tanh(v As DVector2) As DVector2
  overload: Vim.Math3d.MathOps.Tanh*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Inverse(Vim.Math3d.DVector2)
  commentId: M:Vim.Math3d.MathOps.Inverse(Vim.Math3d.DVector2)
  id: Inverse(Vim.Math3d.DVector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Inverse(DVector2)
  nameWithType: MathOps.Inverse(DVector2)
  fullName: Vim.Math3d.MathOps.Inverse(Vim.Math3d.DVector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Inverse
    path: ../src/MathOps.cs
    startLine: 490
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector2 Inverse(this DVector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector2
    return:
      type: Vim.Math3d.DVector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Inverse(v As DVector2) As DVector2
  overload: Vim.Math3d.MathOps.Inverse*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Ceiling(Vim.Math3d.DVector2)
  commentId: M:Vim.Math3d.MathOps.Ceiling(Vim.Math3d.DVector2)
  id: Ceiling(Vim.Math3d.DVector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Ceiling(DVector2)
  nameWithType: MathOps.Ceiling(DVector2)
  fullName: Vim.Math3d.MathOps.Ceiling(Vim.Math3d.DVector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Ceiling
    path: ../src/MathOps.cs
    startLine: 491
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector2 Ceiling(this DVector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector2
    return:
      type: Vim.Math3d.DVector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Ceiling(v As DVector2) As DVector2
  overload: Vim.Math3d.MathOps.Ceiling*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Floor(Vim.Math3d.DVector2)
  commentId: M:Vim.Math3d.MathOps.Floor(Vim.Math3d.DVector2)
  id: Floor(Vim.Math3d.DVector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Floor(DVector2)
  nameWithType: MathOps.Floor(DVector2)
  fullName: Vim.Math3d.MathOps.Floor(Vim.Math3d.DVector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Floor
    path: ../src/MathOps.cs
    startLine: 492
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector2 Floor(this DVector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector2
    return:
      type: Vim.Math3d.DVector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Floor(v As DVector2) As DVector2
  overload: Vim.Math3d.MathOps.Floor*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Round(Vim.Math3d.DVector2)
  commentId: M:Vim.Math3d.MathOps.Round(Vim.Math3d.DVector2)
  id: Round(Vim.Math3d.DVector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Round(DVector2)
  nameWithType: MathOps.Round(DVector2)
  fullName: Vim.Math3d.MathOps.Round(Vim.Math3d.DVector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Round
    path: ../src/MathOps.cs
    startLine: 493
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector2 Round(this DVector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector2
    return:
      type: Vim.Math3d.DVector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Round(v As DVector2) As DVector2
  overload: Vim.Math3d.MathOps.Round*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Truncate(Vim.Math3d.DVector2)
  commentId: M:Vim.Math3d.MathOps.Truncate(Vim.Math3d.DVector2)
  id: Truncate(Vim.Math3d.DVector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Truncate(DVector2)
  nameWithType: MathOps.Truncate(DVector2)
  fullName: Vim.Math3d.MathOps.Truncate(Vim.Math3d.DVector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Truncate
    path: ../src/MathOps.cs
    startLine: 494
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector2 Truncate(this DVector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector2
    return:
      type: Vim.Math3d.DVector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Truncate(v As DVector2) As DVector2
  overload: Vim.Math3d.MathOps.Truncate*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Sqr(Vim.Math3d.DVector2)
  commentId: M:Vim.Math3d.MathOps.Sqr(Vim.Math3d.DVector2)
  id: Sqr(Vim.Math3d.DVector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Sqr(DVector2)
  nameWithType: MathOps.Sqr(DVector2)
  fullName: Vim.Math3d.MathOps.Sqr(Vim.Math3d.DVector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Sqr
    path: ../src/MathOps.cs
    startLine: 495
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector2 Sqr(this DVector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector2
    return:
      type: Vim.Math3d.DVector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sqr(v As DVector2) As DVector2
  overload: Vim.Math3d.MathOps.Sqr*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Cube(Vim.Math3d.DVector2)
  commentId: M:Vim.Math3d.MathOps.Cube(Vim.Math3d.DVector2)
  id: Cube(Vim.Math3d.DVector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Cube(DVector2)
  nameWithType: MathOps.Cube(DVector2)
  fullName: Vim.Math3d.MathOps.Cube(Vim.Math3d.DVector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Cube
    path: ../src/MathOps.cs
    startLine: 496
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector2 Cube(this DVector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector2
    return:
      type: Vim.Math3d.DVector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Cube(v As DVector2) As DVector2
  overload: Vim.Math3d.MathOps.Cube*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.ToRadians(Vim.Math3d.DVector2)
  commentId: M:Vim.Math3d.MathOps.ToRadians(Vim.Math3d.DVector2)
  id: ToRadians(Vim.Math3d.DVector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: ToRadians(DVector2)
  nameWithType: MathOps.ToRadians(DVector2)
  fullName: Vim.Math3d.MathOps.ToRadians(Vim.Math3d.DVector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToRadians
    path: ../src/MathOps.cs
    startLine: 497
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector2 ToRadians(this DVector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector2
    return:
      type: Vim.Math3d.DVector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToRadians(v As DVector2) As DVector2
  overload: Vim.Math3d.MathOps.ToRadians*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.ToDegrees(Vim.Math3d.DVector2)
  commentId: M:Vim.Math3d.MathOps.ToDegrees(Vim.Math3d.DVector2)
  id: ToDegrees(Vim.Math3d.DVector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: ToDegrees(DVector2)
  nameWithType: MathOps.ToDegrees(DVector2)
  fullName: Vim.Math3d.MathOps.ToDegrees(Vim.Math3d.DVector2)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToDegrees
    path: ../src/MathOps.cs
    startLine: 498
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector2 ToDegrees(this DVector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector2
    return:
      type: Vim.Math3d.DVector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDegrees(v As DVector2) As DVector2
  overload: Vim.Math3d.MathOps.ToDegrees*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.DistanceSquared(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  commentId: M:Vim.Math3d.MathOps.DistanceSquared(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  id: DistanceSquared(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: DistanceSquared(DVector3, DVector3)
  nameWithType: MathOps.DistanceSquared(DVector3, DVector3)
  fullName: Vim.Math3d.MathOps.DistanceSquared(Vim.Math3d.DVector3, Vim.Math3d.DVector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: DistanceSquared
    path: ../src/MathOps.cs
    startLine: 500
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double DistanceSquared(this DVector3 v1, DVector3 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.DVector3
    - id: v2
      type: Vim.Math3d.DVector3
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DistanceSquared(v1 As DVector3, v2 As DVector3) As Double
  overload: Vim.Math3d.MathOps.DistanceSquared*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Distance(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  commentId: M:Vim.Math3d.MathOps.Distance(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  id: Distance(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Distance(DVector3, DVector3)
  nameWithType: MathOps.Distance(DVector3, DVector3)
  fullName: Vim.Math3d.MathOps.Distance(Vim.Math3d.DVector3, Vim.Math3d.DVector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Distance
    path: ../src/MathOps.cs
    startLine: 501
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double Distance(this DVector3 v1, DVector3 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.DVector3
    - id: v2
      type: Vim.Math3d.DVector3
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Distance(v1 As DVector3, v2 As DVector3) As Double
  overload: Vim.Math3d.MathOps.Distance*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.LengthSquared(Vim.Math3d.DVector3)
  commentId: M:Vim.Math3d.MathOps.LengthSquared(Vim.Math3d.DVector3)
  id: LengthSquared(Vim.Math3d.DVector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: LengthSquared(DVector3)
  nameWithType: MathOps.LengthSquared(DVector3)
  fullName: Vim.Math3d.MathOps.LengthSquared(Vim.Math3d.DVector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: LengthSquared
    path: ../src/MathOps.cs
    startLine: 502
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double LengthSquared(this DVector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector3
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LengthSquared(v As DVector3) As Double
  overload: Vim.Math3d.MathOps.LengthSquared*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Length(Vim.Math3d.DVector3)
  commentId: M:Vim.Math3d.MathOps.Length(Vim.Math3d.DVector3)
  id: Length(Vim.Math3d.DVector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Length(DVector3)
  nameWithType: MathOps.Length(DVector3)
  fullName: Vim.Math3d.MathOps.Length(Vim.Math3d.DVector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Length
    path: ../src/MathOps.cs
    startLine: 503
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double Length(this DVector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector3
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Length(v As DVector3) As Double
  overload: Vim.Math3d.MathOps.Length*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Normalize(Vim.Math3d.DVector3)
  commentId: M:Vim.Math3d.MathOps.Normalize(Vim.Math3d.DVector3)
  id: Normalize(Vim.Math3d.DVector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Normalize(DVector3)
  nameWithType: MathOps.Normalize(DVector3)
  fullName: Vim.Math3d.MathOps.Normalize(Vim.Math3d.DVector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Normalize
    path: ../src/MathOps.cs
    startLine: 504
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector3 Normalize(this DVector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector3
    return:
      type: Vim.Math3d.DVector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Normalize(v As DVector3) As DVector3
  overload: Vim.Math3d.MathOps.Normalize*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.SafeNormalize(Vim.Math3d.DVector3)
  commentId: M:Vim.Math3d.MathOps.SafeNormalize(Vim.Math3d.DVector3)
  id: SafeNormalize(Vim.Math3d.DVector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: SafeNormalize(DVector3)
  nameWithType: MathOps.SafeNormalize(DVector3)
  fullName: Vim.Math3d.MathOps.SafeNormalize(Vim.Math3d.DVector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SafeNormalize
    path: ../src/MathOps.cs
    startLine: 505
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector3 SafeNormalize(this DVector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector3
    return:
      type: Vim.Math3d.DVector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SafeNormalize(v As DVector3) As DVector3
  overload: Vim.Math3d.MathOps.SafeNormalize*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Dot(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  commentId: M:Vim.Math3d.MathOps.Dot(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  id: Dot(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Dot(DVector3, DVector3)
  nameWithType: MathOps.Dot(DVector3, DVector3)
  fullName: Vim.Math3d.MathOps.Dot(Vim.Math3d.DVector3, Vim.Math3d.DVector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Dot
    path: ../src/MathOps.cs
    startLine: 506
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double Dot(this DVector3 v1, DVector3 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.DVector3
    - id: v2
      type: Vim.Math3d.DVector3
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Dot(v1 As DVector3, v2 As DVector3) As Double
  overload: Vim.Math3d.MathOps.Dot*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Min(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  commentId: M:Vim.Math3d.MathOps.Min(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  id: Min(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Min(DVector3, DVector3)
  nameWithType: MathOps.Min(DVector3, DVector3)
  fullName: Vim.Math3d.MathOps.Min(Vim.Math3d.DVector3, Vim.Math3d.DVector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Min
    path: ../src/MathOps.cs
    startLine: 507
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector3 Min(this DVector3 v1, DVector3 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.DVector3
    - id: v2
      type: Vim.Math3d.DVector3
    return:
      type: Vim.Math3d.DVector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(v1 As DVector3, v2 As DVector3) As DVector3
  overload: Vim.Math3d.MathOps.Min*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Max(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  commentId: M:Vim.Math3d.MathOps.Max(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  id: Max(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Max(DVector3, DVector3)
  nameWithType: MathOps.Max(DVector3, DVector3)
  fullName: Vim.Math3d.MathOps.Max(Vim.Math3d.DVector3, Vim.Math3d.DVector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Max
    path: ../src/MathOps.cs
    startLine: 508
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector3 Max(this DVector3 v1, DVector3 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.DVector3
    - id: v2
      type: Vim.Math3d.DVector3
    return:
      type: Vim.Math3d.DVector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(v1 As DVector3, v2 As DVector3) As DVector3
  overload: Vim.Math3d.MathOps.Max*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.SquareRoot(Vim.Math3d.DVector3)
  commentId: M:Vim.Math3d.MathOps.SquareRoot(Vim.Math3d.DVector3)
  id: SquareRoot(Vim.Math3d.DVector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: SquareRoot(DVector3)
  nameWithType: MathOps.SquareRoot(DVector3)
  fullName: Vim.Math3d.MathOps.SquareRoot(Vim.Math3d.DVector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SquareRoot
    path: ../src/MathOps.cs
    startLine: 509
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector3 SquareRoot(this DVector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector3
    return:
      type: Vim.Math3d.DVector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SquareRoot(v As DVector3) As DVector3
  overload: Vim.Math3d.MathOps.SquareRoot*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Abs(Vim.Math3d.DVector3)
  commentId: M:Vim.Math3d.MathOps.Abs(Vim.Math3d.DVector3)
  id: Abs(Vim.Math3d.DVector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Abs(DVector3)
  nameWithType: MathOps.Abs(DVector3)
  fullName: Vim.Math3d.MathOps.Abs(Vim.Math3d.DVector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Abs
    path: ../src/MathOps.cs
    startLine: 511
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector3 Abs(this DVector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector3
    return:
      type: Vim.Math3d.DVector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Abs(v As DVector3) As DVector3
  overload: Vim.Math3d.MathOps.Abs*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Acos(Vim.Math3d.DVector3)
  commentId: M:Vim.Math3d.MathOps.Acos(Vim.Math3d.DVector3)
  id: Acos(Vim.Math3d.DVector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Acos(DVector3)
  nameWithType: MathOps.Acos(DVector3)
  fullName: Vim.Math3d.MathOps.Acos(Vim.Math3d.DVector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Acos
    path: ../src/MathOps.cs
    startLine: 512
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector3 Acos(this DVector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector3
    return:
      type: Vim.Math3d.DVector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Acos(v As DVector3) As DVector3
  overload: Vim.Math3d.MathOps.Acos*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Asin(Vim.Math3d.DVector3)
  commentId: M:Vim.Math3d.MathOps.Asin(Vim.Math3d.DVector3)
  id: Asin(Vim.Math3d.DVector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Asin(DVector3)
  nameWithType: MathOps.Asin(DVector3)
  fullName: Vim.Math3d.MathOps.Asin(Vim.Math3d.DVector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Asin
    path: ../src/MathOps.cs
    startLine: 513
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector3 Asin(this DVector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector3
    return:
      type: Vim.Math3d.DVector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Asin(v As DVector3) As DVector3
  overload: Vim.Math3d.MathOps.Asin*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Atan(Vim.Math3d.DVector3)
  commentId: M:Vim.Math3d.MathOps.Atan(Vim.Math3d.DVector3)
  id: Atan(Vim.Math3d.DVector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Atan(DVector3)
  nameWithType: MathOps.Atan(DVector3)
  fullName: Vim.Math3d.MathOps.Atan(Vim.Math3d.DVector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Atan
    path: ../src/MathOps.cs
    startLine: 514
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector3 Atan(this DVector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector3
    return:
      type: Vim.Math3d.DVector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Atan(v As DVector3) As DVector3
  overload: Vim.Math3d.MathOps.Atan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Cos(Vim.Math3d.DVector3)
  commentId: M:Vim.Math3d.MathOps.Cos(Vim.Math3d.DVector3)
  id: Cos(Vim.Math3d.DVector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Cos(DVector3)
  nameWithType: MathOps.Cos(DVector3)
  fullName: Vim.Math3d.MathOps.Cos(Vim.Math3d.DVector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Cos
    path: ../src/MathOps.cs
    startLine: 515
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector3 Cos(this DVector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector3
    return:
      type: Vim.Math3d.DVector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Cos(v As DVector3) As DVector3
  overload: Vim.Math3d.MathOps.Cos*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Cosh(Vim.Math3d.DVector3)
  commentId: M:Vim.Math3d.MathOps.Cosh(Vim.Math3d.DVector3)
  id: Cosh(Vim.Math3d.DVector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Cosh(DVector3)
  nameWithType: MathOps.Cosh(DVector3)
  fullName: Vim.Math3d.MathOps.Cosh(Vim.Math3d.DVector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Cosh
    path: ../src/MathOps.cs
    startLine: 516
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector3 Cosh(this DVector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector3
    return:
      type: Vim.Math3d.DVector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Cosh(v As DVector3) As DVector3
  overload: Vim.Math3d.MathOps.Cosh*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Exp(Vim.Math3d.DVector3)
  commentId: M:Vim.Math3d.MathOps.Exp(Vim.Math3d.DVector3)
  id: Exp(Vim.Math3d.DVector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Exp(DVector3)
  nameWithType: MathOps.Exp(DVector3)
  fullName: Vim.Math3d.MathOps.Exp(Vim.Math3d.DVector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Exp
    path: ../src/MathOps.cs
    startLine: 517
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector3 Exp(this DVector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector3
    return:
      type: Vim.Math3d.DVector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Exp(v As DVector3) As DVector3
  overload: Vim.Math3d.MathOps.Exp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Log(Vim.Math3d.DVector3)
  commentId: M:Vim.Math3d.MathOps.Log(Vim.Math3d.DVector3)
  id: Log(Vim.Math3d.DVector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Log(DVector3)
  nameWithType: MathOps.Log(DVector3)
  fullName: Vim.Math3d.MathOps.Log(Vim.Math3d.DVector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Log
    path: ../src/MathOps.cs
    startLine: 518
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector3 Log(this DVector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector3
    return:
      type: Vim.Math3d.DVector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Log(v As DVector3) As DVector3
  overload: Vim.Math3d.MathOps.Log*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Log10(Vim.Math3d.DVector3)
  commentId: M:Vim.Math3d.MathOps.Log10(Vim.Math3d.DVector3)
  id: Log10(Vim.Math3d.DVector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Log10(DVector3)
  nameWithType: MathOps.Log10(DVector3)
  fullName: Vim.Math3d.MathOps.Log10(Vim.Math3d.DVector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Log10
    path: ../src/MathOps.cs
    startLine: 519
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector3 Log10(this DVector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector3
    return:
      type: Vim.Math3d.DVector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Log10(v As DVector3) As DVector3
  overload: Vim.Math3d.MathOps.Log10*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Sin(Vim.Math3d.DVector3)
  commentId: M:Vim.Math3d.MathOps.Sin(Vim.Math3d.DVector3)
  id: Sin(Vim.Math3d.DVector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Sin(DVector3)
  nameWithType: MathOps.Sin(DVector3)
  fullName: Vim.Math3d.MathOps.Sin(Vim.Math3d.DVector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Sin
    path: ../src/MathOps.cs
    startLine: 520
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector3 Sin(this DVector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector3
    return:
      type: Vim.Math3d.DVector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sin(v As DVector3) As DVector3
  overload: Vim.Math3d.MathOps.Sin*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Sinh(Vim.Math3d.DVector3)
  commentId: M:Vim.Math3d.MathOps.Sinh(Vim.Math3d.DVector3)
  id: Sinh(Vim.Math3d.DVector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Sinh(DVector3)
  nameWithType: MathOps.Sinh(DVector3)
  fullName: Vim.Math3d.MathOps.Sinh(Vim.Math3d.DVector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Sinh
    path: ../src/MathOps.cs
    startLine: 521
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector3 Sinh(this DVector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector3
    return:
      type: Vim.Math3d.DVector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sinh(v As DVector3) As DVector3
  overload: Vim.Math3d.MathOps.Sinh*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Sqrt(Vim.Math3d.DVector3)
  commentId: M:Vim.Math3d.MathOps.Sqrt(Vim.Math3d.DVector3)
  id: Sqrt(Vim.Math3d.DVector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Sqrt(DVector3)
  nameWithType: MathOps.Sqrt(DVector3)
  fullName: Vim.Math3d.MathOps.Sqrt(Vim.Math3d.DVector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Sqrt
    path: ../src/MathOps.cs
    startLine: 522
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector3 Sqrt(this DVector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector3
    return:
      type: Vim.Math3d.DVector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sqrt(v As DVector3) As DVector3
  overload: Vim.Math3d.MathOps.Sqrt*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Tan(Vim.Math3d.DVector3)
  commentId: M:Vim.Math3d.MathOps.Tan(Vim.Math3d.DVector3)
  id: Tan(Vim.Math3d.DVector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Tan(DVector3)
  nameWithType: MathOps.Tan(DVector3)
  fullName: Vim.Math3d.MathOps.Tan(Vim.Math3d.DVector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Tan
    path: ../src/MathOps.cs
    startLine: 523
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector3 Tan(this DVector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector3
    return:
      type: Vim.Math3d.DVector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Tan(v As DVector3) As DVector3
  overload: Vim.Math3d.MathOps.Tan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Tanh(Vim.Math3d.DVector3)
  commentId: M:Vim.Math3d.MathOps.Tanh(Vim.Math3d.DVector3)
  id: Tanh(Vim.Math3d.DVector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Tanh(DVector3)
  nameWithType: MathOps.Tanh(DVector3)
  fullName: Vim.Math3d.MathOps.Tanh(Vim.Math3d.DVector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Tanh
    path: ../src/MathOps.cs
    startLine: 524
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector3 Tanh(this DVector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector3
    return:
      type: Vim.Math3d.DVector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Tanh(v As DVector3) As DVector3
  overload: Vim.Math3d.MathOps.Tanh*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Inverse(Vim.Math3d.DVector3)
  commentId: M:Vim.Math3d.MathOps.Inverse(Vim.Math3d.DVector3)
  id: Inverse(Vim.Math3d.DVector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Inverse(DVector3)
  nameWithType: MathOps.Inverse(DVector3)
  fullName: Vim.Math3d.MathOps.Inverse(Vim.Math3d.DVector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Inverse
    path: ../src/MathOps.cs
    startLine: 525
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector3 Inverse(this DVector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector3
    return:
      type: Vim.Math3d.DVector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Inverse(v As DVector3) As DVector3
  overload: Vim.Math3d.MathOps.Inverse*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Ceiling(Vim.Math3d.DVector3)
  commentId: M:Vim.Math3d.MathOps.Ceiling(Vim.Math3d.DVector3)
  id: Ceiling(Vim.Math3d.DVector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Ceiling(DVector3)
  nameWithType: MathOps.Ceiling(DVector3)
  fullName: Vim.Math3d.MathOps.Ceiling(Vim.Math3d.DVector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Ceiling
    path: ../src/MathOps.cs
    startLine: 526
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector3 Ceiling(this DVector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector3
    return:
      type: Vim.Math3d.DVector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Ceiling(v As DVector3) As DVector3
  overload: Vim.Math3d.MathOps.Ceiling*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Floor(Vim.Math3d.DVector3)
  commentId: M:Vim.Math3d.MathOps.Floor(Vim.Math3d.DVector3)
  id: Floor(Vim.Math3d.DVector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Floor(DVector3)
  nameWithType: MathOps.Floor(DVector3)
  fullName: Vim.Math3d.MathOps.Floor(Vim.Math3d.DVector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Floor
    path: ../src/MathOps.cs
    startLine: 527
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector3 Floor(this DVector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector3
    return:
      type: Vim.Math3d.DVector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Floor(v As DVector3) As DVector3
  overload: Vim.Math3d.MathOps.Floor*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Round(Vim.Math3d.DVector3)
  commentId: M:Vim.Math3d.MathOps.Round(Vim.Math3d.DVector3)
  id: Round(Vim.Math3d.DVector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Round(DVector3)
  nameWithType: MathOps.Round(DVector3)
  fullName: Vim.Math3d.MathOps.Round(Vim.Math3d.DVector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Round
    path: ../src/MathOps.cs
    startLine: 528
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector3 Round(this DVector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector3
    return:
      type: Vim.Math3d.DVector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Round(v As DVector3) As DVector3
  overload: Vim.Math3d.MathOps.Round*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Truncate(Vim.Math3d.DVector3)
  commentId: M:Vim.Math3d.MathOps.Truncate(Vim.Math3d.DVector3)
  id: Truncate(Vim.Math3d.DVector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Truncate(DVector3)
  nameWithType: MathOps.Truncate(DVector3)
  fullName: Vim.Math3d.MathOps.Truncate(Vim.Math3d.DVector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Truncate
    path: ../src/MathOps.cs
    startLine: 529
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector3 Truncate(this DVector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector3
    return:
      type: Vim.Math3d.DVector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Truncate(v As DVector3) As DVector3
  overload: Vim.Math3d.MathOps.Truncate*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Sqr(Vim.Math3d.DVector3)
  commentId: M:Vim.Math3d.MathOps.Sqr(Vim.Math3d.DVector3)
  id: Sqr(Vim.Math3d.DVector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Sqr(DVector3)
  nameWithType: MathOps.Sqr(DVector3)
  fullName: Vim.Math3d.MathOps.Sqr(Vim.Math3d.DVector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Sqr
    path: ../src/MathOps.cs
    startLine: 530
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector3 Sqr(this DVector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector3
    return:
      type: Vim.Math3d.DVector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sqr(v As DVector3) As DVector3
  overload: Vim.Math3d.MathOps.Sqr*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Cube(Vim.Math3d.DVector3)
  commentId: M:Vim.Math3d.MathOps.Cube(Vim.Math3d.DVector3)
  id: Cube(Vim.Math3d.DVector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Cube(DVector3)
  nameWithType: MathOps.Cube(DVector3)
  fullName: Vim.Math3d.MathOps.Cube(Vim.Math3d.DVector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Cube
    path: ../src/MathOps.cs
    startLine: 531
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector3 Cube(this DVector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector3
    return:
      type: Vim.Math3d.DVector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Cube(v As DVector3) As DVector3
  overload: Vim.Math3d.MathOps.Cube*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.ToRadians(Vim.Math3d.DVector3)
  commentId: M:Vim.Math3d.MathOps.ToRadians(Vim.Math3d.DVector3)
  id: ToRadians(Vim.Math3d.DVector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: ToRadians(DVector3)
  nameWithType: MathOps.ToRadians(DVector3)
  fullName: Vim.Math3d.MathOps.ToRadians(Vim.Math3d.DVector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToRadians
    path: ../src/MathOps.cs
    startLine: 532
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector3 ToRadians(this DVector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector3
    return:
      type: Vim.Math3d.DVector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToRadians(v As DVector3) As DVector3
  overload: Vim.Math3d.MathOps.ToRadians*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.ToDegrees(Vim.Math3d.DVector3)
  commentId: M:Vim.Math3d.MathOps.ToDegrees(Vim.Math3d.DVector3)
  id: ToDegrees(Vim.Math3d.DVector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: ToDegrees(DVector3)
  nameWithType: MathOps.ToDegrees(DVector3)
  fullName: Vim.Math3d.MathOps.ToDegrees(Vim.Math3d.DVector3)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToDegrees
    path: ../src/MathOps.cs
    startLine: 533
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector3 ToDegrees(this DVector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector3
    return:
      type: Vim.Math3d.DVector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDegrees(v As DVector3) As DVector3
  overload: Vim.Math3d.MathOps.ToDegrees*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.DistanceSquared(Vim.Math3d.DVector4,Vim.Math3d.DVector4)
  commentId: M:Vim.Math3d.MathOps.DistanceSquared(Vim.Math3d.DVector4,Vim.Math3d.DVector4)
  id: DistanceSquared(Vim.Math3d.DVector4,Vim.Math3d.DVector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: DistanceSquared(DVector4, DVector4)
  nameWithType: MathOps.DistanceSquared(DVector4, DVector4)
  fullName: Vim.Math3d.MathOps.DistanceSquared(Vim.Math3d.DVector4, Vim.Math3d.DVector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: DistanceSquared
    path: ../src/MathOps.cs
    startLine: 535
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double DistanceSquared(this DVector4 v1, DVector4 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.DVector4
    - id: v2
      type: Vim.Math3d.DVector4
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DistanceSquared(v1 As DVector4, v2 As DVector4) As Double
  overload: Vim.Math3d.MathOps.DistanceSquared*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Distance(Vim.Math3d.DVector4,Vim.Math3d.DVector4)
  commentId: M:Vim.Math3d.MathOps.Distance(Vim.Math3d.DVector4,Vim.Math3d.DVector4)
  id: Distance(Vim.Math3d.DVector4,Vim.Math3d.DVector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Distance(DVector4, DVector4)
  nameWithType: MathOps.Distance(DVector4, DVector4)
  fullName: Vim.Math3d.MathOps.Distance(Vim.Math3d.DVector4, Vim.Math3d.DVector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Distance
    path: ../src/MathOps.cs
    startLine: 536
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double Distance(this DVector4 v1, DVector4 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.DVector4
    - id: v2
      type: Vim.Math3d.DVector4
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Distance(v1 As DVector4, v2 As DVector4) As Double
  overload: Vim.Math3d.MathOps.Distance*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.LengthSquared(Vim.Math3d.DVector4)
  commentId: M:Vim.Math3d.MathOps.LengthSquared(Vim.Math3d.DVector4)
  id: LengthSquared(Vim.Math3d.DVector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: LengthSquared(DVector4)
  nameWithType: MathOps.LengthSquared(DVector4)
  fullName: Vim.Math3d.MathOps.LengthSquared(Vim.Math3d.DVector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: LengthSquared
    path: ../src/MathOps.cs
    startLine: 537
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double LengthSquared(this DVector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector4
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LengthSquared(v As DVector4) As Double
  overload: Vim.Math3d.MathOps.LengthSquared*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Length(Vim.Math3d.DVector4)
  commentId: M:Vim.Math3d.MathOps.Length(Vim.Math3d.DVector4)
  id: Length(Vim.Math3d.DVector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Length(DVector4)
  nameWithType: MathOps.Length(DVector4)
  fullName: Vim.Math3d.MathOps.Length(Vim.Math3d.DVector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Length
    path: ../src/MathOps.cs
    startLine: 538
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double Length(this DVector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector4
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Length(v As DVector4) As Double
  overload: Vim.Math3d.MathOps.Length*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Normalize(Vim.Math3d.DVector4)
  commentId: M:Vim.Math3d.MathOps.Normalize(Vim.Math3d.DVector4)
  id: Normalize(Vim.Math3d.DVector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Normalize(DVector4)
  nameWithType: MathOps.Normalize(DVector4)
  fullName: Vim.Math3d.MathOps.Normalize(Vim.Math3d.DVector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Normalize
    path: ../src/MathOps.cs
    startLine: 539
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector4 Normalize(this DVector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector4
    return:
      type: Vim.Math3d.DVector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Normalize(v As DVector4) As DVector4
  overload: Vim.Math3d.MathOps.Normalize*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.SafeNormalize(Vim.Math3d.DVector4)
  commentId: M:Vim.Math3d.MathOps.SafeNormalize(Vim.Math3d.DVector4)
  id: SafeNormalize(Vim.Math3d.DVector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: SafeNormalize(DVector4)
  nameWithType: MathOps.SafeNormalize(DVector4)
  fullName: Vim.Math3d.MathOps.SafeNormalize(Vim.Math3d.DVector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SafeNormalize
    path: ../src/MathOps.cs
    startLine: 540
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector4 SafeNormalize(this DVector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector4
    return:
      type: Vim.Math3d.DVector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SafeNormalize(v As DVector4) As DVector4
  overload: Vim.Math3d.MathOps.SafeNormalize*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Dot(Vim.Math3d.DVector4,Vim.Math3d.DVector4)
  commentId: M:Vim.Math3d.MathOps.Dot(Vim.Math3d.DVector4,Vim.Math3d.DVector4)
  id: Dot(Vim.Math3d.DVector4,Vim.Math3d.DVector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Dot(DVector4, DVector4)
  nameWithType: MathOps.Dot(DVector4, DVector4)
  fullName: Vim.Math3d.MathOps.Dot(Vim.Math3d.DVector4, Vim.Math3d.DVector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Dot
    path: ../src/MathOps.cs
    startLine: 541
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double Dot(this DVector4 v1, DVector4 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.DVector4
    - id: v2
      type: Vim.Math3d.DVector4
    return:
      type: System.Double
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Dot(v1 As DVector4, v2 As DVector4) As Double
  overload: Vim.Math3d.MathOps.Dot*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Min(Vim.Math3d.DVector4,Vim.Math3d.DVector4)
  commentId: M:Vim.Math3d.MathOps.Min(Vim.Math3d.DVector4,Vim.Math3d.DVector4)
  id: Min(Vim.Math3d.DVector4,Vim.Math3d.DVector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Min(DVector4, DVector4)
  nameWithType: MathOps.Min(DVector4, DVector4)
  fullName: Vim.Math3d.MathOps.Min(Vim.Math3d.DVector4, Vim.Math3d.DVector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Min
    path: ../src/MathOps.cs
    startLine: 542
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector4 Min(this DVector4 v1, DVector4 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.DVector4
    - id: v2
      type: Vim.Math3d.DVector4
    return:
      type: Vim.Math3d.DVector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(v1 As DVector4, v2 As DVector4) As DVector4
  overload: Vim.Math3d.MathOps.Min*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Max(Vim.Math3d.DVector4,Vim.Math3d.DVector4)
  commentId: M:Vim.Math3d.MathOps.Max(Vim.Math3d.DVector4,Vim.Math3d.DVector4)
  id: Max(Vim.Math3d.DVector4,Vim.Math3d.DVector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Max(DVector4, DVector4)
  nameWithType: MathOps.Max(DVector4, DVector4)
  fullName: Vim.Math3d.MathOps.Max(Vim.Math3d.DVector4, Vim.Math3d.DVector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Max
    path: ../src/MathOps.cs
    startLine: 543
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector4 Max(this DVector4 v1, DVector4 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.DVector4
    - id: v2
      type: Vim.Math3d.DVector4
    return:
      type: Vim.Math3d.DVector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(v1 As DVector4, v2 As DVector4) As DVector4
  overload: Vim.Math3d.MathOps.Max*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.SquareRoot(Vim.Math3d.DVector4)
  commentId: M:Vim.Math3d.MathOps.SquareRoot(Vim.Math3d.DVector4)
  id: SquareRoot(Vim.Math3d.DVector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: SquareRoot(DVector4)
  nameWithType: MathOps.SquareRoot(DVector4)
  fullName: Vim.Math3d.MathOps.SquareRoot(Vim.Math3d.DVector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SquareRoot
    path: ../src/MathOps.cs
    startLine: 544
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector4 SquareRoot(this DVector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector4
    return:
      type: Vim.Math3d.DVector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SquareRoot(v As DVector4) As DVector4
  overload: Vim.Math3d.MathOps.SquareRoot*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Abs(Vim.Math3d.DVector4)
  commentId: M:Vim.Math3d.MathOps.Abs(Vim.Math3d.DVector4)
  id: Abs(Vim.Math3d.DVector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Abs(DVector4)
  nameWithType: MathOps.Abs(DVector4)
  fullName: Vim.Math3d.MathOps.Abs(Vim.Math3d.DVector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Abs
    path: ../src/MathOps.cs
    startLine: 546
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector4 Abs(this DVector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector4
    return:
      type: Vim.Math3d.DVector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Abs(v As DVector4) As DVector4
  overload: Vim.Math3d.MathOps.Abs*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Acos(Vim.Math3d.DVector4)
  commentId: M:Vim.Math3d.MathOps.Acos(Vim.Math3d.DVector4)
  id: Acos(Vim.Math3d.DVector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Acos(DVector4)
  nameWithType: MathOps.Acos(DVector4)
  fullName: Vim.Math3d.MathOps.Acos(Vim.Math3d.DVector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Acos
    path: ../src/MathOps.cs
    startLine: 547
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector4 Acos(this DVector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector4
    return:
      type: Vim.Math3d.DVector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Acos(v As DVector4) As DVector4
  overload: Vim.Math3d.MathOps.Acos*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Asin(Vim.Math3d.DVector4)
  commentId: M:Vim.Math3d.MathOps.Asin(Vim.Math3d.DVector4)
  id: Asin(Vim.Math3d.DVector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Asin(DVector4)
  nameWithType: MathOps.Asin(DVector4)
  fullName: Vim.Math3d.MathOps.Asin(Vim.Math3d.DVector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Asin
    path: ../src/MathOps.cs
    startLine: 548
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector4 Asin(this DVector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector4
    return:
      type: Vim.Math3d.DVector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Asin(v As DVector4) As DVector4
  overload: Vim.Math3d.MathOps.Asin*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Atan(Vim.Math3d.DVector4)
  commentId: M:Vim.Math3d.MathOps.Atan(Vim.Math3d.DVector4)
  id: Atan(Vim.Math3d.DVector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Atan(DVector4)
  nameWithType: MathOps.Atan(DVector4)
  fullName: Vim.Math3d.MathOps.Atan(Vim.Math3d.DVector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Atan
    path: ../src/MathOps.cs
    startLine: 549
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector4 Atan(this DVector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector4
    return:
      type: Vim.Math3d.DVector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Atan(v As DVector4) As DVector4
  overload: Vim.Math3d.MathOps.Atan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Cos(Vim.Math3d.DVector4)
  commentId: M:Vim.Math3d.MathOps.Cos(Vim.Math3d.DVector4)
  id: Cos(Vim.Math3d.DVector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Cos(DVector4)
  nameWithType: MathOps.Cos(DVector4)
  fullName: Vim.Math3d.MathOps.Cos(Vim.Math3d.DVector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Cos
    path: ../src/MathOps.cs
    startLine: 550
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector4 Cos(this DVector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector4
    return:
      type: Vim.Math3d.DVector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Cos(v As DVector4) As DVector4
  overload: Vim.Math3d.MathOps.Cos*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Cosh(Vim.Math3d.DVector4)
  commentId: M:Vim.Math3d.MathOps.Cosh(Vim.Math3d.DVector4)
  id: Cosh(Vim.Math3d.DVector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Cosh(DVector4)
  nameWithType: MathOps.Cosh(DVector4)
  fullName: Vim.Math3d.MathOps.Cosh(Vim.Math3d.DVector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Cosh
    path: ../src/MathOps.cs
    startLine: 551
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector4 Cosh(this DVector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector4
    return:
      type: Vim.Math3d.DVector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Cosh(v As DVector4) As DVector4
  overload: Vim.Math3d.MathOps.Cosh*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Exp(Vim.Math3d.DVector4)
  commentId: M:Vim.Math3d.MathOps.Exp(Vim.Math3d.DVector4)
  id: Exp(Vim.Math3d.DVector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Exp(DVector4)
  nameWithType: MathOps.Exp(DVector4)
  fullName: Vim.Math3d.MathOps.Exp(Vim.Math3d.DVector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Exp
    path: ../src/MathOps.cs
    startLine: 552
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector4 Exp(this DVector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector4
    return:
      type: Vim.Math3d.DVector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Exp(v As DVector4) As DVector4
  overload: Vim.Math3d.MathOps.Exp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Log(Vim.Math3d.DVector4)
  commentId: M:Vim.Math3d.MathOps.Log(Vim.Math3d.DVector4)
  id: Log(Vim.Math3d.DVector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Log(DVector4)
  nameWithType: MathOps.Log(DVector4)
  fullName: Vim.Math3d.MathOps.Log(Vim.Math3d.DVector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Log
    path: ../src/MathOps.cs
    startLine: 553
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector4 Log(this DVector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector4
    return:
      type: Vim.Math3d.DVector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Log(v As DVector4) As DVector4
  overload: Vim.Math3d.MathOps.Log*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Log10(Vim.Math3d.DVector4)
  commentId: M:Vim.Math3d.MathOps.Log10(Vim.Math3d.DVector4)
  id: Log10(Vim.Math3d.DVector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Log10(DVector4)
  nameWithType: MathOps.Log10(DVector4)
  fullName: Vim.Math3d.MathOps.Log10(Vim.Math3d.DVector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Log10
    path: ../src/MathOps.cs
    startLine: 554
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector4 Log10(this DVector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector4
    return:
      type: Vim.Math3d.DVector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Log10(v As DVector4) As DVector4
  overload: Vim.Math3d.MathOps.Log10*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Sin(Vim.Math3d.DVector4)
  commentId: M:Vim.Math3d.MathOps.Sin(Vim.Math3d.DVector4)
  id: Sin(Vim.Math3d.DVector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Sin(DVector4)
  nameWithType: MathOps.Sin(DVector4)
  fullName: Vim.Math3d.MathOps.Sin(Vim.Math3d.DVector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Sin
    path: ../src/MathOps.cs
    startLine: 555
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector4 Sin(this DVector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector4
    return:
      type: Vim.Math3d.DVector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sin(v As DVector4) As DVector4
  overload: Vim.Math3d.MathOps.Sin*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Sinh(Vim.Math3d.DVector4)
  commentId: M:Vim.Math3d.MathOps.Sinh(Vim.Math3d.DVector4)
  id: Sinh(Vim.Math3d.DVector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Sinh(DVector4)
  nameWithType: MathOps.Sinh(DVector4)
  fullName: Vim.Math3d.MathOps.Sinh(Vim.Math3d.DVector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Sinh
    path: ../src/MathOps.cs
    startLine: 556
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector4 Sinh(this DVector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector4
    return:
      type: Vim.Math3d.DVector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sinh(v As DVector4) As DVector4
  overload: Vim.Math3d.MathOps.Sinh*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Sqrt(Vim.Math3d.DVector4)
  commentId: M:Vim.Math3d.MathOps.Sqrt(Vim.Math3d.DVector4)
  id: Sqrt(Vim.Math3d.DVector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Sqrt(DVector4)
  nameWithType: MathOps.Sqrt(DVector4)
  fullName: Vim.Math3d.MathOps.Sqrt(Vim.Math3d.DVector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Sqrt
    path: ../src/MathOps.cs
    startLine: 557
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector4 Sqrt(this DVector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector4
    return:
      type: Vim.Math3d.DVector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sqrt(v As DVector4) As DVector4
  overload: Vim.Math3d.MathOps.Sqrt*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Tan(Vim.Math3d.DVector4)
  commentId: M:Vim.Math3d.MathOps.Tan(Vim.Math3d.DVector4)
  id: Tan(Vim.Math3d.DVector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Tan(DVector4)
  nameWithType: MathOps.Tan(DVector4)
  fullName: Vim.Math3d.MathOps.Tan(Vim.Math3d.DVector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Tan
    path: ../src/MathOps.cs
    startLine: 558
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector4 Tan(this DVector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector4
    return:
      type: Vim.Math3d.DVector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Tan(v As DVector4) As DVector4
  overload: Vim.Math3d.MathOps.Tan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Tanh(Vim.Math3d.DVector4)
  commentId: M:Vim.Math3d.MathOps.Tanh(Vim.Math3d.DVector4)
  id: Tanh(Vim.Math3d.DVector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Tanh(DVector4)
  nameWithType: MathOps.Tanh(DVector4)
  fullName: Vim.Math3d.MathOps.Tanh(Vim.Math3d.DVector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Tanh
    path: ../src/MathOps.cs
    startLine: 559
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector4 Tanh(this DVector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector4
    return:
      type: Vim.Math3d.DVector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Tanh(v As DVector4) As DVector4
  overload: Vim.Math3d.MathOps.Tanh*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Inverse(Vim.Math3d.DVector4)
  commentId: M:Vim.Math3d.MathOps.Inverse(Vim.Math3d.DVector4)
  id: Inverse(Vim.Math3d.DVector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Inverse(DVector4)
  nameWithType: MathOps.Inverse(DVector4)
  fullName: Vim.Math3d.MathOps.Inverse(Vim.Math3d.DVector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Inverse
    path: ../src/MathOps.cs
    startLine: 560
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector4 Inverse(this DVector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector4
    return:
      type: Vim.Math3d.DVector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Inverse(v As DVector4) As DVector4
  overload: Vim.Math3d.MathOps.Inverse*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Ceiling(Vim.Math3d.DVector4)
  commentId: M:Vim.Math3d.MathOps.Ceiling(Vim.Math3d.DVector4)
  id: Ceiling(Vim.Math3d.DVector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Ceiling(DVector4)
  nameWithType: MathOps.Ceiling(DVector4)
  fullName: Vim.Math3d.MathOps.Ceiling(Vim.Math3d.DVector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Ceiling
    path: ../src/MathOps.cs
    startLine: 561
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector4 Ceiling(this DVector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector4
    return:
      type: Vim.Math3d.DVector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Ceiling(v As DVector4) As DVector4
  overload: Vim.Math3d.MathOps.Ceiling*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Floor(Vim.Math3d.DVector4)
  commentId: M:Vim.Math3d.MathOps.Floor(Vim.Math3d.DVector4)
  id: Floor(Vim.Math3d.DVector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Floor(DVector4)
  nameWithType: MathOps.Floor(DVector4)
  fullName: Vim.Math3d.MathOps.Floor(Vim.Math3d.DVector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Floor
    path: ../src/MathOps.cs
    startLine: 562
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector4 Floor(this DVector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector4
    return:
      type: Vim.Math3d.DVector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Floor(v As DVector4) As DVector4
  overload: Vim.Math3d.MathOps.Floor*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Round(Vim.Math3d.DVector4)
  commentId: M:Vim.Math3d.MathOps.Round(Vim.Math3d.DVector4)
  id: Round(Vim.Math3d.DVector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Round(DVector4)
  nameWithType: MathOps.Round(DVector4)
  fullName: Vim.Math3d.MathOps.Round(Vim.Math3d.DVector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Round
    path: ../src/MathOps.cs
    startLine: 563
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector4 Round(this DVector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector4
    return:
      type: Vim.Math3d.DVector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Round(v As DVector4) As DVector4
  overload: Vim.Math3d.MathOps.Round*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Truncate(Vim.Math3d.DVector4)
  commentId: M:Vim.Math3d.MathOps.Truncate(Vim.Math3d.DVector4)
  id: Truncate(Vim.Math3d.DVector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Truncate(DVector4)
  nameWithType: MathOps.Truncate(DVector4)
  fullName: Vim.Math3d.MathOps.Truncate(Vim.Math3d.DVector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Truncate
    path: ../src/MathOps.cs
    startLine: 564
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector4 Truncate(this DVector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector4
    return:
      type: Vim.Math3d.DVector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Truncate(v As DVector4) As DVector4
  overload: Vim.Math3d.MathOps.Truncate*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Sqr(Vim.Math3d.DVector4)
  commentId: M:Vim.Math3d.MathOps.Sqr(Vim.Math3d.DVector4)
  id: Sqr(Vim.Math3d.DVector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Sqr(DVector4)
  nameWithType: MathOps.Sqr(DVector4)
  fullName: Vim.Math3d.MathOps.Sqr(Vim.Math3d.DVector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Sqr
    path: ../src/MathOps.cs
    startLine: 565
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector4 Sqr(this DVector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector4
    return:
      type: Vim.Math3d.DVector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sqr(v As DVector4) As DVector4
  overload: Vim.Math3d.MathOps.Sqr*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Cube(Vim.Math3d.DVector4)
  commentId: M:Vim.Math3d.MathOps.Cube(Vim.Math3d.DVector4)
  id: Cube(Vim.Math3d.DVector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Cube(DVector4)
  nameWithType: MathOps.Cube(DVector4)
  fullName: Vim.Math3d.MathOps.Cube(Vim.Math3d.DVector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Cube
    path: ../src/MathOps.cs
    startLine: 566
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector4 Cube(this DVector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector4
    return:
      type: Vim.Math3d.DVector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Cube(v As DVector4) As DVector4
  overload: Vim.Math3d.MathOps.Cube*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.ToRadians(Vim.Math3d.DVector4)
  commentId: M:Vim.Math3d.MathOps.ToRadians(Vim.Math3d.DVector4)
  id: ToRadians(Vim.Math3d.DVector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: ToRadians(DVector4)
  nameWithType: MathOps.ToRadians(DVector4)
  fullName: Vim.Math3d.MathOps.ToRadians(Vim.Math3d.DVector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToRadians
    path: ../src/MathOps.cs
    startLine: 567
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector4 ToRadians(this DVector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector4
    return:
      type: Vim.Math3d.DVector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToRadians(v As DVector4) As DVector4
  overload: Vim.Math3d.MathOps.ToRadians*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.ToDegrees(Vim.Math3d.DVector4)
  commentId: M:Vim.Math3d.MathOps.ToDegrees(Vim.Math3d.DVector4)
  id: ToDegrees(Vim.Math3d.DVector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: ToDegrees(DVector4)
  nameWithType: MathOps.ToDegrees(DVector4)
  fullName: Vim.Math3d.MathOps.ToDegrees(Vim.Math3d.DVector4)
  type: Method
  source:
    remote:
      path: src/MathOps.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToDegrees
    path: ../src/MathOps.cs
    startLine: 568
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DVector4 ToDegrees(this DVector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.DVector4
    return:
      type: Vim.Math3d.DVector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDegrees(v As DVector4) As DVector4
  overload: Vim.Math3d.MathOps.ToDegrees*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.ToVector2(Vim.Math3d.Int2)
  commentId: M:Vim.Math3d.MathOps.ToVector2(Vim.Math3d.Int2)
  id: ToVector2(Vim.Math3d.Int2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: ToVector2(Int2)
  nameWithType: MathOps.ToVector2(Int2)
  fullName: Vim.Math3d.MathOps.ToVector2(Vim.Math3d.Int2)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToVector2
    path: ../src/MathOpsPartial.cs
    startLine: 18
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector2 ToVector2(this Int2 t)
    parameters:
    - id: t
      type: Vim.Math3d.Int2
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToVector2(t As Int2) As Vector2
  overload: Vim.Math3d.MathOps.ToVector2*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.ToVector3(Vim.Math3d.Int3)
  commentId: M:Vim.Math3d.MathOps.ToVector3(Vim.Math3d.Int3)
  id: ToVector3(Vim.Math3d.Int3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: ToVector3(Int3)
  nameWithType: MathOps.ToVector3(Int3)
  fullName: Vim.Math3d.MathOps.ToVector3(Vim.Math3d.Int3)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToVector3
    path: ../src/MathOpsPartial.cs
    startLine: 19
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 ToVector3(this Int3 t)
    parameters:
    - id: t
      type: Vim.Math3d.Int3
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToVector3(t As Int3) As Vector3
  overload: Vim.Math3d.MathOps.ToVector3*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Percentage(System.Double,System.Double)
  commentId: M:Vim.Math3d.MathOps.Percentage(System.Double,System.Double)
  id: Percentage(System.Double,System.Double)
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Percentage(Double, Double)
  nameWithType: MathOps.Percentage(Double, Double)
  fullName: Vim.Math3d.MathOps.Percentage(System.Double, System.Double)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Percentage
    path: ../src/MathOpsPartial.cs
    startLine: 24
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nExpresses two vlaues as a ratio\n"
  example: []
  syntax:
    content: public static double Percentage(double denominator, double numerator)
    parameters:
    - id: denominator
      type: System.Double
    - id: numerator
      type: System.Double
    return:
      type: System.Double
    content.vb: Public Shared Function Percentage(denominator As Double, numerator As Double) As Double
  overload: Vim.Math3d.MathOps.Percentage*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.ToNearestPowOf2(System.Int32)
  commentId: M:Vim.Math3d.MathOps.ToNearestPowOf2(System.Int32)
  id: ToNearestPowOf2(System.Int32)
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: ToNearestPowOf2(Int32)
  nameWithType: MathOps.ToNearestPowOf2(Int32)
  fullName: Vim.Math3d.MathOps.ToNearestPowOf2(System.Int32)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToNearestPowOf2
    path: ../src/MathOpsPartial.cs
    startLine: 30
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nCalculate the nearest power of 2 from the input number\n"
  example: []
  syntax:
    content: public static int ToNearestPowOf2(int x)
    parameters:
    - id: x
      type: System.Int32
    return:
      type: System.Int32
    content.vb: Public Shared Function ToNearestPowOf2(x As Integer) As Integer
  overload: Vim.Math3d.MathOps.ToNearestPowOf2*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.CatmullRom(System.Single,System.Single,System.Single,System.Single,System.Single)
  commentId: M:Vim.Math3d.MathOps.CatmullRom(System.Single,System.Single,System.Single,System.Single,System.Single)
  id: CatmullRom(System.Single,System.Single,System.Single,System.Single,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: CatmullRom(Single, Single, Single, Single, Single)
  nameWithType: MathOps.CatmullRom(Single, Single, Single, Single, Single)
  fullName: Vim.Math3d.MathOps.CatmullRom(System.Single, System.Single, System.Single, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: CatmullRom
    path: ../src/MathOpsPartial.cs
    startLine: 36
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nPerforms a Catmull-Rom interpolation using the specified positions.\n"
  example: []
  syntax:
    content: public static float CatmullRom(this float value1, float value2, float value3, float value4, float amount)
    parameters:
    - id: value1
      type: System.Single
    - id: value2
      type: System.Single
    - id: value3
      type: System.Single
    - id: value4
      type: System.Single
    - id: amount
      type: System.Single
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CatmullRom(value1 As Single, value2 As Single, value3 As Single, value4 As Single, amount As Single) As Single
  overload: Vim.Math3d.MathOps.CatmullRom*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Hermite(System.Single,System.Single,System.Single,System.Single,System.Single)
  commentId: M:Vim.Math3d.MathOps.Hermite(System.Single,System.Single,System.Single,System.Single,System.Single)
  id: Hermite(System.Single,System.Single,System.Single,System.Single,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Hermite(Single, Single, Single, Single, Single)
  nameWithType: MathOps.Hermite(Single, Single, Single, Single, Single)
  fullName: Vim.Math3d.MathOps.Hermite(System.Single, System.Single, System.Single, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Hermite
    path: ../src/MathOpsPartial.cs
    startLine: 52
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nPerforms a Hermite spline interpolation.\n"
  example: []
  syntax:
    content: public static float Hermite(this float value1, float tangent1, float value2, float tangent2, float amount)
    parameters:
    - id: value1
      type: System.Single
    - id: tangent1
      type: System.Single
    - id: value2
      type: System.Single
    - id: tangent2
      type: System.Single
    - id: amount
      type: System.Single
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Hermite(value1 As Single, tangent1 As Single, value2 As Single, tangent2 As Single, amount As Single) As Single
  overload: Vim.Math3d.MathOps.Hermite*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.SmoothStep(System.Single,System.Single,System.Single)
  commentId: M:Vim.Math3d.MathOps.SmoothStep(System.Single,System.Single,System.Single)
  id: SmoothStep(System.Single,System.Single,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: SmoothStep(Single, Single, Single)
  nameWithType: MathOps.SmoothStep(Single, Single, Single)
  fullName: Vim.Math3d.MathOps.SmoothStep(System.Single, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SmoothStep
    path: ../src/MathOpsPartial.cs
    startLine: 84
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nInterpolates between two values using a cubic equation (Hermite),\nclamping the amount to 0 to 1\n"
  example: []
  syntax:
    content: public static float SmoothStep(this float value1, float value2, float amount)
    parameters:
    - id: value1
      type: System.Single
    - id: value2
      type: System.Single
    - id: amount
      type: System.Single
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SmoothStep(value1 As Single, value2 As Single, amount As Single) As Single
  overload: Vim.Math3d.MathOps.SmoothStep*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.WrapAngle(System.Single)
  commentId: M:Vim.Math3d.MathOps.WrapAngle(System.Single)
  id: WrapAngle(System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: WrapAngle(Single)
  nameWithType: MathOps.WrapAngle(Single)
  fullName: Vim.Math3d.MathOps.WrapAngle(System.Single)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: WrapAngle
    path: ../src/MathOpsPartial.cs
    startLine: 93
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nReduces a given angle to a value between π and -π.\n"
  example: []
  syntax:
    content: public static float WrapAngle(this float angle)
    parameters:
    - id: angle
      type: System.Single
      description: The angle to reduce, in radians.
    return:
      type: System.Single
      description: The new angle, in radians.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function WrapAngle(angle As Single) As Single
  overload: Vim.Math3d.MathOps.WrapAngle*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.IsNonZeroAndValid(System.Single,System.Single)
  commentId: M:Vim.Math3d.MathOps.IsNonZeroAndValid(System.Single,System.Single)
  id: IsNonZeroAndValid(System.Single,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: IsNonZeroAndValid(Single, Single)
  nameWithType: MathOps.IsNonZeroAndValid(Single, Single)
  fullName: Vim.Math3d.MathOps.IsNonZeroAndValid(System.Single, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: IsNonZeroAndValid
    path: ../src/MathOpsPartial.cs
    startLine: 105
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool IsNonZeroAndValid(this float self, float tolerance = 1E-07F)
    parameters:
    - id: self
      type: System.Single
    - id: tolerance
      type: System.Single
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsNonZeroAndValid(self As Single, tolerance As Single = 1E-07F) As Boolean
  overload: Vim.Math3d.MathOps.IsNonZeroAndValid*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.ToFloats(Vim.Math3d.Matrix4x4)
  commentId: M:Vim.Math3d.MathOps.ToFloats(Vim.Math3d.Matrix4x4)
  id: ToFloats(Vim.Math3d.Matrix4x4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: ToFloats(Matrix4x4)
  nameWithType: MathOps.ToFloats(Matrix4x4)
  fullName: Vim.Math3d.MathOps.ToFloats(Vim.Math3d.Matrix4x4)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToFloats
    path: ../src/MathOpsPartial.cs
    startLine: 109
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float[] ToFloats(this Matrix4x4 m)
    parameters:
    - id: m
      type: Vim.Math3d.Matrix4x4
    return:
      type: System.Single[]
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToFloats(m As Matrix4x4) As Single()
  overload: Vim.Math3d.MathOps.ToFloats*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.ToFloats(Vim.Math3d.Matrix4x4[])
  commentId: M:Vim.Math3d.MathOps.ToFloats(Vim.Math3d.Matrix4x4[])
  id: ToFloats(Vim.Math3d.Matrix4x4[])
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: ToFloats(Matrix4x4[])
  nameWithType: MathOps.ToFloats(Matrix4x4[])
  fullName: Vim.Math3d.MathOps.ToFloats(Vim.Math3d.Matrix4x4[])
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToFloats
    path: ../src/MathOpsPartial.cs
    startLine: 119
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float[] ToFloats(this Matrix4x4[] matrixArray)
    parameters:
    - id: matrixArray
      type: Vim.Math3d.Matrix4x4[]
    return:
      type: System.Single[]
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToFloats(matrixArray As Matrix4x4()) As Single()
  overload: Vim.Math3d.MathOps.ToFloats*
  nameWithType.vb: MathOps.ToFloats(Matrix4x4())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.ToFloats(Vim.Math3d.Matrix4x4())
  name.vb: ToFloats(Matrix4x4())
- uid: Vim.Math3d.MathOps.ToMatrix(System.Single[])
  commentId: M:Vim.Math3d.MathOps.ToMatrix(System.Single[])
  id: ToMatrix(System.Single[])
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: ToMatrix(Single[])
  nameWithType: MathOps.ToMatrix(Single[])
  fullName: Vim.Math3d.MathOps.ToMatrix(System.Single[])
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToMatrix
    path: ../src/MathOpsPartial.cs
    startLine: 147
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Matrix4x4 ToMatrix(this float[] m)
    parameters:
    - id: m
      type: System.Single[]
    return:
      type: Vim.Math3d.Matrix4x4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToMatrix(m As Single()) As Matrix4x4
  overload: Vim.Math3d.MathOps.ToMatrix*
  nameWithType.vb: MathOps.ToMatrix(Single())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.ToMatrix(System.Single())
  name.vb: ToMatrix(Single())
- uid: Vim.Math3d.MathOps.ToMatrixArray(System.Single[])
  commentId: M:Vim.Math3d.MathOps.ToMatrixArray(System.Single[])
  id: ToMatrixArray(System.Single[])
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: ToMatrixArray(Single[])
  nameWithType: MathOps.ToMatrixArray(Single[])
  fullName: Vim.Math3d.MathOps.ToMatrixArray(System.Single[])
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToMatrixArray
    path: ../src/MathOpsPartial.cs
    startLine: 152
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Matrix4x4[] ToMatrixArray(this float[] m)
    parameters:
    - id: m
      type: System.Single[]
    return:
      type: Vim.Math3d.Matrix4x4[]
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToMatrixArray(m As Single()) As Matrix4x4()
  overload: Vim.Math3d.MathOps.ToMatrixArray*
  nameWithType.vb: MathOps.ToMatrixArray(Single())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.ToMatrixArray(System.Single())
  name.vb: ToMatrixArray(Single())
- uid: Vim.Math3d.MathOps.ToAABoxArray(System.Single[])
  commentId: M:Vim.Math3d.MathOps.ToAABoxArray(System.Single[])
  id: ToAABoxArray(System.Single[])
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: ToAABoxArray(Single[])
  nameWithType: MathOps.ToAABoxArray(Single[])
  fullName: Vim.Math3d.MathOps.ToAABoxArray(System.Single[])
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToAABoxArray
    path: ../src/MathOpsPartial.cs
    startLine: 172
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static AABox[] ToAABoxArray(this float[] m)
    parameters:
    - id: m
      type: System.Single[]
    return:
      type: Vim.Math3d.AABox[]
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToAABoxArray(m As Single()) As AABox()
  overload: Vim.Math3d.MathOps.ToAABoxArray*
  nameWithType.vb: MathOps.ToAABoxArray(Single())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.ToAABoxArray(System.Single())
  name.vb: ToAABoxArray(Single())
- uid: Vim.Math3d.MathOps.RayFromProjectionMatrix(Vim.Math3d.Matrix4x4,Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.MathOps.RayFromProjectionMatrix(Vim.Math3d.Matrix4x4,Vim.Math3d.Vector2)
  id: RayFromProjectionMatrix(Vim.Math3d.Matrix4x4,Vim.Math3d.Vector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: RayFromProjectionMatrix(Matrix4x4, Vector2)
  nameWithType: MathOps.RayFromProjectionMatrix(Matrix4x4, Vector2)
  fullName: Vim.Math3d.MathOps.RayFromProjectionMatrix(Vim.Math3d.Matrix4x4, Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: RayFromProjectionMatrix
    path: ../src/MathOpsPartial.cs
    startLine: 191
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Ray RayFromProjectionMatrix(this Matrix4x4 projection, Vector2 normalisedScreenCoordinates)
    parameters:
    - id: projection
      type: Vim.Math3d.Matrix4x4
    - id: normalisedScreenCoordinates
      type: Vim.Math3d.Vector2
    return:
      type: Vim.Math3d.Ray
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function RayFromProjectionMatrix(projection As Matrix4x4, normalisedScreenCoordinates As Vector2) As Ray
  overload: Vim.Math3d.MathOps.RayFromProjectionMatrix*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Inverse(Vim.Math3d.Matrix4x4)
  commentId: M:Vim.Math3d.MathOps.Inverse(Vim.Math3d.Matrix4x4)
  id: Inverse(Vim.Math3d.Matrix4x4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Inverse(Matrix4x4)
  nameWithType: MathOps.Inverse(Matrix4x4)
  fullName: Vim.Math3d.MathOps.Inverse(Vim.Math3d.Matrix4x4)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Inverse
    path: ../src/MathOpsPartial.cs
    startLine: 212
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Matrix4x4 Inverse(this Matrix4x4 m)
    parameters:
    - id: m
      type: Vim.Math3d.Matrix4x4
    return:
      type: Vim.Math3d.Matrix4x4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Inverse(m As Matrix4x4) As Matrix4x4
  overload: Vim.Math3d.MathOps.Inverse*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Transform(Vim.Math3d.Vector4,Vim.Math3d.Matrix4x4)
  commentId: M:Vim.Math3d.MathOps.Transform(Vim.Math3d.Vector4,Vim.Math3d.Matrix4x4)
  id: Transform(Vim.Math3d.Vector4,Vim.Math3d.Matrix4x4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Transform(Vector4, Matrix4x4)
  nameWithType: MathOps.Transform(Vector4, Matrix4x4)
  fullName: Vim.Math3d.MathOps.Transform(Vim.Math3d.Vector4, Vim.Math3d.Matrix4x4)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Transform
    path: ../src/MathOpsPartial.cs
    startLine: 219
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nTransforms a vector by the given Quaternion rotation value.\n"
  example: []
  syntax:
    content: public static Vector4 Transform(this Vector4 value, Matrix4x4 matrix)
    parameters:
    - id: value
      type: Vim.Math3d.Vector4
    - id: matrix
      type: Vim.Math3d.Matrix4x4
    return:
      type: Vim.Math3d.Vector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Transform(value As Vector4, matrix As Matrix4x4) As Vector4
  overload: Vim.Math3d.MathOps.Transform*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Transform(Vim.Math3d.Vector4,Vim.Math3d.Quaternion)
  commentId: M:Vim.Math3d.MathOps.Transform(Vim.Math3d.Vector4,Vim.Math3d.Quaternion)
  id: Transform(Vim.Math3d.Vector4,Vim.Math3d.Quaternion)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Transform(Vector4, Quaternion)
  nameWithType: MathOps.Transform(Vector4, Quaternion)
  fullName: Vim.Math3d.MathOps.Transform(Vim.Math3d.Vector4, Vim.Math3d.Quaternion)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Transform
    path: ../src/MathOpsPartial.cs
    startLine: 226
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nTransforms a vector by the given Quaternion rotation value.\n"
  example: []
  syntax:
    content: public static Vector4 Transform(this Vector4 value, Quaternion rotation)
    parameters:
    - id: value
      type: Vim.Math3d.Vector4
    - id: rotation
      type: Vim.Math3d.Quaternion
    return:
      type: Vim.Math3d.Vector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Transform(value As Vector4, rotation As Quaternion) As Vector4
  overload: Vim.Math3d.MathOps.Transform*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.ToVector2(System.Single)
  commentId: M:Vim.Math3d.MathOps.ToVector2(System.Single)
  id: ToVector2(System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: ToVector2(Single)
  nameWithType: MathOps.ToVector2(Single)
  fullName: Vim.Math3d.MathOps.ToVector2(System.Single)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToVector2
    path: ../src/MathOpsPartial.cs
    startLine: 249
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector2 ToVector2(this float v)
    parameters:
    - id: v
      type: System.Single
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToVector2(v As Single) As Vector2
  overload: Vim.Math3d.MathOps.ToVector2*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.ToVector2(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.MathOps.ToVector2(Vim.Math3d.Vector3)
  id: ToVector2(Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: ToVector2(Vector3)
  nameWithType: MathOps.ToVector2(Vector3)
  fullName: Vim.Math3d.MathOps.ToVector2(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToVector2
    path: ../src/MathOpsPartial.cs
    startLine: 250
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector2 ToVector2(this Vector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToVector2(v As Vector3) As Vector2
  overload: Vim.Math3d.MathOps.ToVector2*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.ToVector2(Vim.Math3d.Vector4)
  commentId: M:Vim.Math3d.MathOps.ToVector2(Vim.Math3d.Vector4)
  id: ToVector2(Vim.Math3d.Vector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: ToVector2(Vector4)
  nameWithType: MathOps.ToVector2(Vector4)
  fullName: Vim.Math3d.MathOps.ToVector2(Vim.Math3d.Vector4)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToVector2
    path: ../src/MathOpsPartial.cs
    startLine: 251
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector2 ToVector2(this Vector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector4
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToVector2(v As Vector4) As Vector2
  overload: Vim.Math3d.MathOps.ToVector2*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.ToVector3(System.Single)
  commentId: M:Vim.Math3d.MathOps.ToVector3(System.Single)
  id: ToVector3(System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: ToVector3(Single)
  nameWithType: MathOps.ToVector3(Single)
  fullName: Vim.Math3d.MathOps.ToVector3(System.Single)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToVector3
    path: ../src/MathOpsPartial.cs
    startLine: 252
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 ToVector3(this float v)
    parameters:
    - id: v
      type: System.Single
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToVector3(v As Single) As Vector3
  overload: Vim.Math3d.MathOps.ToVector3*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.ToVector3(Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.MathOps.ToVector3(Vim.Math3d.Vector2)
  id: ToVector3(Vim.Math3d.Vector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: ToVector3(Vector2)
  nameWithType: MathOps.ToVector3(Vector2)
  fullName: Vim.Math3d.MathOps.ToVector3(Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToVector3
    path: ../src/MathOpsPartial.cs
    startLine: 253
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 ToVector3(this Vector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector2
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToVector3(v As Vector2) As Vector3
  overload: Vim.Math3d.MathOps.ToVector3*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.ToVector3(Vim.Math3d.Vector4)
  commentId: M:Vim.Math3d.MathOps.ToVector3(Vim.Math3d.Vector4)
  id: ToVector3(Vim.Math3d.Vector4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: ToVector3(Vector4)
  nameWithType: MathOps.ToVector3(Vector4)
  fullName: Vim.Math3d.MathOps.ToVector3(Vim.Math3d.Vector4)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToVector3
    path: ../src/MathOpsPartial.cs
    startLine: 254
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 ToVector3(this Vector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector4
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToVector3(v As Vector4) As Vector3
  overload: Vim.Math3d.MathOps.ToVector3*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.ToVector4(System.Single)
  commentId: M:Vim.Math3d.MathOps.ToVector4(System.Single)
  id: ToVector4(System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: ToVector4(Single)
  nameWithType: MathOps.ToVector4(Single)
  fullName: Vim.Math3d.MathOps.ToVector4(System.Single)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToVector4
    path: ../src/MathOpsPartial.cs
    startLine: 255
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector4 ToVector4(this float v)
    parameters:
    - id: v
      type: System.Single
    return:
      type: Vim.Math3d.Vector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToVector4(v As Single) As Vector4
  overload: Vim.Math3d.MathOps.ToVector4*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.ToVector4(Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.MathOps.ToVector4(Vim.Math3d.Vector2)
  id: ToVector4(Vim.Math3d.Vector2)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: ToVector4(Vector2)
  nameWithType: MathOps.ToVector4(Vector2)
  fullName: Vim.Math3d.MathOps.ToVector4(Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToVector4
    path: ../src/MathOpsPartial.cs
    startLine: 256
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector4 ToVector4(this Vector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector2
    return:
      type: Vim.Math3d.Vector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToVector4(v As Vector2) As Vector4
  overload: Vim.Math3d.MathOps.ToVector4*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.ToVector4(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.MathOps.ToVector4(Vim.Math3d.Vector3)
  id: ToVector4(Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: ToVector4(Vector3)
  nameWithType: MathOps.ToVector4(Vector3)
  fullName: Vim.Math3d.MathOps.ToVector4(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToVector4
    path: ../src/MathOpsPartial.cs
    startLine: 257
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector4 ToVector4(this Vector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Vector4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToVector4(v As Vector3) As Vector4
  overload: Vim.Math3d.MathOps.ToVector4*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Rotate(Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single)
  commentId: M:Vim.Math3d.MathOps.Rotate(Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single)
  id: Rotate(Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Rotate(Vector3, Vector3, Single)
  nameWithType: MathOps.Rotate(Vector3, Vector3, Single)
  fullName: Vim.Math3d.MathOps.Rotate(Vim.Math3d.Vector3, Vim.Math3d.Vector3, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Rotate
    path: ../src/MathOpsPartial.cs
    startLine: 259
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 Rotate(this Vector3 self, Vector3 axis, float angle)
    parameters:
    - id: self
      type: Vim.Math3d.Vector3
    - id: axis
      type: Vim.Math3d.Vector3
    - id: angle
      type: System.Single
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Rotate(self As Vector3, axis As Vector3, angle As Single) As Vector3
  overload: Vim.Math3d.MathOps.Rotate*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.IsNonZeroAndValid(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.MathOps.IsNonZeroAndValid(Vim.Math3d.Vector3)
  id: IsNonZeroAndValid(Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: IsNonZeroAndValid(Vector3)
  nameWithType: MathOps.IsNonZeroAndValid(Vector3)
  fullName: Vim.Math3d.MathOps.IsNonZeroAndValid(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: IsNonZeroAndValid
    path: ../src/MathOpsPartial.cs
    startLine: 263
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool IsNonZeroAndValid(this Vector3 self)
    parameters:
    - id: self
      type: Vim.Math3d.Vector3
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsNonZeroAndValid(self As Vector3) As Boolean
  overload: Vim.Math3d.MathOps.IsNonZeroAndValid*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.IsZeroOrInvalid(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.MathOps.IsZeroOrInvalid(Vim.Math3d.Vector3)
  id: IsZeroOrInvalid(Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: IsZeroOrInvalid(Vector3)
  nameWithType: MathOps.IsZeroOrInvalid(Vector3)
  fullName: Vim.Math3d.MathOps.IsZeroOrInvalid(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: IsZeroOrInvalid
    path: ../src/MathOpsPartial.cs
    startLine: 267
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool IsZeroOrInvalid(this Vector3 self)
    parameters:
    - id: self
      type: Vim.Math3d.Vector3
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsZeroOrInvalid(self As Vector3) As Boolean
  overload: Vim.Math3d.MathOps.IsZeroOrInvalid*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.IsPerpendicular(Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single)
  commentId: M:Vim.Math3d.MathOps.IsPerpendicular(Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single)
  id: IsPerpendicular(Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: IsPerpendicular(Vector3, Vector3, Single)
  nameWithType: MathOps.IsPerpendicular(Vector3, Vector3, Single)
  fullName: Vim.Math3d.MathOps.IsPerpendicular(Vim.Math3d.Vector3, Vim.Math3d.Vector3, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: IsPerpendicular
    path: ../src/MathOpsPartial.cs
    startLine: 271
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool IsPerpendicular(this Vector3 v1, Vector3 v2, float tolerance = 1E-07F)
    parameters:
    - id: v1
      type: Vim.Math3d.Vector3
    - id: v2
      type: Vim.Math3d.Vector3
    - id: tolerance
      type: System.Single
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsPerpendicular(v1 As Vector3, v2 As Vector3, tolerance As Single = 1E-07F) As Boolean
  overload: Vim.Math3d.MathOps.IsPerpendicular*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Projection(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.MathOps.Projection(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  id: Projection(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Projection(Vector3, Vector3)
  nameWithType: MathOps.Projection(Vector3, Vector3)
  fullName: Vim.Math3d.MathOps.Projection(Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Projection
    path: ../src/MathOpsPartial.cs
    startLine: 276
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 Projection(this Vector3 v1, Vector3 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.Vector3
    - id: v2
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Projection(v1 As Vector3, v2 As Vector3) As Vector3
  overload: Vim.Math3d.MathOps.Projection*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Rejection(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.MathOps.Rejection(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  id: Rejection(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Rejection(Vector3, Vector3)
  nameWithType: MathOps.Rejection(Vector3, Vector3)
  fullName: Vim.Math3d.MathOps.Rejection(Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Rejection
    path: ../src/MathOpsPartial.cs
    startLine: 280
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 Rejection(this Vector3 v1, Vector3 v2)
    parameters:
    - id: v1
      type: Vim.Math3d.Vector3
    - id: v2
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Rejection(v1 As Vector3, v2 As Vector3) As Vector3
  overload: Vim.Math3d.MathOps.Rejection*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.SignedAngle(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.MathOps.SignedAngle(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  id: SignedAngle(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: SignedAngle(Vector3, Vector3, Vector3)
  nameWithType: MathOps.SignedAngle(Vector3, Vector3, Vector3)
  fullName: Vim.Math3d.MathOps.SignedAngle(Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SignedAngle
    path: ../src/MathOpsPartial.cs
    startLine: 287
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float SignedAngle(Vector3 from, Vector3 to, Vector3 axis)
    parameters:
    - id: from
      type: Vim.Math3d.Vector3
    - id: to
      type: Vim.Math3d.Vector3
    - id: axis
      type: Vim.Math3d.Vector3
    return:
      type: System.Single
    content.vb: Public Shared Function SignedAngle(from As Vector3, to As Vector3, axis As Vector3) As Single
  overload: Vim.Math3d.MathOps.SignedAngle*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.SignedAngle(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.MathOps.SignedAngle(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  id: SignedAngle(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: SignedAngle(Vector3, Vector3)
  nameWithType: MathOps.SignedAngle(Vector3, Vector3)
  fullName: Vim.Math3d.MathOps.SignedAngle(Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SignedAngle
    path: ../src/MathOpsPartial.cs
    startLine: 294
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float SignedAngle(this Vector3 from, Vector3 to)
    parameters:
    - id: from
      type: Vim.Math3d.Vector3
    - id: to
      type: Vim.Math3d.Vector3
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SignedAngle(from As Vector3, to As Vector3) As Single
  overload: Vim.Math3d.MathOps.SignedAngle*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Angle(Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single)
  commentId: M:Vim.Math3d.MathOps.Angle(Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single)
  id: Angle(Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Angle(Vector3, Vector3, Single)
  nameWithType: MathOps.Angle(Vector3, Vector3, Single)
  fullName: Vim.Math3d.MathOps.Angle(Vim.Math3d.Vector3, Vim.Math3d.Vector3, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Angle
    path: ../src/MathOpsPartial.cs
    startLine: 298
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static float Angle(this Vector3 v1, Vector3 v2, float tolerance = 1E-07F)
    parameters:
    - id: v1
      type: Vim.Math3d.Vector3
    - id: v2
      type: Vim.Math3d.Vector3
    - id: tolerance
      type: System.Single
    return:
      type: System.Single
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Angle(v1 As Vector3, v2 As Vector3, tolerance As Single = 1E-07F) As Single
  overload: Vim.Math3d.MathOps.Angle*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Colinear(Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single)
  commentId: M:Vim.Math3d.MathOps.Colinear(Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single)
  id: Colinear(Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Colinear(Vector3, Vector3, Single)
  nameWithType: MathOps.Colinear(Vector3, Vector3, Single)
  fullName: Vim.Math3d.MathOps.Colinear(Vim.Math3d.Vector3, Vim.Math3d.Vector3, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Colinear
    path: ../src/MathOpsPartial.cs
    startLine: 307
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool Colinear(this Vector3 v1, Vector3 v2, float tolerance = 1E-07F)
    parameters:
    - id: v1
      type: Vim.Math3d.Vector3
    - id: v2
      type: Vim.Math3d.Vector3
    - id: tolerance
      type: System.Single
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Colinear(v1 As Vector3, v2 As Vector3, tolerance As Single = 1E-07F) As Boolean
  overload: Vim.Math3d.MathOps.Colinear*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.IsBackFace(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.MathOps.IsBackFace(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  id: IsBackFace(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: IsBackFace(Vector3, Vector3)
  nameWithType: MathOps.IsBackFace(Vector3, Vector3)
  fullName: Vim.Math3d.MathOps.IsBackFace(Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: IsBackFace
    path: ../src/MathOpsPartial.cs
    startLine: 311
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool IsBackFace(this Vector3 normal, Vector3 lineOfSight)
    parameters:
    - id: normal
      type: Vim.Math3d.Vector3
    - id: lineOfSight
      type: Vim.Math3d.Vector3
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsBackFace(normal As Vector3, lineOfSight As Vector3) As Boolean
  overload: Vim.Math3d.MathOps.IsBackFace*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.CatmullRom(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single)
  commentId: M:Vim.Math3d.MathOps.CatmullRom(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single)
  id: CatmullRom(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: CatmullRom(Vector3, Vector3, Vector3, Vector3, Single)
  nameWithType: MathOps.CatmullRom(Vector3, Vector3, Vector3, Vector3, Single)
  fullName: Vim.Math3d.MathOps.CatmullRom(Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: CatmullRom
    path: ../src/MathOpsPartial.cs
    startLine: 318
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nCreates a new <xref href=\"Vim.Math3d.Vector3\" data-throw-if-not-resolved=\"false\"></xref> that contains CatmullRom interpolation of the specified vectors.\n"
  example: []
  syntax:
    content: public static Vector3 CatmullRom(this Vector3 value1, Vector3 value2, Vector3 value3, Vector3 value4, float amount)
    parameters:
    - id: value1
      type: Vim.Math3d.Vector3
    - id: value2
      type: Vim.Math3d.Vector3
    - id: value3
      type: Vim.Math3d.Vector3
    - id: value4
      type: Vim.Math3d.Vector3
    - id: amount
      type: System.Single
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CatmullRom(value1 As Vector3, value2 As Vector3, value3 As Vector3, value4 As Vector3, amount As Single) As Vector3
  overload: Vim.Math3d.MathOps.CatmullRom*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Hermite(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single)
  commentId: M:Vim.Math3d.MathOps.Hermite(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single)
  id: Hermite(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Hermite(Vector3, Vector3, Vector3, Vector3, Single)
  nameWithType: MathOps.Hermite(Vector3, Vector3, Vector3, Vector3, Single)
  fullName: Vim.Math3d.MathOps.Hermite(Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Hermite
    path: ../src/MathOpsPartial.cs
    startLine: 325
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nCreates a new <xref href=\"Vim.Math3d.Vector3\" data-throw-if-not-resolved=\"false\"></xref> that contains hermite spline interpolation.\n"
  example: []
  syntax:
    content: public static Vector3 Hermite(this Vector3 value1, Vector3 tangent1, Vector3 value2, Vector3 tangent2, float amount)
    parameters:
    - id: value1
      type: Vim.Math3d.Vector3
    - id: tangent1
      type: Vim.Math3d.Vector3
    - id: value2
      type: Vim.Math3d.Vector3
    - id: tangent2
      type: Vim.Math3d.Vector3
    - id: amount
      type: System.Single
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Hermite(value1 As Vector3, tangent1 As Vector3, value2 As Vector3, tangent2 As Vector3, amount As Single) As Vector3
  overload: Vim.Math3d.MathOps.Hermite*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.SmoothStep(Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single)
  commentId: M:Vim.Math3d.MathOps.SmoothStep(Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single)
  id: SmoothStep(Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: SmoothStep(Vector3, Vector3, Single)
  nameWithType: MathOps.SmoothStep(Vector3, Vector3, Single)
  fullName: Vim.Math3d.MathOps.SmoothStep(Vim.Math3d.Vector3, Vim.Math3d.Vector3, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SmoothStep
    path: ../src/MathOpsPartial.cs
    startLine: 332
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nCreates a new <xref href=\"Vim.Math3d.Vector3\" data-throw-if-not-resolved=\"false\"></xref> that contains cubic interpolation of the specified vectors.\n"
  example: []
  syntax:
    content: public static Vector3 SmoothStep(this Vector3 value1, Vector3 value2, float amount)
    parameters:
    - id: value1
      type: Vim.Math3d.Vector3
    - id: value2
      type: Vim.Math3d.Vector3
    - id: amount
      type: System.Single
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SmoothStep(value1 As Vector3, value2 As Vector3, amount As Single) As Vector3
  overload: Vim.Math3d.MathOps.SmoothStep*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.ToLine(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.MathOps.ToLine(Vim.Math3d.Vector3)
  id: ToLine(Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: ToLine(Vector3)
  nameWithType: MathOps.ToLine(Vector3)
  fullName: Vim.Math3d.MathOps.ToLine(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToLine
    path: ../src/MathOpsPartial.cs
    startLine: 336
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Line ToLine(this Vector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Line
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToLine(v As Vector3) As Line
  overload: Vim.Math3d.MathOps.ToLine*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Along(Vim.Math3d.Vector3,System.Single)
  commentId: M:Vim.Math3d.MathOps.Along(Vim.Math3d.Vector3,System.Single)
  id: Along(Vim.Math3d.Vector3,System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Along(Vector3, Single)
  nameWithType: MathOps.Along(Vector3, Single)
  fullName: Vim.Math3d.MathOps.Along(Vim.Math3d.Vector3, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Along
    path: ../src/MathOpsPartial.cs
    startLine: 337
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 Along(this Vector3 v, float d)
    parameters:
    - id: v
      type: Vim.Math3d.Vector3
    - id: d
      type: System.Single
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Along(v As Vector3, d As Single) As Vector3
  overload: Vim.Math3d.MathOps.Along*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.AlongX(System.Single)
  commentId: M:Vim.Math3d.MathOps.AlongX(System.Single)
  id: AlongX(System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: AlongX(Single)
  nameWithType: MathOps.AlongX(Single)
  fullName: Vim.Math3d.MathOps.AlongX(System.Single)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: AlongX
    path: ../src/MathOpsPartial.cs
    startLine: 338
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 AlongX(this float self)
    parameters:
    - id: self
      type: System.Single
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AlongX(self As Single) As Vector3
  overload: Vim.Math3d.MathOps.AlongX*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.AlongY(System.Single)
  commentId: M:Vim.Math3d.MathOps.AlongY(System.Single)
  id: AlongY(System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: AlongY(Single)
  nameWithType: MathOps.AlongY(Single)
  fullName: Vim.Math3d.MathOps.AlongY(System.Single)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: AlongY
    path: ../src/MathOpsPartial.cs
    startLine: 339
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 AlongY(this float self)
    parameters:
    - id: self
      type: System.Single
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AlongY(self As Single) As Vector3
  overload: Vim.Math3d.MathOps.AlongY*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.AlongZ(System.Single)
  commentId: M:Vim.Math3d.MathOps.AlongZ(System.Single)
  id: AlongZ(System.Single)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: AlongZ(Single)
  nameWithType: MathOps.AlongZ(Single)
  fullName: Vim.Math3d.MathOps.AlongZ(System.Single)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: AlongZ
    path: ../src/MathOpsPartial.cs
    startLine: 340
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 AlongZ(this float self)
    parameters:
    - id: self
      type: System.Single
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AlongZ(self As Single) As Vector3
  overload: Vim.Math3d.MathOps.AlongZ*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Transform(Vim.Math3d.Vector3,Vim.Math3d.Quaternion)
  commentId: M:Vim.Math3d.MathOps.Transform(Vim.Math3d.Vector3,Vim.Math3d.Quaternion)
  id: Transform(Vim.Math3d.Vector3,Vim.Math3d.Quaternion)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Transform(Vector3, Quaternion)
  nameWithType: MathOps.Transform(Vector3, Quaternion)
  fullName: Vim.Math3d.MathOps.Transform(Vim.Math3d.Vector3, Vim.Math3d.Quaternion)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Transform
    path: ../src/MathOpsPartial.cs
    startLine: 345
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nTransforms a vector by the given Quaternion rotation value.\n"
  example: []
  syntax:
    content: public static Vector3 Transform(this Vector3 value, Quaternion rotation)
    parameters:
    - id: value
      type: Vim.Math3d.Vector3
    - id: rotation
      type: Vim.Math3d.Quaternion
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Transform(value As Vector3, rotation As Quaternion) As Vector3
  overload: Vim.Math3d.MathOps.Transform*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Reflect(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.MathOps.Reflect(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  id: Reflect(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Reflect(Vector2, Vector2)
  nameWithType: MathOps.Reflect(Vector2, Vector2)
  fullName: Vim.Math3d.MathOps.Reflect(Vim.Math3d.Vector2, Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Reflect
    path: ../src/MathOpsPartial.cs
    startLine: 371
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nReturns the reflection of a vector off a surface that has the specified normal.\n"
  example: []
  syntax:
    content: public static Vector2 Reflect(Vector2 vector, Vector2 normal)
    parameters:
    - id: vector
      type: Vim.Math3d.Vector2
    - id: normal
      type: Vim.Math3d.Vector2
    return:
      type: Vim.Math3d.Vector2
    content.vb: Public Shared Function Reflect(vector As Vector2, normal As Vector2) As Vector2
  overload: Vim.Math3d.MathOps.Reflect*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Reflect(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.MathOps.Reflect(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  id: Reflect(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Reflect(Vector3, Vector3)
  nameWithType: MathOps.Reflect(Vector3, Vector3)
  fullName: Vim.Math3d.MathOps.Reflect(Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Reflect
    path: ../src/MathOpsPartial.cs
    startLine: 378
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nReturns the reflection of a vector off a surface that has the specified normal.\n"
  example: []
  syntax:
    content: public static Vector3 Reflect(Vector3 vector, Vector3 normal)
    parameters:
    - id: vector
      type: Vim.Math3d.Vector3
    - id: normal
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Vector3
    content.vb: Public Shared Function Reflect(vector As Vector3, normal As Vector3) As Vector3
  overload: Vim.Math3d.MathOps.Reflect*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Transform(Vim.Math3d.Vector2,Vim.Math3d.Matrix4x4)
  commentId: M:Vim.Math3d.MathOps.Transform(Vim.Math3d.Vector2,Vim.Math3d.Matrix4x4)
  id: Transform(Vim.Math3d.Vector2,Vim.Math3d.Matrix4x4)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Transform(Vector2, Matrix4x4)
  nameWithType: MathOps.Transform(Vector2, Matrix4x4)
  fullName: Vim.Math3d.MathOps.Transform(Vim.Math3d.Vector2, Vim.Math3d.Matrix4x4)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Transform
    path: ../src/MathOpsPartial.cs
    startLine: 385
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nTransforms a vector by the given matrix.\n"
  example: []
  syntax:
    content: public static Vector2 Transform(this Vector2 position, Matrix4x4 matrix)
    parameters:
    - id: position
      type: Vim.Math3d.Vector2
    - id: matrix
      type: Vim.Math3d.Matrix4x4
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Transform(position As Vector2, matrix As Matrix4x4) As Vector2
  overload: Vim.Math3d.MathOps.Transform*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.TransformNormal(Vim.Math3d.Vector2,Vim.Math3d.Matrix4x4)
  commentId: M:Vim.Math3d.MathOps.TransformNormal(Vim.Math3d.Vector2,Vim.Math3d.Matrix4x4)
  id: TransformNormal(Vim.Math3d.Vector2,Vim.Math3d.Matrix4x4)
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: TransformNormal(Vector2, Matrix4x4)
  nameWithType: MathOps.TransformNormal(Vector2, Matrix4x4)
  fullName: Vim.Math3d.MathOps.TransformNormal(Vim.Math3d.Vector2, Vim.Math3d.Matrix4x4)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: TransformNormal
    path: ../src/MathOpsPartial.cs
    startLine: 394
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nTransforms a vector normal by the given matrix.\n"
  example: []
  syntax:
    content: public static Vector2 TransformNormal(Vector2 normal, Matrix4x4 matrix)
    parameters:
    - id: normal
      type: Vim.Math3d.Vector2
    - id: matrix
      type: Vim.Math3d.Matrix4x4
    return:
      type: Vim.Math3d.Vector2
    content.vb: Public Shared Function TransformNormal(normal As Vector2, matrix As Matrix4x4) As Vector2
  overload: Vim.Math3d.MathOps.TransformNormal*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.TransformNormal(Vim.Math3d.Vector3,Vim.Math3d.Matrix4x4)
  commentId: M:Vim.Math3d.MathOps.TransformNormal(Vim.Math3d.Vector3,Vim.Math3d.Matrix4x4)
  id: TransformNormal(Vim.Math3d.Vector3,Vim.Math3d.Matrix4x4)
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: TransformNormal(Vector3, Matrix4x4)
  nameWithType: MathOps.TransformNormal(Vector3, Matrix4x4)
  fullName: Vim.Math3d.MathOps.TransformNormal(Vim.Math3d.Vector3, Vim.Math3d.Matrix4x4)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: TransformNormal
    path: ../src/MathOpsPartial.cs
    startLine: 403
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nTransforms a vector normal by the given matrix.\n"
  example: []
  syntax:
    content: public static Vector3 TransformNormal(Vector3 normal, Matrix4x4 matrix)
    parameters:
    - id: normal
      type: Vim.Math3d.Vector3
    - id: matrix
      type: Vim.Math3d.Matrix4x4
    return:
      type: Vim.Math3d.Vector3
    content.vb: Public Shared Function TransformNormal(normal As Vector3, matrix As Matrix4x4) As Vector3
  overload: Vim.Math3d.MathOps.TransformNormal*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.TransformNormal(Vim.Math3d.Vector4,Vim.Math3d.Matrix4x4)
  commentId: M:Vim.Math3d.MathOps.TransformNormal(Vim.Math3d.Vector4,Vim.Math3d.Matrix4x4)
  id: TransformNormal(Vim.Math3d.Vector4,Vim.Math3d.Matrix4x4)
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: TransformNormal(Vector4, Matrix4x4)
  nameWithType: MathOps.TransformNormal(Vector4, Matrix4x4)
  fullName: Vim.Math3d.MathOps.TransformNormal(Vim.Math3d.Vector4, Vim.Math3d.Matrix4x4)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: TransformNormal
    path: ../src/MathOpsPartial.cs
    startLine: 414
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nTransforms a vector normal by the given matrix.\n"
  example: []
  syntax:
    content: public static Vector4 TransformNormal(Vector4 normal, Matrix4x4 matrix)
    parameters:
    - id: normal
      type: Vim.Math3d.Vector4
    - id: matrix
      type: Vim.Math3d.Matrix4x4
    return:
      type: Vim.Math3d.Vector4
    content.vb: Public Shared Function TransformNormal(normal As Vector4, matrix As Matrix4x4) As Vector4
  overload: Vim.Math3d.MathOps.TransformNormal*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Transform(Vim.Math3d.Vector2,Vim.Math3d.Quaternion)
  commentId: M:Vim.Math3d.MathOps.Transform(Vim.Math3d.Vector2,Vim.Math3d.Quaternion)
  id: Transform(Vim.Math3d.Vector2,Vim.Math3d.Quaternion)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Transform(Vector2, Quaternion)
  nameWithType: MathOps.Transform(Vector2, Quaternion)
  fullName: Vim.Math3d.MathOps.Transform(Vim.Math3d.Vector2, Vim.Math3d.Quaternion)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Transform
    path: ../src/MathOpsPartial.cs
    startLine: 426
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nTransforms a vector by the given Quaternion rotation value.\n"
  example: []
  syntax:
    content: public static Vector2 Transform(this Vector2 value, Quaternion rotation)
    parameters:
    - id: value
      type: Vim.Math3d.Vector2
    - id: rotation
      type: Vim.Math3d.Quaternion
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Transform(value As Vector2, rotation As Quaternion) As Vector2
  overload: Vim.Math3d.MathOps.Transform*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.TransformToVector4(Vim.Math3d.Vector2,Vim.Math3d.Quaternion)
  commentId: M:Vim.Math3d.MathOps.TransformToVector4(Vim.Math3d.Vector2,Vim.Math3d.Quaternion)
  id: TransformToVector4(Vim.Math3d.Vector2,Vim.Math3d.Quaternion)
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: TransformToVector4(Vector2, Quaternion)
  nameWithType: MathOps.TransformToVector4(Vector2, Quaternion)
  fullName: Vim.Math3d.MathOps.TransformToVector4(Vim.Math3d.Vector2, Vim.Math3d.Quaternion)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: TransformToVector4
    path: ../src/MathOpsPartial.cs
    startLine: 446
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nTransforms a vector by the given Quaternion rotation value.\n"
  example: []
  syntax:
    content: public static Vector4 TransformToVector4(Vector2 value, Quaternion rotation)
    parameters:
    - id: value
      type: Vim.Math3d.Vector2
    - id: rotation
      type: Vim.Math3d.Quaternion
    return:
      type: Vim.Math3d.Vector4
    content.vb: Public Shared Function TransformToVector4(value As Vector2, rotation As Quaternion) As Vector4
  overload: Vim.Math3d.MathOps.TransformToVector4*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.TransformToVector4(Vim.Math3d.Vector3,Vim.Math3d.Quaternion)
  commentId: M:Vim.Math3d.MathOps.TransformToVector4(Vim.Math3d.Vector3,Vim.Math3d.Quaternion)
  id: TransformToVector4(Vim.Math3d.Vector3,Vim.Math3d.Quaternion)
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: TransformToVector4(Vector3, Quaternion)
  nameWithType: MathOps.TransformToVector4(Vector3, Quaternion)
  fullName: Vim.Math3d.MathOps.TransformToVector4(Vim.Math3d.Vector3, Vim.Math3d.Quaternion)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: TransformToVector4
    path: ../src/MathOpsPartial.cs
    startLine: 473
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nTransforms a vector by the given Quaternion rotation value.\n"
  example: []
  syntax:
    content: public static Vector4 TransformToVector4(Vector3 value, Quaternion rotation)
    parameters:
    - id: value
      type: Vim.Math3d.Vector3
    - id: rotation
      type: Vim.Math3d.Quaternion
    return:
      type: Vim.Math3d.Vector4
    content.vb: Public Shared Function TransformToVector4(value As Vector3, rotation As Quaternion) As Vector4
  overload: Vim.Math3d.MathOps.TransformToVector4*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.TransformToVector4(Vim.Math3d.Vector2,Vim.Math3d.Matrix4x4)
  commentId: M:Vim.Math3d.MathOps.TransformToVector4(Vim.Math3d.Vector2,Vim.Math3d.Matrix4x4)
  id: TransformToVector4(Vim.Math3d.Vector2,Vim.Math3d.Matrix4x4)
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: TransformToVector4(Vector2, Matrix4x4)
  nameWithType: MathOps.TransformToVector4(Vector2, Matrix4x4)
  fullName: Vim.Math3d.MathOps.TransformToVector4(Vim.Math3d.Vector2, Vim.Math3d.Matrix4x4)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: TransformToVector4
    path: ../src/MathOpsPartial.cs
    startLine: 500
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nTransforms a vector by the given matrix.\n"
  example: []
  syntax:
    content: public static Vector4 TransformToVector4(Vector2 position, Matrix4x4 matrix)
    parameters:
    - id: position
      type: Vim.Math3d.Vector2
    - id: matrix
      type: Vim.Math3d.Matrix4x4
    return:
      type: Vim.Math3d.Vector4
    content.vb: Public Shared Function TransformToVector4(position As Vector2, matrix As Matrix4x4) As Vector4
  overload: Vim.Math3d.MathOps.TransformToVector4*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.TransformToVector4(Vim.Math3d.Vector3,Vim.Math3d.Matrix4x4)
  commentId: M:Vim.Math3d.MathOps.TransformToVector4(Vim.Math3d.Vector3,Vim.Math3d.Matrix4x4)
  id: TransformToVector4(Vim.Math3d.Vector3,Vim.Math3d.Matrix4x4)
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: TransformToVector4(Vector3, Matrix4x4)
  nameWithType: MathOps.TransformToVector4(Vector3, Matrix4x4)
  fullName: Vim.Math3d.MathOps.TransformToVector4(Vim.Math3d.Vector3, Vim.Math3d.Matrix4x4)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: TransformToVector4
    path: ../src/MathOpsPartial.cs
    startLine: 511
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nTransforms a vector by the given matrix.\n"
  example: []
  syntax:
    content: public static Vector4 TransformToVector4(Vector3 position, Matrix4x4 matrix)
    parameters:
    - id: position
      type: Vim.Math3d.Vector3
    - id: matrix
      type: Vim.Math3d.Matrix4x4
    return:
      type: Vim.Math3d.Vector4
    content.vb: Public Shared Function TransformToVector4(position As Vector3, matrix As Matrix4x4) As Vector4
  overload: Vim.Math3d.MathOps.TransformToVector4*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.Cross(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.MathOps.Cross(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  id: Cross(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Cross(Vector3, Vector3)
  nameWithType: MathOps.Cross(Vector3, Vector3)
  fullName: Vim.Math3d.MathOps.Cross(Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Cross
    path: ../src/MathOpsPartial.cs
    startLine: 519
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Vector3 Cross(Vector3 a, Vector3 b)
    parameters:
    - id: a
      type: Vim.Math3d.Vector3
    - id: b
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Vector3
    content.vb: Public Shared Function Cross(a As Vector3, b As Vector3) As Vector3
  overload: Vim.Math3d.MathOps.Cross*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.ToBox(Vim.Math3d.Stats{Vim.Math3d.Vector3})
  commentId: M:Vim.Math3d.MathOps.ToBox(Vim.Math3d.Stats{Vim.Math3d.Vector3})
  id: ToBox(Vim.Math3d.Stats{Vim.Math3d.Vector3})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: ToBox(Stats<Vector3>)
  nameWithType: MathOps.ToBox(Stats<Vector3>)
  fullName: Vim.Math3d.MathOps.ToBox(Vim.Math3d.Stats<Vim.Math3d.Vector3>)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToBox
    path: ../src/MathOpsPartial.cs
    startLine: 526
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nReturns the bounding box, given stats on a Vector3\n"
  example: []
  syntax:
    content: public static AABox ToBox(this Stats<Vector3> stats)
    parameters:
    - id: stats
      type: Vim.Math3d.Stats{Vim.Math3d.Vector3}
    return:
      type: Vim.Math3d.AABox
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToBox(stats As Stats(Of Vector3)) As AABox
  overload: Vim.Math3d.MathOps.ToBox*
  nameWithType.vb: MathOps.ToBox(Stats(Of Vector3))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.ToBox(Vim.Math3d.Stats(Of Vim.Math3d.Vector3))
  name.vb: ToBox(Stats(Of Vector3))
- uid: Vim.Math3d.MathOps.ToBox(Vim.Math3d.Stats{Vim.Math3d.DVector3})
  commentId: M:Vim.Math3d.MathOps.ToBox(Vim.Math3d.Stats{Vim.Math3d.DVector3})
  id: ToBox(Vim.Math3d.Stats{Vim.Math3d.DVector3})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: ToBox(Stats<DVector3>)
  nameWithType: MathOps.ToBox(Stats<DVector3>)
  fullName: Vim.Math3d.MathOps.ToBox(Vim.Math3d.Stats<Vim.Math3d.DVector3>)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToBox
    path: ../src/MathOpsPartial.cs
    startLine: 533
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nReturns the bounding box, given stats on a DVector3\n"
  example: []
  syntax:
    content: public static DAABox ToBox(this Stats<DVector3> stats)
    parameters:
    - id: stats
      type: Vim.Math3d.Stats{Vim.Math3d.DVector3}
    return:
      type: Vim.Math3d.DAABox
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToBox(stats As Stats(Of DVector3)) As DAABox
  overload: Vim.Math3d.MathOps.ToBox*
  nameWithType.vb: MathOps.ToBox(Stats(Of DVector3))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.ToBox(Vim.Math3d.Stats(Of Vim.Math3d.DVector3))
  name.vb: ToBox(Stats(Of DVector3))
- uid: Vim.Math3d.MathOps.ToBox(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector3})
  commentId: M:Vim.Math3d.MathOps.ToBox(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector3})
  id: ToBox(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector3})
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: ToBox(IEnumerable<Vector3>)
  nameWithType: MathOps.ToBox(IEnumerable<Vector3>)
  fullName: Vim.Math3d.MathOps.ToBox(System.Collections.Generic.IEnumerable<Vim.Math3d.Vector3>)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToBox
    path: ../src/MathOpsPartial.cs
    startLine: 540
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nReturns the bounding box for a series of points\n"
  example: []
  syntax:
    content: public static AABox ToBox(this IEnumerable<Vector3> points)
    parameters:
    - id: points
      type: System.Collections.Generic.IEnumerable{Vim.Math3d.Vector3}
    return:
      type: Vim.Math3d.AABox
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToBox(points As IEnumerable(Of Vector3)) As AABox
  overload: Vim.Math3d.MathOps.ToBox*
  nameWithType.vb: MathOps.ToBox(IEnumerable(Of Vector3))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.MathOps.ToBox(System.Collections.Generic.IEnumerable(Of Vim.Math3d.Vector3))
  name.vb: ToBox(IEnumerable(Of Vector3))
- uid: Vim.Math3d.MathOps.Coplanar(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single)
  commentId: M:Vim.Math3d.MathOps.Coplanar(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single)
  id: Coplanar(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single)
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: Coplanar(Vector3, Vector3, Vector3, Vector3, Single)
  nameWithType: MathOps.Coplanar(Vector3, Vector3, Vector3, Vector3, Single)
  fullName: Vim.Math3d.MathOps.Coplanar(Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3, System.Single)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Coplanar
    path: ../src/MathOpsPartial.cs
    startLine: 547
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nReturns true if the four points are co-planar. \n"
  example: []
  syntax:
    content: public static bool Coplanar(Vector3 v1, Vector3 v2, Vector3 v3, Vector3 v4, float epsilon = 1E-07F)
    parameters:
    - id: v1
      type: Vim.Math3d.Vector3
    - id: v2
      type: Vim.Math3d.Vector3
    - id: v3
      type: Vim.Math3d.Vector3
    - id: v4
      type: Vim.Math3d.Vector3
    - id: epsilon
      type: System.Single
    return:
      type: System.Boolean
    content.vb: Public Shared Function Coplanar(v1 As Vector3, v2 As Vector3, v3 As Vector3, v4 As Vector3, epsilon As Single = 1E-07F) As Boolean
  overload: Vim.Math3d.MathOps.Coplanar*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.ToMatrix(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.MathOps.ToMatrix(Vim.Math3d.Vector3)
  id: ToMatrix(Vim.Math3d.Vector3)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: ToMatrix(Vector3)
  nameWithType: MathOps.ToMatrix(Vector3)
  fullName: Vim.Math3d.MathOps.ToMatrix(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToMatrix
    path: ../src/MathOpsPartial.cs
    startLine: 554
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nReturns a translation matrix. \n"
  example: []
  syntax:
    content: public static Matrix4x4 ToMatrix(this Vector3 self)
    parameters:
    - id: self
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Matrix4x4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToMatrix(self As Vector3) As Matrix4x4
  overload: Vim.Math3d.MathOps.ToMatrix*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.ToMatrix(Vim.Math3d.Quaternion)
  commentId: M:Vim.Math3d.MathOps.ToMatrix(Vim.Math3d.Quaternion)
  id: ToMatrix(Vim.Math3d.Quaternion)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: ToMatrix(Quaternion)
  nameWithType: MathOps.ToMatrix(Quaternion)
  fullName: Vim.Math3d.MathOps.ToMatrix(Vim.Math3d.Quaternion)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToMatrix
    path: ../src/MathOpsPartial.cs
    startLine: 561
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nReturns a rotation matrix. \n"
  example: []
  syntax:
    content: public static Matrix4x4 ToMatrix(this Quaternion self)
    parameters:
    - id: self
      type: Vim.Math3d.Quaternion
    return:
      type: Vim.Math3d.Matrix4x4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToMatrix(self As Quaternion) As Matrix4x4
  overload: Vim.Math3d.MathOps.ToMatrix*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.MathOps.ToMatrix(Vim.Math3d.Transform)
  commentId: M:Vim.Math3d.MathOps.ToMatrix(Vim.Math3d.Transform)
  id: ToMatrix(Vim.Math3d.Transform)
  isExtensionMethod: true
  parent: Vim.Math3d.MathOps
  langs:
  - csharp
  - vb
  name: ToMatrix(Transform)
  nameWithType: MathOps.ToMatrix(Transform)
  fullName: Vim.Math3d.MathOps.ToMatrix(Vim.Math3d.Transform)
  type: Method
  source:
    remote:
      path: src/MathOpsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToMatrix
    path: ../src/MathOpsPartial.cs
    startLine: 568
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nReturns a matri for translation and then rotation. \n"
  example: []
  syntax:
    content: public static Matrix4x4 ToMatrix(this Transform self)
    parameters:
    - id: self
      type: Vim.Math3d.Transform
    return:
      type: Vim.Math3d.Matrix4x4
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToMatrix(self As Transform) As Matrix4x4
  overload: Vim.Math3d.MathOps.ToMatrix*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Vim.Math3d
  commentId: N:Vim.Math3d
  name: Vim.Math3d
  nameWithType: Vim.Math3d
  fullName: Vim.Math3d
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Vim.Math3d.MathOps.Abs*
  commentId: Overload:Vim.Math3d.MathOps.Abs
  name: Abs
  nameWithType: MathOps.Abs
  fullName: Vim.Math3d.MathOps.Abs
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Vim.Math3d.MathOps.Acos*
  commentId: Overload:Vim.Math3d.MathOps.Acos
  name: Acos
  nameWithType: MathOps.Acos
  fullName: Vim.Math3d.MathOps.Acos
- uid: Vim.Math3d.MathOps.Asin*
  commentId: Overload:Vim.Math3d.MathOps.Asin
  name: Asin
  nameWithType: MathOps.Asin
  fullName: Vim.Math3d.MathOps.Asin
- uid: Vim.Math3d.MathOps.Atan*
  commentId: Overload:Vim.Math3d.MathOps.Atan
  name: Atan
  nameWithType: MathOps.Atan
  fullName: Vim.Math3d.MathOps.Atan
- uid: Vim.Math3d.MathOps.Cos*
  commentId: Overload:Vim.Math3d.MathOps.Cos
  name: Cos
  nameWithType: MathOps.Cos
  fullName: Vim.Math3d.MathOps.Cos
- uid: Vim.Math3d.MathOps.Cosh*
  commentId: Overload:Vim.Math3d.MathOps.Cosh
  name: Cosh
  nameWithType: MathOps.Cosh
  fullName: Vim.Math3d.MathOps.Cosh
- uid: Vim.Math3d.MathOps.Exp*
  commentId: Overload:Vim.Math3d.MathOps.Exp
  name: Exp
  nameWithType: MathOps.Exp
  fullName: Vim.Math3d.MathOps.Exp
- uid: Vim.Math3d.MathOps.Log*
  commentId: Overload:Vim.Math3d.MathOps.Log
  name: Log
  nameWithType: MathOps.Log
  fullName: Vim.Math3d.MathOps.Log
- uid: Vim.Math3d.MathOps.Log10*
  commentId: Overload:Vim.Math3d.MathOps.Log10
  name: Log10
  nameWithType: MathOps.Log10
  fullName: Vim.Math3d.MathOps.Log10
- uid: Vim.Math3d.MathOps.Sin*
  commentId: Overload:Vim.Math3d.MathOps.Sin
  name: Sin
  nameWithType: MathOps.Sin
  fullName: Vim.Math3d.MathOps.Sin
- uid: Vim.Math3d.MathOps.Sinh*
  commentId: Overload:Vim.Math3d.MathOps.Sinh
  name: Sinh
  nameWithType: MathOps.Sinh
  fullName: Vim.Math3d.MathOps.Sinh
- uid: Vim.Math3d.MathOps.Sqrt*
  commentId: Overload:Vim.Math3d.MathOps.Sqrt
  name: Sqrt
  nameWithType: MathOps.Sqrt
  fullName: Vim.Math3d.MathOps.Sqrt
- uid: Vim.Math3d.MathOps.Tan*
  commentId: Overload:Vim.Math3d.MathOps.Tan
  name: Tan
  nameWithType: MathOps.Tan
  fullName: Vim.Math3d.MathOps.Tan
- uid: Vim.Math3d.MathOps.Tanh*
  commentId: Overload:Vim.Math3d.MathOps.Tanh
  name: Tanh
  nameWithType: MathOps.Tanh
  fullName: Vim.Math3d.MathOps.Tanh
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Vim.Math3d.MathOps.Sign*
  commentId: Overload:Vim.Math3d.MathOps.Sign
  name: Sign
  nameWithType: MathOps.Sign
  fullName: Vim.Math3d.MathOps.Sign
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Vim.Math3d.MathOps.Magnitude*
  commentId: Overload:Vim.Math3d.MathOps.Magnitude
  name: Magnitude
  nameWithType: MathOps.Magnitude
  fullName: Vim.Math3d.MathOps.Magnitude
- uid: Vim.Math3d.MathOps.MagnitudeSquared*
  commentId: Overload:Vim.Math3d.MathOps.MagnitudeSquared
  name: MagnitudeSquared
  nameWithType: MathOps.MagnitudeSquared
  fullName: Vim.Math3d.MathOps.MagnitudeSquared
- uid: Vim.Math3d.MathOps.Inverse*
  commentId: Overload:Vim.Math3d.MathOps.Inverse
  name: Inverse
  nameWithType: MathOps.Inverse
  fullName: Vim.Math3d.MathOps.Inverse
- uid: Vim.Math3d.MathOps.Truncate*
  commentId: Overload:Vim.Math3d.MathOps.Truncate
  name: Truncate
  nameWithType: MathOps.Truncate
  fullName: Vim.Math3d.MathOps.Truncate
- uid: Vim.Math3d.MathOps.Ceiling*
  commentId: Overload:Vim.Math3d.MathOps.Ceiling
  name: Ceiling
  nameWithType: MathOps.Ceiling
  fullName: Vim.Math3d.MathOps.Ceiling
- uid: Vim.Math3d.MathOps.Floor*
  commentId: Overload:Vim.Math3d.MathOps.Floor
  name: Floor
  nameWithType: MathOps.Floor
  fullName: Vim.Math3d.MathOps.Floor
- uid: Vim.Math3d.MathOps.Round*
  commentId: Overload:Vim.Math3d.MathOps.Round
  name: Round
  nameWithType: MathOps.Round
  fullName: Vim.Math3d.MathOps.Round
- uid: Vim.Math3d.MathOps.ToRadians*
  commentId: Overload:Vim.Math3d.MathOps.ToRadians
  name: ToRadians
  nameWithType: MathOps.ToRadians
  fullName: Vim.Math3d.MathOps.ToRadians
- uid: Vim.Math3d.MathOps.ToDegrees*
  commentId: Overload:Vim.Math3d.MathOps.ToDegrees
  name: ToDegrees
  nameWithType: MathOps.ToDegrees
  fullName: Vim.Math3d.MathOps.ToDegrees
- uid: Vim.Math3d.MathOps.Distance*
  commentId: Overload:Vim.Math3d.MathOps.Distance
  name: Distance
  nameWithType: MathOps.Distance
  fullName: Vim.Math3d.MathOps.Distance
- uid: Vim.Math3d.MathOps.IsInfinity*
  commentId: Overload:Vim.Math3d.MathOps.IsInfinity
  name: IsInfinity
  nameWithType: MathOps.IsInfinity
  fullName: Vim.Math3d.MathOps.IsInfinity
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Vim.Math3d.MathOps.IsNaN*
  commentId: Overload:Vim.Math3d.MathOps.IsNaN
  name: IsNaN
  nameWithType: MathOps.IsNaN
  fullName: Vim.Math3d.MathOps.IsNaN
- uid: Vim.Math3d.MathOps.AlmostEquals*
  commentId: Overload:Vim.Math3d.MathOps.AlmostEquals
  name: AlmostEquals
  nameWithType: MathOps.AlmostEquals
  fullName: Vim.Math3d.MathOps.AlmostEquals
- uid: Vim.Math3d.MathOps.AlmostZero*
  commentId: Overload:Vim.Math3d.MathOps.AlmostZero
  name: AlmostZero
  nameWithType: MathOps.AlmostZero
  fullName: Vim.Math3d.MathOps.AlmostZero
- uid: Vim.Math3d.MathOps.Smoothstep*
  commentId: Overload:Vim.Math3d.MathOps.Smoothstep
  name: Smoothstep
  nameWithType: MathOps.Smoothstep
  fullName: Vim.Math3d.MathOps.Smoothstep
- uid: Vim.Math3d.MathOps.Add*
  commentId: Overload:Vim.Math3d.MathOps.Add
  name: Add
  nameWithType: MathOps.Add
  fullName: Vim.Math3d.MathOps.Add
- uid: Vim.Math3d.MathOps.Subtract*
  commentId: Overload:Vim.Math3d.MathOps.Subtract
  name: Subtract
  nameWithType: MathOps.Subtract
  fullName: Vim.Math3d.MathOps.Subtract
- uid: Vim.Math3d.MathOps.Multiply*
  commentId: Overload:Vim.Math3d.MathOps.Multiply
  name: Multiply
  nameWithType: MathOps.Multiply
  fullName: Vim.Math3d.MathOps.Multiply
- uid: Vim.Math3d.MathOps.Divide*
  commentId: Overload:Vim.Math3d.MathOps.Divide
  name: Divide
  nameWithType: MathOps.Divide
  fullName: Vim.Math3d.MathOps.Divide
- uid: Vim.Math3d.MathOps.Negate*
  commentId: Overload:Vim.Math3d.MathOps.Negate
  name: Negate
  nameWithType: MathOps.Negate
  fullName: Vim.Math3d.MathOps.Negate
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Vim.Math3d.Vector2
  commentId: T:Vim.Math3d.Vector2
  parent: Vim.Math3d
  name: Vector2
  nameWithType: Vector2
  fullName: Vim.Math3d.Vector2
- uid: Vim.Math3d.Vector3
  commentId: T:Vim.Math3d.Vector3
  parent: Vim.Math3d
  name: Vector3
  nameWithType: Vector3
  fullName: Vim.Math3d.Vector3
- uid: Vim.Math3d.Vector4
  commentId: T:Vim.Math3d.Vector4
  parent: Vim.Math3d
  name: Vector4
  nameWithType: Vector4
  fullName: Vim.Math3d.Vector4
- uid: Vim.Math3d.DVector2
  commentId: T:Vim.Math3d.DVector2
  parent: Vim.Math3d
  name: DVector2
  nameWithType: DVector2
  fullName: Vim.Math3d.DVector2
- uid: Vim.Math3d.DVector3
  commentId: T:Vim.Math3d.DVector3
  parent: Vim.Math3d
  name: DVector3
  nameWithType: DVector3
  fullName: Vim.Math3d.DVector3
- uid: Vim.Math3d.DVector4
  commentId: T:Vim.Math3d.DVector4
  parent: Vim.Math3d
  name: DVector4
  nameWithType: DVector4
  fullName: Vim.Math3d.DVector4
- uid: Vim.Math3d.MathOps.Within*
  commentId: Overload:Vim.Math3d.MathOps.Within
  name: Within
  nameWithType: MathOps.Within
  fullName: Vim.Math3d.MathOps.Within
- uid: Vim.Math3d.MathOps.Sqr*
  commentId: Overload:Vim.Math3d.MathOps.Sqr
  name: Sqr
  nameWithType: MathOps.Sqr
  fullName: Vim.Math3d.MathOps.Sqr
- uid: Vim.Math3d.MathOps.Cube*
  commentId: Overload:Vim.Math3d.MathOps.Cube
  name: Cube
  nameWithType: MathOps.Cube
  fullName: Vim.Math3d.MathOps.Cube
- uid: Vim.Math3d.MathOps.Min*
  commentId: Overload:Vim.Math3d.MathOps.Min
  name: Min
  nameWithType: MathOps.Min
  fullName: Vim.Math3d.MathOps.Min
- uid: Vim.Math3d.MathOps.Max*
  commentId: Overload:Vim.Math3d.MathOps.Max
  name: Max
  nameWithType: MathOps.Max
  fullName: Vim.Math3d.MathOps.Max
- uid: Vim.Math3d.MathOps.Gt*
  commentId: Overload:Vim.Math3d.MathOps.Gt
  name: Gt
  nameWithType: MathOps.Gt
  fullName: Vim.Math3d.MathOps.Gt
- uid: Vim.Math3d.MathOps.Lt*
  commentId: Overload:Vim.Math3d.MathOps.Lt
  name: Lt
  nameWithType: MathOps.Lt
  fullName: Vim.Math3d.MathOps.Lt
- uid: Vim.Math3d.MathOps.GtEq*
  commentId: Overload:Vim.Math3d.MathOps.GtEq
  name: GtEq
  nameWithType: MathOps.GtEq
  fullName: Vim.Math3d.MathOps.GtEq
- uid: Vim.Math3d.MathOps.LtEq*
  commentId: Overload:Vim.Math3d.MathOps.LtEq
  name: LtEq
  nameWithType: MathOps.LtEq
  fullName: Vim.Math3d.MathOps.LtEq
- uid: Vim.Math3d.MathOps.Eq*
  commentId: Overload:Vim.Math3d.MathOps.Eq
  name: Eq
  nameWithType: MathOps.Eq
  fullName: Vim.Math3d.MathOps.Eq
- uid: Vim.Math3d.MathOps.NEq*
  commentId: Overload:Vim.Math3d.MathOps.NEq
  name: NEq
  nameWithType: MathOps.NEq
  fullName: Vim.Math3d.MathOps.NEq
- uid: Vim.Math3d.MathOps.And*
  commentId: Overload:Vim.Math3d.MathOps.And
  name: And
  nameWithType: MathOps.And
  fullName: Vim.Math3d.MathOps.And
- uid: Vim.Math3d.MathOps.Or*
  commentId: Overload:Vim.Math3d.MathOps.Or
  name: Or
  nameWithType: MathOps.Or
  fullName: Vim.Math3d.MathOps.Or
- uid: Vim.Math3d.MathOps.NAnd*
  commentId: Overload:Vim.Math3d.MathOps.NAnd
  name: NAnd
  nameWithType: MathOps.NAnd
  fullName: Vim.Math3d.MathOps.NAnd
- uid: Vim.Math3d.MathOps.XOr*
  commentId: Overload:Vim.Math3d.MathOps.XOr
  name: XOr
  nameWithType: MathOps.XOr
  fullName: Vim.Math3d.MathOps.XOr
- uid: Vim.Math3d.MathOps.NOr*
  commentId: Overload:Vim.Math3d.MathOps.NOr
  name: NOr
  nameWithType: MathOps.NOr
  fullName: Vim.Math3d.MathOps.NOr
- uid: Vim.Math3d.MathOps.Not*
  commentId: Overload:Vim.Math3d.MathOps.Not
  name: Not
  nameWithType: MathOps.Not
  fullName: Vim.Math3d.MathOps.Not
- uid: Vim.Math3d.MathOps.DivideRoundUp*
  commentId: Overload:Vim.Math3d.MathOps.DivideRoundUp
  name: DivideRoundUp
  nameWithType: MathOps.DivideRoundUp
  fullName: Vim.Math3d.MathOps.DivideRoundUp
- uid: Vim.Math3d.MathOps.IsEven*
  commentId: Overload:Vim.Math3d.MathOps.IsEven
  name: IsEven
  nameWithType: MathOps.IsEven
  fullName: Vim.Math3d.MathOps.IsEven
- uid: Vim.Math3d.MathOps.IsOdd*
  commentId: Overload:Vim.Math3d.MathOps.IsOdd
  name: IsOdd
  nameWithType: MathOps.IsOdd
  fullName: Vim.Math3d.MathOps.IsOdd
- uid: Vim.Math3d.MathOps.IsPowerOfTwo*
  commentId: Overload:Vim.Math3d.MathOps.IsPowerOfTwo
  name: IsPowerOfTwo
  nameWithType: MathOps.IsPowerOfTwo
  fullName: Vim.Math3d.MathOps.IsPowerOfTwo
- uid: Vim.Math3d.MathOps.Clamp*
  commentId: Overload:Vim.Math3d.MathOps.Clamp
  name: Clamp
  nameWithType: MathOps.Clamp
  fullName: Vim.Math3d.MathOps.Clamp
- uid: Vim.Math3d.MathOps.Lerp*
  commentId: Overload:Vim.Math3d.MathOps.Lerp
  name: Lerp
  nameWithType: MathOps.Lerp
  fullName: Vim.Math3d.MathOps.Lerp
- uid: Vim.Math3d.MathOps.InverseLerp*
  commentId: Overload:Vim.Math3d.MathOps.InverseLerp
  name: InverseLerp
  nameWithType: MathOps.InverseLerp
  fullName: Vim.Math3d.MathOps.InverseLerp
- uid: Vim.Math3d.MathOps.LerpPrecise*
  commentId: Overload:Vim.Math3d.MathOps.LerpPrecise
  name: LerpPrecise
  nameWithType: MathOps.LerpPrecise
  fullName: Vim.Math3d.MathOps.LerpPrecise
- uid: Vim.Math3d.MathOps.ClampLower*
  commentId: Overload:Vim.Math3d.MathOps.ClampLower
  name: ClampLower
  nameWithType: MathOps.ClampLower
  fullName: Vim.Math3d.MathOps.ClampLower
- uid: Vim.Math3d.MathOps.ClampUpper*
  commentId: Overload:Vim.Math3d.MathOps.ClampUpper
  name: ClampUpper
  nameWithType: MathOps.ClampUpper
  fullName: Vim.Math3d.MathOps.ClampUpper
- uid: Vim.Math3d.MathOps.Average*
  commentId: Overload:Vim.Math3d.MathOps.Average
  name: Average
  nameWithType: MathOps.Average
  fullName: Vim.Math3d.MathOps.Average
- uid: Vim.Math3d.MathOps.Barycentric*
  commentId: Overload:Vim.Math3d.MathOps.Barycentric
  name: Barycentric
  nameWithType: MathOps.Barycentric
  fullName: Vim.Math3d.MathOps.Barycentric
- uid: Vim.Math3d.MathOps.Stats*
  commentId: Overload:Vim.Math3d.MathOps.Stats
  name: Stats
  nameWithType: MathOps.Stats
  fullName: Vim.Math3d.MathOps.Stats
- uid: System.Collections.Generic.IEnumerable{Vim.Math3d.Vector2}
  commentId: T:System.Collections.Generic.IEnumerable{Vim.Math3d.Vector2}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Vector2>
  nameWithType: IEnumerable<Vector2>
  fullName: System.Collections.Generic.IEnumerable<Vim.Math3d.Vector2>
  nameWithType.vb: IEnumerable(Of Vector2)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Vim.Math3d.Vector2)
  name.vb: IEnumerable(Of Vector2)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Vim.Math3d.Vector2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Vim.Math3d.Vector2
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Stats{Vim.Math3d.Vector2}
  commentId: T:Vim.Math3d.Stats{Vim.Math3d.Vector2}
  parent: Vim.Math3d
  definition: Vim.Math3d.Stats`1
  name: Stats<Vector2>
  nameWithType: Stats<Vector2>
  fullName: Vim.Math3d.Stats<Vim.Math3d.Vector2>
  nameWithType.vb: Stats(Of Vector2)
  fullName.vb: Vim.Math3d.Stats(Of Vim.Math3d.Vector2)
  name.vb: Stats(Of Vector2)
  spec.csharp:
  - uid: Vim.Math3d.Stats`1
    name: Stats
    nameWithType: Stats
    fullName: Vim.Math3d.Stats
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Vim.Math3d.Vector2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Vim.Math3d.Stats`1
    name: Stats
    nameWithType: Stats
    fullName: Vim.Math3d.Stats
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Vim.Math3d.Vector2
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Vim.Math3d.Stats`1
  commentId: T:Vim.Math3d.Stats`1
  parent: Vim.Math3d
  name: Stats<T>
  nameWithType: Stats<T>
  fullName: Vim.Math3d.Stats<T>
  nameWithType.vb: Stats(Of T)
  fullName.vb: Vim.Math3d.Stats(Of T)
  name.vb: Stats(Of T)
  spec.csharp:
  - uid: Vim.Math3d.Stats`1
    name: Stats
    nameWithType: Stats
    fullName: Vim.Math3d.Stats
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Vim.Math3d.Stats`1
    name: Stats
    nameWithType: Stats
    fullName: Vim.Math3d.Stats
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.MathOps.Extents*
  commentId: Overload:Vim.Math3d.MathOps.Extents
  name: Extents
  nameWithType: MathOps.Extents
  fullName: Vim.Math3d.MathOps.Extents
- uid: Vim.Math3d.MathOps.Middle*
  commentId: Overload:Vim.Math3d.MathOps.Middle
  name: Middle
  nameWithType: MathOps.Middle
  fullName: Vim.Math3d.MathOps.Middle
- uid: Vim.Math3d.MathOps.Sum*
  commentId: Overload:Vim.Math3d.MathOps.Sum
  name: Sum
  nameWithType: MathOps.Sum
  fullName: Vim.Math3d.MathOps.Sum
- uid: System.Collections.Generic.IEnumerable{Vim.Math3d.Vector3}
  commentId: T:System.Collections.Generic.IEnumerable{Vim.Math3d.Vector3}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Vector3>
  nameWithType: IEnumerable<Vector3>
  fullName: System.Collections.Generic.IEnumerable<Vim.Math3d.Vector3>
  nameWithType.vb: IEnumerable(Of Vector3)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Vim.Math3d.Vector3)
  name.vb: IEnumerable(Of Vector3)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Stats{Vim.Math3d.Vector3}
  commentId: T:Vim.Math3d.Stats{Vim.Math3d.Vector3}
  parent: Vim.Math3d
  definition: Vim.Math3d.Stats`1
  name: Stats<Vector3>
  nameWithType: Stats<Vector3>
  fullName: Vim.Math3d.Stats<Vim.Math3d.Vector3>
  nameWithType.vb: Stats(Of Vector3)
  fullName.vb: Vim.Math3d.Stats(Of Vim.Math3d.Vector3)
  name.vb: Stats(Of Vector3)
  spec.csharp:
  - uid: Vim.Math3d.Stats`1
    name: Stats
    nameWithType: Stats
    fullName: Vim.Math3d.Stats
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Vim.Math3d.Stats`1
    name: Stats
    nameWithType: Stats
    fullName: Vim.Math3d.Stats
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Vim.Math3d.Vector4}
  commentId: T:System.Collections.Generic.IEnumerable{Vim.Math3d.Vector4}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Vector4>
  nameWithType: IEnumerable<Vector4>
  fullName: System.Collections.Generic.IEnumerable<Vim.Math3d.Vector4>
  nameWithType.vb: IEnumerable(Of Vector4)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Vim.Math3d.Vector4)
  name.vb: IEnumerable(Of Vector4)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.Vector4
    name: Vector4
    nameWithType: Vector4
    fullName: Vim.Math3d.Vector4
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.Vector4
    name: Vector4
    nameWithType: Vector4
    fullName: Vim.Math3d.Vector4
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Stats{Vim.Math3d.Vector4}
  commentId: T:Vim.Math3d.Stats{Vim.Math3d.Vector4}
  parent: Vim.Math3d
  definition: Vim.Math3d.Stats`1
  name: Stats<Vector4>
  nameWithType: Stats<Vector4>
  fullName: Vim.Math3d.Stats<Vim.Math3d.Vector4>
  nameWithType.vb: Stats(Of Vector4)
  fullName.vb: Vim.Math3d.Stats(Of Vim.Math3d.Vector4)
  name.vb: Stats(Of Vector4)
  spec.csharp:
  - uid: Vim.Math3d.Stats`1
    name: Stats
    nameWithType: Stats
    fullName: Vim.Math3d.Stats
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.Vector4
    name: Vector4
    nameWithType: Vector4
    fullName: Vim.Math3d.Vector4
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Vim.Math3d.Stats`1
    name: Stats
    nameWithType: Stats
    fullName: Vim.Math3d.Stats
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.Vector4
    name: Vector4
    nameWithType: Vector4
    fullName: Vim.Math3d.Vector4
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Vim.Math3d.DVector2}
  commentId: T:System.Collections.Generic.IEnumerable{Vim.Math3d.DVector2}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<DVector2>
  nameWithType: IEnumerable<DVector2>
  fullName: System.Collections.Generic.IEnumerable<Vim.Math3d.DVector2>
  nameWithType.vb: IEnumerable(Of DVector2)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Vim.Math3d.DVector2)
  name.vb: IEnumerable(Of DVector2)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.DVector2
    name: DVector2
    nameWithType: DVector2
    fullName: Vim.Math3d.DVector2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.DVector2
    name: DVector2
    nameWithType: DVector2
    fullName: Vim.Math3d.DVector2
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Stats{Vim.Math3d.DVector2}
  commentId: T:Vim.Math3d.Stats{Vim.Math3d.DVector2}
  parent: Vim.Math3d
  definition: Vim.Math3d.Stats`1
  name: Stats<DVector2>
  nameWithType: Stats<DVector2>
  fullName: Vim.Math3d.Stats<Vim.Math3d.DVector2>
  nameWithType.vb: Stats(Of DVector2)
  fullName.vb: Vim.Math3d.Stats(Of Vim.Math3d.DVector2)
  name.vb: Stats(Of DVector2)
  spec.csharp:
  - uid: Vim.Math3d.Stats`1
    name: Stats
    nameWithType: Stats
    fullName: Vim.Math3d.Stats
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.DVector2
    name: DVector2
    nameWithType: DVector2
    fullName: Vim.Math3d.DVector2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Vim.Math3d.Stats`1
    name: Stats
    nameWithType: Stats
    fullName: Vim.Math3d.Stats
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.DVector2
    name: DVector2
    nameWithType: DVector2
    fullName: Vim.Math3d.DVector2
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Vim.Math3d.DVector3}
  commentId: T:System.Collections.Generic.IEnumerable{Vim.Math3d.DVector3}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<DVector3>
  nameWithType: IEnumerable<DVector3>
  fullName: System.Collections.Generic.IEnumerable<Vim.Math3d.DVector3>
  nameWithType.vb: IEnumerable(Of DVector3)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Vim.Math3d.DVector3)
  name.vb: IEnumerable(Of DVector3)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.DVector3
    name: DVector3
    nameWithType: DVector3
    fullName: Vim.Math3d.DVector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.DVector3
    name: DVector3
    nameWithType: DVector3
    fullName: Vim.Math3d.DVector3
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Stats{Vim.Math3d.DVector3}
  commentId: T:Vim.Math3d.Stats{Vim.Math3d.DVector3}
  parent: Vim.Math3d
  definition: Vim.Math3d.Stats`1
  name: Stats<DVector3>
  nameWithType: Stats<DVector3>
  fullName: Vim.Math3d.Stats<Vim.Math3d.DVector3>
  nameWithType.vb: Stats(Of DVector3)
  fullName.vb: Vim.Math3d.Stats(Of Vim.Math3d.DVector3)
  name.vb: Stats(Of DVector3)
  spec.csharp:
  - uid: Vim.Math3d.Stats`1
    name: Stats
    nameWithType: Stats
    fullName: Vim.Math3d.Stats
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.DVector3
    name: DVector3
    nameWithType: DVector3
    fullName: Vim.Math3d.DVector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Vim.Math3d.Stats`1
    name: Stats
    nameWithType: Stats
    fullName: Vim.Math3d.Stats
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.DVector3
    name: DVector3
    nameWithType: DVector3
    fullName: Vim.Math3d.DVector3
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Vim.Math3d.DVector4}
  commentId: T:System.Collections.Generic.IEnumerable{Vim.Math3d.DVector4}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<DVector4>
  nameWithType: IEnumerable<DVector4>
  fullName: System.Collections.Generic.IEnumerable<Vim.Math3d.DVector4>
  nameWithType.vb: IEnumerable(Of DVector4)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Vim.Math3d.DVector4)
  name.vb: IEnumerable(Of DVector4)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.DVector4
    name: DVector4
    nameWithType: DVector4
    fullName: Vim.Math3d.DVector4
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.DVector4
    name: DVector4
    nameWithType: DVector4
    fullName: Vim.Math3d.DVector4
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Stats{Vim.Math3d.DVector4}
  commentId: T:Vim.Math3d.Stats{Vim.Math3d.DVector4}
  parent: Vim.Math3d
  definition: Vim.Math3d.Stats`1
  name: Stats<DVector4>
  nameWithType: Stats<DVector4>
  fullName: Vim.Math3d.Stats<Vim.Math3d.DVector4>
  nameWithType.vb: Stats(Of DVector4)
  fullName.vb: Vim.Math3d.Stats(Of Vim.Math3d.DVector4)
  name.vb: Stats(Of DVector4)
  spec.csharp:
  - uid: Vim.Math3d.Stats`1
    name: Stats
    nameWithType: Stats
    fullName: Vim.Math3d.Stats
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.DVector4
    name: DVector4
    nameWithType: DVector4
    fullName: Vim.Math3d.DVector4
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Vim.Math3d.Stats`1
    name: Stats
    nameWithType: Stats
    fullName: Vim.Math3d.Stats
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.DVector4
    name: DVector4
    nameWithType: DVector4
    fullName: Vim.Math3d.DVector4
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.MathOps.DistanceSquared*
  commentId: Overload:Vim.Math3d.MathOps.DistanceSquared
  name: DistanceSquared
  nameWithType: MathOps.DistanceSquared
  fullName: Vim.Math3d.MathOps.DistanceSquared
- uid: Vim.Math3d.MathOps.LengthSquared*
  commentId: Overload:Vim.Math3d.MathOps.LengthSquared
  name: LengthSquared
  nameWithType: MathOps.LengthSquared
  fullName: Vim.Math3d.MathOps.LengthSquared
- uid: Vim.Math3d.MathOps.Length*
  commentId: Overload:Vim.Math3d.MathOps.Length
  name: Length
  nameWithType: MathOps.Length
  fullName: Vim.Math3d.MathOps.Length
- uid: Vim.Math3d.MathOps.Normalize*
  commentId: Overload:Vim.Math3d.MathOps.Normalize
  name: Normalize
  nameWithType: MathOps.Normalize
  fullName: Vim.Math3d.MathOps.Normalize
- uid: Vim.Math3d.MathOps.SafeNormalize*
  commentId: Overload:Vim.Math3d.MathOps.SafeNormalize
  name: SafeNormalize
  nameWithType: MathOps.SafeNormalize
  fullName: Vim.Math3d.MathOps.SafeNormalize
- uid: Vim.Math3d.MathOps.Dot*
  commentId: Overload:Vim.Math3d.MathOps.Dot
  name: Dot
  nameWithType: MathOps.Dot
  fullName: Vim.Math3d.MathOps.Dot
- uid: Vim.Math3d.MathOps.SquareRoot*
  commentId: Overload:Vim.Math3d.MathOps.SquareRoot
  name: SquareRoot
  nameWithType: MathOps.SquareRoot
  fullName: Vim.Math3d.MathOps.SquareRoot
- uid: Vim.Math3d.MathOps.ToVector2*
  commentId: Overload:Vim.Math3d.MathOps.ToVector2
  name: ToVector2
  nameWithType: MathOps.ToVector2
  fullName: Vim.Math3d.MathOps.ToVector2
- uid: Vim.Math3d.Int2
  commentId: T:Vim.Math3d.Int2
  parent: Vim.Math3d
  name: Int2
  nameWithType: Int2
  fullName: Vim.Math3d.Int2
- uid: Vim.Math3d.MathOps.ToVector3*
  commentId: Overload:Vim.Math3d.MathOps.ToVector3
  name: ToVector3
  nameWithType: MathOps.ToVector3
  fullName: Vim.Math3d.MathOps.ToVector3
- uid: Vim.Math3d.Int3
  commentId: T:Vim.Math3d.Int3
  parent: Vim.Math3d
  name: Int3
  nameWithType: Int3
  fullName: Vim.Math3d.Int3
- uid: Vim.Math3d.MathOps.Percentage*
  commentId: Overload:Vim.Math3d.MathOps.Percentage
  name: Percentage
  nameWithType: MathOps.Percentage
  fullName: Vim.Math3d.MathOps.Percentage
- uid: Vim.Math3d.MathOps.ToNearestPowOf2*
  commentId: Overload:Vim.Math3d.MathOps.ToNearestPowOf2
  name: ToNearestPowOf2
  nameWithType: MathOps.ToNearestPowOf2
  fullName: Vim.Math3d.MathOps.ToNearestPowOf2
- uid: Vim.Math3d.MathOps.CatmullRom*
  commentId: Overload:Vim.Math3d.MathOps.CatmullRom
  name: CatmullRom
  nameWithType: MathOps.CatmullRom
  fullName: Vim.Math3d.MathOps.CatmullRom
- uid: Vim.Math3d.MathOps.Hermite*
  commentId: Overload:Vim.Math3d.MathOps.Hermite
  name: Hermite
  nameWithType: MathOps.Hermite
  fullName: Vim.Math3d.MathOps.Hermite
- uid: Vim.Math3d.MathOps.SmoothStep*
  commentId: Overload:Vim.Math3d.MathOps.SmoothStep
  name: SmoothStep
  nameWithType: MathOps.SmoothStep
  fullName: Vim.Math3d.MathOps.SmoothStep
- uid: Vim.Math3d.MathOps.WrapAngle*
  commentId: Overload:Vim.Math3d.MathOps.WrapAngle
  name: WrapAngle
  nameWithType: MathOps.WrapAngle
  fullName: Vim.Math3d.MathOps.WrapAngle
- uid: Vim.Math3d.MathOps.IsNonZeroAndValid*
  commentId: Overload:Vim.Math3d.MathOps.IsNonZeroAndValid
  name: IsNonZeroAndValid
  nameWithType: MathOps.IsNonZeroAndValid
  fullName: Vim.Math3d.MathOps.IsNonZeroAndValid
- uid: Vim.Math3d.MathOps.ToFloats*
  commentId: Overload:Vim.Math3d.MathOps.ToFloats
  name: ToFloats
  nameWithType: MathOps.ToFloats
  fullName: Vim.Math3d.MathOps.ToFloats
- uid: Vim.Math3d.Matrix4x4
  commentId: T:Vim.Math3d.Matrix4x4
  parent: Vim.Math3d
  name: Matrix4x4
  nameWithType: Matrix4x4
  fullName: Vim.Math3d.Matrix4x4
- uid: System.Single[]
  isExternal: true
  name: Single[]
  nameWithType: Single[]
  fullName: System.Single[]
  nameWithType.vb: Single()
  fullName.vb: System.Single()
  name.vb: Single()
  spec.csharp:
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Vim.Math3d.Matrix4x4[]
  isExternal: true
  name: Matrix4x4[]
  nameWithType: Matrix4x4[]
  fullName: Vim.Math3d.Matrix4x4[]
  nameWithType.vb: Matrix4x4()
  fullName.vb: Vim.Math3d.Matrix4x4()
  name.vb: Matrix4x4()
  spec.csharp:
  - uid: Vim.Math3d.Matrix4x4
    name: Matrix4x4
    nameWithType: Matrix4x4
    fullName: Vim.Math3d.Matrix4x4
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Vim.Math3d.Matrix4x4
    name: Matrix4x4
    nameWithType: Matrix4x4
    fullName: Vim.Math3d.Matrix4x4
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Vim.Math3d.MathOps.ToMatrix*
  commentId: Overload:Vim.Math3d.MathOps.ToMatrix
  name: ToMatrix
  nameWithType: MathOps.ToMatrix
  fullName: Vim.Math3d.MathOps.ToMatrix
- uid: Vim.Math3d.MathOps.ToMatrixArray*
  commentId: Overload:Vim.Math3d.MathOps.ToMatrixArray
  name: ToMatrixArray
  nameWithType: MathOps.ToMatrixArray
  fullName: Vim.Math3d.MathOps.ToMatrixArray
- uid: Vim.Math3d.MathOps.ToAABoxArray*
  commentId: Overload:Vim.Math3d.MathOps.ToAABoxArray
  name: ToAABoxArray
  nameWithType: MathOps.ToAABoxArray
  fullName: Vim.Math3d.MathOps.ToAABoxArray
- uid: Vim.Math3d.AABox[]
  isExternal: true
  name: AABox[]
  nameWithType: AABox[]
  fullName: Vim.Math3d.AABox[]
  nameWithType.vb: AABox()
  fullName.vb: Vim.Math3d.AABox()
  name.vb: AABox()
  spec.csharp:
  - uid: Vim.Math3d.AABox
    name: AABox
    nameWithType: AABox
    fullName: Vim.Math3d.AABox
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Vim.Math3d.AABox
    name: AABox
    nameWithType: AABox
    fullName: Vim.Math3d.AABox
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Vim.Math3d.MathOps.RayFromProjectionMatrix*
  commentId: Overload:Vim.Math3d.MathOps.RayFromProjectionMatrix
  name: RayFromProjectionMatrix
  nameWithType: MathOps.RayFromProjectionMatrix
  fullName: Vim.Math3d.MathOps.RayFromProjectionMatrix
- uid: Vim.Math3d.Ray
  commentId: T:Vim.Math3d.Ray
  parent: Vim.Math3d
  name: Ray
  nameWithType: Ray
  fullName: Vim.Math3d.Ray
- uid: Vim.Math3d.MathOps.Transform*
  commentId: Overload:Vim.Math3d.MathOps.Transform
  name: Transform
  nameWithType: MathOps.Transform
  fullName: Vim.Math3d.MathOps.Transform
- uid: Vim.Math3d.Quaternion
  commentId: T:Vim.Math3d.Quaternion
  parent: Vim.Math3d
  name: Quaternion
  nameWithType: Quaternion
  fullName: Vim.Math3d.Quaternion
- uid: Vim.Math3d.MathOps.ToVector4*
  commentId: Overload:Vim.Math3d.MathOps.ToVector4
  name: ToVector4
  nameWithType: MathOps.ToVector4
  fullName: Vim.Math3d.MathOps.ToVector4
- uid: Vim.Math3d.MathOps.Rotate*
  commentId: Overload:Vim.Math3d.MathOps.Rotate
  name: Rotate
  nameWithType: MathOps.Rotate
  fullName: Vim.Math3d.MathOps.Rotate
- uid: Vim.Math3d.MathOps.IsZeroOrInvalid*
  commentId: Overload:Vim.Math3d.MathOps.IsZeroOrInvalid
  name: IsZeroOrInvalid
  nameWithType: MathOps.IsZeroOrInvalid
  fullName: Vim.Math3d.MathOps.IsZeroOrInvalid
- uid: Vim.Math3d.MathOps.IsPerpendicular*
  commentId: Overload:Vim.Math3d.MathOps.IsPerpendicular
  name: IsPerpendicular
  nameWithType: MathOps.IsPerpendicular
  fullName: Vim.Math3d.MathOps.IsPerpendicular
- uid: Vim.Math3d.MathOps.Projection*
  commentId: Overload:Vim.Math3d.MathOps.Projection
  name: Projection
  nameWithType: MathOps.Projection
  fullName: Vim.Math3d.MathOps.Projection
- uid: Vim.Math3d.MathOps.Rejection*
  commentId: Overload:Vim.Math3d.MathOps.Rejection
  name: Rejection
  nameWithType: MathOps.Rejection
  fullName: Vim.Math3d.MathOps.Rejection
- uid: Vim.Math3d.MathOps.SignedAngle*
  commentId: Overload:Vim.Math3d.MathOps.SignedAngle
  name: SignedAngle
  nameWithType: MathOps.SignedAngle
  fullName: Vim.Math3d.MathOps.SignedAngle
- uid: Vim.Math3d.MathOps.Angle*
  commentId: Overload:Vim.Math3d.MathOps.Angle
  name: Angle
  nameWithType: MathOps.Angle
  fullName: Vim.Math3d.MathOps.Angle
- uid: Vim.Math3d.MathOps.Colinear*
  commentId: Overload:Vim.Math3d.MathOps.Colinear
  name: Colinear
  nameWithType: MathOps.Colinear
  fullName: Vim.Math3d.MathOps.Colinear
- uid: Vim.Math3d.MathOps.IsBackFace*
  commentId: Overload:Vim.Math3d.MathOps.IsBackFace
  name: IsBackFace
  nameWithType: MathOps.IsBackFace
  fullName: Vim.Math3d.MathOps.IsBackFace
- uid: Vim.Math3d.MathOps.ToLine*
  commentId: Overload:Vim.Math3d.MathOps.ToLine
  name: ToLine
  nameWithType: MathOps.ToLine
  fullName: Vim.Math3d.MathOps.ToLine
- uid: Vim.Math3d.Line
  commentId: T:Vim.Math3d.Line
  parent: Vim.Math3d
  name: Line
  nameWithType: Line
  fullName: Vim.Math3d.Line
- uid: Vim.Math3d.MathOps.Along*
  commentId: Overload:Vim.Math3d.MathOps.Along
  name: Along
  nameWithType: MathOps.Along
  fullName: Vim.Math3d.MathOps.Along
- uid: Vim.Math3d.MathOps.AlongX*
  commentId: Overload:Vim.Math3d.MathOps.AlongX
  name: AlongX
  nameWithType: MathOps.AlongX
  fullName: Vim.Math3d.MathOps.AlongX
- uid: Vim.Math3d.MathOps.AlongY*
  commentId: Overload:Vim.Math3d.MathOps.AlongY
  name: AlongY
  nameWithType: MathOps.AlongY
  fullName: Vim.Math3d.MathOps.AlongY
- uid: Vim.Math3d.MathOps.AlongZ*
  commentId: Overload:Vim.Math3d.MathOps.AlongZ
  name: AlongZ
  nameWithType: MathOps.AlongZ
  fullName: Vim.Math3d.MathOps.AlongZ
- uid: Vim.Math3d.MathOps.Reflect*
  commentId: Overload:Vim.Math3d.MathOps.Reflect
  name: Reflect
  nameWithType: MathOps.Reflect
  fullName: Vim.Math3d.MathOps.Reflect
- uid: Vim.Math3d.MathOps.TransformNormal*
  commentId: Overload:Vim.Math3d.MathOps.TransformNormal
  name: TransformNormal
  nameWithType: MathOps.TransformNormal
  fullName: Vim.Math3d.MathOps.TransformNormal
- uid: Vim.Math3d.MathOps.TransformToVector4*
  commentId: Overload:Vim.Math3d.MathOps.TransformToVector4
  name: TransformToVector4
  nameWithType: MathOps.TransformToVector4
  fullName: Vim.Math3d.MathOps.TransformToVector4
- uid: Vim.Math3d.MathOps.Cross*
  commentId: Overload:Vim.Math3d.MathOps.Cross
  name: Cross
  nameWithType: MathOps.Cross
  fullName: Vim.Math3d.MathOps.Cross
- uid: Vim.Math3d.MathOps.ToBox*
  commentId: Overload:Vim.Math3d.MathOps.ToBox
  name: ToBox
  nameWithType: MathOps.ToBox
  fullName: Vim.Math3d.MathOps.ToBox
- uid: Vim.Math3d.AABox
  commentId: T:Vim.Math3d.AABox
  parent: Vim.Math3d
  name: AABox
  nameWithType: AABox
  fullName: Vim.Math3d.AABox
- uid: Vim.Math3d.DAABox
  commentId: T:Vim.Math3d.DAABox
  parent: Vim.Math3d
  name: DAABox
  nameWithType: DAABox
  fullName: Vim.Math3d.DAABox
- uid: Vim.Math3d.MathOps.Coplanar*
  commentId: Overload:Vim.Math3d.MathOps.Coplanar
  name: Coplanar
  nameWithType: MathOps.Coplanar
  fullName: Vim.Math3d.MathOps.Coplanar
- uid: Vim.Math3d.Transform
  commentId: T:Vim.Math3d.Transform
  parent: Vim.Math3d
  name: Transform
  nameWithType: Transform
  fullName: Vim.Math3d.Transform

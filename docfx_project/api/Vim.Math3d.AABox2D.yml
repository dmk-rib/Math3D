### YamlMime:ManagedReference
items:
- uid: Vim.Math3d.AABox2D
  commentId: T:Vim.Math3d.AABox2D
  id: AABox2D
  parent: Vim.Math3d
  children:
  - Vim.Math3d.AABox2D.#ctor(System.ValueTuple{Vim.Math3d.Vector2,Vim.Math3d.Vector2})
  - Vim.Math3d.AABox2D.#ctor(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  - Vim.Math3d.AABox2D.AlmostEquals(Vim.Math3d.AABox2D,System.Single)
  - Vim.Math3d.AABox2D.Area
  - Vim.Math3d.AABox2D.Center
  - Vim.Math3d.AABox2D.CenterBottom
  - Vim.Math3d.AABox2D.CenterDistance(Vim.Math3d.Vector2)
  - Vim.Math3d.AABox2D.CenterDistanceToOrigin
  - Vim.Math3d.AABox2D.CompareTo(Vim.Math3d.AABox2D)
  - Vim.Math3d.AABox2D.Contains(Vim.Math3d.AABox2D)
  - Vim.Math3d.AABox2D.Contains(Vim.Math3d.Vector2)
  - Vim.Math3d.AABox2D.Corners
  - Vim.Math3d.AABox2D.Count
  - Vim.Math3d.AABox2D.Create(System.ValueTuple{Vim.Math3d.Vector2,Vim.Math3d.Vector2})
  - Vim.Math3d.AABox2D.Create(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  - Vim.Math3d.AABox2D.CreateFromPoints(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector2})
  - Vim.Math3d.AABox2D.CreateFromPoints(Vim.Math3d.Vector2[])
  - Vim.Math3d.AABox2D.Deconstruct(Vim.Math3d.Vector2@,Vim.Math3d.Vector2@)
  - Vim.Math3d.AABox2D.Diagonal
  - Vim.Math3d.AABox2D.Distance(Vim.Math3d.Vector2)
  - Vim.Math3d.AABox2D.DistanceToOrigin
  - Vim.Math3d.AABox2D.Empty
  - Vim.Math3d.AABox2D.Equals(System.Object)
  - Vim.Math3d.AABox2D.Equals(Vim.Math3d.AABox2D)
  - Vim.Math3d.AABox2D.Extent
  - Vim.Math3d.AABox2D.GetCorners(Vim.Math3d.Vector2[])
  - Vim.Math3d.AABox2D.GetHashCode
  - Vim.Math3d.AABox2D.Indices
  - Vim.Math3d.AABox2D.Intersection(Vim.Math3d.AABox2D)
  - Vim.Math3d.AABox2D.Intersects(Vim.Math3d.AABox2D)
  - Vim.Math3d.AABox2D.Intersects(Vim.Math3d.AABox2D,Vim.Math3d.AABox2D)
  - Vim.Math3d.AABox2D.IsEmpty
  - Vim.Math3d.AABox2D.IsInfinity
  - Vim.Math3d.AABox2D.IsNaN
  - Vim.Math3d.AABox2D.IsValid
  - Vim.Math3d.AABox2D.Item(System.Int32)
  - Vim.Math3d.AABox2D.Magnitude
  - Vim.Math3d.AABox2D.MagnitudeSquared
  - Vim.Math3d.AABox2D.Max
  - Vim.Math3d.AABox2D.MaxSide
  - Vim.Math3d.AABox2D.MaxValue
  - Vim.Math3d.AABox2D.Merge(Vim.Math3d.AABox2D)
  - Vim.Math3d.AABox2D.Merge(Vim.Math3d.Vector2)
  - Vim.Math3d.AABox2D.Min
  - Vim.Math3d.AABox2D.MinSide
  - Vim.Math3d.AABox2D.MinValue
  - Vim.Math3d.AABox2D.op_Addition(Vim.Math3d.AABox2D,Vim.Math3d.AABox2D)
  - Vim.Math3d.AABox2D.op_Addition(Vim.Math3d.AABox2D,Vim.Math3d.Vector2)
  - Vim.Math3d.AABox2D.op_Equality(Vim.Math3d.AABox2D,Vim.Math3d.AABox2D)
  - Vim.Math3d.AABox2D.op_GreaterThan(Vim.Math3d.AABox2D,Vim.Math3d.AABox2D)
  - Vim.Math3d.AABox2D.op_GreaterThanOrEqual(Vim.Math3d.AABox2D,Vim.Math3d.AABox2D)
  - Vim.Math3d.AABox2D.op_Implicit(System.ValueTuple{Vim.Math3d.Vector2,Vim.Math3d.Vector2})~Vim.Math3d.AABox2D
  - Vim.Math3d.AABox2D.op_Implicit(Vim.Math3d.AABox2D)~System.ValueTuple{Vim.Math3d.Vector2,Vim.Math3d.Vector2}
  - Vim.Math3d.AABox2D.op_Inequality(Vim.Math3d.AABox2D,Vim.Math3d.AABox2D)
  - Vim.Math3d.AABox2D.op_LessThan(Vim.Math3d.AABox2D,Vim.Math3d.AABox2D)
  - Vim.Math3d.AABox2D.op_LessThanOrEqual(Vim.Math3d.AABox2D,Vim.Math3d.AABox2D)
  - Vim.Math3d.AABox2D.op_Subtraction(Vim.Math3d.AABox2D,Vim.Math3d.AABox2D)
  - Vim.Math3d.AABox2D.Recenter
  - Vim.Math3d.AABox2D.RelativePosition(Vim.Math3d.Vector2)
  - Vim.Math3d.AABox2D.Scale(System.Single)
  - Vim.Math3d.AABox2D.SetMax(Vim.Math3d.Vector2)
  - Vim.Math3d.AABox2D.SetMin(Vim.Math3d.Vector2)
  - Vim.Math3d.AABox2D.ToString
  - Vim.Math3d.AABox2D.Translate(Vim.Math3d.Vector2)
  - Vim.Math3d.AABox2D.Unit
  - Vim.Math3d.AABox2D.Zero
  langs:
  - csharp
  - vb
  name: AABox2D
  nameWithType: AABox2D
  fullName: Vim.Math3d.AABox2D
  type: Struct
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: AABox2D
    path: ../src/Structs.cs
    startLine: 698
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataContract]

      public readonly struct AABox2D : IEquatable<AABox2D>, IComparable<AABox2D>
    content.vb: >-
      <DataContract>

      Public Structure AABox2D
          Implements IEquatable(Of AABox2D), IComparable(Of AABox2D)
  implements:
  - System.IEquatable{Vim.Math3d.AABox2D}
  - System.IComparable{Vim.Math3d.AABox2D}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Vim.Math3d.AABox2D.Count
  commentId: P:Vim.Math3d.AABox2D.Count
  id: Count
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: AABox2D.Count
  fullName: Vim.Math3d.AABox2D.Count
  type: Property
  source:
    remote:
      path: src/AABox2D.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Count
    path: ../src/AABox2D.cs
    startLine: 9
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: Vim.Math3d.AABox2D.Count*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.AABox2D.CenterBottom
  commentId: P:Vim.Math3d.AABox2D.CenterBottom
  id: CenterBottom
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: CenterBottom
  nameWithType: AABox2D.CenterBottom
  fullName: Vim.Math3d.AABox2D.CenterBottom
  type: Property
  source:
    remote:
      path: src/AABox2D.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: CenterBottom
    path: ../src/AABox2D.cs
    startLine: 12
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly Vector2 CenterBottom { get; }
    parameters: []
    return:
      type: Vim.Math3d.Vector2
    content.vb: Public ReadOnly Property CenterBottom As Vector2
  overload: Vim.Math3d.AABox2D.CenterBottom*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.AABox2D.Corners
  commentId: P:Vim.Math3d.AABox2D.Corners
  id: Corners
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: Corners
  nameWithType: AABox2D.Corners
  fullName: Vim.Math3d.AABox2D.Corners
  type: Property
  source:
    remote:
      path: src/AABox2D.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Corners
    path: ../src/AABox2D.cs
    startLine: 15
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly Vector2[] Corners { get; }
    parameters: []
    return:
      type: Vim.Math3d.Vector2[]
    content.vb: Public ReadOnly Property Corners As Vector2()
  overload: Vim.Math3d.AABox2D.Corners*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.AABox2D.IsEmpty
  commentId: P:Vim.Math3d.AABox2D.IsEmpty
  id: IsEmpty
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: IsEmpty
  nameWithType: AABox2D.IsEmpty
  fullName: Vim.Math3d.AABox2D.IsEmpty
  type: Property
  source:
    remote:
      path: src/AABox2D.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: IsEmpty
    path: ../src/AABox2D.cs
    startLine: 18
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool IsEmpty { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsEmpty As Boolean
  overload: Vim.Math3d.AABox2D.IsEmpty*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.AABox2D.IsValid
  commentId: P:Vim.Math3d.AABox2D.IsValid
  id: IsValid
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: IsValid
  nameWithType: AABox2D.IsValid
  fullName: Vim.Math3d.AABox2D.IsValid
  type: Property
  source:
    remote:
      path: src/AABox2D.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: IsValid
    path: ../src/AABox2D.cs
    startLine: 21
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool IsValid { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsValid As Boolean
  overload: Vim.Math3d.AABox2D.IsValid*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.AABox2D.Distance(Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.AABox2D.Distance(Vim.Math3d.Vector2)
  id: Distance(Vim.Math3d.Vector2)
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: Distance(Vector2)
  nameWithType: AABox2D.Distance(Vector2)
  fullName: Vim.Math3d.AABox2D.Distance(Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/AABox2D.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Distance
    path: ../src/AABox2D.cs
    startLine: 24
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly float Distance(Vector2 point)
    parameters:
    - id: point
      type: Vim.Math3d.Vector2
    return:
      type: System.Single
    content.vb: Public Function Distance(point As Vector2) As Single
  overload: Vim.Math3d.AABox2D.Distance*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AABox2D.CenterDistance(Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.AABox2D.CenterDistance(Vim.Math3d.Vector2)
  id: CenterDistance(Vim.Math3d.Vector2)
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: CenterDistance(Vector2)
  nameWithType: AABox2D.CenterDistance(Vector2)
  fullName: Vim.Math3d.AABox2D.CenterDistance(Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/AABox2D.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: CenterDistance
    path: ../src/AABox2D.cs
    startLine: 31
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nReturns the distance of the point to the box center. \n"
  example: []
  syntax:
    content: public readonly float CenterDistance(Vector2 point)
    parameters:
    - id: point
      type: Vim.Math3d.Vector2
    return:
      type: System.Single
    content.vb: Public Function CenterDistance(point As Vector2) As Single
  overload: Vim.Math3d.AABox2D.CenterDistance*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AABox2D.Translate(Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.AABox2D.Translate(Vim.Math3d.Vector2)
  id: Translate(Vim.Math3d.Vector2)
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: Translate(Vector2)
  nameWithType: AABox2D.Translate(Vector2)
  fullName: Vim.Math3d.AABox2D.Translate(Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/AABox2D.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Translate
    path: ../src/AABox2D.cs
    startLine: 38
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nMoves the box by the given vector offset\n"
  example: []
  syntax:
    content: public readonly AABox2D Translate(Vector2 offset)
    parameters:
    - id: offset
      type: Vim.Math3d.Vector2
    return:
      type: Vim.Math3d.AABox2D
    content.vb: Public Function Translate(offset As Vector2) As AABox2D
  overload: Vim.Math3d.AABox2D.Translate*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AABox2D.DistanceToOrigin
  commentId: P:Vim.Math3d.AABox2D.DistanceToOrigin
  id: DistanceToOrigin
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: DistanceToOrigin
  nameWithType: AABox2D.DistanceToOrigin
  fullName: Vim.Math3d.AABox2D.DistanceToOrigin
  type: Property
  source:
    remote:
      path: src/AABox2D.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: DistanceToOrigin
    path: ../src/AABox2D.cs
    startLine: 42
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly float DistanceToOrigin { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property DistanceToOrigin As Single
  overload: Vim.Math3d.AABox2D.DistanceToOrigin*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.AABox2D.CenterDistanceToOrigin
  commentId: P:Vim.Math3d.AABox2D.CenterDistanceToOrigin
  id: CenterDistanceToOrigin
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: CenterDistanceToOrigin
  nameWithType: AABox2D.CenterDistanceToOrigin
  fullName: Vim.Math3d.AABox2D.CenterDistanceToOrigin
  type: Property
  source:
    remote:
      path: src/AABox2D.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: CenterDistanceToOrigin
    path: ../src/AABox2D.cs
    startLine: 45
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly float CenterDistanceToOrigin { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property CenterDistanceToOrigin As Single
  overload: Vim.Math3d.AABox2D.CenterDistanceToOrigin*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.AABox2D.Area
  commentId: P:Vim.Math3d.AABox2D.Area
  id: Area
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: Area
  nameWithType: AABox2D.Area
  fullName: Vim.Math3d.AABox2D.Area
  type: Property
  source:
    remote:
      path: src/AABox2D.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Area
    path: ../src/AABox2D.cs
    startLine: 48
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly float Area { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property Area As Single
  overload: Vim.Math3d.AABox2D.Area*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.AABox2D.Item(System.Int32)
  commentId: P:Vim.Math3d.AABox2D.Item(System.Int32)
  id: Item(System.Int32)
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: AABox2D.Item[Int32]
  fullName: Vim.Math3d.AABox2D.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/AABox2D.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: this[]
    path: ../src/AABox2D.cs
    startLine: 51
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly Vector2 this[int n] { get; }
    parameters:
    - id: n
      type: System.Int32
    return:
      type: Vim.Math3d.Vector2
    content.vb: Public ReadOnly Property Item(n As Integer) As Vector2
  overload: Vim.Math3d.AABox2D.Item*
  nameWithType.vb: AABox2D.Item(Int32)
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Vim.Math3d.AABox2D.Item(System.Int32)
  name.vb: Item(Int32)
- uid: Vim.Math3d.AABox2D.MaxSide
  commentId: P:Vim.Math3d.AABox2D.MaxSide
  id: MaxSide
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: MaxSide
  nameWithType: AABox2D.MaxSide
  fullName: Vim.Math3d.AABox2D.MaxSide
  type: Property
  source:
    remote:
      path: src/AABox2D.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MaxSide
    path: ../src/AABox2D.cs
    startLine: 54
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly float MaxSide { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property MaxSide As Single
  overload: Vim.Math3d.AABox2D.MaxSide*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.AABox2D.MinSide
  commentId: P:Vim.Math3d.AABox2D.MinSide
  id: MinSide
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: MinSide
  nameWithType: AABox2D.MinSide
  fullName: Vim.Math3d.AABox2D.MinSide
  type: Property
  source:
    remote:
      path: src/AABox2D.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MinSide
    path: ../src/AABox2D.cs
    startLine: 57
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly float MinSide { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property MinSide As Single
  overload: Vim.Math3d.AABox2D.MinSide*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.AABox2D.Diagonal
  commentId: P:Vim.Math3d.AABox2D.Diagonal
  id: Diagonal
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: Diagonal
  nameWithType: AABox2D.Diagonal
  fullName: Vim.Math3d.AABox2D.Diagonal
  type: Property
  source:
    remote:
      path: src/AABox2D.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Diagonal
    path: ../src/AABox2D.cs
    startLine: 60
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly float Diagonal { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property Diagonal As Single
  overload: Vim.Math3d.AABox2D.Diagonal*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.AABox2D.Contains(Vim.Math3d.AABox2D)
  commentId: M:Vim.Math3d.AABox2D.Contains(Vim.Math3d.AABox2D)
  id: Contains(Vim.Math3d.AABox2D)
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: Contains(AABox2D)
  nameWithType: AABox2D.Contains(AABox2D)
  fullName: Vim.Math3d.AABox2D.Contains(Vim.Math3d.AABox2D)
  type: Method
  source:
    remote:
      path: src/AABox2D.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Contains
    path: ../src/AABox2D.cs
    startLine: 63
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly ContainmentType Contains(AABox2D box)
    parameters:
    - id: box
      type: Vim.Math3d.AABox2D
    return:
      type: Vim.Math3d.ContainmentType
    content.vb: Public Function Contains(box As AABox2D) As ContainmentType
  overload: Vim.Math3d.AABox2D.Contains*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AABox2D.Contains(Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.AABox2D.Contains(Vim.Math3d.Vector2)
  id: Contains(Vim.Math3d.Vector2)
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: Contains(Vector2)
  nameWithType: AABox2D.Contains(Vector2)
  fullName: Vim.Math3d.AABox2D.Contains(Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/AABox2D.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Contains
    path: ../src/AABox2D.cs
    startLine: 86
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool Contains(Vector2 point)
    parameters:
    - id: point
      type: Vim.Math3d.Vector2
    return:
      type: System.Boolean
    content.vb: Public Function Contains(point As Vector2) As Boolean
  overload: Vim.Math3d.AABox2D.Contains*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AABox2D.CreateFromPoints(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector2})
  commentId: M:Vim.Math3d.AABox2D.CreateFromPoints(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector2})
  id: CreateFromPoints(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector2})
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: CreateFromPoints(IEnumerable<Vector2>)
  nameWithType: AABox2D.CreateFromPoints(IEnumerable<Vector2>)
  fullName: Vim.Math3d.AABox2D.CreateFromPoints(System.Collections.Generic.IEnumerable<Vim.Math3d.Vector2>)
  type: Method
  source:
    remote:
      path: src/AABox2D.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: CreateFromPoints
    path: ../src/AABox2D.cs
    startLine: 96
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nCreate a bounding box from the given list of points.\n"
  example: []
  syntax:
    content: public static AABox2D CreateFromPoints(IEnumerable<Vector2> points)
    parameters:
    - id: points
      type: System.Collections.Generic.IEnumerable{Vim.Math3d.Vector2}
    return:
      type: Vim.Math3d.AABox2D
    content.vb: Public Shared Function CreateFromPoints(points As IEnumerable(Of Vector2)) As AABox2D
  overload: Vim.Math3d.AABox2D.CreateFromPoints*
  nameWithType.vb: AABox2D.CreateFromPoints(IEnumerable(Of Vector2))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.AABox2D.CreateFromPoints(System.Collections.Generic.IEnumerable(Of Vim.Math3d.Vector2))
  name.vb: CreateFromPoints(IEnumerable(Of Vector2))
- uid: Vim.Math3d.AABox2D.CreateFromPoints(Vim.Math3d.Vector2[])
  commentId: M:Vim.Math3d.AABox2D.CreateFromPoints(Vim.Math3d.Vector2[])
  id: CreateFromPoints(Vim.Math3d.Vector2[])
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: CreateFromPoints(Vector2[])
  nameWithType: AABox2D.CreateFromPoints(Vector2[])
  fullName: Vim.Math3d.AABox2D.CreateFromPoints(Vim.Math3d.Vector2[])
  type: Method
  source:
    remote:
      path: src/AABox2D.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: CreateFromPoints
    path: ../src/AABox2D.cs
    startLine: 100
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static AABox2D CreateFromPoints(params Vector2[] points)
    parameters:
    - id: points
      type: Vim.Math3d.Vector2[]
    return:
      type: Vim.Math3d.AABox2D
    content.vb: Public Shared Function CreateFromPoints(ParamArray points As Vector2()) As AABox2D
  overload: Vim.Math3d.AABox2D.CreateFromPoints*
  nameWithType.vb: AABox2D.CreateFromPoints(Vector2())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.AABox2D.CreateFromPoints(Vim.Math3d.Vector2())
  name.vb: CreateFromPoints(Vector2())
- uid: Vim.Math3d.AABox2D.GetCorners(Vim.Math3d.Vector2[])
  commentId: M:Vim.Math3d.AABox2D.GetCorners(Vim.Math3d.Vector2[])
  id: GetCorners(Vim.Math3d.Vector2[])
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: GetCorners(Vector2[])
  nameWithType: AABox2D.GetCorners(Vector2[])
  fullName: Vim.Math3d.AABox2D.GetCorners(Vim.Math3d.Vector2[])
  type: Method
  source:
    remote:
      path: src/AABox2D.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: GetCorners
    path: ../src/AABox2D.cs
    startLine: 104
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly Vector2[] GetCorners(Vector2[] corners = null)
    parameters:
    - id: corners
      type: Vim.Math3d.Vector2[]
    return:
      type: Vim.Math3d.Vector2[]
    content.vb: Public Function GetCorners(corners As Vector2() = Nothing) As Vector2()
  overload: Vim.Math3d.AABox2D.GetCorners*
  nameWithType.vb: AABox2D.GetCorners(Vector2())
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  fullName.vb: Vim.Math3d.AABox2D.GetCorners(Vim.Math3d.Vector2())
  name.vb: GetCorners(Vector2())
- uid: Vim.Math3d.AABox2D.Indices
  commentId: F:Vim.Math3d.AABox2D.Indices
  id: Indices
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: Indices
  nameWithType: AABox2D.Indices
  fullName: Vim.Math3d.AABox2D.Indices
  type: Field
  source:
    remote:
      path: src/AABox2D.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Indices
    path: ../src/AABox2D.cs
    startLine: 120
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static readonly int[] Indices
    return:
      type: System.Int32[]
    content.vb: Public Shared ReadOnly Indices As Integer()
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Vim.Math3d.AABox2D.Intersects(Vim.Math3d.AABox2D,Vim.Math3d.AABox2D)
  commentId: M:Vim.Math3d.AABox2D.Intersects(Vim.Math3d.AABox2D,Vim.Math3d.AABox2D)
  id: Intersects(Vim.Math3d.AABox2D,Vim.Math3d.AABox2D)
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: Intersects(AABox2D, AABox2D)
  nameWithType: AABox2D.Intersects(AABox2D, AABox2D)
  fullName: Vim.Math3d.AABox2D.Intersects(Vim.Math3d.AABox2D, Vim.Math3d.AABox2D)
  type: Method
  source:
    remote:
      path: src/AABox2D.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Intersects
    path: ../src/AABox2D.cs
    startLine: 122
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool Intersects(AABox2D box1, AABox2D box2)
    parameters:
    - id: box1
      type: Vim.Math3d.AABox2D
    - id: box2
      type: Vim.Math3d.AABox2D
    return:
      type: System.Boolean
    content.vb: Public Shared Function Intersects(box1 As AABox2D, box2 As AABox2D) As Boolean
  overload: Vim.Math3d.AABox2D.Intersects*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.AABox2D.Intersects(Vim.Math3d.AABox2D)
  commentId: M:Vim.Math3d.AABox2D.Intersects(Vim.Math3d.AABox2D)
  id: Intersects(Vim.Math3d.AABox2D)
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: Intersects(AABox2D)
  nameWithType: AABox2D.Intersects(AABox2D)
  fullName: Vim.Math3d.AABox2D.Intersects(Vim.Math3d.AABox2D)
  type: Method
  source:
    remote:
      path: src/AABox2D.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Intersects
    path: ../src/AABox2D.cs
    startLine: 129
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool Intersects(AABox2D box)
    parameters:
    - id: box
      type: Vim.Math3d.AABox2D
    return:
      type: System.Boolean
    content.vb: Public Function Intersects(box As AABox2D) As Boolean
  overload: Vim.Math3d.AABox2D.Intersects*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AABox2D.Unit
  commentId: F:Vim.Math3d.AABox2D.Unit
  id: Unit
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: Unit
  nameWithType: AABox2D.Unit
  fullName: Vim.Math3d.AABox2D.Unit
  type: Field
  source:
    remote:
      path: src/AABox2D.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Unit
    path: ../src/AABox2D.cs
    startLine: 133
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static readonly AABox2D Unit
    return:
      type: Vim.Math3d.AABox2D
    content.vb: Public Shared ReadOnly Unit As AABox2D
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Vim.Math3d.AABox2D.RelativePosition(Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.AABox2D.RelativePosition(Vim.Math3d.Vector2)
  id: RelativePosition(Vim.Math3d.Vector2)
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: RelativePosition(Vector2)
  nameWithType: AABox2D.RelativePosition(Vector2)
  fullName: Vim.Math3d.AABox2D.RelativePosition(Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/AABox2D.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: RelativePosition
    path: ../src/AABox2D.cs
    startLine: 139
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nReturns where a point is relative to the bounding box on a scale of 0..1 \n"
  example: []
  syntax:
    content: public readonly Vector2 RelativePosition(Vector2 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector2
    return:
      type: Vim.Math3d.Vector2
    content.vb: Public Function RelativePosition(v As Vector2) As Vector2
  overload: Vim.Math3d.AABox2D.RelativePosition*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AABox2D.Recenter
  commentId: M:Vim.Math3d.AABox2D.Recenter
  id: Recenter
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: Recenter()
  nameWithType: AABox2D.Recenter()
  fullName: Vim.Math3d.AABox2D.Recenter()
  type: Method
  source:
    remote:
      path: src/AABox2D.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Recenter
    path: ../src/AABox2D.cs
    startLine: 146
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nMoves the box so that it&apos;s origin is on the center\n"
  example: []
  syntax:
    content: public readonly AABox2D Recenter()
    return:
      type: Vim.Math3d.AABox2D
    content.vb: Public Function Recenter As AABox2D
  overload: Vim.Math3d.AABox2D.Recenter*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AABox2D.Scale(System.Single)
  commentId: M:Vim.Math3d.AABox2D.Scale(System.Single)
  id: Scale(System.Single)
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: Scale(Single)
  nameWithType: AABox2D.Scale(Single)
  fullName: Vim.Math3d.AABox2D.Scale(System.Single)
  type: Method
  source:
    remote:
      path: src/AABox2D.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Scale
    path: ../src/AABox2D.cs
    startLine: 153
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nRescales the box\n"
  example: []
  syntax:
    content: public readonly AABox2D Scale(float scale)
    parameters:
    - id: scale
      type: System.Single
    return:
      type: Vim.Math3d.AABox2D
    content.vb: Public Function Scale(scale As Single) As AABox2D
  overload: Vim.Math3d.AABox2D.Scale*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AABox2D.Min
  commentId: F:Vim.Math3d.AABox2D.Min
  id: Min
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: Min
  nameWithType: AABox2D.Min
  fullName: Vim.Math3d.AABox2D.Min
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Min
    path: ../src/Structs.cs
    startLine: 705
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataMember]

      public readonly Vector2 Min
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <DataMember>

      Public ReadOnly Min As Vector2
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.AABox2D.Max
  commentId: F:Vim.Math3d.AABox2D.Max
  id: Max
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: Max
  nameWithType: AABox2D.Max
  fullName: Vim.Math3d.AABox2D.Max
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Max
    path: ../src/Structs.cs
    startLine: 707
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataMember]

      public readonly Vector2 Max
    return:
      type: Vim.Math3d.Vector2
    content.vb: >-
      <DataMember>

      Public ReadOnly Max As Vector2
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.AABox2D.#ctor(System.ValueTuple{Vim.Math3d.Vector2,Vim.Math3d.Vector2})
  commentId: M:Vim.Math3d.AABox2D.#ctor(System.ValueTuple{Vim.Math3d.Vector2,Vim.Math3d.Vector2})
  id: '#ctor(System.ValueTuple{Vim.Math3d.Vector2,Vim.Math3d.Vector2})'
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: AABox2D((Vector2 min, Vector2 max))
  nameWithType: AABox2D.AABox2D((Vector2 min, Vector2 max))
  fullName: Vim.Math3d.AABox2D.AABox2D(System.ValueTuple<Vim.Math3d.Vector2, Vim.Math3d.Vector2>)
  type: Constructor
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: .ctor
    path: ../src/Structs.cs
    startLine: 708
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public AABox2D((Vector2 min, Vector2 max) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{Vim.Math3d.Vector2,Vim.Math3d.Vector2}
    content.vb: Public Sub New(tuple As(min As Vector2, max As Vector2)(Of Vector2 , Vector2))
  overload: Vim.Math3d.AABox2D.#ctor*
  nameWithType.vb: AABox2D.AABox2D((min As Vector2, max As Vector2)(Of Vector2, Vector2))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Vim.Math3d.AABox2D.AABox2D(System.ValueTuple(Of Vim.Math3d.Vector2, Vim.Math3d.Vector2))
  name.vb: AABox2D((min As Vector2, max As Vector2)(Of Vector2, Vector2))
- uid: Vim.Math3d.AABox2D.#ctor(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.AABox2D.#ctor(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  id: '#ctor(Vim.Math3d.Vector2,Vim.Math3d.Vector2)'
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: AABox2D(Vector2, Vector2)
  nameWithType: AABox2D.AABox2D(Vector2, Vector2)
  fullName: Vim.Math3d.AABox2D.AABox2D(Vim.Math3d.Vector2, Vim.Math3d.Vector2)
  type: Constructor
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: .ctor
    path: ../src/Structs.cs
    startLine: 709
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public AABox2D(Vector2 min, Vector2 max)
    parameters:
    - id: min
      type: Vim.Math3d.Vector2
    - id: max
      type: Vim.Math3d.Vector2
    content.vb: Public Sub New(min As Vector2, max As Vector2)
  overload: Vim.Math3d.AABox2D.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AABox2D.Create(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.AABox2D.Create(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  id: Create(Vim.Math3d.Vector2,Vim.Math3d.Vector2)
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: Create(Vector2, Vector2)
  nameWithType: AABox2D.Create(Vector2, Vector2)
  fullName: Vim.Math3d.AABox2D.Create(Vim.Math3d.Vector2, Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Create
    path: ../src/Structs.cs
    startLine: 710
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static AABox2D Create(Vector2 min, Vector2 max)
    parameters:
    - id: min
      type: Vim.Math3d.Vector2
    - id: max
      type: Vim.Math3d.Vector2
    return:
      type: Vim.Math3d.AABox2D
    content.vb: Public Shared Function Create(min As Vector2, max As Vector2) As AABox2D
  overload: Vim.Math3d.AABox2D.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.AABox2D.Create(System.ValueTuple{Vim.Math3d.Vector2,Vim.Math3d.Vector2})
  commentId: M:Vim.Math3d.AABox2D.Create(System.ValueTuple{Vim.Math3d.Vector2,Vim.Math3d.Vector2})
  id: Create(System.ValueTuple{Vim.Math3d.Vector2,Vim.Math3d.Vector2})
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: Create((Vector2 min, Vector2 max))
  nameWithType: AABox2D.Create((Vector2 min, Vector2 max))
  fullName: Vim.Math3d.AABox2D.Create(System.ValueTuple<Vim.Math3d.Vector2, Vim.Math3d.Vector2>)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Create
    path: ../src/Structs.cs
    startLine: 711
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static AABox2D Create((Vector2 min, Vector2 max) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{Vim.Math3d.Vector2,Vim.Math3d.Vector2}
    return:
      type: Vim.Math3d.AABox2D
    content.vb: Public Shared Function Create(tuple As(min As Vector2, max As Vector2)(Of Vector2 , Vector2)) As AABox2D
  overload: Vim.Math3d.AABox2D.Create*
  nameWithType.vb: AABox2D.Create((min As Vector2, max As Vector2)(Of Vector2, Vector2))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.AABox2D.Create(System.ValueTuple(Of Vim.Math3d.Vector2, Vim.Math3d.Vector2))
  name.vb: Create((min As Vector2, max As Vector2)(Of Vector2, Vector2))
- uid: Vim.Math3d.AABox2D.Equals(System.Object)
  commentId: M:Vim.Math3d.AABox2D.Equals(System.Object)
  id: Equals(System.Object)
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: AABox2D.Equals(Object)
  fullName: Vim.Math3d.AABox2D.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Equals
    path: ../src/Structs.cs
    startLine: 712
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: Vim.Math3d.AABox2D.Equals*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.AABox2D.GetHashCode
  commentId: M:Vim.Math3d.AABox2D.GetHashCode
  id: GetHashCode
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: AABox2D.GetHashCode()
  fullName: Vim.Math3d.AABox2D.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: GetHashCode
    path: ../src/Structs.cs
    startLine: 713
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: Vim.Math3d.AABox2D.GetHashCode*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.AABox2D.ToString
  commentId: M:Vim.Math3d.AABox2D.ToString
  id: ToString
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: AABox2D.ToString()
  fullName: Vim.Math3d.AABox2D.ToString()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToString
    path: ../src/Structs.cs
    startLine: 714
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: Vim.Math3d.AABox2D.ToString*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.AABox2D.Deconstruct(Vim.Math3d.Vector2@,Vim.Math3d.Vector2@)
  commentId: M:Vim.Math3d.AABox2D.Deconstruct(Vim.Math3d.Vector2@,Vim.Math3d.Vector2@)
  id: Deconstruct(Vim.Math3d.Vector2@,Vim.Math3d.Vector2@)
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: Deconstruct(out Vector2, out Vector2)
  nameWithType: AABox2D.Deconstruct(out Vector2, out Vector2)
  fullName: Vim.Math3d.AABox2D.Deconstruct(out Vim.Math3d.Vector2, out Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Deconstruct
    path: ../src/Structs.cs
    startLine: 715
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly void Deconstruct(out Vector2 min, out Vector2 max)
    parameters:
    - id: min
      type: Vim.Math3d.Vector2
    - id: max
      type: Vim.Math3d.Vector2
    content.vb: Public Sub Deconstruct(ByRef min As Vector2, ByRef max As Vector2)
  overload: Vim.Math3d.AABox2D.Deconstruct*
  nameWithType.vb: AABox2D.Deconstruct(ByRef Vector2, ByRef Vector2)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  fullName.vb: Vim.Math3d.AABox2D.Deconstruct(ByRef Vim.Math3d.Vector2, ByRef Vim.Math3d.Vector2)
  name.vb: Deconstruct(ByRef Vector2, ByRef Vector2)
- uid: Vim.Math3d.AABox2D.Equals(Vim.Math3d.AABox2D)
  commentId: M:Vim.Math3d.AABox2D.Equals(Vim.Math3d.AABox2D)
  id: Equals(Vim.Math3d.AABox2D)
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: Equals(AABox2D)
  nameWithType: AABox2D.Equals(AABox2D)
  fullName: Vim.Math3d.AABox2D.Equals(Vim.Math3d.AABox2D)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Equals
    path: ../src/Structs.cs
    startLine: 716
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool Equals(AABox2D x)
    parameters:
    - id: x
      type: Vim.Math3d.AABox2D
    return:
      type: System.Boolean
    content.vb: Public Function Equals(x As AABox2D) As Boolean
  overload: Vim.Math3d.AABox2D.Equals*
  implements:
  - System.IEquatable{Vim.Math3d.AABox2D}.Equals(Vim.Math3d.AABox2D)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AABox2D.op_Equality(Vim.Math3d.AABox2D,Vim.Math3d.AABox2D)
  commentId: M:Vim.Math3d.AABox2D.op_Equality(Vim.Math3d.AABox2D,Vim.Math3d.AABox2D)
  id: op_Equality(Vim.Math3d.AABox2D,Vim.Math3d.AABox2D)
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: Equality(AABox2D, AABox2D)
  nameWithType: AABox2D.Equality(AABox2D, AABox2D)
  fullName: Vim.Math3d.AABox2D.Equality(Vim.Math3d.AABox2D, Vim.Math3d.AABox2D)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Equality
    path: ../src/Structs.cs
    startLine: 717
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator ==(AABox2D x0, AABox2D x1)
    parameters:
    - id: x0
      type: Vim.Math3d.AABox2D
    - id: x1
      type: Vim.Math3d.AABox2D
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(x0 As AABox2D, x1 As AABox2D) As Boolean
  overload: Vim.Math3d.AABox2D.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.AABox2D.op_Inequality(Vim.Math3d.AABox2D,Vim.Math3d.AABox2D)
  commentId: M:Vim.Math3d.AABox2D.op_Inequality(Vim.Math3d.AABox2D,Vim.Math3d.AABox2D)
  id: op_Inequality(Vim.Math3d.AABox2D,Vim.Math3d.AABox2D)
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: Inequality(AABox2D, AABox2D)
  nameWithType: AABox2D.Inequality(AABox2D, AABox2D)
  fullName: Vim.Math3d.AABox2D.Inequality(Vim.Math3d.AABox2D, Vim.Math3d.AABox2D)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Inequality
    path: ../src/Structs.cs
    startLine: 718
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator !=(AABox2D x0, AABox2D x1)
    parameters:
    - id: x0
      type: Vim.Math3d.AABox2D
    - id: x1
      type: Vim.Math3d.AABox2D
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(x0 As AABox2D, x1 As AABox2D) As Boolean
  overload: Vim.Math3d.AABox2D.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.AABox2D.op_Implicit(System.ValueTuple{Vim.Math3d.Vector2,Vim.Math3d.Vector2})~Vim.Math3d.AABox2D
  commentId: M:Vim.Math3d.AABox2D.op_Implicit(System.ValueTuple{Vim.Math3d.Vector2,Vim.Math3d.Vector2})~Vim.Math3d.AABox2D
  id: op_Implicit(System.ValueTuple{Vim.Math3d.Vector2,Vim.Math3d.Vector2})~Vim.Math3d.AABox2D
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: Implicit((Vector2 min, Vector2 max) to AABox2D)
  nameWithType: AABox2D.Implicit((Vector2 min, Vector2 max) to AABox2D)
  fullName: Vim.Math3d.AABox2D.Implicit(System.ValueTuple<Vim.Math3d.Vector2, Vim.Math3d.Vector2> to Vim.Math3d.AABox2D)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Implicit
    path: ../src/Structs.cs
    startLine: 719
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static implicit operator AABox2D((Vector2 min, Vector2 max) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{Vim.Math3d.Vector2,Vim.Math3d.Vector2}
    return:
      type: Vim.Math3d.AABox2D
    content.vb: Public Shared Widening Operator CType(tuple As(min As Vector2, max As Vector2)(Of Vector2 , Vector2)) As AABox2D
  overload: Vim.Math3d.AABox2D.op_Implicit*
  nameWithType.vb: AABox2D.Widening((min As Vector2, max As Vector2)(Of Vector2, Vector2) to AABox2D)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.AABox2D.Widening(System.ValueTuple(Of Vim.Math3d.Vector2, Vim.Math3d.Vector2) to Vim.Math3d.AABox2D)
  name.vb: Widening((min As Vector2, max As Vector2)(Of Vector2, Vector2) to AABox2D)
- uid: Vim.Math3d.AABox2D.op_Implicit(Vim.Math3d.AABox2D)~System.ValueTuple{Vim.Math3d.Vector2,Vim.Math3d.Vector2}
  commentId: M:Vim.Math3d.AABox2D.op_Implicit(Vim.Math3d.AABox2D)~System.ValueTuple{Vim.Math3d.Vector2,Vim.Math3d.Vector2}
  id: op_Implicit(Vim.Math3d.AABox2D)~System.ValueTuple{Vim.Math3d.Vector2,Vim.Math3d.Vector2}
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: Implicit(AABox2D to (Vector2 min, Vector2 max))
  nameWithType: AABox2D.Implicit(AABox2D to (Vector2 min, Vector2 max))
  fullName: Vim.Math3d.AABox2D.Implicit(Vim.Math3d.AABox2D to System.ValueTuple<Vim.Math3d.Vector2, Vim.Math3d.Vector2>)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Implicit
    path: ../src/Structs.cs
    startLine: 720
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static implicit operator (Vector2 min, Vector2 max)(AABox2D self)
    parameters:
    - id: self
      type: Vim.Math3d.AABox2D
    return:
      type: System.ValueTuple{Vim.Math3d.Vector2,Vim.Math3d.Vector2}
    content.vb: Public Shared Widening Operator CType(self As AABox2D) As(min As Vector2, max As Vector2)(Of Vector2 , Vector2)
  overload: Vim.Math3d.AABox2D.op_Implicit*
  nameWithType.vb: AABox2D.Widening(AABox2D to (min As Vector2, max As Vector2)(Of Vector2, Vector2))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.AABox2D.Widening(Vim.Math3d.AABox2D to System.ValueTuple(Of Vim.Math3d.Vector2, Vim.Math3d.Vector2))
  name.vb: Widening(AABox2D to (min As Vector2, max As Vector2)(Of Vector2, Vector2))
- uid: Vim.Math3d.AABox2D.AlmostEquals(Vim.Math3d.AABox2D,System.Single)
  commentId: M:Vim.Math3d.AABox2D.AlmostEquals(Vim.Math3d.AABox2D,System.Single)
  id: AlmostEquals(Vim.Math3d.AABox2D,System.Single)
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: AlmostEquals(AABox2D, Single)
  nameWithType: AABox2D.AlmostEquals(AABox2D, Single)
  fullName: Vim.Math3d.AABox2D.AlmostEquals(Vim.Math3d.AABox2D, System.Single)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: AlmostEquals
    path: ../src/Structs.cs
    startLine: 722
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool AlmostEquals(AABox2D x, float tolerance = 1E-07F)
    parameters:
    - id: x
      type: Vim.Math3d.AABox2D
    - id: tolerance
      type: System.Single
    return:
      type: System.Boolean
    content.vb: Public Function AlmostEquals(x As AABox2D, tolerance As Single = 1E-07F) As Boolean
  overload: Vim.Math3d.AABox2D.AlmostEquals*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AABox2D.Zero
  commentId: F:Vim.Math3d.AABox2D.Zero
  id: Zero
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: Zero
  nameWithType: AABox2D.Zero
  fullName: Vim.Math3d.AABox2D.Zero
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Zero
    path: ../src/Structs.cs
    startLine: 723
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static AABox2D Zero
    return:
      type: Vim.Math3d.AABox2D
    content.vb: Public Shared Zero As AABox2D
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.AABox2D.MinValue
  commentId: F:Vim.Math3d.AABox2D.MinValue
  id: MinValue
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: MinValue
  nameWithType: AABox2D.MinValue
  fullName: Vim.Math3d.AABox2D.MinValue
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MinValue
    path: ../src/Structs.cs
    startLine: 724
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static AABox2D MinValue
    return:
      type: Vim.Math3d.AABox2D
    content.vb: Public Shared MinValue As AABox2D
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.AABox2D.MaxValue
  commentId: F:Vim.Math3d.AABox2D.MaxValue
  id: MaxValue
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: MaxValue
  nameWithType: AABox2D.MaxValue
  fullName: Vim.Math3d.AABox2D.MaxValue
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MaxValue
    path: ../src/Structs.cs
    startLine: 725
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static AABox2D MaxValue
    return:
      type: Vim.Math3d.AABox2D
    content.vb: Public Shared MaxValue As AABox2D
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.AABox2D.SetMin(Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.AABox2D.SetMin(Vim.Math3d.Vector2)
  id: SetMin(Vim.Math3d.Vector2)
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: SetMin(Vector2)
  nameWithType: AABox2D.SetMin(Vector2)
  fullName: Vim.Math3d.AABox2D.SetMin(Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SetMin
    path: ../src/Structs.cs
    startLine: 726
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly AABox2D SetMin(Vector2 x)
    parameters:
    - id: x
      type: Vim.Math3d.Vector2
    return:
      type: Vim.Math3d.AABox2D
    content.vb: Public Function SetMin(x As Vector2) As AABox2D
  overload: Vim.Math3d.AABox2D.SetMin*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AABox2D.SetMax(Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.AABox2D.SetMax(Vim.Math3d.Vector2)
  id: SetMax(Vim.Math3d.Vector2)
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: SetMax(Vector2)
  nameWithType: AABox2D.SetMax(Vector2)
  fullName: Vim.Math3d.AABox2D.SetMax(Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SetMax
    path: ../src/Structs.cs
    startLine: 727
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly AABox2D SetMax(Vector2 x)
    parameters:
    - id: x
      type: Vim.Math3d.Vector2
    return:
      type: Vim.Math3d.AABox2D
    content.vb: Public Function SetMax(x As Vector2) As AABox2D
  overload: Vim.Math3d.AABox2D.SetMax*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AABox2D.Extent
  commentId: P:Vim.Math3d.AABox2D.Extent
  id: Extent
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: Extent
  nameWithType: AABox2D.Extent
  fullName: Vim.Math3d.AABox2D.Extent
  type: Property
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Extent
    path: ../src/Structs.cs
    startLine: 728
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly Vector2 Extent { get; }
    parameters: []
    return:
      type: Vim.Math3d.Vector2
    content.vb: Public ReadOnly Property Extent As Vector2
  overload: Vim.Math3d.AABox2D.Extent*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.AABox2D.Center
  commentId: P:Vim.Math3d.AABox2D.Center
  id: Center
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: Center
  nameWithType: AABox2D.Center
  fullName: Vim.Math3d.AABox2D.Center
  type: Property
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Center
    path: ../src/Structs.cs
    startLine: 729
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly Vector2 Center { get; }
    parameters: []
    return:
      type: Vim.Math3d.Vector2
    content.vb: Public ReadOnly Property Center As Vector2
  overload: Vim.Math3d.AABox2D.Center*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.AABox2D.MagnitudeSquared
  commentId: M:Vim.Math3d.AABox2D.MagnitudeSquared
  id: MagnitudeSquared
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: MagnitudeSquared()
  nameWithType: AABox2D.MagnitudeSquared()
  fullName: Vim.Math3d.AABox2D.MagnitudeSquared()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MagnitudeSquared
    path: ../src/Structs.cs
    startLine: 730
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly double MagnitudeSquared()
    return:
      type: System.Double
    content.vb: Public Function MagnitudeSquared As Double
  overload: Vim.Math3d.AABox2D.MagnitudeSquared*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AABox2D.Magnitude
  commentId: M:Vim.Math3d.AABox2D.Magnitude
  id: Magnitude
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: Magnitude()
  nameWithType: AABox2D.Magnitude()
  fullName: Vim.Math3d.AABox2D.Magnitude()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Magnitude
    path: ../src/Structs.cs
    startLine: 731
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly double Magnitude()
    return:
      type: System.Double
    content.vb: Public Function Magnitude As Double
  overload: Vim.Math3d.AABox2D.Magnitude*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AABox2D.Merge(Vim.Math3d.AABox2D)
  commentId: M:Vim.Math3d.AABox2D.Merge(Vim.Math3d.AABox2D)
  id: Merge(Vim.Math3d.AABox2D)
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: Merge(AABox2D)
  nameWithType: AABox2D.Merge(AABox2D)
  fullName: Vim.Math3d.AABox2D.Merge(Vim.Math3d.AABox2D)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Merge
    path: ../src/Structs.cs
    startLine: 732
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly AABox2D Merge(AABox2D other)
    parameters:
    - id: other
      type: Vim.Math3d.AABox2D
    return:
      type: Vim.Math3d.AABox2D
    content.vb: Public Function Merge(other As AABox2D) As AABox2D
  overload: Vim.Math3d.AABox2D.Merge*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AABox2D.Intersection(Vim.Math3d.AABox2D)
  commentId: M:Vim.Math3d.AABox2D.Intersection(Vim.Math3d.AABox2D)
  id: Intersection(Vim.Math3d.AABox2D)
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: Intersection(AABox2D)
  nameWithType: AABox2D.Intersection(AABox2D)
  fullName: Vim.Math3d.AABox2D.Intersection(Vim.Math3d.AABox2D)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Intersection
    path: ../src/Structs.cs
    startLine: 733
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly AABox2D Intersection(AABox2D other)
    parameters:
    - id: other
      type: Vim.Math3d.AABox2D
    return:
      type: Vim.Math3d.AABox2D
    content.vb: Public Function Intersection(other As AABox2D) As AABox2D
  overload: Vim.Math3d.AABox2D.Intersection*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AABox2D.op_Addition(Vim.Math3d.AABox2D,Vim.Math3d.AABox2D)
  commentId: M:Vim.Math3d.AABox2D.op_Addition(Vim.Math3d.AABox2D,Vim.Math3d.AABox2D)
  id: op_Addition(Vim.Math3d.AABox2D,Vim.Math3d.AABox2D)
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: Addition(AABox2D, AABox2D)
  nameWithType: AABox2D.Addition(AABox2D, AABox2D)
  fullName: Vim.Math3d.AABox2D.Addition(Vim.Math3d.AABox2D, Vim.Math3d.AABox2D)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Addition
    path: ../src/Structs.cs
    startLine: 734
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static AABox2D operator +(AABox2D value1, AABox2D value2)
    parameters:
    - id: value1
      type: Vim.Math3d.AABox2D
    - id: value2
      type: Vim.Math3d.AABox2D
    return:
      type: Vim.Math3d.AABox2D
    content.vb: Public Shared Operator +(value1 As AABox2D, value2 As AABox2D) As AABox2D
  overload: Vim.Math3d.AABox2D.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.AABox2D.op_Subtraction(Vim.Math3d.AABox2D,Vim.Math3d.AABox2D)
  commentId: M:Vim.Math3d.AABox2D.op_Subtraction(Vim.Math3d.AABox2D,Vim.Math3d.AABox2D)
  id: op_Subtraction(Vim.Math3d.AABox2D,Vim.Math3d.AABox2D)
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: Subtraction(AABox2D, AABox2D)
  nameWithType: AABox2D.Subtraction(AABox2D, AABox2D)
  fullName: Vim.Math3d.AABox2D.Subtraction(Vim.Math3d.AABox2D, Vim.Math3d.AABox2D)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Subtraction
    path: ../src/Structs.cs
    startLine: 735
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static AABox2D operator -(AABox2D value1, AABox2D value2)
    parameters:
    - id: value1
      type: Vim.Math3d.AABox2D
    - id: value2
      type: Vim.Math3d.AABox2D
    return:
      type: Vim.Math3d.AABox2D
    content.vb: Public Shared Operator -(value1 As AABox2D, value2 As AABox2D) As AABox2D
  overload: Vim.Math3d.AABox2D.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.AABox2D.Merge(Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.AABox2D.Merge(Vim.Math3d.Vector2)
  id: Merge(Vim.Math3d.Vector2)
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: Merge(Vector2)
  nameWithType: AABox2D.Merge(Vector2)
  fullName: Vim.Math3d.AABox2D.Merge(Vim.Math3d.Vector2)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Merge
    path: ../src/Structs.cs
    startLine: 736
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly AABox2D Merge(Vector2 other)
    parameters:
    - id: other
      type: Vim.Math3d.Vector2
    return:
      type: Vim.Math3d.AABox2D
    content.vb: Public Function Merge(other As Vector2) As AABox2D
  overload: Vim.Math3d.AABox2D.Merge*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AABox2D.op_Addition(Vim.Math3d.AABox2D,Vim.Math3d.Vector2)
  commentId: M:Vim.Math3d.AABox2D.op_Addition(Vim.Math3d.AABox2D,Vim.Math3d.Vector2)
  id: op_Addition(Vim.Math3d.AABox2D,Vim.Math3d.Vector2)
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: Addition(AABox2D, Vector2)
  nameWithType: AABox2D.Addition(AABox2D, Vector2)
  fullName: Vim.Math3d.AABox2D.Addition(Vim.Math3d.AABox2D, Vim.Math3d.Vector2)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Addition
    path: ../src/Structs.cs
    startLine: 737
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static AABox2D operator +(AABox2D value1, Vector2 value2)
    parameters:
    - id: value1
      type: Vim.Math3d.AABox2D
    - id: value2
      type: Vim.Math3d.Vector2
    return:
      type: Vim.Math3d.AABox2D
    content.vb: Public Shared Operator +(value1 As AABox2D, value2 As Vector2) As AABox2D
  overload: Vim.Math3d.AABox2D.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.AABox2D.Empty
  commentId: F:Vim.Math3d.AABox2D.Empty
  id: Empty
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: Empty
  nameWithType: AABox2D.Empty
  fullName: Vim.Math3d.AABox2D.Empty
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Empty
    path: ../src/Structs.cs
    startLine: 738
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static AABox2D Empty
    return:
      type: Vim.Math3d.AABox2D
    content.vb: Public Shared Empty As AABox2D
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.AABox2D.IsNaN
  commentId: M:Vim.Math3d.AABox2D.IsNaN
  id: IsNaN
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: IsNaN()
  nameWithType: AABox2D.IsNaN()
  fullName: Vim.Math3d.AABox2D.IsNaN()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: IsNaN
    path: ../src/Structs.cs
    startLine: 739
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool IsNaN()
    return:
      type: System.Boolean
    content.vb: Public Function IsNaN As Boolean
  overload: Vim.Math3d.AABox2D.IsNaN*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AABox2D.IsInfinity
  commentId: M:Vim.Math3d.AABox2D.IsInfinity
  id: IsInfinity
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: IsInfinity()
  nameWithType: AABox2D.IsInfinity()
  fullName: Vim.Math3d.AABox2D.IsInfinity()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: IsInfinity
    path: ../src/Structs.cs
    startLine: 740
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool IsInfinity()
    return:
      type: System.Boolean
    content.vb: Public Function IsInfinity As Boolean
  overload: Vim.Math3d.AABox2D.IsInfinity*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AABox2D.CompareTo(Vim.Math3d.AABox2D)
  commentId: M:Vim.Math3d.AABox2D.CompareTo(Vim.Math3d.AABox2D)
  id: CompareTo(Vim.Math3d.AABox2D)
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: CompareTo(AABox2D)
  nameWithType: AABox2D.CompareTo(AABox2D)
  fullName: Vim.Math3d.AABox2D.CompareTo(Vim.Math3d.AABox2D)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: CompareTo
    path: ../src/Structs.cs
    startLine: 741
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly int CompareTo(AABox2D x)
    parameters:
    - id: x
      type: Vim.Math3d.AABox2D
    return:
      type: System.Int32
    content.vb: Public Function CompareTo(x As AABox2D) As Integer
  overload: Vim.Math3d.AABox2D.CompareTo*
  implements:
  - System.IComparable{Vim.Math3d.AABox2D}.CompareTo(Vim.Math3d.AABox2D)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AABox2D.op_LessThan(Vim.Math3d.AABox2D,Vim.Math3d.AABox2D)
  commentId: M:Vim.Math3d.AABox2D.op_LessThan(Vim.Math3d.AABox2D,Vim.Math3d.AABox2D)
  id: op_LessThan(Vim.Math3d.AABox2D,Vim.Math3d.AABox2D)
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: LessThan(AABox2D, AABox2D)
  nameWithType: AABox2D.LessThan(AABox2D, AABox2D)
  fullName: Vim.Math3d.AABox2D.LessThan(Vim.Math3d.AABox2D, Vim.Math3d.AABox2D)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_LessThan
    path: ../src/Structs.cs
    startLine: 742
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator <(AABox2D x0, AABox2D x1)
    parameters:
    - id: x0
      type: Vim.Math3d.AABox2D
    - id: x1
      type: Vim.Math3d.AABox2D
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <(x0 As AABox2D, x1 As AABox2D) As Boolean
  overload: Vim.Math3d.AABox2D.op_LessThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.AABox2D.op_LessThanOrEqual(Vim.Math3d.AABox2D,Vim.Math3d.AABox2D)
  commentId: M:Vim.Math3d.AABox2D.op_LessThanOrEqual(Vim.Math3d.AABox2D,Vim.Math3d.AABox2D)
  id: op_LessThanOrEqual(Vim.Math3d.AABox2D,Vim.Math3d.AABox2D)
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(AABox2D, AABox2D)
  nameWithType: AABox2D.LessThanOrEqual(AABox2D, AABox2D)
  fullName: Vim.Math3d.AABox2D.LessThanOrEqual(Vim.Math3d.AABox2D, Vim.Math3d.AABox2D)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_LessThanOrEqual
    path: ../src/Structs.cs
    startLine: 743
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator <=(AABox2D x0, AABox2D x1)
    parameters:
    - id: x0
      type: Vim.Math3d.AABox2D
    - id: x1
      type: Vim.Math3d.AABox2D
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <=(x0 As AABox2D, x1 As AABox2D) As Boolean
  overload: Vim.Math3d.AABox2D.op_LessThanOrEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.AABox2D.op_GreaterThan(Vim.Math3d.AABox2D,Vim.Math3d.AABox2D)
  commentId: M:Vim.Math3d.AABox2D.op_GreaterThan(Vim.Math3d.AABox2D,Vim.Math3d.AABox2D)
  id: op_GreaterThan(Vim.Math3d.AABox2D,Vim.Math3d.AABox2D)
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: GreaterThan(AABox2D, AABox2D)
  nameWithType: AABox2D.GreaterThan(AABox2D, AABox2D)
  fullName: Vim.Math3d.AABox2D.GreaterThan(Vim.Math3d.AABox2D, Vim.Math3d.AABox2D)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_GreaterThan
    path: ../src/Structs.cs
    startLine: 744
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator>(AABox2D x0, AABox2D x1)
    parameters:
    - id: x0
      type: Vim.Math3d.AABox2D
    - id: x1
      type: Vim.Math3d.AABox2D
    return:
      type: System.Boolean
    content.vb: Public Shared Operator>(x0 As AABox2D, x1 As AABox2D) As Boolean
  overload: Vim.Math3d.AABox2D.op_GreaterThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.AABox2D.op_GreaterThanOrEqual(Vim.Math3d.AABox2D,Vim.Math3d.AABox2D)
  commentId: M:Vim.Math3d.AABox2D.op_GreaterThanOrEqual(Vim.Math3d.AABox2D,Vim.Math3d.AABox2D)
  id: op_GreaterThanOrEqual(Vim.Math3d.AABox2D,Vim.Math3d.AABox2D)
  parent: Vim.Math3d.AABox2D
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(AABox2D, AABox2D)
  nameWithType: AABox2D.GreaterThanOrEqual(AABox2D, AABox2D)
  fullName: Vim.Math3d.AABox2D.GreaterThanOrEqual(Vim.Math3d.AABox2D, Vim.Math3d.AABox2D)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_GreaterThanOrEqual
    path: ../src/Structs.cs
    startLine: 745
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator >=(AABox2D x0, AABox2D x1)
    parameters:
    - id: x0
      type: Vim.Math3d.AABox2D
    - id: x1
      type: Vim.Math3d.AABox2D
    return:
      type: System.Boolean
    content.vb: Public Shared Operator >=(x0 As AABox2D, x1 As AABox2D) As Boolean
  overload: Vim.Math3d.AABox2D.op_GreaterThanOrEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Vim.Math3d
  commentId: N:Vim.Math3d
  name: Vim.Math3d
  nameWithType: Vim.Math3d
  fullName: Vim.Math3d
- uid: System.IEquatable{Vim.Math3d.AABox2D}
  commentId: T:System.IEquatable{Vim.Math3d.AABox2D}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<AABox2D>
  nameWithType: IEquatable<AABox2D>
  fullName: System.IEquatable<Vim.Math3d.AABox2D>
  nameWithType.vb: IEquatable(Of AABox2D)
  fullName.vb: System.IEquatable(Of Vim.Math3d.AABox2D)
  name.vb: IEquatable(Of AABox2D)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.AABox2D
    name: AABox2D
    nameWithType: AABox2D
    fullName: Vim.Math3d.AABox2D
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.AABox2D
    name: AABox2D
    nameWithType: AABox2D
    fullName: Vim.Math3d.AABox2D
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable{Vim.Math3d.AABox2D}
  commentId: T:System.IComparable{Vim.Math3d.AABox2D}
  parent: System
  definition: System.IComparable`1
  name: IComparable<AABox2D>
  nameWithType: IComparable<AABox2D>
  fullName: System.IComparable<Vim.Math3d.AABox2D>
  nameWithType.vb: IComparable(Of AABox2D)
  fullName.vb: System.IComparable(Of Vim.Math3d.AABox2D)
  name.vb: IComparable(Of AABox2D)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.AABox2D
    name: AABox2D
    nameWithType: AABox2D
    fullName: Vim.Math3d.AABox2D
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.AABox2D
    name: AABox2D
    nameWithType: AABox2D
    fullName: Vim.Math3d.AABox2D
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Vim.Math3d.AABox2D.Count*
  commentId: Overload:Vim.Math3d.AABox2D.Count
  name: Count
  nameWithType: AABox2D.Count
  fullName: Vim.Math3d.AABox2D.Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Vim.Math3d.AABox2D.CenterBottom*
  commentId: Overload:Vim.Math3d.AABox2D.CenterBottom
  name: CenterBottom
  nameWithType: AABox2D.CenterBottom
  fullName: Vim.Math3d.AABox2D.CenterBottom
- uid: Vim.Math3d.Vector2
  commentId: T:Vim.Math3d.Vector2
  parent: Vim.Math3d
  name: Vector2
  nameWithType: Vector2
  fullName: Vim.Math3d.Vector2
- uid: Vim.Math3d.AABox2D.Corners*
  commentId: Overload:Vim.Math3d.AABox2D.Corners
  name: Corners
  nameWithType: AABox2D.Corners
  fullName: Vim.Math3d.AABox2D.Corners
- uid: Vim.Math3d.Vector2[]
  isExternal: true
  name: Vector2[]
  nameWithType: Vector2[]
  fullName: Vim.Math3d.Vector2[]
  nameWithType.vb: Vector2()
  fullName.vb: Vim.Math3d.Vector2()
  name.vb: Vector2()
  spec.csharp:
  - uid: Vim.Math3d.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Vim.Math3d.Vector2
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Vim.Math3d.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Vim.Math3d.Vector2
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Vim.Math3d.AABox2D.IsEmpty*
  commentId: Overload:Vim.Math3d.AABox2D.IsEmpty
  name: IsEmpty
  nameWithType: AABox2D.IsEmpty
  fullName: Vim.Math3d.AABox2D.IsEmpty
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Vim.Math3d.AABox2D.IsValid*
  commentId: Overload:Vim.Math3d.AABox2D.IsValid
  name: IsValid
  nameWithType: AABox2D.IsValid
  fullName: Vim.Math3d.AABox2D.IsValid
- uid: Vim.Math3d.AABox2D.Distance*
  commentId: Overload:Vim.Math3d.AABox2D.Distance
  name: Distance
  nameWithType: AABox2D.Distance
  fullName: Vim.Math3d.AABox2D.Distance
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Vim.Math3d.AABox2D.CenterDistance*
  commentId: Overload:Vim.Math3d.AABox2D.CenterDistance
  name: CenterDistance
  nameWithType: AABox2D.CenterDistance
  fullName: Vim.Math3d.AABox2D.CenterDistance
- uid: Vim.Math3d.AABox2D.Translate*
  commentId: Overload:Vim.Math3d.AABox2D.Translate
  name: Translate
  nameWithType: AABox2D.Translate
  fullName: Vim.Math3d.AABox2D.Translate
- uid: Vim.Math3d.AABox2D
  commentId: T:Vim.Math3d.AABox2D
  parent: Vim.Math3d
  name: AABox2D
  nameWithType: AABox2D
  fullName: Vim.Math3d.AABox2D
- uid: Vim.Math3d.AABox2D.DistanceToOrigin*
  commentId: Overload:Vim.Math3d.AABox2D.DistanceToOrigin
  name: DistanceToOrigin
  nameWithType: AABox2D.DistanceToOrigin
  fullName: Vim.Math3d.AABox2D.DistanceToOrigin
- uid: Vim.Math3d.AABox2D.CenterDistanceToOrigin*
  commentId: Overload:Vim.Math3d.AABox2D.CenterDistanceToOrigin
  name: CenterDistanceToOrigin
  nameWithType: AABox2D.CenterDistanceToOrigin
  fullName: Vim.Math3d.AABox2D.CenterDistanceToOrigin
- uid: Vim.Math3d.AABox2D.Area*
  commentId: Overload:Vim.Math3d.AABox2D.Area
  name: Area
  nameWithType: AABox2D.Area
  fullName: Vim.Math3d.AABox2D.Area
- uid: Vim.Math3d.AABox2D.Item*
  commentId: Overload:Vim.Math3d.AABox2D.Item
  name: Item
  nameWithType: AABox2D.Item
  fullName: Vim.Math3d.AABox2D.Item
- uid: Vim.Math3d.AABox2D.MaxSide*
  commentId: Overload:Vim.Math3d.AABox2D.MaxSide
  name: MaxSide
  nameWithType: AABox2D.MaxSide
  fullName: Vim.Math3d.AABox2D.MaxSide
- uid: Vim.Math3d.AABox2D.MinSide*
  commentId: Overload:Vim.Math3d.AABox2D.MinSide
  name: MinSide
  nameWithType: AABox2D.MinSide
  fullName: Vim.Math3d.AABox2D.MinSide
- uid: Vim.Math3d.AABox2D.Diagonal*
  commentId: Overload:Vim.Math3d.AABox2D.Diagonal
  name: Diagonal
  nameWithType: AABox2D.Diagonal
  fullName: Vim.Math3d.AABox2D.Diagonal
- uid: Vim.Math3d.AABox2D.Contains*
  commentId: Overload:Vim.Math3d.AABox2D.Contains
  name: Contains
  nameWithType: AABox2D.Contains
  fullName: Vim.Math3d.AABox2D.Contains
- uid: Vim.Math3d.ContainmentType
  commentId: T:Vim.Math3d.ContainmentType
  parent: Vim.Math3d
  name: ContainmentType
  nameWithType: ContainmentType
  fullName: Vim.Math3d.ContainmentType
- uid: Vim.Math3d.AABox2D.CreateFromPoints*
  commentId: Overload:Vim.Math3d.AABox2D.CreateFromPoints
  name: CreateFromPoints
  nameWithType: AABox2D.CreateFromPoints
  fullName: Vim.Math3d.AABox2D.CreateFromPoints
- uid: System.Collections.Generic.IEnumerable{Vim.Math3d.Vector2}
  commentId: T:System.Collections.Generic.IEnumerable{Vim.Math3d.Vector2}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Vector2>
  nameWithType: IEnumerable<Vector2>
  fullName: System.Collections.Generic.IEnumerable<Vim.Math3d.Vector2>
  nameWithType.vb: IEnumerable(Of Vector2)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Vim.Math3d.Vector2)
  name.vb: IEnumerable(Of Vector2)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Vim.Math3d.Vector2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Vim.Math3d.Vector2
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Vim.Math3d.AABox2D.GetCorners*
  commentId: Overload:Vim.Math3d.AABox2D.GetCorners
  name: GetCorners
  nameWithType: AABox2D.GetCorners
  fullName: Vim.Math3d.AABox2D.GetCorners
- uid: System.Int32[]
  isExternal: true
  name: Int32[]
  nameWithType: Int32[]
  fullName: System.Int32[]
  nameWithType.vb: Int32()
  fullName.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Vim.Math3d.AABox2D.Intersects*
  commentId: Overload:Vim.Math3d.AABox2D.Intersects
  name: Intersects
  nameWithType: AABox2D.Intersects
  fullName: Vim.Math3d.AABox2D.Intersects
- uid: Vim.Math3d.AABox2D.RelativePosition*
  commentId: Overload:Vim.Math3d.AABox2D.RelativePosition
  name: RelativePosition
  nameWithType: AABox2D.RelativePosition
  fullName: Vim.Math3d.AABox2D.RelativePosition
- uid: Vim.Math3d.AABox2D.Recenter*
  commentId: Overload:Vim.Math3d.AABox2D.Recenter
  name: Recenter
  nameWithType: AABox2D.Recenter
  fullName: Vim.Math3d.AABox2D.Recenter
- uid: Vim.Math3d.AABox2D.Scale*
  commentId: Overload:Vim.Math3d.AABox2D.Scale
  name: Scale
  nameWithType: AABox2D.Scale
  fullName: Vim.Math3d.AABox2D.Scale
- uid: Vim.Math3d.AABox2D.#ctor*
  commentId: Overload:Vim.Math3d.AABox2D.#ctor
  name: AABox2D
  nameWithType: AABox2D.AABox2D
  fullName: Vim.Math3d.AABox2D.AABox2D
- uid: System.ValueTuple{Vim.Math3d.Vector2,Vim.Math3d.Vector2}
  commentId: T:System.ValueTuple{Vim.Math3d.Vector2,Vim.Math3d.Vector2}
  parent: System
  definition: System.ValueTuple`2
  name: (T1, T2)<Vector2, Vector2>
  nameWithType: (T1, T2)<Vector2, Vector2>
  fullName: System.ValueTuple<Vim.Math3d.Vector2, Vim.Math3d.Vector2>
  nameWithType.vb: (T1, T2)(Of Vector2, Vector2)
  fullName.vb: System.ValueTuple(Of Vim.Math3d.Vector2, Vim.Math3d.Vector2)
  name.vb: (T1, T2)(Of Vector2, Vector2)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Vim.Math3d.Vector2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Vim.Math3d.Vector2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Vim.Math3d.Vector2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector2
    name: Vector2
    nameWithType: Vector2
    fullName: Vim.Math3d.Vector2
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple`2
  commentId: T:System.ValueTuple`2
  isExternal: true
  name: (T1, T2)<T1, T2>
  nameWithType: (T1, T2)<T1, T2>
  fullName: System.ValueTuple<T1, T2>
  nameWithType.vb: (T1, T2)(Of T1, T2)
  fullName.vb: System.ValueTuple(Of T1, T2)
  name.vb: (T1, T2)(Of T1, T2)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.AABox2D.Create*
  commentId: Overload:Vim.Math3d.AABox2D.Create
  name: Create
  nameWithType: AABox2D.Create
  fullName: Vim.Math3d.AABox2D.Create
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.AABox2D.Equals*
  commentId: Overload:Vim.Math3d.AABox2D.Equals
  name: Equals
  nameWithType: AABox2D.Equals
  fullName: Vim.Math3d.AABox2D.Equals
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.AABox2D.GetHashCode*
  commentId: Overload:Vim.Math3d.AABox2D.GetHashCode
  name: GetHashCode
  nameWithType: AABox2D.GetHashCode
  fullName: Vim.Math3d.AABox2D.GetHashCode
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.AABox2D.ToString*
  commentId: Overload:Vim.Math3d.AABox2D.ToString
  name: ToString
  nameWithType: AABox2D.ToString
  fullName: Vim.Math3d.AABox2D.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Vim.Math3d.AABox2D.Deconstruct*
  commentId: Overload:Vim.Math3d.AABox2D.Deconstruct
  name: Deconstruct
  nameWithType: AABox2D.Deconstruct
  fullName: Vim.Math3d.AABox2D.Deconstruct
- uid: System.IEquatable{Vim.Math3d.AABox2D}.Equals(Vim.Math3d.AABox2D)
  commentId: M:System.IEquatable{Vim.Math3d.AABox2D}.Equals(Vim.Math3d.AABox2D)
  parent: System.IEquatable{Vim.Math3d.AABox2D}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(AABox2D)
  nameWithType: IEquatable<AABox2D>.Equals(AABox2D)
  fullName: System.IEquatable<Vim.Math3d.AABox2D>.Equals(Vim.Math3d.AABox2D)
  nameWithType.vb: IEquatable(Of AABox2D).Equals(AABox2D)
  fullName.vb: System.IEquatable(Of Vim.Math3d.AABox2D).Equals(Vim.Math3d.AABox2D)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<AABox2D>.Equals
    fullName: System.IEquatable<Vim.Math3d.AABox2D>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.AABox2D
    name: AABox2D
    nameWithType: AABox2D
    fullName: Vim.Math3d.AABox2D
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of AABox2D).Equals
    fullName: System.IEquatable(Of Vim.Math3d.AABox2D).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.AABox2D
    name: AABox2D
    nameWithType: AABox2D
    fullName: Vim.Math3d.AABox2D
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.AABox2D.op_Equality*
  commentId: Overload:Vim.Math3d.AABox2D.op_Equality
  name: Equality
  nameWithType: AABox2D.Equality
  fullName: Vim.Math3d.AABox2D.Equality
- uid: Vim.Math3d.AABox2D.op_Inequality*
  commentId: Overload:Vim.Math3d.AABox2D.op_Inequality
  name: Inequality
  nameWithType: AABox2D.Inequality
  fullName: Vim.Math3d.AABox2D.Inequality
- uid: Vim.Math3d.AABox2D.op_Implicit*
  commentId: Overload:Vim.Math3d.AABox2D.op_Implicit
  name: Implicit
  nameWithType: AABox2D.Implicit
  fullName: Vim.Math3d.AABox2D.Implicit
  nameWithType.vb: AABox2D.Widening
  fullName.vb: Vim.Math3d.AABox2D.Widening
  name.vb: Widening
- uid: Vim.Math3d.AABox2D.AlmostEquals*
  commentId: Overload:Vim.Math3d.AABox2D.AlmostEquals
  name: AlmostEquals
  nameWithType: AABox2D.AlmostEquals
  fullName: Vim.Math3d.AABox2D.AlmostEquals
- uid: Vim.Math3d.AABox2D.SetMin*
  commentId: Overload:Vim.Math3d.AABox2D.SetMin
  name: SetMin
  nameWithType: AABox2D.SetMin
  fullName: Vim.Math3d.AABox2D.SetMin
- uid: Vim.Math3d.AABox2D.SetMax*
  commentId: Overload:Vim.Math3d.AABox2D.SetMax
  name: SetMax
  nameWithType: AABox2D.SetMax
  fullName: Vim.Math3d.AABox2D.SetMax
- uid: Vim.Math3d.AABox2D.Extent*
  commentId: Overload:Vim.Math3d.AABox2D.Extent
  name: Extent
  nameWithType: AABox2D.Extent
  fullName: Vim.Math3d.AABox2D.Extent
- uid: Vim.Math3d.AABox2D.Center*
  commentId: Overload:Vim.Math3d.AABox2D.Center
  name: Center
  nameWithType: AABox2D.Center
  fullName: Vim.Math3d.AABox2D.Center
- uid: Vim.Math3d.AABox2D.MagnitudeSquared*
  commentId: Overload:Vim.Math3d.AABox2D.MagnitudeSquared
  name: MagnitudeSquared
  nameWithType: AABox2D.MagnitudeSquared
  fullName: Vim.Math3d.AABox2D.MagnitudeSquared
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Vim.Math3d.AABox2D.Magnitude*
  commentId: Overload:Vim.Math3d.AABox2D.Magnitude
  name: Magnitude
  nameWithType: AABox2D.Magnitude
  fullName: Vim.Math3d.AABox2D.Magnitude
- uid: Vim.Math3d.AABox2D.Merge*
  commentId: Overload:Vim.Math3d.AABox2D.Merge
  name: Merge
  nameWithType: AABox2D.Merge
  fullName: Vim.Math3d.AABox2D.Merge
- uid: Vim.Math3d.AABox2D.Intersection*
  commentId: Overload:Vim.Math3d.AABox2D.Intersection
  name: Intersection
  nameWithType: AABox2D.Intersection
  fullName: Vim.Math3d.AABox2D.Intersection
- uid: Vim.Math3d.AABox2D.op_Addition*
  commentId: Overload:Vim.Math3d.AABox2D.op_Addition
  name: Addition
  nameWithType: AABox2D.Addition
  fullName: Vim.Math3d.AABox2D.Addition
- uid: Vim.Math3d.AABox2D.op_Subtraction*
  commentId: Overload:Vim.Math3d.AABox2D.op_Subtraction
  name: Subtraction
  nameWithType: AABox2D.Subtraction
  fullName: Vim.Math3d.AABox2D.Subtraction
- uid: Vim.Math3d.AABox2D.IsNaN*
  commentId: Overload:Vim.Math3d.AABox2D.IsNaN
  name: IsNaN
  nameWithType: AABox2D.IsNaN
  fullName: Vim.Math3d.AABox2D.IsNaN
- uid: Vim.Math3d.AABox2D.IsInfinity*
  commentId: Overload:Vim.Math3d.AABox2D.IsInfinity
  name: IsInfinity
  nameWithType: AABox2D.IsInfinity
  fullName: Vim.Math3d.AABox2D.IsInfinity
- uid: Vim.Math3d.AABox2D.CompareTo*
  commentId: Overload:Vim.Math3d.AABox2D.CompareTo
  name: CompareTo
  nameWithType: AABox2D.CompareTo
  fullName: Vim.Math3d.AABox2D.CompareTo
- uid: System.IComparable{Vim.Math3d.AABox2D}.CompareTo(Vim.Math3d.AABox2D)
  commentId: M:System.IComparable{Vim.Math3d.AABox2D}.CompareTo(Vim.Math3d.AABox2D)
  parent: System.IComparable{Vim.Math3d.AABox2D}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(AABox2D)
  nameWithType: IComparable<AABox2D>.CompareTo(AABox2D)
  fullName: System.IComparable<Vim.Math3d.AABox2D>.CompareTo(Vim.Math3d.AABox2D)
  nameWithType.vb: IComparable(Of AABox2D).CompareTo(AABox2D)
  fullName.vb: System.IComparable(Of Vim.Math3d.AABox2D).CompareTo(Vim.Math3d.AABox2D)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<AABox2D>.CompareTo
    fullName: System.IComparable<Vim.Math3d.AABox2D>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.AABox2D
    name: AABox2D
    nameWithType: AABox2D
    fullName: Vim.Math3d.AABox2D
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of AABox2D).CompareTo
    fullName: System.IComparable(Of Vim.Math3d.AABox2D).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.AABox2D
    name: AABox2D
    nameWithType: AABox2D
    fullName: Vim.Math3d.AABox2D
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable`1.CompareTo(`0)
  commentId: M:System.IComparable`1.CompareTo(`0)
  isExternal: true
  name: CompareTo(T)
  nameWithType: IComparable<T>.CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
  fullName.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<T>.CompareTo
    fullName: System.IComparable<T>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of T).CompareTo
    fullName: System.IComparable(Of T).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.AABox2D.op_LessThan*
  commentId: Overload:Vim.Math3d.AABox2D.op_LessThan
  name: LessThan
  nameWithType: AABox2D.LessThan
  fullName: Vim.Math3d.AABox2D.LessThan
- uid: Vim.Math3d.AABox2D.op_LessThanOrEqual*
  commentId: Overload:Vim.Math3d.AABox2D.op_LessThanOrEqual
  name: LessThanOrEqual
  nameWithType: AABox2D.LessThanOrEqual
  fullName: Vim.Math3d.AABox2D.LessThanOrEqual
- uid: Vim.Math3d.AABox2D.op_GreaterThan*
  commentId: Overload:Vim.Math3d.AABox2D.op_GreaterThan
  name: GreaterThan
  nameWithType: AABox2D.GreaterThan
  fullName: Vim.Math3d.AABox2D.GreaterThan
- uid: Vim.Math3d.AABox2D.op_GreaterThanOrEqual*
  commentId: Overload:Vim.Math3d.AABox2D.op_GreaterThanOrEqual
  name: GreaterThanOrEqual
  nameWithType: AABox2D.GreaterThanOrEqual
  fullName: Vim.Math3d.AABox2D.GreaterThanOrEqual

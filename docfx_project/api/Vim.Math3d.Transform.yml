### YamlMime:ManagedReference
items:
- uid: Vim.Math3d.Transform
  commentId: T:Vim.Math3d.Transform
  id: Transform
  parent: Vim.Math3d
  children:
  - Vim.Math3d.Transform.#ctor(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Quaternion})
  - Vim.Math3d.Transform.#ctor(Vim.Math3d.Vector3,Vim.Math3d.Quaternion)
  - Vim.Math3d.Transform.AlmostEquals(Vim.Math3d.Transform,System.Single)
  - Vim.Math3d.Transform.Create(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Quaternion})
  - Vim.Math3d.Transform.Create(Vim.Math3d.Vector3,Vim.Math3d.Quaternion)
  - Vim.Math3d.Transform.Deconstruct(Vim.Math3d.Vector3@,Vim.Math3d.Quaternion@)
  - Vim.Math3d.Transform.Equals(System.Object)
  - Vim.Math3d.Transform.Equals(Vim.Math3d.Transform)
  - Vim.Math3d.Transform.GetHashCode
  - Vim.Math3d.Transform.Identity
  - Vim.Math3d.Transform.MaxValue
  - Vim.Math3d.Transform.MinValue
  - Vim.Math3d.Transform.op_Equality(Vim.Math3d.Transform,Vim.Math3d.Transform)
  - Vim.Math3d.Transform.op_Implicit(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Quaternion})~Vim.Math3d.Transform
  - Vim.Math3d.Transform.op_Implicit(Vim.Math3d.Transform)~System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Quaternion}
  - Vim.Math3d.Transform.op_Inequality(Vim.Math3d.Transform,Vim.Math3d.Transform)
  - Vim.Math3d.Transform.Orientation
  - Vim.Math3d.Transform.Position
  - Vim.Math3d.Transform.SetOrientation(Vim.Math3d.Quaternion)
  - Vim.Math3d.Transform.SetPosition(Vim.Math3d.Vector3)
  - Vim.Math3d.Transform.ToString
  - Vim.Math3d.Transform.Zero
  langs:
  - csharp
  - vb
  name: Transform
  nameWithType: Transform
  fullName: Vim.Math3d.Transform
  type: Struct
  source:
    remote:
      path: src/StructsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Transform
    path: ../src/StructsPartial.cs
    startLine: 223
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataContract]

      public readonly struct Transform : IEquatable<Transform>
    content.vb: >-
      <DataContract>

      Public Structure Transform
          Implements IEquatable(Of Transform)
  implements:
  - System.IEquatable{Vim.Math3d.Transform}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - Vim.Math3d.Transform.Vim.Math3d.MathOps.ToMatrix
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Vim.Math3d.Transform.Position
  commentId: F:Vim.Math3d.Transform.Position
  id: Position
  parent: Vim.Math3d.Transform
  langs:
  - csharp
  - vb
  name: Position
  nameWithType: Transform.Position
  fullName: Vim.Math3d.Transform.Position
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Position
    path: ../src/Structs.cs
    startLine: 1167
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataMember]

      public readonly Vector3 Position
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <DataMember>

      Public ReadOnly Position As Vector3
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.Transform.Orientation
  commentId: F:Vim.Math3d.Transform.Orientation
  id: Orientation
  parent: Vim.Math3d.Transform
  langs:
  - csharp
  - vb
  name: Orientation
  nameWithType: Transform.Orientation
  fullName: Vim.Math3d.Transform.Orientation
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Orientation
    path: ../src/Structs.cs
    startLine: 1169
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataMember]

      public readonly Quaternion Orientation
    return:
      type: Vim.Math3d.Quaternion
    content.vb: >-
      <DataMember>

      Public ReadOnly Orientation As Quaternion
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.Transform.#ctor(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Quaternion})
  commentId: M:Vim.Math3d.Transform.#ctor(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Quaternion})
  id: '#ctor(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Quaternion})'
  parent: Vim.Math3d.Transform
  langs:
  - csharp
  - vb
  name: Transform((Vector3 position, Quaternion orientation))
  nameWithType: Transform.Transform((Vector3 position, Quaternion orientation))
  fullName: Vim.Math3d.Transform.Transform(System.ValueTuple<Vim.Math3d.Vector3, Vim.Math3d.Quaternion>)
  type: Constructor
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: .ctor
    path: ../src/Structs.cs
    startLine: 1170
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public Transform((Vector3 position, Quaternion orientation) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Quaternion}
    content.vb: Public Sub New(tuple As(position As Vector3, orientation As Quaternion)(Of Vector3 , Quaternion))
  overload: Vim.Math3d.Transform.#ctor*
  nameWithType.vb: Transform.Transform((position As Vector3, orientation As Quaternion)(Of Vector3, Quaternion))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Vim.Math3d.Transform.Transform(System.ValueTuple(Of Vim.Math3d.Vector3, Vim.Math3d.Quaternion))
  name.vb: Transform((position As Vector3, orientation As Quaternion)(Of Vector3, Quaternion))
- uid: Vim.Math3d.Transform.#ctor(Vim.Math3d.Vector3,Vim.Math3d.Quaternion)
  commentId: M:Vim.Math3d.Transform.#ctor(Vim.Math3d.Vector3,Vim.Math3d.Quaternion)
  id: '#ctor(Vim.Math3d.Vector3,Vim.Math3d.Quaternion)'
  parent: Vim.Math3d.Transform
  langs:
  - csharp
  - vb
  name: Transform(Vector3, Quaternion)
  nameWithType: Transform.Transform(Vector3, Quaternion)
  fullName: Vim.Math3d.Transform.Transform(Vim.Math3d.Vector3, Vim.Math3d.Quaternion)
  type: Constructor
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: .ctor
    path: ../src/Structs.cs
    startLine: 1171
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public Transform(Vector3 position, Quaternion orientation)
    parameters:
    - id: position
      type: Vim.Math3d.Vector3
    - id: orientation
      type: Vim.Math3d.Quaternion
    content.vb: Public Sub New(position As Vector3, orientation As Quaternion)
  overload: Vim.Math3d.Transform.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Transform.Create(Vim.Math3d.Vector3,Vim.Math3d.Quaternion)
  commentId: M:Vim.Math3d.Transform.Create(Vim.Math3d.Vector3,Vim.Math3d.Quaternion)
  id: Create(Vim.Math3d.Vector3,Vim.Math3d.Quaternion)
  parent: Vim.Math3d.Transform
  langs:
  - csharp
  - vb
  name: Create(Vector3, Quaternion)
  nameWithType: Transform.Create(Vector3, Quaternion)
  fullName: Vim.Math3d.Transform.Create(Vim.Math3d.Vector3, Vim.Math3d.Quaternion)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Create
    path: ../src/Structs.cs
    startLine: 1172
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Transform Create(Vector3 position, Quaternion orientation)
    parameters:
    - id: position
      type: Vim.Math3d.Vector3
    - id: orientation
      type: Vim.Math3d.Quaternion
    return:
      type: Vim.Math3d.Transform
    content.vb: Public Shared Function Create(position As Vector3, orientation As Quaternion) As Transform
  overload: Vim.Math3d.Transform.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Transform.Create(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Quaternion})
  commentId: M:Vim.Math3d.Transform.Create(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Quaternion})
  id: Create(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Quaternion})
  parent: Vim.Math3d.Transform
  langs:
  - csharp
  - vb
  name: Create((Vector3 position, Quaternion orientation))
  nameWithType: Transform.Create((Vector3 position, Quaternion orientation))
  fullName: Vim.Math3d.Transform.Create(System.ValueTuple<Vim.Math3d.Vector3, Vim.Math3d.Quaternion>)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Create
    path: ../src/Structs.cs
    startLine: 1173
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Transform Create((Vector3 position, Quaternion orientation) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Quaternion}
    return:
      type: Vim.Math3d.Transform
    content.vb: Public Shared Function Create(tuple As(position As Vector3, orientation As Quaternion)(Of Vector3 , Quaternion)) As Transform
  overload: Vim.Math3d.Transform.Create*
  nameWithType.vb: Transform.Create((position As Vector3, orientation As Quaternion)(Of Vector3, Quaternion))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.Transform.Create(System.ValueTuple(Of Vim.Math3d.Vector3, Vim.Math3d.Quaternion))
  name.vb: Create((position As Vector3, orientation As Quaternion)(Of Vector3, Quaternion))
- uid: Vim.Math3d.Transform.Equals(System.Object)
  commentId: M:Vim.Math3d.Transform.Equals(System.Object)
  id: Equals(System.Object)
  parent: Vim.Math3d.Transform
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Transform.Equals(Object)
  fullName: Vim.Math3d.Transform.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Equals
    path: ../src/Structs.cs
    startLine: 1174
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: Vim.Math3d.Transform.Equals*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.Transform.GetHashCode
  commentId: M:Vim.Math3d.Transform.GetHashCode
  id: GetHashCode
  parent: Vim.Math3d.Transform
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Transform.GetHashCode()
  fullName: Vim.Math3d.Transform.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: GetHashCode
    path: ../src/Structs.cs
    startLine: 1175
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: Vim.Math3d.Transform.GetHashCode*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.Transform.ToString
  commentId: M:Vim.Math3d.Transform.ToString
  id: ToString
  parent: Vim.Math3d.Transform
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Transform.ToString()
  fullName: Vim.Math3d.Transform.ToString()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToString
    path: ../src/Structs.cs
    startLine: 1176
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: Vim.Math3d.Transform.ToString*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.Transform.Deconstruct(Vim.Math3d.Vector3@,Vim.Math3d.Quaternion@)
  commentId: M:Vim.Math3d.Transform.Deconstruct(Vim.Math3d.Vector3@,Vim.Math3d.Quaternion@)
  id: Deconstruct(Vim.Math3d.Vector3@,Vim.Math3d.Quaternion@)
  parent: Vim.Math3d.Transform
  langs:
  - csharp
  - vb
  name: Deconstruct(out Vector3, out Quaternion)
  nameWithType: Transform.Deconstruct(out Vector3, out Quaternion)
  fullName: Vim.Math3d.Transform.Deconstruct(out Vim.Math3d.Vector3, out Vim.Math3d.Quaternion)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Deconstruct
    path: ../src/Structs.cs
    startLine: 1177
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly void Deconstruct(out Vector3 position, out Quaternion orientation)
    parameters:
    - id: position
      type: Vim.Math3d.Vector3
    - id: orientation
      type: Vim.Math3d.Quaternion
    content.vb: Public Sub Deconstruct(ByRef position As Vector3, ByRef orientation As Quaternion)
  overload: Vim.Math3d.Transform.Deconstruct*
  nameWithType.vb: Transform.Deconstruct(ByRef Vector3, ByRef Quaternion)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  fullName.vb: Vim.Math3d.Transform.Deconstruct(ByRef Vim.Math3d.Vector3, ByRef Vim.Math3d.Quaternion)
  name.vb: Deconstruct(ByRef Vector3, ByRef Quaternion)
- uid: Vim.Math3d.Transform.Equals(Vim.Math3d.Transform)
  commentId: M:Vim.Math3d.Transform.Equals(Vim.Math3d.Transform)
  id: Equals(Vim.Math3d.Transform)
  parent: Vim.Math3d.Transform
  langs:
  - csharp
  - vb
  name: Equals(Transform)
  nameWithType: Transform.Equals(Transform)
  fullName: Vim.Math3d.Transform.Equals(Vim.Math3d.Transform)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Equals
    path: ../src/Structs.cs
    startLine: 1178
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool Equals(Transform x)
    parameters:
    - id: x
      type: Vim.Math3d.Transform
    return:
      type: System.Boolean
    content.vb: Public Function Equals(x As Transform) As Boolean
  overload: Vim.Math3d.Transform.Equals*
  implements:
  - System.IEquatable{Vim.Math3d.Transform}.Equals(Vim.Math3d.Transform)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Transform.op_Equality(Vim.Math3d.Transform,Vim.Math3d.Transform)
  commentId: M:Vim.Math3d.Transform.op_Equality(Vim.Math3d.Transform,Vim.Math3d.Transform)
  id: op_Equality(Vim.Math3d.Transform,Vim.Math3d.Transform)
  parent: Vim.Math3d.Transform
  langs:
  - csharp
  - vb
  name: Equality(Transform, Transform)
  nameWithType: Transform.Equality(Transform, Transform)
  fullName: Vim.Math3d.Transform.Equality(Vim.Math3d.Transform, Vim.Math3d.Transform)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Equality
    path: ../src/Structs.cs
    startLine: 1179
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator ==(Transform x0, Transform x1)
    parameters:
    - id: x0
      type: Vim.Math3d.Transform
    - id: x1
      type: Vim.Math3d.Transform
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(x0 As Transform, x1 As Transform) As Boolean
  overload: Vim.Math3d.Transform.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Transform.op_Inequality(Vim.Math3d.Transform,Vim.Math3d.Transform)
  commentId: M:Vim.Math3d.Transform.op_Inequality(Vim.Math3d.Transform,Vim.Math3d.Transform)
  id: op_Inequality(Vim.Math3d.Transform,Vim.Math3d.Transform)
  parent: Vim.Math3d.Transform
  langs:
  - csharp
  - vb
  name: Inequality(Transform, Transform)
  nameWithType: Transform.Inequality(Transform, Transform)
  fullName: Vim.Math3d.Transform.Inequality(Vim.Math3d.Transform, Vim.Math3d.Transform)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Inequality
    path: ../src/Structs.cs
    startLine: 1180
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator !=(Transform x0, Transform x1)
    parameters:
    - id: x0
      type: Vim.Math3d.Transform
    - id: x1
      type: Vim.Math3d.Transform
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(x0 As Transform, x1 As Transform) As Boolean
  overload: Vim.Math3d.Transform.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Transform.op_Implicit(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Quaternion})~Vim.Math3d.Transform
  commentId: M:Vim.Math3d.Transform.op_Implicit(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Quaternion})~Vim.Math3d.Transform
  id: op_Implicit(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Quaternion})~Vim.Math3d.Transform
  parent: Vim.Math3d.Transform
  langs:
  - csharp
  - vb
  name: Implicit((Vector3 position, Quaternion orientation) to Transform)
  nameWithType: Transform.Implicit((Vector3 position, Quaternion orientation) to Transform)
  fullName: Vim.Math3d.Transform.Implicit(System.ValueTuple<Vim.Math3d.Vector3, Vim.Math3d.Quaternion> to Vim.Math3d.Transform)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Implicit
    path: ../src/Structs.cs
    startLine: 1181
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static implicit operator Transform((Vector3 position, Quaternion orientation) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Quaternion}
    return:
      type: Vim.Math3d.Transform
    content.vb: Public Shared Widening Operator CType(tuple As(position As Vector3, orientation As Quaternion)(Of Vector3 , Quaternion)) As Transform
  overload: Vim.Math3d.Transform.op_Implicit*
  nameWithType.vb: Transform.Widening((position As Vector3, orientation As Quaternion)(Of Vector3, Quaternion) to Transform)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.Transform.Widening(System.ValueTuple(Of Vim.Math3d.Vector3, Vim.Math3d.Quaternion) to Vim.Math3d.Transform)
  name.vb: Widening((position As Vector3, orientation As Quaternion)(Of Vector3, Quaternion) to Transform)
- uid: Vim.Math3d.Transform.op_Implicit(Vim.Math3d.Transform)~System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Quaternion}
  commentId: M:Vim.Math3d.Transform.op_Implicit(Vim.Math3d.Transform)~System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Quaternion}
  id: op_Implicit(Vim.Math3d.Transform)~System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Quaternion}
  parent: Vim.Math3d.Transform
  langs:
  - csharp
  - vb
  name: Implicit(Transform to (Vector3 position, Quaternion orientation))
  nameWithType: Transform.Implicit(Transform to (Vector3 position, Quaternion orientation))
  fullName: Vim.Math3d.Transform.Implicit(Vim.Math3d.Transform to System.ValueTuple<Vim.Math3d.Vector3, Vim.Math3d.Quaternion>)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Implicit
    path: ../src/Structs.cs
    startLine: 1182
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static implicit operator (Vector3 position, Quaternion orientation)(Transform self)
    parameters:
    - id: self
      type: Vim.Math3d.Transform
    return:
      type: System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Quaternion}
    content.vb: Public Shared Widening Operator CType(self As Transform) As(position As Vector3, orientation As Quaternion)(Of Vector3 , Quaternion)
  overload: Vim.Math3d.Transform.op_Implicit*
  nameWithType.vb: Transform.Widening(Transform to (position As Vector3, orientation As Quaternion)(Of Vector3, Quaternion))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.Transform.Widening(Vim.Math3d.Transform to System.ValueTuple(Of Vim.Math3d.Vector3, Vim.Math3d.Quaternion))
  name.vb: Widening(Transform to (position As Vector3, orientation As Quaternion)(Of Vector3, Quaternion))
- uid: Vim.Math3d.Transform.AlmostEquals(Vim.Math3d.Transform,System.Single)
  commentId: M:Vim.Math3d.Transform.AlmostEquals(Vim.Math3d.Transform,System.Single)
  id: AlmostEquals(Vim.Math3d.Transform,System.Single)
  parent: Vim.Math3d.Transform
  langs:
  - csharp
  - vb
  name: AlmostEquals(Transform, Single)
  nameWithType: Transform.AlmostEquals(Transform, Single)
  fullName: Vim.Math3d.Transform.AlmostEquals(Vim.Math3d.Transform, System.Single)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: AlmostEquals
    path: ../src/Structs.cs
    startLine: 1184
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool AlmostEquals(Transform x, float tolerance = 1E-07F)
    parameters:
    - id: x
      type: Vim.Math3d.Transform
    - id: tolerance
      type: System.Single
    return:
      type: System.Boolean
    content.vb: Public Function AlmostEquals(x As Transform, tolerance As Single = 1E-07F) As Boolean
  overload: Vim.Math3d.Transform.AlmostEquals*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Transform.Zero
  commentId: F:Vim.Math3d.Transform.Zero
  id: Zero
  parent: Vim.Math3d.Transform
  langs:
  - csharp
  - vb
  name: Zero
  nameWithType: Transform.Zero
  fullName: Vim.Math3d.Transform.Zero
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Zero
    path: ../src/Structs.cs
    startLine: 1185
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Transform Zero
    return:
      type: Vim.Math3d.Transform
    content.vb: Public Shared Zero As Transform
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Transform.MinValue
  commentId: F:Vim.Math3d.Transform.MinValue
  id: MinValue
  parent: Vim.Math3d.Transform
  langs:
  - csharp
  - vb
  name: MinValue
  nameWithType: Transform.MinValue
  fullName: Vim.Math3d.Transform.MinValue
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MinValue
    path: ../src/Structs.cs
    startLine: 1186
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Transform MinValue
    return:
      type: Vim.Math3d.Transform
    content.vb: Public Shared MinValue As Transform
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Transform.MaxValue
  commentId: F:Vim.Math3d.Transform.MaxValue
  id: MaxValue
  parent: Vim.Math3d.Transform
  langs:
  - csharp
  - vb
  name: MaxValue
  nameWithType: Transform.MaxValue
  fullName: Vim.Math3d.Transform.MaxValue
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MaxValue
    path: ../src/Structs.cs
    startLine: 1187
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Transform MaxValue
    return:
      type: Vim.Math3d.Transform
    content.vb: Public Shared MaxValue As Transform
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Transform.SetPosition(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Transform.SetPosition(Vim.Math3d.Vector3)
  id: SetPosition(Vim.Math3d.Vector3)
  parent: Vim.Math3d.Transform
  langs:
  - csharp
  - vb
  name: SetPosition(Vector3)
  nameWithType: Transform.SetPosition(Vector3)
  fullName: Vim.Math3d.Transform.SetPosition(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SetPosition
    path: ../src/Structs.cs
    startLine: 1188
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly Transform SetPosition(Vector3 x)
    parameters:
    - id: x
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Transform
    content.vb: Public Function SetPosition(x As Vector3) As Transform
  overload: Vim.Math3d.Transform.SetPosition*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Transform.SetOrientation(Vim.Math3d.Quaternion)
  commentId: M:Vim.Math3d.Transform.SetOrientation(Vim.Math3d.Quaternion)
  id: SetOrientation(Vim.Math3d.Quaternion)
  parent: Vim.Math3d.Transform
  langs:
  - csharp
  - vb
  name: SetOrientation(Quaternion)
  nameWithType: Transform.SetOrientation(Quaternion)
  fullName: Vim.Math3d.Transform.SetOrientation(Vim.Math3d.Quaternion)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SetOrientation
    path: ../src/Structs.cs
    startLine: 1189
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly Transform SetOrientation(Quaternion x)
    parameters:
    - id: x
      type: Vim.Math3d.Quaternion
    return:
      type: Vim.Math3d.Transform
    content.vb: Public Function SetOrientation(x As Quaternion) As Transform
  overload: Vim.Math3d.Transform.SetOrientation*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Transform.Identity
  commentId: P:Vim.Math3d.Transform.Identity
  id: Identity
  parent: Vim.Math3d.Transform
  langs:
  - csharp
  - vb
  name: Identity
  nameWithType: Transform.Identity
  fullName: Vim.Math3d.Transform.Identity
  type: Property
  source:
    remote:
      path: src/StructsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Identity
    path: ../src/StructsPartial.cs
    startLine: 225
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static readonly Transform Identity { get; }
    parameters: []
    return:
      type: Vim.Math3d.Transform
    content.vb: Public Shared ReadOnly Property Identity As Transform
  overload: Vim.Math3d.Transform.Identity*
  modifiers.csharp:
  - public
  - static
  - readonly
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
references:
- uid: Vim.Math3d
  commentId: N:Vim.Math3d
  name: Vim.Math3d
  nameWithType: Vim.Math3d
  fullName: Vim.Math3d
- uid: System.IEquatable{Vim.Math3d.Transform}
  commentId: T:System.IEquatable{Vim.Math3d.Transform}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Transform>
  nameWithType: IEquatable<Transform>
  fullName: System.IEquatable<Vim.Math3d.Transform>
  nameWithType.vb: IEquatable(Of Transform)
  fullName.vb: System.IEquatable(Of Vim.Math3d.Transform)
  name.vb: IEquatable(Of Transform)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.Transform
    name: Transform
    nameWithType: Transform
    fullName: Vim.Math3d.Transform
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.Transform
    name: Transform
    nameWithType: Transform
    fullName: Vim.Math3d.Transform
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transform.Vim.Math3d.MathOps.ToMatrix
  commentId: M:Vim.Math3d.MathOps.ToMatrix(Vim.Math3d.Transform)
  parent: Vim.Math3d.MathOps
  definition: Vim.Math3d.MathOps.ToMatrix(Vim.Math3d.Transform)
  name: ToMatrix()
  nameWithType: MathOps.ToMatrix()
  fullName: Vim.Math3d.MathOps.ToMatrix()
  spec.csharp:
  - uid: Vim.Math3d.MathOps.ToMatrix
    name: ToMatrix
    nameWithType: MathOps.ToMatrix
    fullName: Vim.Math3d.MathOps.ToMatrix
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.MathOps.ToMatrix
    name: ToMatrix
    nameWithType: MathOps.ToMatrix
    fullName: Vim.Math3d.MathOps.ToMatrix
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Vim.Math3d.MathOps.ToMatrix(Vim.Math3d.Transform)
  commentId: M:Vim.Math3d.MathOps.ToMatrix(Vim.Math3d.Transform)
  name: ToMatrix(Transform)
  nameWithType: MathOps.ToMatrix(Transform)
  fullName: Vim.Math3d.MathOps.ToMatrix(Vim.Math3d.Transform)
  spec.csharp:
  - uid: Vim.Math3d.MathOps.ToMatrix(Vim.Math3d.Transform)
    name: ToMatrix
    nameWithType: MathOps.ToMatrix
    fullName: Vim.Math3d.MathOps.ToMatrix
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Transform
    name: Transform
    nameWithType: Transform
    fullName: Vim.Math3d.Transform
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.MathOps.ToMatrix(Vim.Math3d.Transform)
    name: ToMatrix
    nameWithType: MathOps.ToMatrix
    fullName: Vim.Math3d.MathOps.ToMatrix
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Transform
    name: Transform
    nameWithType: Transform
    fullName: Vim.Math3d.Transform
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.MathOps
  commentId: T:Vim.Math3d.MathOps
  parent: Vim.Math3d
  name: MathOps
  nameWithType: MathOps
  fullName: Vim.Math3d.MathOps
- uid: Vim.Math3d.Vector3
  commentId: T:Vim.Math3d.Vector3
  parent: Vim.Math3d
  name: Vector3
  nameWithType: Vector3
  fullName: Vim.Math3d.Vector3
- uid: Vim.Math3d.Quaternion
  commentId: T:Vim.Math3d.Quaternion
  parent: Vim.Math3d
  name: Quaternion
  nameWithType: Quaternion
  fullName: Vim.Math3d.Quaternion
- uid: Vim.Math3d.Transform.#ctor*
  commentId: Overload:Vim.Math3d.Transform.#ctor
  name: Transform
  nameWithType: Transform.Transform
  fullName: Vim.Math3d.Transform.Transform
- uid: System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Quaternion}
  commentId: T:System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Quaternion}
  parent: System
  definition: System.ValueTuple`2
  name: (T1, T2)<Vector3, Quaternion>
  nameWithType: (T1, T2)<Vector3, Quaternion>
  fullName: System.ValueTuple<Vim.Math3d.Vector3, Vim.Math3d.Quaternion>
  nameWithType.vb: (T1, T2)(Of Vector3, Quaternion)
  fullName.vb: System.ValueTuple(Of Vim.Math3d.Vector3, Vim.Math3d.Quaternion)
  name.vb: (T1, T2)(Of Vector3, Quaternion)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Quaternion
    name: Quaternion
    nameWithType: Quaternion
    fullName: Vim.Math3d.Quaternion
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Quaternion
    name: Quaternion
    nameWithType: Quaternion
    fullName: Vim.Math3d.Quaternion
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple`2
  commentId: T:System.ValueTuple`2
  isExternal: true
  name: (T1, T2)<T1, T2>
  nameWithType: (T1, T2)<T1, T2>
  fullName: System.ValueTuple<T1, T2>
  nameWithType.vb: (T1, T2)(Of T1, T2)
  fullName.vb: System.ValueTuple(Of T1, T2)
  name.vb: (T1, T2)(Of T1, T2)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transform.Create*
  commentId: Overload:Vim.Math3d.Transform.Create
  name: Create
  nameWithType: Transform.Create
  fullName: Vim.Math3d.Transform.Create
- uid: Vim.Math3d.Transform
  commentId: T:Vim.Math3d.Transform
  parent: Vim.Math3d
  name: Transform
  nameWithType: Transform
  fullName: Vim.Math3d.Transform
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transform.Equals*
  commentId: Overload:Vim.Math3d.Transform.Equals
  name: Equals
  nameWithType: Transform.Equals
  fullName: Vim.Math3d.Transform.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transform.GetHashCode*
  commentId: Overload:Vim.Math3d.Transform.GetHashCode
  name: GetHashCode
  nameWithType: Transform.GetHashCode
  fullName: Vim.Math3d.Transform.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transform.ToString*
  commentId: Overload:Vim.Math3d.Transform.ToString
  name: ToString
  nameWithType: Transform.ToString
  fullName: Vim.Math3d.Transform.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Vim.Math3d.Transform.Deconstruct*
  commentId: Overload:Vim.Math3d.Transform.Deconstruct
  name: Deconstruct
  nameWithType: Transform.Deconstruct
  fullName: Vim.Math3d.Transform.Deconstruct
- uid: System.IEquatable{Vim.Math3d.Transform}.Equals(Vim.Math3d.Transform)
  commentId: M:System.IEquatable{Vim.Math3d.Transform}.Equals(Vim.Math3d.Transform)
  parent: System.IEquatable{Vim.Math3d.Transform}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(Transform)
  nameWithType: IEquatable<Transform>.Equals(Transform)
  fullName: System.IEquatable<Vim.Math3d.Transform>.Equals(Vim.Math3d.Transform)
  nameWithType.vb: IEquatable(Of Transform).Equals(Transform)
  fullName.vb: System.IEquatable(Of Vim.Math3d.Transform).Equals(Vim.Math3d.Transform)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<Transform>.Equals
    fullName: System.IEquatable<Vim.Math3d.Transform>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Transform
    name: Transform
    nameWithType: Transform
    fullName: Vim.Math3d.Transform
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of Transform).Equals
    fullName: System.IEquatable(Of Vim.Math3d.Transform).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Transform
    name: Transform
    nameWithType: Transform
    fullName: Vim.Math3d.Transform
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transform.op_Equality*
  commentId: Overload:Vim.Math3d.Transform.op_Equality
  name: Equality
  nameWithType: Transform.Equality
  fullName: Vim.Math3d.Transform.Equality
- uid: Vim.Math3d.Transform.op_Inequality*
  commentId: Overload:Vim.Math3d.Transform.op_Inequality
  name: Inequality
  nameWithType: Transform.Inequality
  fullName: Vim.Math3d.Transform.Inequality
- uid: Vim.Math3d.Transform.op_Implicit*
  commentId: Overload:Vim.Math3d.Transform.op_Implicit
  name: Implicit
  nameWithType: Transform.Implicit
  fullName: Vim.Math3d.Transform.Implicit
  nameWithType.vb: Transform.Widening
  fullName.vb: Vim.Math3d.Transform.Widening
  name.vb: Widening
- uid: Vim.Math3d.Transform.AlmostEquals*
  commentId: Overload:Vim.Math3d.Transform.AlmostEquals
  name: AlmostEquals
  nameWithType: Transform.AlmostEquals
  fullName: Vim.Math3d.Transform.AlmostEquals
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Vim.Math3d.Transform.SetPosition*
  commentId: Overload:Vim.Math3d.Transform.SetPosition
  name: SetPosition
  nameWithType: Transform.SetPosition
  fullName: Vim.Math3d.Transform.SetPosition
- uid: Vim.Math3d.Transform.SetOrientation*
  commentId: Overload:Vim.Math3d.Transform.SetOrientation
  name: SetOrientation
  nameWithType: Transform.SetOrientation
  fullName: Vim.Math3d.Transform.SetOrientation
- uid: Vim.Math3d.Transform.Identity*
  commentId: Overload:Vim.Math3d.Transform.Identity
  name: Identity
  nameWithType: Transform.Identity
  fullName: Vim.Math3d.Transform.Identity

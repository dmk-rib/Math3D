### YamlMime:ManagedReference
items:
- uid: Vim.Math3d.DAABox
  commentId: T:Vim.Math3d.DAABox
  id: DAABox
  parent: Vim.Math3d
  children:
  - Vim.Math3d.DAABox.#ctor(System.ValueTuple{Vim.Math3d.DVector3,Vim.Math3d.DVector3})
  - Vim.Math3d.DAABox.#ctor(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  - Vim.Math3d.DAABox.AABox
  - Vim.Math3d.DAABox.AlmostEquals(Vim.Math3d.DAABox,System.Single)
  - Vim.Math3d.DAABox.Center
  - Vim.Math3d.DAABox.CompareTo(Vim.Math3d.DAABox)
  - Vim.Math3d.DAABox.Create(System.ValueTuple{Vim.Math3d.DVector3,Vim.Math3d.DVector3})
  - Vim.Math3d.DAABox.Create(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  - Vim.Math3d.DAABox.Deconstruct(Vim.Math3d.DVector3@,Vim.Math3d.DVector3@)
  - Vim.Math3d.DAABox.Empty
  - Vim.Math3d.DAABox.Equals(System.Object)
  - Vim.Math3d.DAABox.Equals(Vim.Math3d.DAABox)
  - Vim.Math3d.DAABox.Extent
  - Vim.Math3d.DAABox.GetHashCode
  - Vim.Math3d.DAABox.Intersection(Vim.Math3d.DAABox)
  - Vim.Math3d.DAABox.IsInfinity
  - Vim.Math3d.DAABox.IsNaN
  - Vim.Math3d.DAABox.Magnitude
  - Vim.Math3d.DAABox.MagnitudeSquared
  - Vim.Math3d.DAABox.Max
  - Vim.Math3d.DAABox.MaxValue
  - Vim.Math3d.DAABox.Merge(Vim.Math3d.DAABox)
  - Vim.Math3d.DAABox.Merge(Vim.Math3d.DVector3)
  - Vim.Math3d.DAABox.Min
  - Vim.Math3d.DAABox.MinValue
  - Vim.Math3d.DAABox.op_Addition(Vim.Math3d.DAABox,Vim.Math3d.DAABox)
  - Vim.Math3d.DAABox.op_Addition(Vim.Math3d.DAABox,Vim.Math3d.DVector3)
  - Vim.Math3d.DAABox.op_Equality(Vim.Math3d.DAABox,Vim.Math3d.DAABox)
  - Vim.Math3d.DAABox.op_GreaterThan(Vim.Math3d.DAABox,Vim.Math3d.DAABox)
  - Vim.Math3d.DAABox.op_GreaterThanOrEqual(Vim.Math3d.DAABox,Vim.Math3d.DAABox)
  - Vim.Math3d.DAABox.op_Implicit(System.ValueTuple{Vim.Math3d.DVector3,Vim.Math3d.DVector3})~Vim.Math3d.DAABox
  - Vim.Math3d.DAABox.op_Implicit(Vim.Math3d.DAABox)~System.ValueTuple{Vim.Math3d.DVector3,Vim.Math3d.DVector3}
  - Vim.Math3d.DAABox.op_Inequality(Vim.Math3d.DAABox,Vim.Math3d.DAABox)
  - Vim.Math3d.DAABox.op_LessThan(Vim.Math3d.DAABox,Vim.Math3d.DAABox)
  - Vim.Math3d.DAABox.op_LessThanOrEqual(Vim.Math3d.DAABox,Vim.Math3d.DAABox)
  - Vim.Math3d.DAABox.op_Subtraction(Vim.Math3d.DAABox,Vim.Math3d.DAABox)
  - Vim.Math3d.DAABox.SetMax(Vim.Math3d.DVector3)
  - Vim.Math3d.DAABox.SetMin(Vim.Math3d.DVector3)
  - Vim.Math3d.DAABox.ToString
  - Vim.Math3d.DAABox.Zero
  langs:
  - csharp
  - vb
  name: DAABox
  nameWithType: DAABox
  fullName: Vim.Math3d.DAABox
  type: Struct
  source:
    remote:
      path: src/StructsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: DAABox
    path: ../src/StructsPartial.cs
    startLine: 208
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataContract]

      public readonly struct DAABox : IEquatable<DAABox>, IComparable<DAABox>
    content.vb: >-
      <DataContract>

      Public Structure DAABox
          Implements IEquatable(Of DAABox), IComparable(Of DAABox)
  implements:
  - System.IEquatable{Vim.Math3d.DAABox}
  - System.IComparable{Vim.Math3d.DAABox}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Vim.Math3d.DAABox.Min
  commentId: F:Vim.Math3d.DAABox.Min
  id: Min
  parent: Vim.Math3d.DAABox
  langs:
  - csharp
  - vb
  name: Min
  nameWithType: DAABox.Min
  fullName: Vim.Math3d.DAABox.Min
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Min
    path: ../src/Structs.cs
    startLine: 950
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataMember]

      public readonly DVector3 Min
    return:
      type: Vim.Math3d.DVector3
    content.vb: >-
      <DataMember>

      Public ReadOnly Min As DVector3
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.DAABox.Max
  commentId: F:Vim.Math3d.DAABox.Max
  id: Max
  parent: Vim.Math3d.DAABox
  langs:
  - csharp
  - vb
  name: Max
  nameWithType: DAABox.Max
  fullName: Vim.Math3d.DAABox.Max
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Max
    path: ../src/Structs.cs
    startLine: 952
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataMember]

      public readonly DVector3 Max
    return:
      type: Vim.Math3d.DVector3
    content.vb: >-
      <DataMember>

      Public ReadOnly Max As DVector3
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.DAABox.#ctor(System.ValueTuple{Vim.Math3d.DVector3,Vim.Math3d.DVector3})
  commentId: M:Vim.Math3d.DAABox.#ctor(System.ValueTuple{Vim.Math3d.DVector3,Vim.Math3d.DVector3})
  id: '#ctor(System.ValueTuple{Vim.Math3d.DVector3,Vim.Math3d.DVector3})'
  parent: Vim.Math3d.DAABox
  langs:
  - csharp
  - vb
  name: DAABox((DVector3 min, DVector3 max))
  nameWithType: DAABox.DAABox((DVector3 min, DVector3 max))
  fullName: Vim.Math3d.DAABox.DAABox(System.ValueTuple<Vim.Math3d.DVector3, Vim.Math3d.DVector3>)
  type: Constructor
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: .ctor
    path: ../src/Structs.cs
    startLine: 953
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public DAABox((DVector3 min, DVector3 max) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{Vim.Math3d.DVector3,Vim.Math3d.DVector3}
    content.vb: Public Sub New(tuple As(min As DVector3, max As DVector3)(Of DVector3 , DVector3))
  overload: Vim.Math3d.DAABox.#ctor*
  nameWithType.vb: DAABox.DAABox((min As DVector3, max As DVector3)(Of DVector3, DVector3))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Vim.Math3d.DAABox.DAABox(System.ValueTuple(Of Vim.Math3d.DVector3, Vim.Math3d.DVector3))
  name.vb: DAABox((min As DVector3, max As DVector3)(Of DVector3, DVector3))
- uid: Vim.Math3d.DAABox.#ctor(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  commentId: M:Vim.Math3d.DAABox.#ctor(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  id: '#ctor(Vim.Math3d.DVector3,Vim.Math3d.DVector3)'
  parent: Vim.Math3d.DAABox
  langs:
  - csharp
  - vb
  name: DAABox(DVector3, DVector3)
  nameWithType: DAABox.DAABox(DVector3, DVector3)
  fullName: Vim.Math3d.DAABox.DAABox(Vim.Math3d.DVector3, Vim.Math3d.DVector3)
  type: Constructor
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: .ctor
    path: ../src/Structs.cs
    startLine: 954
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public DAABox(DVector3 min, DVector3 max)
    parameters:
    - id: min
      type: Vim.Math3d.DVector3
    - id: max
      type: Vim.Math3d.DVector3
    content.vb: Public Sub New(min As DVector3, max As DVector3)
  overload: Vim.Math3d.DAABox.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Vim.Math3d.DAABox.Create(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  commentId: M:Vim.Math3d.DAABox.Create(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  id: Create(Vim.Math3d.DVector3,Vim.Math3d.DVector3)
  parent: Vim.Math3d.DAABox
  langs:
  - csharp
  - vb
  name: Create(DVector3, DVector3)
  nameWithType: DAABox.Create(DVector3, DVector3)
  fullName: Vim.Math3d.DAABox.Create(Vim.Math3d.DVector3, Vim.Math3d.DVector3)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Create
    path: ../src/Structs.cs
    startLine: 955
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DAABox Create(DVector3 min, DVector3 max)
    parameters:
    - id: min
      type: Vim.Math3d.DVector3
    - id: max
      type: Vim.Math3d.DVector3
    return:
      type: Vim.Math3d.DAABox
    content.vb: Public Shared Function Create(min As DVector3, max As DVector3) As DAABox
  overload: Vim.Math3d.DAABox.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.DAABox.Create(System.ValueTuple{Vim.Math3d.DVector3,Vim.Math3d.DVector3})
  commentId: M:Vim.Math3d.DAABox.Create(System.ValueTuple{Vim.Math3d.DVector3,Vim.Math3d.DVector3})
  id: Create(System.ValueTuple{Vim.Math3d.DVector3,Vim.Math3d.DVector3})
  parent: Vim.Math3d.DAABox
  langs:
  - csharp
  - vb
  name: Create((DVector3 min, DVector3 max))
  nameWithType: DAABox.Create((DVector3 min, DVector3 max))
  fullName: Vim.Math3d.DAABox.Create(System.ValueTuple<Vim.Math3d.DVector3, Vim.Math3d.DVector3>)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Create
    path: ../src/Structs.cs
    startLine: 956
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DAABox Create((DVector3 min, DVector3 max) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{Vim.Math3d.DVector3,Vim.Math3d.DVector3}
    return:
      type: Vim.Math3d.DAABox
    content.vb: Public Shared Function Create(tuple As(min As DVector3, max As DVector3)(Of DVector3 , DVector3)) As DAABox
  overload: Vim.Math3d.DAABox.Create*
  nameWithType.vb: DAABox.Create((min As DVector3, max As DVector3)(Of DVector3, DVector3))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.DAABox.Create(System.ValueTuple(Of Vim.Math3d.DVector3, Vim.Math3d.DVector3))
  name.vb: Create((min As DVector3, max As DVector3)(Of DVector3, DVector3))
- uid: Vim.Math3d.DAABox.Equals(System.Object)
  commentId: M:Vim.Math3d.DAABox.Equals(System.Object)
  id: Equals(System.Object)
  parent: Vim.Math3d.DAABox
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: DAABox.Equals(Object)
  fullName: Vim.Math3d.DAABox.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Equals
    path: ../src/Structs.cs
    startLine: 957
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: Vim.Math3d.DAABox.Equals*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.DAABox.GetHashCode
  commentId: M:Vim.Math3d.DAABox.GetHashCode
  id: GetHashCode
  parent: Vim.Math3d.DAABox
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: DAABox.GetHashCode()
  fullName: Vim.Math3d.DAABox.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: GetHashCode
    path: ../src/Structs.cs
    startLine: 958
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: Vim.Math3d.DAABox.GetHashCode*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.DAABox.ToString
  commentId: M:Vim.Math3d.DAABox.ToString
  id: ToString
  parent: Vim.Math3d.DAABox
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: DAABox.ToString()
  fullName: Vim.Math3d.DAABox.ToString()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToString
    path: ../src/Structs.cs
    startLine: 959
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: Vim.Math3d.DAABox.ToString*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.DAABox.Deconstruct(Vim.Math3d.DVector3@,Vim.Math3d.DVector3@)
  commentId: M:Vim.Math3d.DAABox.Deconstruct(Vim.Math3d.DVector3@,Vim.Math3d.DVector3@)
  id: Deconstruct(Vim.Math3d.DVector3@,Vim.Math3d.DVector3@)
  parent: Vim.Math3d.DAABox
  langs:
  - csharp
  - vb
  name: Deconstruct(out DVector3, out DVector3)
  nameWithType: DAABox.Deconstruct(out DVector3, out DVector3)
  fullName: Vim.Math3d.DAABox.Deconstruct(out Vim.Math3d.DVector3, out Vim.Math3d.DVector3)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Deconstruct
    path: ../src/Structs.cs
    startLine: 960
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly void Deconstruct(out DVector3 min, out DVector3 max)
    parameters:
    - id: min
      type: Vim.Math3d.DVector3
    - id: max
      type: Vim.Math3d.DVector3
    content.vb: Public Sub Deconstruct(ByRef min As DVector3, ByRef max As DVector3)
  overload: Vim.Math3d.DAABox.Deconstruct*
  nameWithType.vb: DAABox.Deconstruct(ByRef DVector3, ByRef DVector3)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  fullName.vb: Vim.Math3d.DAABox.Deconstruct(ByRef Vim.Math3d.DVector3, ByRef Vim.Math3d.DVector3)
  name.vb: Deconstruct(ByRef DVector3, ByRef DVector3)
- uid: Vim.Math3d.DAABox.Equals(Vim.Math3d.DAABox)
  commentId: M:Vim.Math3d.DAABox.Equals(Vim.Math3d.DAABox)
  id: Equals(Vim.Math3d.DAABox)
  parent: Vim.Math3d.DAABox
  langs:
  - csharp
  - vb
  name: Equals(DAABox)
  nameWithType: DAABox.Equals(DAABox)
  fullName: Vim.Math3d.DAABox.Equals(Vim.Math3d.DAABox)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Equals
    path: ../src/Structs.cs
    startLine: 961
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool Equals(DAABox x)
    parameters:
    - id: x
      type: Vim.Math3d.DAABox
    return:
      type: System.Boolean
    content.vb: Public Function Equals(x As DAABox) As Boolean
  overload: Vim.Math3d.DAABox.Equals*
  implements:
  - System.IEquatable{Vim.Math3d.DAABox}.Equals(Vim.Math3d.DAABox)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.DAABox.op_Equality(Vim.Math3d.DAABox,Vim.Math3d.DAABox)
  commentId: M:Vim.Math3d.DAABox.op_Equality(Vim.Math3d.DAABox,Vim.Math3d.DAABox)
  id: op_Equality(Vim.Math3d.DAABox,Vim.Math3d.DAABox)
  parent: Vim.Math3d.DAABox
  langs:
  - csharp
  - vb
  name: Equality(DAABox, DAABox)
  nameWithType: DAABox.Equality(DAABox, DAABox)
  fullName: Vim.Math3d.DAABox.Equality(Vim.Math3d.DAABox, Vim.Math3d.DAABox)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Equality
    path: ../src/Structs.cs
    startLine: 962
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator ==(DAABox x0, DAABox x1)
    parameters:
    - id: x0
      type: Vim.Math3d.DAABox
    - id: x1
      type: Vim.Math3d.DAABox
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(x0 As DAABox, x1 As DAABox) As Boolean
  overload: Vim.Math3d.DAABox.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.DAABox.op_Inequality(Vim.Math3d.DAABox,Vim.Math3d.DAABox)
  commentId: M:Vim.Math3d.DAABox.op_Inequality(Vim.Math3d.DAABox,Vim.Math3d.DAABox)
  id: op_Inequality(Vim.Math3d.DAABox,Vim.Math3d.DAABox)
  parent: Vim.Math3d.DAABox
  langs:
  - csharp
  - vb
  name: Inequality(DAABox, DAABox)
  nameWithType: DAABox.Inequality(DAABox, DAABox)
  fullName: Vim.Math3d.DAABox.Inequality(Vim.Math3d.DAABox, Vim.Math3d.DAABox)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Inequality
    path: ../src/Structs.cs
    startLine: 963
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator !=(DAABox x0, DAABox x1)
    parameters:
    - id: x0
      type: Vim.Math3d.DAABox
    - id: x1
      type: Vim.Math3d.DAABox
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(x0 As DAABox, x1 As DAABox) As Boolean
  overload: Vim.Math3d.DAABox.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.DAABox.op_Implicit(System.ValueTuple{Vim.Math3d.DVector3,Vim.Math3d.DVector3})~Vim.Math3d.DAABox
  commentId: M:Vim.Math3d.DAABox.op_Implicit(System.ValueTuple{Vim.Math3d.DVector3,Vim.Math3d.DVector3})~Vim.Math3d.DAABox
  id: op_Implicit(System.ValueTuple{Vim.Math3d.DVector3,Vim.Math3d.DVector3})~Vim.Math3d.DAABox
  parent: Vim.Math3d.DAABox
  langs:
  - csharp
  - vb
  name: Implicit((DVector3 min, DVector3 max) to DAABox)
  nameWithType: DAABox.Implicit((DVector3 min, DVector3 max) to DAABox)
  fullName: Vim.Math3d.DAABox.Implicit(System.ValueTuple<Vim.Math3d.DVector3, Vim.Math3d.DVector3> to Vim.Math3d.DAABox)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Implicit
    path: ../src/Structs.cs
    startLine: 964
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static implicit operator DAABox((DVector3 min, DVector3 max) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{Vim.Math3d.DVector3,Vim.Math3d.DVector3}
    return:
      type: Vim.Math3d.DAABox
    content.vb: Public Shared Widening Operator CType(tuple As(min As DVector3, max As DVector3)(Of DVector3 , DVector3)) As DAABox
  overload: Vim.Math3d.DAABox.op_Implicit*
  nameWithType.vb: DAABox.Widening((min As DVector3, max As DVector3)(Of DVector3, DVector3) to DAABox)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.DAABox.Widening(System.ValueTuple(Of Vim.Math3d.DVector3, Vim.Math3d.DVector3) to Vim.Math3d.DAABox)
  name.vb: Widening((min As DVector3, max As DVector3)(Of DVector3, DVector3) to DAABox)
- uid: Vim.Math3d.DAABox.op_Implicit(Vim.Math3d.DAABox)~System.ValueTuple{Vim.Math3d.DVector3,Vim.Math3d.DVector3}
  commentId: M:Vim.Math3d.DAABox.op_Implicit(Vim.Math3d.DAABox)~System.ValueTuple{Vim.Math3d.DVector3,Vim.Math3d.DVector3}
  id: op_Implicit(Vim.Math3d.DAABox)~System.ValueTuple{Vim.Math3d.DVector3,Vim.Math3d.DVector3}
  parent: Vim.Math3d.DAABox
  langs:
  - csharp
  - vb
  name: Implicit(DAABox to (DVector3 min, DVector3 max))
  nameWithType: DAABox.Implicit(DAABox to (DVector3 min, DVector3 max))
  fullName: Vim.Math3d.DAABox.Implicit(Vim.Math3d.DAABox to System.ValueTuple<Vim.Math3d.DVector3, Vim.Math3d.DVector3>)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Implicit
    path: ../src/Structs.cs
    startLine: 965
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static implicit operator (DVector3 min, DVector3 max)(DAABox self)
    parameters:
    - id: self
      type: Vim.Math3d.DAABox
    return:
      type: System.ValueTuple{Vim.Math3d.DVector3,Vim.Math3d.DVector3}
    content.vb: Public Shared Widening Operator CType(self As DAABox) As(min As DVector3, max As DVector3)(Of DVector3 , DVector3)
  overload: Vim.Math3d.DAABox.op_Implicit*
  nameWithType.vb: DAABox.Widening(DAABox to (min As DVector3, max As DVector3)(Of DVector3, DVector3))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.DAABox.Widening(Vim.Math3d.DAABox to System.ValueTuple(Of Vim.Math3d.DVector3, Vim.Math3d.DVector3))
  name.vb: Widening(DAABox to (min As DVector3, max As DVector3)(Of DVector3, DVector3))
- uid: Vim.Math3d.DAABox.AlmostEquals(Vim.Math3d.DAABox,System.Single)
  commentId: M:Vim.Math3d.DAABox.AlmostEquals(Vim.Math3d.DAABox,System.Single)
  id: AlmostEquals(Vim.Math3d.DAABox,System.Single)
  parent: Vim.Math3d.DAABox
  langs:
  - csharp
  - vb
  name: AlmostEquals(DAABox, Single)
  nameWithType: DAABox.AlmostEquals(DAABox, Single)
  fullName: Vim.Math3d.DAABox.AlmostEquals(Vim.Math3d.DAABox, System.Single)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: AlmostEquals
    path: ../src/Structs.cs
    startLine: 967
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool AlmostEquals(DAABox x, float tolerance = 1E-07F)
    parameters:
    - id: x
      type: Vim.Math3d.DAABox
    - id: tolerance
      type: System.Single
    return:
      type: System.Boolean
    content.vb: Public Function AlmostEquals(x As DAABox, tolerance As Single = 1E-07F) As Boolean
  overload: Vim.Math3d.DAABox.AlmostEquals*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.DAABox.Zero
  commentId: F:Vim.Math3d.DAABox.Zero
  id: Zero
  parent: Vim.Math3d.DAABox
  langs:
  - csharp
  - vb
  name: Zero
  nameWithType: DAABox.Zero
  fullName: Vim.Math3d.DAABox.Zero
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Zero
    path: ../src/Structs.cs
    startLine: 968
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DAABox Zero
    return:
      type: Vim.Math3d.DAABox
    content.vb: Public Shared Zero As DAABox
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.DAABox.MinValue
  commentId: F:Vim.Math3d.DAABox.MinValue
  id: MinValue
  parent: Vim.Math3d.DAABox
  langs:
  - csharp
  - vb
  name: MinValue
  nameWithType: DAABox.MinValue
  fullName: Vim.Math3d.DAABox.MinValue
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MinValue
    path: ../src/Structs.cs
    startLine: 969
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DAABox MinValue
    return:
      type: Vim.Math3d.DAABox
    content.vb: Public Shared MinValue As DAABox
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.DAABox.MaxValue
  commentId: F:Vim.Math3d.DAABox.MaxValue
  id: MaxValue
  parent: Vim.Math3d.DAABox
  langs:
  - csharp
  - vb
  name: MaxValue
  nameWithType: DAABox.MaxValue
  fullName: Vim.Math3d.DAABox.MaxValue
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MaxValue
    path: ../src/Structs.cs
    startLine: 970
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DAABox MaxValue
    return:
      type: Vim.Math3d.DAABox
    content.vb: Public Shared MaxValue As DAABox
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.DAABox.SetMin(Vim.Math3d.DVector3)
  commentId: M:Vim.Math3d.DAABox.SetMin(Vim.Math3d.DVector3)
  id: SetMin(Vim.Math3d.DVector3)
  parent: Vim.Math3d.DAABox
  langs:
  - csharp
  - vb
  name: SetMin(DVector3)
  nameWithType: DAABox.SetMin(DVector3)
  fullName: Vim.Math3d.DAABox.SetMin(Vim.Math3d.DVector3)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SetMin
    path: ../src/Structs.cs
    startLine: 971
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly DAABox SetMin(DVector3 x)
    parameters:
    - id: x
      type: Vim.Math3d.DVector3
    return:
      type: Vim.Math3d.DAABox
    content.vb: Public Function SetMin(x As DVector3) As DAABox
  overload: Vim.Math3d.DAABox.SetMin*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.DAABox.SetMax(Vim.Math3d.DVector3)
  commentId: M:Vim.Math3d.DAABox.SetMax(Vim.Math3d.DVector3)
  id: SetMax(Vim.Math3d.DVector3)
  parent: Vim.Math3d.DAABox
  langs:
  - csharp
  - vb
  name: SetMax(DVector3)
  nameWithType: DAABox.SetMax(DVector3)
  fullName: Vim.Math3d.DAABox.SetMax(Vim.Math3d.DVector3)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SetMax
    path: ../src/Structs.cs
    startLine: 972
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly DAABox SetMax(DVector3 x)
    parameters:
    - id: x
      type: Vim.Math3d.DVector3
    return:
      type: Vim.Math3d.DAABox
    content.vb: Public Function SetMax(x As DVector3) As DAABox
  overload: Vim.Math3d.DAABox.SetMax*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.DAABox.Extent
  commentId: P:Vim.Math3d.DAABox.Extent
  id: Extent
  parent: Vim.Math3d.DAABox
  langs:
  - csharp
  - vb
  name: Extent
  nameWithType: DAABox.Extent
  fullName: Vim.Math3d.DAABox.Extent
  type: Property
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Extent
    path: ../src/Structs.cs
    startLine: 973
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly DVector3 Extent { get; }
    parameters: []
    return:
      type: Vim.Math3d.DVector3
    content.vb: Public ReadOnly Property Extent As DVector3
  overload: Vim.Math3d.DAABox.Extent*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.DAABox.Center
  commentId: P:Vim.Math3d.DAABox.Center
  id: Center
  parent: Vim.Math3d.DAABox
  langs:
  - csharp
  - vb
  name: Center
  nameWithType: DAABox.Center
  fullName: Vim.Math3d.DAABox.Center
  type: Property
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Center
    path: ../src/Structs.cs
    startLine: 974
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly DVector3 Center { get; }
    parameters: []
    return:
      type: Vim.Math3d.DVector3
    content.vb: Public ReadOnly Property Center As DVector3
  overload: Vim.Math3d.DAABox.Center*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.DAABox.MagnitudeSquared
  commentId: M:Vim.Math3d.DAABox.MagnitudeSquared
  id: MagnitudeSquared
  parent: Vim.Math3d.DAABox
  langs:
  - csharp
  - vb
  name: MagnitudeSquared()
  nameWithType: DAABox.MagnitudeSquared()
  fullName: Vim.Math3d.DAABox.MagnitudeSquared()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MagnitudeSquared
    path: ../src/Structs.cs
    startLine: 975
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly double MagnitudeSquared()
    return:
      type: System.Double
    content.vb: Public Function MagnitudeSquared As Double
  overload: Vim.Math3d.DAABox.MagnitudeSquared*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.DAABox.Magnitude
  commentId: M:Vim.Math3d.DAABox.Magnitude
  id: Magnitude
  parent: Vim.Math3d.DAABox
  langs:
  - csharp
  - vb
  name: Magnitude()
  nameWithType: DAABox.Magnitude()
  fullName: Vim.Math3d.DAABox.Magnitude()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Magnitude
    path: ../src/Structs.cs
    startLine: 976
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly double Magnitude()
    return:
      type: System.Double
    content.vb: Public Function Magnitude As Double
  overload: Vim.Math3d.DAABox.Magnitude*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.DAABox.Merge(Vim.Math3d.DAABox)
  commentId: M:Vim.Math3d.DAABox.Merge(Vim.Math3d.DAABox)
  id: Merge(Vim.Math3d.DAABox)
  parent: Vim.Math3d.DAABox
  langs:
  - csharp
  - vb
  name: Merge(DAABox)
  nameWithType: DAABox.Merge(DAABox)
  fullName: Vim.Math3d.DAABox.Merge(Vim.Math3d.DAABox)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Merge
    path: ../src/Structs.cs
    startLine: 977
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly DAABox Merge(DAABox other)
    parameters:
    - id: other
      type: Vim.Math3d.DAABox
    return:
      type: Vim.Math3d.DAABox
    content.vb: Public Function Merge(other As DAABox) As DAABox
  overload: Vim.Math3d.DAABox.Merge*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.DAABox.Intersection(Vim.Math3d.DAABox)
  commentId: M:Vim.Math3d.DAABox.Intersection(Vim.Math3d.DAABox)
  id: Intersection(Vim.Math3d.DAABox)
  parent: Vim.Math3d.DAABox
  langs:
  - csharp
  - vb
  name: Intersection(DAABox)
  nameWithType: DAABox.Intersection(DAABox)
  fullName: Vim.Math3d.DAABox.Intersection(Vim.Math3d.DAABox)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Intersection
    path: ../src/Structs.cs
    startLine: 978
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly DAABox Intersection(DAABox other)
    parameters:
    - id: other
      type: Vim.Math3d.DAABox
    return:
      type: Vim.Math3d.DAABox
    content.vb: Public Function Intersection(other As DAABox) As DAABox
  overload: Vim.Math3d.DAABox.Intersection*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.DAABox.op_Addition(Vim.Math3d.DAABox,Vim.Math3d.DAABox)
  commentId: M:Vim.Math3d.DAABox.op_Addition(Vim.Math3d.DAABox,Vim.Math3d.DAABox)
  id: op_Addition(Vim.Math3d.DAABox,Vim.Math3d.DAABox)
  parent: Vim.Math3d.DAABox
  langs:
  - csharp
  - vb
  name: Addition(DAABox, DAABox)
  nameWithType: DAABox.Addition(DAABox, DAABox)
  fullName: Vim.Math3d.DAABox.Addition(Vim.Math3d.DAABox, Vim.Math3d.DAABox)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Addition
    path: ../src/Structs.cs
    startLine: 979
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DAABox operator +(DAABox value1, DAABox value2)
    parameters:
    - id: value1
      type: Vim.Math3d.DAABox
    - id: value2
      type: Vim.Math3d.DAABox
    return:
      type: Vim.Math3d.DAABox
    content.vb: Public Shared Operator +(value1 As DAABox, value2 As DAABox) As DAABox
  overload: Vim.Math3d.DAABox.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.DAABox.op_Subtraction(Vim.Math3d.DAABox,Vim.Math3d.DAABox)
  commentId: M:Vim.Math3d.DAABox.op_Subtraction(Vim.Math3d.DAABox,Vim.Math3d.DAABox)
  id: op_Subtraction(Vim.Math3d.DAABox,Vim.Math3d.DAABox)
  parent: Vim.Math3d.DAABox
  langs:
  - csharp
  - vb
  name: Subtraction(DAABox, DAABox)
  nameWithType: DAABox.Subtraction(DAABox, DAABox)
  fullName: Vim.Math3d.DAABox.Subtraction(Vim.Math3d.DAABox, Vim.Math3d.DAABox)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Subtraction
    path: ../src/Structs.cs
    startLine: 980
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DAABox operator -(DAABox value1, DAABox value2)
    parameters:
    - id: value1
      type: Vim.Math3d.DAABox
    - id: value2
      type: Vim.Math3d.DAABox
    return:
      type: Vim.Math3d.DAABox
    content.vb: Public Shared Operator -(value1 As DAABox, value2 As DAABox) As DAABox
  overload: Vim.Math3d.DAABox.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.DAABox.Merge(Vim.Math3d.DVector3)
  commentId: M:Vim.Math3d.DAABox.Merge(Vim.Math3d.DVector3)
  id: Merge(Vim.Math3d.DVector3)
  parent: Vim.Math3d.DAABox
  langs:
  - csharp
  - vb
  name: Merge(DVector3)
  nameWithType: DAABox.Merge(DVector3)
  fullName: Vim.Math3d.DAABox.Merge(Vim.Math3d.DVector3)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Merge
    path: ../src/Structs.cs
    startLine: 981
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly DAABox Merge(DVector3 other)
    parameters:
    - id: other
      type: Vim.Math3d.DVector3
    return:
      type: Vim.Math3d.DAABox
    content.vb: Public Function Merge(other As DVector3) As DAABox
  overload: Vim.Math3d.DAABox.Merge*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.DAABox.op_Addition(Vim.Math3d.DAABox,Vim.Math3d.DVector3)
  commentId: M:Vim.Math3d.DAABox.op_Addition(Vim.Math3d.DAABox,Vim.Math3d.DVector3)
  id: op_Addition(Vim.Math3d.DAABox,Vim.Math3d.DVector3)
  parent: Vim.Math3d.DAABox
  langs:
  - csharp
  - vb
  name: Addition(DAABox, DVector3)
  nameWithType: DAABox.Addition(DAABox, DVector3)
  fullName: Vim.Math3d.DAABox.Addition(Vim.Math3d.DAABox, Vim.Math3d.DVector3)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Addition
    path: ../src/Structs.cs
    startLine: 982
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DAABox operator +(DAABox value1, DVector3 value2)
    parameters:
    - id: value1
      type: Vim.Math3d.DAABox
    - id: value2
      type: Vim.Math3d.DVector3
    return:
      type: Vim.Math3d.DAABox
    content.vb: Public Shared Operator +(value1 As DAABox, value2 As DVector3) As DAABox
  overload: Vim.Math3d.DAABox.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.DAABox.Empty
  commentId: F:Vim.Math3d.DAABox.Empty
  id: Empty
  parent: Vim.Math3d.DAABox
  langs:
  - csharp
  - vb
  name: Empty
  nameWithType: DAABox.Empty
  fullName: Vim.Math3d.DAABox.Empty
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Empty
    path: ../src/Structs.cs
    startLine: 983
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static DAABox Empty
    return:
      type: Vim.Math3d.DAABox
    content.vb: Public Shared Empty As DAABox
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.DAABox.IsNaN
  commentId: M:Vim.Math3d.DAABox.IsNaN
  id: IsNaN
  parent: Vim.Math3d.DAABox
  langs:
  - csharp
  - vb
  name: IsNaN()
  nameWithType: DAABox.IsNaN()
  fullName: Vim.Math3d.DAABox.IsNaN()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: IsNaN
    path: ../src/Structs.cs
    startLine: 984
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool IsNaN()
    return:
      type: System.Boolean
    content.vb: Public Function IsNaN As Boolean
  overload: Vim.Math3d.DAABox.IsNaN*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.DAABox.IsInfinity
  commentId: M:Vim.Math3d.DAABox.IsInfinity
  id: IsInfinity
  parent: Vim.Math3d.DAABox
  langs:
  - csharp
  - vb
  name: IsInfinity()
  nameWithType: DAABox.IsInfinity()
  fullName: Vim.Math3d.DAABox.IsInfinity()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: IsInfinity
    path: ../src/Structs.cs
    startLine: 985
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool IsInfinity()
    return:
      type: System.Boolean
    content.vb: Public Function IsInfinity As Boolean
  overload: Vim.Math3d.DAABox.IsInfinity*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.DAABox.CompareTo(Vim.Math3d.DAABox)
  commentId: M:Vim.Math3d.DAABox.CompareTo(Vim.Math3d.DAABox)
  id: CompareTo(Vim.Math3d.DAABox)
  parent: Vim.Math3d.DAABox
  langs:
  - csharp
  - vb
  name: CompareTo(DAABox)
  nameWithType: DAABox.CompareTo(DAABox)
  fullName: Vim.Math3d.DAABox.CompareTo(Vim.Math3d.DAABox)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: CompareTo
    path: ../src/Structs.cs
    startLine: 986
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly int CompareTo(DAABox x)
    parameters:
    - id: x
      type: Vim.Math3d.DAABox
    return:
      type: System.Int32
    content.vb: Public Function CompareTo(x As DAABox) As Integer
  overload: Vim.Math3d.DAABox.CompareTo*
  implements:
  - System.IComparable{Vim.Math3d.DAABox}.CompareTo(Vim.Math3d.DAABox)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.DAABox.op_LessThan(Vim.Math3d.DAABox,Vim.Math3d.DAABox)
  commentId: M:Vim.Math3d.DAABox.op_LessThan(Vim.Math3d.DAABox,Vim.Math3d.DAABox)
  id: op_LessThan(Vim.Math3d.DAABox,Vim.Math3d.DAABox)
  parent: Vim.Math3d.DAABox
  langs:
  - csharp
  - vb
  name: LessThan(DAABox, DAABox)
  nameWithType: DAABox.LessThan(DAABox, DAABox)
  fullName: Vim.Math3d.DAABox.LessThan(Vim.Math3d.DAABox, Vim.Math3d.DAABox)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_LessThan
    path: ../src/Structs.cs
    startLine: 987
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator <(DAABox x0, DAABox x1)
    parameters:
    - id: x0
      type: Vim.Math3d.DAABox
    - id: x1
      type: Vim.Math3d.DAABox
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <(x0 As DAABox, x1 As DAABox) As Boolean
  overload: Vim.Math3d.DAABox.op_LessThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.DAABox.op_LessThanOrEqual(Vim.Math3d.DAABox,Vim.Math3d.DAABox)
  commentId: M:Vim.Math3d.DAABox.op_LessThanOrEqual(Vim.Math3d.DAABox,Vim.Math3d.DAABox)
  id: op_LessThanOrEqual(Vim.Math3d.DAABox,Vim.Math3d.DAABox)
  parent: Vim.Math3d.DAABox
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(DAABox, DAABox)
  nameWithType: DAABox.LessThanOrEqual(DAABox, DAABox)
  fullName: Vim.Math3d.DAABox.LessThanOrEqual(Vim.Math3d.DAABox, Vim.Math3d.DAABox)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_LessThanOrEqual
    path: ../src/Structs.cs
    startLine: 988
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator <=(DAABox x0, DAABox x1)
    parameters:
    - id: x0
      type: Vim.Math3d.DAABox
    - id: x1
      type: Vim.Math3d.DAABox
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <=(x0 As DAABox, x1 As DAABox) As Boolean
  overload: Vim.Math3d.DAABox.op_LessThanOrEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.DAABox.op_GreaterThan(Vim.Math3d.DAABox,Vim.Math3d.DAABox)
  commentId: M:Vim.Math3d.DAABox.op_GreaterThan(Vim.Math3d.DAABox,Vim.Math3d.DAABox)
  id: op_GreaterThan(Vim.Math3d.DAABox,Vim.Math3d.DAABox)
  parent: Vim.Math3d.DAABox
  langs:
  - csharp
  - vb
  name: GreaterThan(DAABox, DAABox)
  nameWithType: DAABox.GreaterThan(DAABox, DAABox)
  fullName: Vim.Math3d.DAABox.GreaterThan(Vim.Math3d.DAABox, Vim.Math3d.DAABox)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_GreaterThan
    path: ../src/Structs.cs
    startLine: 989
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator>(DAABox x0, DAABox x1)
    parameters:
    - id: x0
      type: Vim.Math3d.DAABox
    - id: x1
      type: Vim.Math3d.DAABox
    return:
      type: System.Boolean
    content.vb: Public Shared Operator>(x0 As DAABox, x1 As DAABox) As Boolean
  overload: Vim.Math3d.DAABox.op_GreaterThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.DAABox.op_GreaterThanOrEqual(Vim.Math3d.DAABox,Vim.Math3d.DAABox)
  commentId: M:Vim.Math3d.DAABox.op_GreaterThanOrEqual(Vim.Math3d.DAABox,Vim.Math3d.DAABox)
  id: op_GreaterThanOrEqual(Vim.Math3d.DAABox,Vim.Math3d.DAABox)
  parent: Vim.Math3d.DAABox
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(DAABox, DAABox)
  nameWithType: DAABox.GreaterThanOrEqual(DAABox, DAABox)
  fullName: Vim.Math3d.DAABox.GreaterThanOrEqual(Vim.Math3d.DAABox, Vim.Math3d.DAABox)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_GreaterThanOrEqual
    path: ../src/Structs.cs
    startLine: 990
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator >=(DAABox x0, DAABox x1)
    parameters:
    - id: x0
      type: Vim.Math3d.DAABox
    - id: x1
      type: Vim.Math3d.DAABox
    return:
      type: System.Boolean
    content.vb: Public Shared Operator >=(x0 As DAABox, x1 As DAABox) As Boolean
  overload: Vim.Math3d.DAABox.op_GreaterThanOrEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.DAABox.AABox
  commentId: P:Vim.Math3d.DAABox.AABox
  id: AABox
  parent: Vim.Math3d.DAABox
  langs:
  - csharp
  - vb
  name: AABox
  nameWithType: DAABox.AABox
  fullName: Vim.Math3d.DAABox.AABox
  type: Property
  source:
    remote:
      path: src/StructsPartial.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: AABox
    path: ../src/StructsPartial.cs
    startLine: 210
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly AABox AABox { get; }
    parameters: []
    return:
      type: Vim.Math3d.AABox
    content.vb: Public ReadOnly Property AABox As AABox
  overload: Vim.Math3d.DAABox.AABox*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Vim.Math3d
  commentId: N:Vim.Math3d
  name: Vim.Math3d
  nameWithType: Vim.Math3d
  fullName: Vim.Math3d
- uid: System.IEquatable{Vim.Math3d.DAABox}
  commentId: T:System.IEquatable{Vim.Math3d.DAABox}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<DAABox>
  nameWithType: IEquatable<DAABox>
  fullName: System.IEquatable<Vim.Math3d.DAABox>
  nameWithType.vb: IEquatable(Of DAABox)
  fullName.vb: System.IEquatable(Of Vim.Math3d.DAABox)
  name.vb: IEquatable(Of DAABox)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.DAABox
    name: DAABox
    nameWithType: DAABox
    fullName: Vim.Math3d.DAABox
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.DAABox
    name: DAABox
    nameWithType: DAABox
    fullName: Vim.Math3d.DAABox
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable{Vim.Math3d.DAABox}
  commentId: T:System.IComparable{Vim.Math3d.DAABox}
  parent: System
  definition: System.IComparable`1
  name: IComparable<DAABox>
  nameWithType: IComparable<DAABox>
  fullName: System.IComparable<Vim.Math3d.DAABox>
  nameWithType.vb: IComparable(Of DAABox)
  fullName.vb: System.IComparable(Of Vim.Math3d.DAABox)
  name.vb: IComparable(Of DAABox)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.DAABox
    name: DAABox
    nameWithType: DAABox
    fullName: Vim.Math3d.DAABox
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.DAABox
    name: DAABox
    nameWithType: DAABox
    fullName: Vim.Math3d.DAABox
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Vim.Math3d.DVector3
  commentId: T:Vim.Math3d.DVector3
  parent: Vim.Math3d
  name: DVector3
  nameWithType: DVector3
  fullName: Vim.Math3d.DVector3
- uid: Vim.Math3d.DAABox.#ctor*
  commentId: Overload:Vim.Math3d.DAABox.#ctor
  name: DAABox
  nameWithType: DAABox.DAABox
  fullName: Vim.Math3d.DAABox.DAABox
- uid: System.ValueTuple{Vim.Math3d.DVector3,Vim.Math3d.DVector3}
  commentId: T:System.ValueTuple{Vim.Math3d.DVector3,Vim.Math3d.DVector3}
  parent: System
  definition: System.ValueTuple`2
  name: (T1, T2)<DVector3, DVector3>
  nameWithType: (T1, T2)<DVector3, DVector3>
  fullName: System.ValueTuple<Vim.Math3d.DVector3, Vim.Math3d.DVector3>
  nameWithType.vb: (T1, T2)(Of DVector3, DVector3)
  fullName.vb: System.ValueTuple(Of Vim.Math3d.DVector3, Vim.Math3d.DVector3)
  name.vb: (T1, T2)(Of DVector3, DVector3)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.DVector3
    name: DVector3
    nameWithType: DVector3
    fullName: Vim.Math3d.DVector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.DVector3
    name: DVector3
    nameWithType: DVector3
    fullName: Vim.Math3d.DVector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.DVector3
    name: DVector3
    nameWithType: DVector3
    fullName: Vim.Math3d.DVector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.DVector3
    name: DVector3
    nameWithType: DVector3
    fullName: Vim.Math3d.DVector3
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple`2
  commentId: T:System.ValueTuple`2
  isExternal: true
  name: (T1, T2)<T1, T2>
  nameWithType: (T1, T2)<T1, T2>
  fullName: System.ValueTuple<T1, T2>
  nameWithType.vb: (T1, T2)(Of T1, T2)
  fullName.vb: System.ValueTuple(Of T1, T2)
  name.vb: (T1, T2)(Of T1, T2)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.DAABox.Create*
  commentId: Overload:Vim.Math3d.DAABox.Create
  name: Create
  nameWithType: DAABox.Create
  fullName: Vim.Math3d.DAABox.Create
- uid: Vim.Math3d.DAABox
  commentId: T:Vim.Math3d.DAABox
  parent: Vim.Math3d
  name: DAABox
  nameWithType: DAABox
  fullName: Vim.Math3d.DAABox
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.DAABox.Equals*
  commentId: Overload:Vim.Math3d.DAABox.Equals
  name: Equals
  nameWithType: DAABox.Equals
  fullName: Vim.Math3d.DAABox.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.DAABox.GetHashCode*
  commentId: Overload:Vim.Math3d.DAABox.GetHashCode
  name: GetHashCode
  nameWithType: DAABox.GetHashCode
  fullName: Vim.Math3d.DAABox.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.DAABox.ToString*
  commentId: Overload:Vim.Math3d.DAABox.ToString
  name: ToString
  nameWithType: DAABox.ToString
  fullName: Vim.Math3d.DAABox.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Vim.Math3d.DAABox.Deconstruct*
  commentId: Overload:Vim.Math3d.DAABox.Deconstruct
  name: Deconstruct
  nameWithType: DAABox.Deconstruct
  fullName: Vim.Math3d.DAABox.Deconstruct
- uid: System.IEquatable{Vim.Math3d.DAABox}.Equals(Vim.Math3d.DAABox)
  commentId: M:System.IEquatable{Vim.Math3d.DAABox}.Equals(Vim.Math3d.DAABox)
  parent: System.IEquatable{Vim.Math3d.DAABox}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(DAABox)
  nameWithType: IEquatable<DAABox>.Equals(DAABox)
  fullName: System.IEquatable<Vim.Math3d.DAABox>.Equals(Vim.Math3d.DAABox)
  nameWithType.vb: IEquatable(Of DAABox).Equals(DAABox)
  fullName.vb: System.IEquatable(Of Vim.Math3d.DAABox).Equals(Vim.Math3d.DAABox)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<DAABox>.Equals
    fullName: System.IEquatable<Vim.Math3d.DAABox>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.DAABox
    name: DAABox
    nameWithType: DAABox
    fullName: Vim.Math3d.DAABox
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of DAABox).Equals
    fullName: System.IEquatable(Of Vim.Math3d.DAABox).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.DAABox
    name: DAABox
    nameWithType: DAABox
    fullName: Vim.Math3d.DAABox
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.DAABox.op_Equality*
  commentId: Overload:Vim.Math3d.DAABox.op_Equality
  name: Equality
  nameWithType: DAABox.Equality
  fullName: Vim.Math3d.DAABox.Equality
- uid: Vim.Math3d.DAABox.op_Inequality*
  commentId: Overload:Vim.Math3d.DAABox.op_Inequality
  name: Inequality
  nameWithType: DAABox.Inequality
  fullName: Vim.Math3d.DAABox.Inequality
- uid: Vim.Math3d.DAABox.op_Implicit*
  commentId: Overload:Vim.Math3d.DAABox.op_Implicit
  name: Implicit
  nameWithType: DAABox.Implicit
  fullName: Vim.Math3d.DAABox.Implicit
  nameWithType.vb: DAABox.Widening
  fullName.vb: Vim.Math3d.DAABox.Widening
  name.vb: Widening
- uid: Vim.Math3d.DAABox.AlmostEquals*
  commentId: Overload:Vim.Math3d.DAABox.AlmostEquals
  name: AlmostEquals
  nameWithType: DAABox.AlmostEquals
  fullName: Vim.Math3d.DAABox.AlmostEquals
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Vim.Math3d.DAABox.SetMin*
  commentId: Overload:Vim.Math3d.DAABox.SetMin
  name: SetMin
  nameWithType: DAABox.SetMin
  fullName: Vim.Math3d.DAABox.SetMin
- uid: Vim.Math3d.DAABox.SetMax*
  commentId: Overload:Vim.Math3d.DAABox.SetMax
  name: SetMax
  nameWithType: DAABox.SetMax
  fullName: Vim.Math3d.DAABox.SetMax
- uid: Vim.Math3d.DAABox.Extent*
  commentId: Overload:Vim.Math3d.DAABox.Extent
  name: Extent
  nameWithType: DAABox.Extent
  fullName: Vim.Math3d.DAABox.Extent
- uid: Vim.Math3d.DAABox.Center*
  commentId: Overload:Vim.Math3d.DAABox.Center
  name: Center
  nameWithType: DAABox.Center
  fullName: Vim.Math3d.DAABox.Center
- uid: Vim.Math3d.DAABox.MagnitudeSquared*
  commentId: Overload:Vim.Math3d.DAABox.MagnitudeSquared
  name: MagnitudeSquared
  nameWithType: DAABox.MagnitudeSquared
  fullName: Vim.Math3d.DAABox.MagnitudeSquared
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Vim.Math3d.DAABox.Magnitude*
  commentId: Overload:Vim.Math3d.DAABox.Magnitude
  name: Magnitude
  nameWithType: DAABox.Magnitude
  fullName: Vim.Math3d.DAABox.Magnitude
- uid: Vim.Math3d.DAABox.Merge*
  commentId: Overload:Vim.Math3d.DAABox.Merge
  name: Merge
  nameWithType: DAABox.Merge
  fullName: Vim.Math3d.DAABox.Merge
- uid: Vim.Math3d.DAABox.Intersection*
  commentId: Overload:Vim.Math3d.DAABox.Intersection
  name: Intersection
  nameWithType: DAABox.Intersection
  fullName: Vim.Math3d.DAABox.Intersection
- uid: Vim.Math3d.DAABox.op_Addition*
  commentId: Overload:Vim.Math3d.DAABox.op_Addition
  name: Addition
  nameWithType: DAABox.Addition
  fullName: Vim.Math3d.DAABox.Addition
- uid: Vim.Math3d.DAABox.op_Subtraction*
  commentId: Overload:Vim.Math3d.DAABox.op_Subtraction
  name: Subtraction
  nameWithType: DAABox.Subtraction
  fullName: Vim.Math3d.DAABox.Subtraction
- uid: Vim.Math3d.DAABox.IsNaN*
  commentId: Overload:Vim.Math3d.DAABox.IsNaN
  name: IsNaN
  nameWithType: DAABox.IsNaN
  fullName: Vim.Math3d.DAABox.IsNaN
- uid: Vim.Math3d.DAABox.IsInfinity*
  commentId: Overload:Vim.Math3d.DAABox.IsInfinity
  name: IsInfinity
  nameWithType: DAABox.IsInfinity
  fullName: Vim.Math3d.DAABox.IsInfinity
- uid: Vim.Math3d.DAABox.CompareTo*
  commentId: Overload:Vim.Math3d.DAABox.CompareTo
  name: CompareTo
  nameWithType: DAABox.CompareTo
  fullName: Vim.Math3d.DAABox.CompareTo
- uid: System.IComparable{Vim.Math3d.DAABox}.CompareTo(Vim.Math3d.DAABox)
  commentId: M:System.IComparable{Vim.Math3d.DAABox}.CompareTo(Vim.Math3d.DAABox)
  parent: System.IComparable{Vim.Math3d.DAABox}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(DAABox)
  nameWithType: IComparable<DAABox>.CompareTo(DAABox)
  fullName: System.IComparable<Vim.Math3d.DAABox>.CompareTo(Vim.Math3d.DAABox)
  nameWithType.vb: IComparable(Of DAABox).CompareTo(DAABox)
  fullName.vb: System.IComparable(Of Vim.Math3d.DAABox).CompareTo(Vim.Math3d.DAABox)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<DAABox>.CompareTo
    fullName: System.IComparable<Vim.Math3d.DAABox>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.DAABox
    name: DAABox
    nameWithType: DAABox
    fullName: Vim.Math3d.DAABox
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of DAABox).CompareTo
    fullName: System.IComparable(Of Vim.Math3d.DAABox).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.DAABox
    name: DAABox
    nameWithType: DAABox
    fullName: Vim.Math3d.DAABox
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable`1.CompareTo(`0)
  commentId: M:System.IComparable`1.CompareTo(`0)
  isExternal: true
  name: CompareTo(T)
  nameWithType: IComparable<T>.CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
  fullName.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<T>.CompareTo
    fullName: System.IComparable<T>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of T).CompareTo
    fullName: System.IComparable(Of T).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.DAABox.op_LessThan*
  commentId: Overload:Vim.Math3d.DAABox.op_LessThan
  name: LessThan
  nameWithType: DAABox.LessThan
  fullName: Vim.Math3d.DAABox.LessThan
- uid: Vim.Math3d.DAABox.op_LessThanOrEqual*
  commentId: Overload:Vim.Math3d.DAABox.op_LessThanOrEqual
  name: LessThanOrEqual
  nameWithType: DAABox.LessThanOrEqual
  fullName: Vim.Math3d.DAABox.LessThanOrEqual
- uid: Vim.Math3d.DAABox.op_GreaterThan*
  commentId: Overload:Vim.Math3d.DAABox.op_GreaterThan
  name: GreaterThan
  nameWithType: DAABox.GreaterThan
  fullName: Vim.Math3d.DAABox.GreaterThan
- uid: Vim.Math3d.DAABox.op_GreaterThanOrEqual*
  commentId: Overload:Vim.Math3d.DAABox.op_GreaterThanOrEqual
  name: GreaterThanOrEqual
  nameWithType: DAABox.GreaterThanOrEqual
  fullName: Vim.Math3d.DAABox.GreaterThanOrEqual
- uid: Vim.Math3d.DAABox.AABox*
  commentId: Overload:Vim.Math3d.DAABox.AABox
  name: AABox
  nameWithType: DAABox.AABox
  fullName: Vim.Math3d.DAABox.AABox
- uid: Vim.Math3d.AABox
  commentId: T:Vim.Math3d.AABox
  parent: Vim.Math3d
  name: AABox
  nameWithType: AABox
  fullName: Vim.Math3d.AABox

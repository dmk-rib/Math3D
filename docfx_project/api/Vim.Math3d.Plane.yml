### YamlMime:ManagedReference
items:
- uid: Vim.Math3d.Plane
  commentId: T:Vim.Math3d.Plane
  id: Plane
  parent: Vim.Math3d
  children:
  - Vim.Math3d.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)
  - Vim.Math3d.Plane.#ctor(System.ValueTuple{Vim.Math3d.Vector3,System.Single})
  - Vim.Math3d.Plane.#ctor(Vim.Math3d.Vector3,System.Single)
  - Vim.Math3d.Plane.#ctor(Vim.Math3d.Vector4)
  - Vim.Math3d.Plane.AlmostEquals(Vim.Math3d.Plane,System.Single)
  - Vim.Math3d.Plane.ClassifyPoint(Vim.Math3d.Vector3)
  - Vim.Math3d.Plane.Create(System.ValueTuple{Vim.Math3d.Vector3,System.Single})
  - Vim.Math3d.Plane.Create(Vim.Math3d.Vector3,System.Single)
  - Vim.Math3d.Plane.CreateFromNormalAndPoint(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  - Vim.Math3d.Plane.CreateFromVertices(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  - Vim.Math3d.Plane.D
  - Vim.Math3d.Plane.Deconstruct(Vim.Math3d.Vector3@,System.Single@)
  - Vim.Math3d.Plane.Dot(Vim.Math3d.Plane,Vim.Math3d.Vector4)
  - Vim.Math3d.Plane.Dot(Vim.Math3d.Vector4)
  - Vim.Math3d.Plane.DotCoordinate(Vim.Math3d.Plane,Vim.Math3d.Vector3)
  - Vim.Math3d.Plane.DotNormal(Vim.Math3d.Plane,Vim.Math3d.Vector3)
  - Vim.Math3d.Plane.Equals(System.Object)
  - Vim.Math3d.Plane.Equals(Vim.Math3d.Plane)
  - Vim.Math3d.Plane.GetHashCode
  - Vim.Math3d.Plane.MaxValue
  - Vim.Math3d.Plane.MinValue
  - Vim.Math3d.Plane.Normal
  - Vim.Math3d.Plane.Normalize(Vim.Math3d.Plane)
  - Vim.Math3d.Plane.op_Equality(Vim.Math3d.Plane,Vim.Math3d.Plane)
  - Vim.Math3d.Plane.op_Implicit(System.ValueTuple{Vim.Math3d.Vector3,System.Single})~Vim.Math3d.Plane
  - Vim.Math3d.Plane.op_Implicit(Vim.Math3d.Plane)~System.ValueTuple{Vim.Math3d.Vector3,System.Single}
  - Vim.Math3d.Plane.op_Inequality(Vim.Math3d.Plane,Vim.Math3d.Plane)
  - Vim.Math3d.Plane.ProjectPointOntoPlane(Vim.Math3d.Plane,Vim.Math3d.Vector3)
  - Vim.Math3d.Plane.SetD(System.Single)
  - Vim.Math3d.Plane.SetNormal(Vim.Math3d.Vector3)
  - Vim.Math3d.Plane.ToString
  - Vim.Math3d.Plane.ToVector4
  - Vim.Math3d.Plane.Transform(Vim.Math3d.Matrix4x4)
  - Vim.Math3d.Plane.Transform(Vim.Math3d.Quaternion)
  - Vim.Math3d.Plane.Zero
  langs:
  - csharp
  - vb
  name: Plane
  nameWithType: Plane
  fullName: Vim.Math3d.Plane
  type: Struct
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Plane
    path: ../src/Structs.cs
    startLine: 517
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nA structure encapsulating a 3D Plane\n"
  example: []
  syntax:
    content: >-
      [DataContract]

      public readonly struct Plane : ITransformable3D<Plane>, IEquatable<Plane>
    content.vb: >-
      <DataContract>

      Public Structure Plane
          Implements ITransformable3D(Of Plane), IEquatable(Of Plane)
  implements:
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Plane}
  - System.IEquatable{Vim.Math3d.Plane}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Plane}.Vim.Math3d.Transformable3D.Transform``1(Vim.Math3d.Matrix4x4[])
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Plane}.Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.Vector3)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Plane}.Vim.Math3d.Transformable3D.Translate``1(System.Single,System.Single,System.Single)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Plane}.Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.Quaternion)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Plane}.Vim.Math3d.Transformable3D.Scale``1(System.Single)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Plane}.Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.Vector3)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Plane}.Vim.Math3d.Transformable3D.Scale``1(System.Single,System.Single,System.Single)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Plane}.Vim.Math3d.Transformable3D.ScaleX``1(System.Single)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Plane}.Vim.Math3d.Transformable3D.ScaleY``1(System.Single)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Plane}.Vim.Math3d.Transformable3D.ScaleZ``1(System.Single)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Plane}.Vim.Math3d.Transformable3D.LookAt``1(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Plane}.Vim.Math3d.Transformable3D.RotateAround``1(Vim.Math3d.Vector3,System.Single)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Plane}.Vim.Math3d.Transformable3D.Rotate``1(System.Single,System.Single,System.Single)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Plane}.Vim.Math3d.Transformable3D.Reflect``1(Vim.Math3d.Plane)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Plane}.Vim.Math3d.Transformable3D.RotateX``1(System.Single)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Plane}.Vim.Math3d.Transformable3D.RotateY``1(System.Single)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Plane}.Vim.Math3d.Transformable3D.RotateZ``1(System.Single)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Plane}.Vim.Math3d.Transformable3D.TranslateRotateScale``1(Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Vim.Math3d.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)
  commentId: M:Vim.Math3d.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)
  id: '#ctor(System.Single,System.Single,System.Single,System.Single)'
  parent: Vim.Math3d.Plane
  langs:
  - csharp
  - vb
  name: Plane(Single, Single, Single, Single)
  nameWithType: Plane.Plane(Single, Single, Single, Single)
  fullName: Vim.Math3d.Plane.Plane(System.Single, System.Single, System.Single, System.Single)
  type: Constructor
  source:
    remote:
      path: src/Plane.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: .ctor
    path: ../src/Plane.cs
    startLine: 17
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public Plane(float x, float y, float z, float d)
    parameters:
    - id: x
      type: System.Single
    - id: y
      type: System.Single
    - id: z
      type: System.Single
    - id: d
      type: System.Single
    content.vb: Public Sub New(x As Single, y As Single, z As Single, d As Single)
  overload: Vim.Math3d.Plane.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Plane.#ctor(Vim.Math3d.Vector4)
  commentId: M:Vim.Math3d.Plane.#ctor(Vim.Math3d.Vector4)
  id: '#ctor(Vim.Math3d.Vector4)'
  parent: Vim.Math3d.Plane
  langs:
  - csharp
  - vb
  name: Plane(Vector4)
  nameWithType: Plane.Plane(Vector4)
  fullName: Vim.Math3d.Plane.Plane(Vim.Math3d.Vector4)
  type: Constructor
  source:
    remote:
      path: src/Plane.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: .ctor
    path: ../src/Plane.cs
    startLine: 22
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public Plane(Vector4 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector4
    content.vb: Public Sub New(v As Vector4)
  overload: Vim.Math3d.Plane.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Plane.CreateFromVertices(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Plane.CreateFromVertices(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  id: CreateFromVertices(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  parent: Vim.Math3d.Plane
  langs:
  - csharp
  - vb
  name: CreateFromVertices(Vector3, Vector3, Vector3)
  nameWithType: Plane.CreateFromVertices(Vector3, Vector3, Vector3)
  fullName: Vim.Math3d.Plane.CreateFromVertices(Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/Plane.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: CreateFromVertices
    path: ../src/Plane.cs
    startLine: 30
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nCreates a Plane that contains the three given points.\n"
  example: []
  syntax:
    content: public static Plane CreateFromVertices(Vector3 point1, Vector3 point2, Vector3 point3)
    parameters:
    - id: point1
      type: Vim.Math3d.Vector3
    - id: point2
      type: Vim.Math3d.Vector3
    - id: point3
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Plane
    content.vb: Public Shared Function CreateFromVertices(point1 As Vector3, point2 As Vector3, point3 As Vector3) As Plane
  overload: Vim.Math3d.Plane.CreateFromVertices*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Plane.CreateFromNormalAndPoint(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Plane.CreateFromNormalAndPoint(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  id: CreateFromNormalAndPoint(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  parent: Vim.Math3d.Plane
  langs:
  - csharp
  - vb
  name: CreateFromNormalAndPoint(Vector3, Vector3)
  nameWithType: Plane.CreateFromNormalAndPoint(Vector3, Vector3)
  fullName: Vim.Math3d.Plane.CreateFromNormalAndPoint(Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/Plane.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: CreateFromNormalAndPoint
    path: ../src/Plane.cs
    startLine: 43
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nCreates a Plane with the given normal that contains the point\n"
  example: []
  syntax:
    content: public static Plane CreateFromNormalAndPoint(Vector3 normal, Vector3 point)
    parameters:
    - id: normal
      type: Vim.Math3d.Vector3
    - id: point
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Plane
    content.vb: Public Shared Function CreateFromNormalAndPoint(normal As Vector3, point As Vector3) As Plane
  overload: Vim.Math3d.Plane.CreateFromNormalAndPoint*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Plane.Normalize(Vim.Math3d.Plane)
  commentId: M:Vim.Math3d.Plane.Normalize(Vim.Math3d.Plane)
  id: Normalize(Vim.Math3d.Plane)
  parent: Vim.Math3d.Plane
  langs:
  - csharp
  - vb
  name: Normalize(Plane)
  nameWithType: Plane.Normalize(Plane)
  fullName: Vim.Math3d.Plane.Normalize(Vim.Math3d.Plane)
  type: Method
  source:
    remote:
      path: src/Plane.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Normalize
    path: ../src/Plane.cs
    startLine: 56
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nCreates a new Plane whose normal vector is the source Plane&apos;s normal vector normalized.\n"
  example: []
  syntax:
    content: public static Plane Normalize(Plane value)
    parameters:
    - id: value
      type: Vim.Math3d.Plane
      description: The source Plane.
    return:
      type: Vim.Math3d.Plane
    content.vb: Public Shared Function Normalize(value As Plane) As Plane
  overload: Vim.Math3d.Plane.Normalize*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Plane.Transform(Vim.Math3d.Matrix4x4)
  commentId: M:Vim.Math3d.Plane.Transform(Vim.Math3d.Matrix4x4)
  id: Transform(Vim.Math3d.Matrix4x4)
  parent: Vim.Math3d.Plane
  langs:
  - csharp
  - vb
  name: Transform(Matrix4x4)
  nameWithType: Plane.Transform(Matrix4x4)
  fullName: Vim.Math3d.Plane.Transform(Vim.Math3d.Matrix4x4)
  type: Method
  source:
    remote:
      path: src/Plane.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Transform
    path: ../src/Plane.cs
    startLine: 75
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nTransforms a normalized Plane by a Matrix.\n"
  example: []
  syntax:
    content: public readonly Plane Transform(Matrix4x4 matrix)
    parameters:
    - id: matrix
      type: Vim.Math3d.Matrix4x4
    return:
      type: Vim.Math3d.Plane
    content.vb: Public Function Transform(matrix As Matrix4x4) As Plane
  overload: Vim.Math3d.Plane.Transform*
  implements:
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Plane}.Transform(Vim.Math3d.Matrix4x4)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Plane.Transform(Vim.Math3d.Quaternion)
  commentId: M:Vim.Math3d.Plane.Transform(Vim.Math3d.Quaternion)
  id: Transform(Vim.Math3d.Quaternion)
  parent: Vim.Math3d.Plane
  langs:
  - csharp
  - vb
  name: Transform(Quaternion)
  nameWithType: Plane.Transform(Quaternion)
  fullName: Vim.Math3d.Plane.Transform(Vim.Math3d.Quaternion)
  type: Method
  source:
    remote:
      path: src/Plane.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Transform
    path: ../src/Plane.cs
    startLine: 90
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nTransforms a normalized Plane by a Quaternion rotation.\n"
  example: []
  syntax:
    content: public readonly Plane Transform(Quaternion rotation)
    parameters:
    - id: rotation
      type: Vim.Math3d.Quaternion
    return:
      type: Vim.Math3d.Plane
    content.vb: Public Function Transform(rotation As Quaternion) As Plane
  overload: Vim.Math3d.Plane.Transform*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Plane.ProjectPointOntoPlane(Vim.Math3d.Plane,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Plane.ProjectPointOntoPlane(Vim.Math3d.Plane,Vim.Math3d.Vector3)
  id: ProjectPointOntoPlane(Vim.Math3d.Plane,Vim.Math3d.Vector3)
  parent: Vim.Math3d.Plane
  langs:
  - csharp
  - vb
  name: ProjectPointOntoPlane(Plane, Vector3)
  nameWithType: Plane.ProjectPointOntoPlane(Plane, Vector3)
  fullName: Vim.Math3d.Plane.ProjectPointOntoPlane(Vim.Math3d.Plane, Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/Plane.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ProjectPointOntoPlane
    path: ../src/Plane.cs
    startLine: 132
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nProjects a point onto the plane\n"
  example: []
  syntax:
    content: public static Vector3 ProjectPointOntoPlane(Plane plane, Vector3 point)
    parameters:
    - id: plane
      type: Vim.Math3d.Plane
    - id: point
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Vector3
    content.vb: Public Shared Function ProjectPointOntoPlane(plane As Plane, point As Vector3) As Vector3
  overload: Vim.Math3d.Plane.ProjectPointOntoPlane*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Plane.Dot(Vim.Math3d.Plane,Vim.Math3d.Vector4)
  commentId: M:Vim.Math3d.Plane.Dot(Vim.Math3d.Plane,Vim.Math3d.Vector4)
  id: Dot(Vim.Math3d.Plane,Vim.Math3d.Vector4)
  parent: Vim.Math3d.Plane
  langs:
  - csharp
  - vb
  name: Dot(Plane, Vector4)
  nameWithType: Plane.Dot(Plane, Vector4)
  fullName: Vim.Math3d.Plane.Dot(Vim.Math3d.Plane, Vim.Math3d.Vector4)
  type: Method
  source:
    remote:
      path: src/Plane.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Dot
    path: ../src/Plane.cs
    startLine: 142
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nCalculates the dot product of a Plane and Vector4.\n"
  example: []
  syntax:
    content: public static float Dot(Plane plane, Vector4 value)
    parameters:
    - id: plane
      type: Vim.Math3d.Plane
    - id: value
      type: Vim.Math3d.Vector4
    return:
      type: System.Single
    content.vb: Public Shared Function Dot(plane As Plane, value As Vector4) As Single
  overload: Vim.Math3d.Plane.Dot*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Plane.Dot(Vim.Math3d.Vector4)
  commentId: M:Vim.Math3d.Plane.Dot(Vim.Math3d.Vector4)
  id: Dot(Vim.Math3d.Vector4)
  parent: Vim.Math3d.Plane
  langs:
  - csharp
  - vb
  name: Dot(Vector4)
  nameWithType: Plane.Dot(Vector4)
  fullName: Vim.Math3d.Plane.Dot(Vim.Math3d.Vector4)
  type: Method
  source:
    remote:
      path: src/Plane.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Dot
    path: ../src/Plane.cs
    startLine: 149
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nCalculates the dot product of a Plane and Vector4.\n"
  example: []
  syntax:
    content: public readonly float Dot(Vector4 value)
    parameters:
    - id: value
      type: Vim.Math3d.Vector4
    return:
      type: System.Single
    content.vb: Public Function Dot(value As Vector4) As Single
  overload: Vim.Math3d.Plane.Dot*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Plane.DotCoordinate(Vim.Math3d.Plane,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Plane.DotCoordinate(Vim.Math3d.Plane,Vim.Math3d.Vector3)
  id: DotCoordinate(Vim.Math3d.Plane,Vim.Math3d.Vector3)
  parent: Vim.Math3d.Plane
  langs:
  - csharp
  - vb
  name: DotCoordinate(Plane, Vector3)
  nameWithType: Plane.DotCoordinate(Plane, Vector3)
  fullName: Vim.Math3d.Plane.DotCoordinate(Vim.Math3d.Plane, Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/Plane.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: DotCoordinate
    path: ../src/Plane.cs
    startLine: 156
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nReturns the dot product of a specified Vector3 and the normal vector of this Plane plus the distance (D) value of the Plane.\n"
  example: []
  syntax:
    content: public static float DotCoordinate(Plane plane, Vector3 value)
    parameters:
    - id: plane
      type: Vim.Math3d.Plane
    - id: value
      type: Vim.Math3d.Vector3
    return:
      type: System.Single
    content.vb: Public Shared Function DotCoordinate(plane As Plane, value As Vector3) As Single
  overload: Vim.Math3d.Plane.DotCoordinate*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Plane.DotNormal(Vim.Math3d.Plane,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Plane.DotNormal(Vim.Math3d.Plane,Vim.Math3d.Vector3)
  id: DotNormal(Vim.Math3d.Plane,Vim.Math3d.Vector3)
  parent: Vim.Math3d.Plane
  langs:
  - csharp
  - vb
  name: DotNormal(Plane, Vector3)
  nameWithType: Plane.DotNormal(Plane, Vector3)
  fullName: Vim.Math3d.Plane.DotNormal(Vim.Math3d.Plane, Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/Plane.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: DotNormal
    path: ../src/Plane.cs
    startLine: 163
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nReturns the dot product of a specified Vector3 and the Normal vector of this Plane.\n"
  example: []
  syntax:
    content: public static float DotNormal(Plane plane, Vector3 value)
    parameters:
    - id: plane
      type: Vim.Math3d.Plane
    - id: value
      type: Vim.Math3d.Vector3
    return:
      type: System.Single
    content.vb: Public Shared Function DotNormal(plane As Plane, value As Vector3) As Single
  overload: Vim.Math3d.Plane.DotNormal*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Plane.ClassifyPoint(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Plane.ClassifyPoint(Vim.Math3d.Vector3)
  id: ClassifyPoint(Vim.Math3d.Vector3)
  parent: Vim.Math3d.Plane
  langs:
  - csharp
  - vb
  name: ClassifyPoint(Vector3)
  nameWithType: Plane.ClassifyPoint(Vector3)
  fullName: Vim.Math3d.Plane.ClassifyPoint(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/Plane.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ClassifyPoint
    path: ../src/Plane.cs
    startLine: 171
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nReturns a value less than zero if the points is below the plane, above zero if above the plane, or zero if coplanar\n"
  example: []
  syntax:
    content: public readonly float ClassifyPoint(Vector3 point)
    parameters:
    - id: point
      type: Vim.Math3d.Vector3
      description: ''
    return:
      type: System.Single
    content.vb: Public Function ClassifyPoint(point As Vector3) As Single
  overload: Vim.Math3d.Plane.ClassifyPoint*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Plane.ToVector4
  commentId: M:Vim.Math3d.Plane.ToVector4
  id: ToVector4
  parent: Vim.Math3d.Plane
  langs:
  - csharp
  - vb
  name: ToVector4()
  nameWithType: Plane.ToVector4()
  fullName: Vim.Math3d.Plane.ToVector4()
  type: Method
  source:
    remote:
      path: src/Plane.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToVector4
    path: ../src/Plane.cs
    startLine: 178
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nReturns a Vector4 representation of the Plane\n"
  example: []
  syntax:
    content: public readonly Vector4 ToVector4()
    return:
      type: Vim.Math3d.Vector4
    content.vb: Public Function ToVector4 As Vector4
  overload: Vim.Math3d.Plane.ToVector4*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Plane.Normal
  commentId: F:Vim.Math3d.Plane.Normal
  id: Normal
  parent: Vim.Math3d.Plane
  langs:
  - csharp
  - vb
  name: Normal
  nameWithType: Plane.Normal
  fullName: Vim.Math3d.Plane.Normal
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Normal
    path: ../src/Structs.cs
    startLine: 523
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataMember]

      public readonly Vector3 Normal
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <DataMember>

      Public ReadOnly Normal As Vector3
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.Plane.D
  commentId: F:Vim.Math3d.Plane.D
  id: D
  parent: Vim.Math3d.Plane
  langs:
  - csharp
  - vb
  name: D
  nameWithType: Plane.D
  fullName: Vim.Math3d.Plane.D
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: D
    path: ../src/Structs.cs
    startLine: 525
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataMember]

      public readonly float D
    return:
      type: System.Single
    content.vb: >-
      <DataMember>

      Public ReadOnly D As Single
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.Plane.#ctor(System.ValueTuple{Vim.Math3d.Vector3,System.Single})
  commentId: M:Vim.Math3d.Plane.#ctor(System.ValueTuple{Vim.Math3d.Vector3,System.Single})
  id: '#ctor(System.ValueTuple{Vim.Math3d.Vector3,System.Single})'
  parent: Vim.Math3d.Plane
  langs:
  - csharp
  - vb
  name: Plane((Vector3 normal, Single d))
  nameWithType: Plane.Plane((Vector3 normal, Single d))
  fullName: Vim.Math3d.Plane.Plane(System.ValueTuple<Vim.Math3d.Vector3, System.Single>)
  type: Constructor
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: .ctor
    path: ../src/Structs.cs
    startLine: 526
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public Plane((Vector3 normal, float d) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{Vim.Math3d.Vector3,System.Single}
    content.vb: Public Sub New(tuple As(normal As Vector3, d As Single)(Of Vector3 , Single))
  overload: Vim.Math3d.Plane.#ctor*
  nameWithType.vb: Plane.Plane((normal As Vector3, d As Single)(Of Vector3, Single))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Vim.Math3d.Plane.Plane(System.ValueTuple(Of Vim.Math3d.Vector3, System.Single))
  name.vb: Plane((normal As Vector3, d As Single)(Of Vector3, Single))
- uid: Vim.Math3d.Plane.#ctor(Vim.Math3d.Vector3,System.Single)
  commentId: M:Vim.Math3d.Plane.#ctor(Vim.Math3d.Vector3,System.Single)
  id: '#ctor(Vim.Math3d.Vector3,System.Single)'
  parent: Vim.Math3d.Plane
  langs:
  - csharp
  - vb
  name: Plane(Vector3, Single)
  nameWithType: Plane.Plane(Vector3, Single)
  fullName: Vim.Math3d.Plane.Plane(Vim.Math3d.Vector3, System.Single)
  type: Constructor
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: .ctor
    path: ../src/Structs.cs
    startLine: 527
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public Plane(Vector3 normal, float d)
    parameters:
    - id: normal
      type: Vim.Math3d.Vector3
    - id: d
      type: System.Single
    content.vb: Public Sub New(normal As Vector3, d As Single)
  overload: Vim.Math3d.Plane.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Plane.Create(Vim.Math3d.Vector3,System.Single)
  commentId: M:Vim.Math3d.Plane.Create(Vim.Math3d.Vector3,System.Single)
  id: Create(Vim.Math3d.Vector3,System.Single)
  parent: Vim.Math3d.Plane
  langs:
  - csharp
  - vb
  name: Create(Vector3, Single)
  nameWithType: Plane.Create(Vector3, Single)
  fullName: Vim.Math3d.Plane.Create(Vim.Math3d.Vector3, System.Single)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Create
    path: ../src/Structs.cs
    startLine: 528
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Plane Create(Vector3 normal, float d)
    parameters:
    - id: normal
      type: Vim.Math3d.Vector3
    - id: d
      type: System.Single
    return:
      type: Vim.Math3d.Plane
    content.vb: Public Shared Function Create(normal As Vector3, d As Single) As Plane
  overload: Vim.Math3d.Plane.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Plane.Create(System.ValueTuple{Vim.Math3d.Vector3,System.Single})
  commentId: M:Vim.Math3d.Plane.Create(System.ValueTuple{Vim.Math3d.Vector3,System.Single})
  id: Create(System.ValueTuple{Vim.Math3d.Vector3,System.Single})
  parent: Vim.Math3d.Plane
  langs:
  - csharp
  - vb
  name: Create((Vector3 normal, Single d))
  nameWithType: Plane.Create((Vector3 normal, Single d))
  fullName: Vim.Math3d.Plane.Create(System.ValueTuple<Vim.Math3d.Vector3, System.Single>)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Create
    path: ../src/Structs.cs
    startLine: 529
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Plane Create((Vector3 normal, float d) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{Vim.Math3d.Vector3,System.Single}
    return:
      type: Vim.Math3d.Plane
    content.vb: Public Shared Function Create(tuple As(normal As Vector3, d As Single)(Of Vector3 , Single)) As Plane
  overload: Vim.Math3d.Plane.Create*
  nameWithType.vb: Plane.Create((normal As Vector3, d As Single)(Of Vector3, Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.Plane.Create(System.ValueTuple(Of Vim.Math3d.Vector3, System.Single))
  name.vb: Create((normal As Vector3, d As Single)(Of Vector3, Single))
- uid: Vim.Math3d.Plane.Equals(System.Object)
  commentId: M:Vim.Math3d.Plane.Equals(System.Object)
  id: Equals(System.Object)
  parent: Vim.Math3d.Plane
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Plane.Equals(Object)
  fullName: Vim.Math3d.Plane.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Equals
    path: ../src/Structs.cs
    startLine: 530
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: Vim.Math3d.Plane.Equals*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.Plane.GetHashCode
  commentId: M:Vim.Math3d.Plane.GetHashCode
  id: GetHashCode
  parent: Vim.Math3d.Plane
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Plane.GetHashCode()
  fullName: Vim.Math3d.Plane.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: GetHashCode
    path: ../src/Structs.cs
    startLine: 531
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: Vim.Math3d.Plane.GetHashCode*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.Plane.ToString
  commentId: M:Vim.Math3d.Plane.ToString
  id: ToString
  parent: Vim.Math3d.Plane
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Plane.ToString()
  fullName: Vim.Math3d.Plane.ToString()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToString
    path: ../src/Structs.cs
    startLine: 532
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: Vim.Math3d.Plane.ToString*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.Plane.Deconstruct(Vim.Math3d.Vector3@,System.Single@)
  commentId: M:Vim.Math3d.Plane.Deconstruct(Vim.Math3d.Vector3@,System.Single@)
  id: Deconstruct(Vim.Math3d.Vector3@,System.Single@)
  parent: Vim.Math3d.Plane
  langs:
  - csharp
  - vb
  name: Deconstruct(out Vector3, out Single)
  nameWithType: Plane.Deconstruct(out Vector3, out Single)
  fullName: Vim.Math3d.Plane.Deconstruct(out Vim.Math3d.Vector3, out System.Single)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Deconstruct
    path: ../src/Structs.cs
    startLine: 533
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly void Deconstruct(out Vector3 normal, out float d)
    parameters:
    - id: normal
      type: Vim.Math3d.Vector3
    - id: d
      type: System.Single
    content.vb: Public Sub Deconstruct(ByRef normal As Vector3, ByRef d As Single)
  overload: Vim.Math3d.Plane.Deconstruct*
  nameWithType.vb: Plane.Deconstruct(ByRef Vector3, ByRef Single)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  fullName.vb: Vim.Math3d.Plane.Deconstruct(ByRef Vim.Math3d.Vector3, ByRef System.Single)
  name.vb: Deconstruct(ByRef Vector3, ByRef Single)
- uid: Vim.Math3d.Plane.Equals(Vim.Math3d.Plane)
  commentId: M:Vim.Math3d.Plane.Equals(Vim.Math3d.Plane)
  id: Equals(Vim.Math3d.Plane)
  parent: Vim.Math3d.Plane
  langs:
  - csharp
  - vb
  name: Equals(Plane)
  nameWithType: Plane.Equals(Plane)
  fullName: Vim.Math3d.Plane.Equals(Vim.Math3d.Plane)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Equals
    path: ../src/Structs.cs
    startLine: 534
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool Equals(Plane x)
    parameters:
    - id: x
      type: Vim.Math3d.Plane
    return:
      type: System.Boolean
    content.vb: Public Function Equals(x As Plane) As Boolean
  overload: Vim.Math3d.Plane.Equals*
  implements:
  - System.IEquatable{Vim.Math3d.Plane}.Equals(Vim.Math3d.Plane)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Plane.op_Equality(Vim.Math3d.Plane,Vim.Math3d.Plane)
  commentId: M:Vim.Math3d.Plane.op_Equality(Vim.Math3d.Plane,Vim.Math3d.Plane)
  id: op_Equality(Vim.Math3d.Plane,Vim.Math3d.Plane)
  parent: Vim.Math3d.Plane
  langs:
  - csharp
  - vb
  name: Equality(Plane, Plane)
  nameWithType: Plane.Equality(Plane, Plane)
  fullName: Vim.Math3d.Plane.Equality(Vim.Math3d.Plane, Vim.Math3d.Plane)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Equality
    path: ../src/Structs.cs
    startLine: 535
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator ==(Plane x0, Plane x1)
    parameters:
    - id: x0
      type: Vim.Math3d.Plane
    - id: x1
      type: Vim.Math3d.Plane
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(x0 As Plane, x1 As Plane) As Boolean
  overload: Vim.Math3d.Plane.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Plane.op_Inequality(Vim.Math3d.Plane,Vim.Math3d.Plane)
  commentId: M:Vim.Math3d.Plane.op_Inequality(Vim.Math3d.Plane,Vim.Math3d.Plane)
  id: op_Inequality(Vim.Math3d.Plane,Vim.Math3d.Plane)
  parent: Vim.Math3d.Plane
  langs:
  - csharp
  - vb
  name: Inequality(Plane, Plane)
  nameWithType: Plane.Inequality(Plane, Plane)
  fullName: Vim.Math3d.Plane.Inequality(Vim.Math3d.Plane, Vim.Math3d.Plane)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Inequality
    path: ../src/Structs.cs
    startLine: 536
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator !=(Plane x0, Plane x1)
    parameters:
    - id: x0
      type: Vim.Math3d.Plane
    - id: x1
      type: Vim.Math3d.Plane
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(x0 As Plane, x1 As Plane) As Boolean
  overload: Vim.Math3d.Plane.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Plane.op_Implicit(System.ValueTuple{Vim.Math3d.Vector3,System.Single})~Vim.Math3d.Plane
  commentId: M:Vim.Math3d.Plane.op_Implicit(System.ValueTuple{Vim.Math3d.Vector3,System.Single})~Vim.Math3d.Plane
  id: op_Implicit(System.ValueTuple{Vim.Math3d.Vector3,System.Single})~Vim.Math3d.Plane
  parent: Vim.Math3d.Plane
  langs:
  - csharp
  - vb
  name: Implicit((Vector3 normal, Single d) to Plane)
  nameWithType: Plane.Implicit((Vector3 normal, Single d) to Plane)
  fullName: Vim.Math3d.Plane.Implicit(System.ValueTuple<Vim.Math3d.Vector3, System.Single> to Vim.Math3d.Plane)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Implicit
    path: ../src/Structs.cs
    startLine: 537
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static implicit operator Plane((Vector3 normal, float d) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{Vim.Math3d.Vector3,System.Single}
    return:
      type: Vim.Math3d.Plane
    content.vb: Public Shared Widening Operator CType(tuple As(normal As Vector3, d As Single)(Of Vector3 , Single)) As Plane
  overload: Vim.Math3d.Plane.op_Implicit*
  nameWithType.vb: Plane.Widening((normal As Vector3, d As Single)(Of Vector3, Single) to Plane)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.Plane.Widening(System.ValueTuple(Of Vim.Math3d.Vector3, System.Single) to Vim.Math3d.Plane)
  name.vb: Widening((normal As Vector3, d As Single)(Of Vector3, Single) to Plane)
- uid: Vim.Math3d.Plane.op_Implicit(Vim.Math3d.Plane)~System.ValueTuple{Vim.Math3d.Vector3,System.Single}
  commentId: M:Vim.Math3d.Plane.op_Implicit(Vim.Math3d.Plane)~System.ValueTuple{Vim.Math3d.Vector3,System.Single}
  id: op_Implicit(Vim.Math3d.Plane)~System.ValueTuple{Vim.Math3d.Vector3,System.Single}
  parent: Vim.Math3d.Plane
  langs:
  - csharp
  - vb
  name: Implicit(Plane to (Vector3 normal, Single d))
  nameWithType: Plane.Implicit(Plane to (Vector3 normal, Single d))
  fullName: Vim.Math3d.Plane.Implicit(Vim.Math3d.Plane to System.ValueTuple<Vim.Math3d.Vector3, System.Single>)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Implicit
    path: ../src/Structs.cs
    startLine: 538
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static implicit operator (Vector3 normal, float d)(Plane self)
    parameters:
    - id: self
      type: Vim.Math3d.Plane
    return:
      type: System.ValueTuple{Vim.Math3d.Vector3,System.Single}
    content.vb: Public Shared Widening Operator CType(self As Plane) As(normal As Vector3, d As Single)(Of Vector3 , Single)
  overload: Vim.Math3d.Plane.op_Implicit*
  nameWithType.vb: Plane.Widening(Plane to (normal As Vector3, d As Single)(Of Vector3, Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.Plane.Widening(Vim.Math3d.Plane to System.ValueTuple(Of Vim.Math3d.Vector3, System.Single))
  name.vb: Widening(Plane to (normal As Vector3, d As Single)(Of Vector3, Single))
- uid: Vim.Math3d.Plane.AlmostEquals(Vim.Math3d.Plane,System.Single)
  commentId: M:Vim.Math3d.Plane.AlmostEquals(Vim.Math3d.Plane,System.Single)
  id: AlmostEquals(Vim.Math3d.Plane,System.Single)
  parent: Vim.Math3d.Plane
  langs:
  - csharp
  - vb
  name: AlmostEquals(Plane, Single)
  nameWithType: Plane.AlmostEquals(Plane, Single)
  fullName: Vim.Math3d.Plane.AlmostEquals(Vim.Math3d.Plane, System.Single)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: AlmostEquals
    path: ../src/Structs.cs
    startLine: 540
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool AlmostEquals(Plane x, float tolerance = 1E-07F)
    parameters:
    - id: x
      type: Vim.Math3d.Plane
    - id: tolerance
      type: System.Single
    return:
      type: System.Boolean
    content.vb: Public Function AlmostEquals(x As Plane, tolerance As Single = 1E-07F) As Boolean
  overload: Vim.Math3d.Plane.AlmostEquals*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Plane.Zero
  commentId: F:Vim.Math3d.Plane.Zero
  id: Zero
  parent: Vim.Math3d.Plane
  langs:
  - csharp
  - vb
  name: Zero
  nameWithType: Plane.Zero
  fullName: Vim.Math3d.Plane.Zero
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Zero
    path: ../src/Structs.cs
    startLine: 541
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Plane Zero
    return:
      type: Vim.Math3d.Plane
    content.vb: Public Shared Zero As Plane
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Plane.MinValue
  commentId: F:Vim.Math3d.Plane.MinValue
  id: MinValue
  parent: Vim.Math3d.Plane
  langs:
  - csharp
  - vb
  name: MinValue
  nameWithType: Plane.MinValue
  fullName: Vim.Math3d.Plane.MinValue
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MinValue
    path: ../src/Structs.cs
    startLine: 542
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Plane MinValue
    return:
      type: Vim.Math3d.Plane
    content.vb: Public Shared MinValue As Plane
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Plane.MaxValue
  commentId: F:Vim.Math3d.Plane.MaxValue
  id: MaxValue
  parent: Vim.Math3d.Plane
  langs:
  - csharp
  - vb
  name: MaxValue
  nameWithType: Plane.MaxValue
  fullName: Vim.Math3d.Plane.MaxValue
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MaxValue
    path: ../src/Structs.cs
    startLine: 543
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Plane MaxValue
    return:
      type: Vim.Math3d.Plane
    content.vb: Public Shared MaxValue As Plane
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Plane.SetNormal(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Plane.SetNormal(Vim.Math3d.Vector3)
  id: SetNormal(Vim.Math3d.Vector3)
  parent: Vim.Math3d.Plane
  langs:
  - csharp
  - vb
  name: SetNormal(Vector3)
  nameWithType: Plane.SetNormal(Vector3)
  fullName: Vim.Math3d.Plane.SetNormal(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SetNormal
    path: ../src/Structs.cs
    startLine: 544
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly Plane SetNormal(Vector3 x)
    parameters:
    - id: x
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Plane
    content.vb: Public Function SetNormal(x As Vector3) As Plane
  overload: Vim.Math3d.Plane.SetNormal*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Plane.SetD(System.Single)
  commentId: M:Vim.Math3d.Plane.SetD(System.Single)
  id: SetD(System.Single)
  parent: Vim.Math3d.Plane
  langs:
  - csharp
  - vb
  name: SetD(Single)
  nameWithType: Plane.SetD(Single)
  fullName: Vim.Math3d.Plane.SetD(System.Single)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SetD
    path: ../src/Structs.cs
    startLine: 545
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly Plane SetD(float x)
    parameters:
    - id: x
      type: System.Single
    return:
      type: Vim.Math3d.Plane
    content.vb: Public Function SetD(x As Single) As Plane
  overload: Vim.Math3d.Plane.SetD*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
references:
- uid: Vim.Math3d
  commentId: N:Vim.Math3d
  name: Vim.Math3d
  nameWithType: Vim.Math3d
  fullName: Vim.Math3d
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Plane}
  commentId: T:Vim.Math3d.ITransformable3D{Vim.Math3d.Plane}
  parent: Vim.Math3d
  definition: Vim.Math3d.ITransformable3D`1
  name: ITransformable3D<Plane>
  nameWithType: ITransformable3D<Plane>
  fullName: Vim.Math3d.ITransformable3D<Vim.Math3d.Plane>
  nameWithType.vb: ITransformable3D(Of Plane)
  fullName.vb: Vim.Math3d.ITransformable3D(Of Vim.Math3d.Plane)
  name.vb: ITransformable3D(Of Plane)
  spec.csharp:
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.Plane
    name: Plane
    nameWithType: Plane
    fullName: Vim.Math3d.Plane
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.Plane
    name: Plane
    nameWithType: Plane
    fullName: Vim.Math3d.Plane
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable{Vim.Math3d.Plane}
  commentId: T:System.IEquatable{Vim.Math3d.Plane}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Plane>
  nameWithType: IEquatable<Plane>
  fullName: System.IEquatable<Vim.Math3d.Plane>
  nameWithType.vb: IEquatable(Of Plane)
  fullName.vb: System.IEquatable(Of Vim.Math3d.Plane)
  name.vb: IEquatable(Of Plane)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.Plane
    name: Plane
    nameWithType: Plane
    fullName: Vim.Math3d.Plane
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.Plane
    name: Plane
    nameWithType: Plane
    fullName: Vim.Math3d.Plane
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Plane}.Vim.Math3d.Transformable3D.Transform``1(Vim.Math3d.Matrix4x4[])
  commentId: M:Vim.Math3d.Transformable3D.Transform``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Matrix4x4[])
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.Transform``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Matrix4x4[])
  name: Transform<Plane>(Matrix4x4[])
  nameWithType: Transformable3D.Transform<Plane>(Matrix4x4[])
  fullName: Vim.Math3d.Transformable3D.Transform<Vim.Math3d.Plane>(Vim.Math3d.Matrix4x4[])
  nameWithType.vb: Transformable3D.Transform(Of Plane)(Matrix4x4())
  fullName.vb: Vim.Math3d.Transformable3D.Transform(Of Vim.Math3d.Plane)(Vim.Math3d.Matrix4x4())
  name.vb: Transform(Of Plane)(Matrix4x4())
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Transform``1(Vim.Math3d.Matrix4x4[])
    name: Transform<Plane>
    nameWithType: Transformable3D.Transform<Plane>
    fullName: Vim.Math3d.Transformable3D.Transform<Vim.Math3d.Plane>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Matrix4x4
    name: Matrix4x4
    nameWithType: Matrix4x4
    fullName: Vim.Math3d.Matrix4x4
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Transform``1(Vim.Math3d.Matrix4x4[])
    name: Transform(Of Plane)
    nameWithType: Transformable3D.Transform(Of Plane)
    fullName: Vim.Math3d.Transformable3D.Transform(Of Vim.Math3d.Plane)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Matrix4x4
    name: Matrix4x4
    nameWithType: Matrix4x4
    fullName: Vim.Math3d.Matrix4x4
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Plane}.Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
  name: Translate<Plane>(Vector3)
  nameWithType: Transformable3D.Translate<Plane>(Vector3)
  fullName: Vim.Math3d.Transformable3D.Translate<Vim.Math3d.Plane>(Vim.Math3d.Vector3)
  nameWithType.vb: Transformable3D.Translate(Of Plane)(Vector3)
  fullName.vb: Vim.Math3d.Transformable3D.Translate(Of Vim.Math3d.Plane)(Vim.Math3d.Vector3)
  name.vb: Translate(Of Plane)(Vector3)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.Vector3)
    name: Translate<Plane>
    nameWithType: Transformable3D.Translate<Plane>
    fullName: Vim.Math3d.Transformable3D.Translate<Vim.Math3d.Plane>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.Vector3)
    name: Translate(Of Plane)
    nameWithType: Transformable3D.Translate(Of Plane)
    fullName: Vim.Math3d.Transformable3D.Translate(Of Vim.Math3d.Plane)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Plane}.Vim.Math3d.Transformable3D.Translate``1(System.Single,System.Single,System.Single)
  commentId: M:Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  name: Translate<Plane>(Single, Single, Single)
  nameWithType: Transformable3D.Translate<Plane>(Single, Single, Single)
  fullName: Vim.Math3d.Transformable3D.Translate<Vim.Math3d.Plane>(System.Single, System.Single, System.Single)
  nameWithType.vb: Transformable3D.Translate(Of Plane)(Single, Single, Single)
  fullName.vb: Vim.Math3d.Transformable3D.Translate(Of Vim.Math3d.Plane)(System.Single, System.Single, System.Single)
  name.vb: Translate(Of Plane)(Single, Single, Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Translate``1(System.Single,System.Single,System.Single)
    name: Translate<Plane>
    nameWithType: Transformable3D.Translate<Plane>
    fullName: Vim.Math3d.Transformable3D.Translate<Vim.Math3d.Plane>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Translate``1(System.Single,System.Single,System.Single)
    name: Translate(Of Plane)
    nameWithType: Transformable3D.Translate(Of Plane)
    fullName: Vim.Math3d.Transformable3D.Translate(Of Vim.Math3d.Plane)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Plane}.Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.Quaternion)
  commentId: M:Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Quaternion)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Quaternion)
  name: Rotate<Plane>(Quaternion)
  nameWithType: Transformable3D.Rotate<Plane>(Quaternion)
  fullName: Vim.Math3d.Transformable3D.Rotate<Vim.Math3d.Plane>(Vim.Math3d.Quaternion)
  nameWithType.vb: Transformable3D.Rotate(Of Plane)(Quaternion)
  fullName.vb: Vim.Math3d.Transformable3D.Rotate(Of Vim.Math3d.Plane)(Vim.Math3d.Quaternion)
  name.vb: Rotate(Of Plane)(Quaternion)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.Quaternion)
    name: Rotate<Plane>
    nameWithType: Transformable3D.Rotate<Plane>
    fullName: Vim.Math3d.Transformable3D.Rotate<Vim.Math3d.Plane>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Quaternion
    name: Quaternion
    nameWithType: Quaternion
    fullName: Vim.Math3d.Quaternion
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.Quaternion)
    name: Rotate(Of Plane)
    nameWithType: Transformable3D.Rotate(Of Plane)
    fullName: Vim.Math3d.Transformable3D.Rotate(Of Vim.Math3d.Plane)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Quaternion
    name: Quaternion
    nameWithType: Quaternion
    fullName: Vim.Math3d.Quaternion
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Plane}.Vim.Math3d.Transformable3D.Scale``1(System.Single)
  commentId: M:Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  name: Scale<Plane>(Single)
  nameWithType: Transformable3D.Scale<Plane>(Single)
  fullName: Vim.Math3d.Transformable3D.Scale<Vim.Math3d.Plane>(System.Single)
  nameWithType.vb: Transformable3D.Scale(Of Plane)(Single)
  fullName.vb: Vim.Math3d.Transformable3D.Scale(Of Vim.Math3d.Plane)(System.Single)
  name.vb: Scale(Of Plane)(Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Scale``1(System.Single)
    name: Scale<Plane>
    nameWithType: Transformable3D.Scale<Plane>
    fullName: Vim.Math3d.Transformable3D.Scale<Vim.Math3d.Plane>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Scale``1(System.Single)
    name: Scale(Of Plane)
    nameWithType: Transformable3D.Scale(Of Plane)
    fullName: Vim.Math3d.Transformable3D.Scale(Of Vim.Math3d.Plane)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Plane}.Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
  name: Scale<Plane>(Vector3)
  nameWithType: Transformable3D.Scale<Plane>(Vector3)
  fullName: Vim.Math3d.Transformable3D.Scale<Vim.Math3d.Plane>(Vim.Math3d.Vector3)
  nameWithType.vb: Transformable3D.Scale(Of Plane)(Vector3)
  fullName.vb: Vim.Math3d.Transformable3D.Scale(Of Vim.Math3d.Plane)(Vim.Math3d.Vector3)
  name.vb: Scale(Of Plane)(Vector3)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.Vector3)
    name: Scale<Plane>
    nameWithType: Transformable3D.Scale<Plane>
    fullName: Vim.Math3d.Transformable3D.Scale<Vim.Math3d.Plane>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.Vector3)
    name: Scale(Of Plane)
    nameWithType: Transformable3D.Scale(Of Plane)
    fullName: Vim.Math3d.Transformable3D.Scale(Of Vim.Math3d.Plane)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Plane}.Vim.Math3d.Transformable3D.Scale``1(System.Single,System.Single,System.Single)
  commentId: M:Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  name: Scale<Plane>(Single, Single, Single)
  nameWithType: Transformable3D.Scale<Plane>(Single, Single, Single)
  fullName: Vim.Math3d.Transformable3D.Scale<Vim.Math3d.Plane>(System.Single, System.Single, System.Single)
  nameWithType.vb: Transformable3D.Scale(Of Plane)(Single, Single, Single)
  fullName.vb: Vim.Math3d.Transformable3D.Scale(Of Vim.Math3d.Plane)(System.Single, System.Single, System.Single)
  name.vb: Scale(Of Plane)(Single, Single, Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Scale``1(System.Single,System.Single,System.Single)
    name: Scale<Plane>
    nameWithType: Transformable3D.Scale<Plane>
    fullName: Vim.Math3d.Transformable3D.Scale<Vim.Math3d.Plane>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Scale``1(System.Single,System.Single,System.Single)
    name: Scale(Of Plane)
    nameWithType: Transformable3D.Scale(Of Plane)
    fullName: Vim.Math3d.Transformable3D.Scale(Of Vim.Math3d.Plane)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Plane}.Vim.Math3d.Transformable3D.ScaleX``1(System.Single)
  commentId: M:Vim.Math3d.Transformable3D.ScaleX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.ScaleX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  name: ScaleX<Plane>(Single)
  nameWithType: Transformable3D.ScaleX<Plane>(Single)
  fullName: Vim.Math3d.Transformable3D.ScaleX<Vim.Math3d.Plane>(System.Single)
  nameWithType.vb: Transformable3D.ScaleX(Of Plane)(Single)
  fullName.vb: Vim.Math3d.Transformable3D.ScaleX(Of Vim.Math3d.Plane)(System.Single)
  name.vb: ScaleX(Of Plane)(Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.ScaleX``1(System.Single)
    name: ScaleX<Plane>
    nameWithType: Transformable3D.ScaleX<Plane>
    fullName: Vim.Math3d.Transformable3D.ScaleX<Vim.Math3d.Plane>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.ScaleX``1(System.Single)
    name: ScaleX(Of Plane)
    nameWithType: Transformable3D.ScaleX(Of Plane)
    fullName: Vim.Math3d.Transformable3D.ScaleX(Of Vim.Math3d.Plane)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Plane}.Vim.Math3d.Transformable3D.ScaleY``1(System.Single)
  commentId: M:Vim.Math3d.Transformable3D.ScaleY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.ScaleY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  name: ScaleY<Plane>(Single)
  nameWithType: Transformable3D.ScaleY<Plane>(Single)
  fullName: Vim.Math3d.Transformable3D.ScaleY<Vim.Math3d.Plane>(System.Single)
  nameWithType.vb: Transformable3D.ScaleY(Of Plane)(Single)
  fullName.vb: Vim.Math3d.Transformable3D.ScaleY(Of Vim.Math3d.Plane)(System.Single)
  name.vb: ScaleY(Of Plane)(Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.ScaleY``1(System.Single)
    name: ScaleY<Plane>
    nameWithType: Transformable3D.ScaleY<Plane>
    fullName: Vim.Math3d.Transformable3D.ScaleY<Vim.Math3d.Plane>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.ScaleY``1(System.Single)
    name: ScaleY(Of Plane)
    nameWithType: Transformable3D.ScaleY(Of Plane)
    fullName: Vim.Math3d.Transformable3D.ScaleY(Of Vim.Math3d.Plane)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Plane}.Vim.Math3d.Transformable3D.ScaleZ``1(System.Single)
  commentId: M:Vim.Math3d.Transformable3D.ScaleZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.ScaleZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  name: ScaleZ<Plane>(Single)
  nameWithType: Transformable3D.ScaleZ<Plane>(Single)
  fullName: Vim.Math3d.Transformable3D.ScaleZ<Vim.Math3d.Plane>(System.Single)
  nameWithType.vb: Transformable3D.ScaleZ(Of Plane)(Single)
  fullName.vb: Vim.Math3d.Transformable3D.ScaleZ(Of Vim.Math3d.Plane)(System.Single)
  name.vb: ScaleZ(Of Plane)(Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.ScaleZ``1(System.Single)
    name: ScaleZ<Plane>
    nameWithType: Transformable3D.ScaleZ<Plane>
    fullName: Vim.Math3d.Transformable3D.ScaleZ<Vim.Math3d.Plane>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.ScaleZ``1(System.Single)
    name: ScaleZ(Of Plane)
    nameWithType: Transformable3D.ScaleZ(Of Plane)
    fullName: Vim.Math3d.Transformable3D.ScaleZ(Of Vim.Math3d.Plane)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Plane}.Vim.Math3d.Transformable3D.LookAt``1(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Transformable3D.LookAt``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.LookAt``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  name: LookAt<Plane>(Vector3, Vector3, Vector3)
  nameWithType: Transformable3D.LookAt<Plane>(Vector3, Vector3, Vector3)
  fullName: Vim.Math3d.Transformable3D.LookAt<Vim.Math3d.Plane>(Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  nameWithType.vb: Transformable3D.LookAt(Of Plane)(Vector3, Vector3, Vector3)
  fullName.vb: Vim.Math3d.Transformable3D.LookAt(Of Vim.Math3d.Plane)(Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  name.vb: LookAt(Of Plane)(Vector3, Vector3, Vector3)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.LookAt``1(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
    name: LookAt<Plane>
    nameWithType: Transformable3D.LookAt<Plane>
    fullName: Vim.Math3d.Transformable3D.LookAt<Vim.Math3d.Plane>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.LookAt``1(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
    name: LookAt(Of Plane)
    nameWithType: Transformable3D.LookAt(Of Plane)
    fullName: Vim.Math3d.Transformable3D.LookAt(Of Vim.Math3d.Plane)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Plane}.Vim.Math3d.Transformable3D.RotateAround``1(Vim.Math3d.Vector3,System.Single)
  commentId: M:Vim.Math3d.Transformable3D.RotateAround``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,System.Single)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.RotateAround``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,System.Single)
  name: RotateAround<Plane>(Vector3, Single)
  nameWithType: Transformable3D.RotateAround<Plane>(Vector3, Single)
  fullName: Vim.Math3d.Transformable3D.RotateAround<Vim.Math3d.Plane>(Vim.Math3d.Vector3, System.Single)
  nameWithType.vb: Transformable3D.RotateAround(Of Plane)(Vector3, Single)
  fullName.vb: Vim.Math3d.Transformable3D.RotateAround(Of Vim.Math3d.Plane)(Vim.Math3d.Vector3, System.Single)
  name.vb: RotateAround(Of Plane)(Vector3, Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.RotateAround``1(Vim.Math3d.Vector3,System.Single)
    name: RotateAround<Plane>
    nameWithType: Transformable3D.RotateAround<Plane>
    fullName: Vim.Math3d.Transformable3D.RotateAround<Vim.Math3d.Plane>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.RotateAround``1(Vim.Math3d.Vector3,System.Single)
    name: RotateAround(Of Plane)
    nameWithType: Transformable3D.RotateAround(Of Plane)
    fullName: Vim.Math3d.Transformable3D.RotateAround(Of Vim.Math3d.Plane)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Plane}.Vim.Math3d.Transformable3D.Rotate``1(System.Single,System.Single,System.Single)
  commentId: M:Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  name: Rotate<Plane>(Single, Single, Single)
  nameWithType: Transformable3D.Rotate<Plane>(Single, Single, Single)
  fullName: Vim.Math3d.Transformable3D.Rotate<Vim.Math3d.Plane>(System.Single, System.Single, System.Single)
  nameWithType.vb: Transformable3D.Rotate(Of Plane)(Single, Single, Single)
  fullName.vb: Vim.Math3d.Transformable3D.Rotate(Of Vim.Math3d.Plane)(System.Single, System.Single, System.Single)
  name.vb: Rotate(Of Plane)(Single, Single, Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Rotate``1(System.Single,System.Single,System.Single)
    name: Rotate<Plane>
    nameWithType: Transformable3D.Rotate<Plane>
    fullName: Vim.Math3d.Transformable3D.Rotate<Vim.Math3d.Plane>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Rotate``1(System.Single,System.Single,System.Single)
    name: Rotate(Of Plane)
    nameWithType: Transformable3D.Rotate(Of Plane)
    fullName: Vim.Math3d.Transformable3D.Rotate(Of Vim.Math3d.Plane)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Plane}.Vim.Math3d.Transformable3D.Reflect``1(Vim.Math3d.Plane)
  commentId: M:Vim.Math3d.Transformable3D.Reflect``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Plane)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.Reflect``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Plane)
  name: Reflect<Plane>(Plane)
  nameWithType: Transformable3D.Reflect<Plane>(Plane)
  fullName: Vim.Math3d.Transformable3D.Reflect<Vim.Math3d.Plane>(Vim.Math3d.Plane)
  nameWithType.vb: Transformable3D.Reflect(Of Plane)(Plane)
  fullName.vb: Vim.Math3d.Transformable3D.Reflect(Of Vim.Math3d.Plane)(Vim.Math3d.Plane)
  name.vb: Reflect(Of Plane)(Plane)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Reflect``1(Vim.Math3d.Plane)
    name: Reflect<Plane>
    nameWithType: Transformable3D.Reflect<Plane>
    fullName: Vim.Math3d.Transformable3D.Reflect<Vim.Math3d.Plane>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Plane
    name: Plane
    nameWithType: Plane
    fullName: Vim.Math3d.Plane
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Reflect``1(Vim.Math3d.Plane)
    name: Reflect(Of Plane)
    nameWithType: Transformable3D.Reflect(Of Plane)
    fullName: Vim.Math3d.Transformable3D.Reflect(Of Vim.Math3d.Plane)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Plane
    name: Plane
    nameWithType: Plane
    fullName: Vim.Math3d.Plane
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Plane}.Vim.Math3d.Transformable3D.RotateX``1(System.Single)
  commentId: M:Vim.Math3d.Transformable3D.RotateX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.RotateX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  name: RotateX<Plane>(Single)
  nameWithType: Transformable3D.RotateX<Plane>(Single)
  fullName: Vim.Math3d.Transformable3D.RotateX<Vim.Math3d.Plane>(System.Single)
  nameWithType.vb: Transformable3D.RotateX(Of Plane)(Single)
  fullName.vb: Vim.Math3d.Transformable3D.RotateX(Of Vim.Math3d.Plane)(System.Single)
  name.vb: RotateX(Of Plane)(Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.RotateX``1(System.Single)
    name: RotateX<Plane>
    nameWithType: Transformable3D.RotateX<Plane>
    fullName: Vim.Math3d.Transformable3D.RotateX<Vim.Math3d.Plane>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.RotateX``1(System.Single)
    name: RotateX(Of Plane)
    nameWithType: Transformable3D.RotateX(Of Plane)
    fullName: Vim.Math3d.Transformable3D.RotateX(Of Vim.Math3d.Plane)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Plane}.Vim.Math3d.Transformable3D.RotateY``1(System.Single)
  commentId: M:Vim.Math3d.Transformable3D.RotateY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.RotateY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  name: RotateY<Plane>(Single)
  nameWithType: Transformable3D.RotateY<Plane>(Single)
  fullName: Vim.Math3d.Transformable3D.RotateY<Vim.Math3d.Plane>(System.Single)
  nameWithType.vb: Transformable3D.RotateY(Of Plane)(Single)
  fullName.vb: Vim.Math3d.Transformable3D.RotateY(Of Vim.Math3d.Plane)(System.Single)
  name.vb: RotateY(Of Plane)(Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.RotateY``1(System.Single)
    name: RotateY<Plane>
    nameWithType: Transformable3D.RotateY<Plane>
    fullName: Vim.Math3d.Transformable3D.RotateY<Vim.Math3d.Plane>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.RotateY``1(System.Single)
    name: RotateY(Of Plane)
    nameWithType: Transformable3D.RotateY(Of Plane)
    fullName: Vim.Math3d.Transformable3D.RotateY(Of Vim.Math3d.Plane)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Plane}.Vim.Math3d.Transformable3D.RotateZ``1(System.Single)
  commentId: M:Vim.Math3d.Transformable3D.RotateZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.RotateZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  name: RotateZ<Plane>(Single)
  nameWithType: Transformable3D.RotateZ<Plane>(Single)
  fullName: Vim.Math3d.Transformable3D.RotateZ<Vim.Math3d.Plane>(System.Single)
  nameWithType.vb: Transformable3D.RotateZ(Of Plane)(Single)
  fullName.vb: Vim.Math3d.Transformable3D.RotateZ(Of Vim.Math3d.Plane)(System.Single)
  name.vb: RotateZ(Of Plane)(Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.RotateZ``1(System.Single)
    name: RotateZ<Plane>
    nameWithType: Transformable3D.RotateZ<Plane>
    fullName: Vim.Math3d.Transformable3D.RotateZ<Vim.Math3d.Plane>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.RotateZ``1(System.Single)
    name: RotateZ(Of Plane)
    nameWithType: Transformable3D.RotateZ(Of Plane)
    fullName: Vim.Math3d.Transformable3D.RotateZ(Of Vim.Math3d.Plane)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Plane}.Vim.Math3d.Transformable3D.TranslateRotateScale``1(Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Transformable3D.TranslateRotateScale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.TranslateRotateScale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
  name: TranslateRotateScale<Plane>(Vector3, Quaternion, Vector3)
  nameWithType: Transformable3D.TranslateRotateScale<Plane>(Vector3, Quaternion, Vector3)
  fullName: Vim.Math3d.Transformable3D.TranslateRotateScale<Vim.Math3d.Plane>(Vim.Math3d.Vector3, Vim.Math3d.Quaternion, Vim.Math3d.Vector3)
  nameWithType.vb: Transformable3D.TranslateRotateScale(Of Plane)(Vector3, Quaternion, Vector3)
  fullName.vb: Vim.Math3d.Transformable3D.TranslateRotateScale(Of Vim.Math3d.Plane)(Vim.Math3d.Vector3, Vim.Math3d.Quaternion, Vim.Math3d.Vector3)
  name.vb: TranslateRotateScale(Of Plane)(Vector3, Quaternion, Vector3)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.TranslateRotateScale``1(Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
    name: TranslateRotateScale<Plane>
    nameWithType: Transformable3D.TranslateRotateScale<Plane>
    fullName: Vim.Math3d.Transformable3D.TranslateRotateScale<Vim.Math3d.Plane>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Quaternion
    name: Quaternion
    nameWithType: Quaternion
    fullName: Vim.Math3d.Quaternion
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.TranslateRotateScale``1(Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
    name: TranslateRotateScale(Of Plane)
    nameWithType: Transformable3D.TranslateRotateScale(Of Plane)
    fullName: Vim.Math3d.Transformable3D.TranslateRotateScale(Of Vim.Math3d.Plane)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Quaternion
    name: Quaternion
    nameWithType: Quaternion
    fullName: Vim.Math3d.Quaternion
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D`1
  commentId: T:Vim.Math3d.ITransformable3D`1
  name: ITransformable3D<TSelf>
  nameWithType: ITransformable3D<TSelf>
  fullName: Vim.Math3d.ITransformable3D<TSelf>
  nameWithType.vb: ITransformable3D(Of TSelf)
  fullName.vb: Vim.Math3d.ITransformable3D(Of TSelf)
  name.vb: ITransformable3D(Of TSelf)
  spec.csharp:
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: TSelf
    nameWithType: TSelf
    fullName: TSelf
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSelf
    nameWithType: TSelf
    fullName: TSelf
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Vim.Math3d.Transformable3D.Transform``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Matrix4x4[])
  commentId: M:Vim.Math3d.Transformable3D.Transform``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Matrix4x4[])
  name: Transform<T>(ITransformable3D<T>, Matrix4x4[])
  nameWithType: Transformable3D.Transform<T>(ITransformable3D<T>, Matrix4x4[])
  fullName: Vim.Math3d.Transformable3D.Transform<T>(Vim.Math3d.ITransformable3D<T>, Vim.Math3d.Matrix4x4[])
  nameWithType.vb: Transformable3D.Transform(Of T)(ITransformable3D(Of T), Matrix4x4())
  fullName.vb: Vim.Math3d.Transformable3D.Transform(Of T)(Vim.Math3d.ITransformable3D(Of T), Vim.Math3d.Matrix4x4())
  name.vb: Transform(Of T)(ITransformable3D(Of T), Matrix4x4())
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Transform``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Matrix4x4[])
    name: Transform<T>
    nameWithType: Transformable3D.Transform<T>
    fullName: Vim.Math3d.Transformable3D.Transform<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Matrix4x4
    name: Matrix4x4
    nameWithType: Matrix4x4
    fullName: Vim.Math3d.Matrix4x4
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Transform``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Matrix4x4[])
    name: Transform(Of T)
    nameWithType: Transformable3D.Transform(Of T)
    fullName: Vim.Math3d.Transformable3D.Transform(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Matrix4x4
    name: Matrix4x4
    nameWithType: Matrix4x4
    fullName: Vim.Math3d.Matrix4x4
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D
  commentId: T:Vim.Math3d.Transformable3D
  parent: Vim.Math3d
  name: Transformable3D
  nameWithType: Transformable3D
  fullName: Vim.Math3d.Transformable3D
- uid: Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
  name: Translate<T>(ITransformable3D<T>, Vector3)
  nameWithType: Transformable3D.Translate<T>(ITransformable3D<T>, Vector3)
  fullName: Vim.Math3d.Transformable3D.Translate<T>(Vim.Math3d.ITransformable3D<T>, Vim.Math3d.Vector3)
  nameWithType.vb: Transformable3D.Translate(Of T)(ITransformable3D(Of T), Vector3)
  fullName.vb: Vim.Math3d.Transformable3D.Translate(Of T)(Vim.Math3d.ITransformable3D(Of T), Vim.Math3d.Vector3)
  name.vb: Translate(Of T)(ITransformable3D(Of T), Vector3)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
    name: Translate<T>
    nameWithType: Transformable3D.Translate<T>
    fullName: Vim.Math3d.Transformable3D.Translate<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
    name: Translate(Of T)
    nameWithType: Transformable3D.Translate(Of T)
    fullName: Vim.Math3d.Transformable3D.Translate(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  commentId: M:Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  isExternal: true
  name: Translate<T>(ITransformable3D<T>, Single, Single, Single)
  nameWithType: Transformable3D.Translate<T>(ITransformable3D<T>, Single, Single, Single)
  fullName: Vim.Math3d.Transformable3D.Translate<T>(Vim.Math3d.ITransformable3D<T>, System.Single, System.Single, System.Single)
  nameWithType.vb: Transformable3D.Translate(Of T)(ITransformable3D(Of T), Single, Single, Single)
  fullName.vb: Vim.Math3d.Transformable3D.Translate(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single, System.Single, System.Single)
  name.vb: Translate(Of T)(ITransformable3D(Of T), Single, Single, Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
    name: Translate<T>
    nameWithType: Transformable3D.Translate<T>
    fullName: Vim.Math3d.Transformable3D.Translate<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
    name: Translate(Of T)
    nameWithType: Transformable3D.Translate(Of T)
    fullName: Vim.Math3d.Transformable3D.Translate(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Quaternion)
  commentId: M:Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Quaternion)
  name: Rotate<T>(ITransformable3D<T>, Quaternion)
  nameWithType: Transformable3D.Rotate<T>(ITransformable3D<T>, Quaternion)
  fullName: Vim.Math3d.Transformable3D.Rotate<T>(Vim.Math3d.ITransformable3D<T>, Vim.Math3d.Quaternion)
  nameWithType.vb: Transformable3D.Rotate(Of T)(ITransformable3D(Of T), Quaternion)
  fullName.vb: Vim.Math3d.Transformable3D.Rotate(Of T)(Vim.Math3d.ITransformable3D(Of T), Vim.Math3d.Quaternion)
  name.vb: Rotate(Of T)(ITransformable3D(Of T), Quaternion)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Quaternion)
    name: Rotate<T>
    nameWithType: Transformable3D.Rotate<T>
    fullName: Vim.Math3d.Transformable3D.Rotate<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Quaternion
    name: Quaternion
    nameWithType: Quaternion
    fullName: Vim.Math3d.Quaternion
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Quaternion)
    name: Rotate(Of T)
    nameWithType: Transformable3D.Rotate(Of T)
    fullName: Vim.Math3d.Transformable3D.Rotate(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Quaternion
    name: Quaternion
    nameWithType: Quaternion
    fullName: Vim.Math3d.Quaternion
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  commentId: M:Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  isExternal: true
  name: Scale<T>(ITransformable3D<T>, Single)
  nameWithType: Transformable3D.Scale<T>(ITransformable3D<T>, Single)
  fullName: Vim.Math3d.Transformable3D.Scale<T>(Vim.Math3d.ITransformable3D<T>, System.Single)
  nameWithType.vb: Transformable3D.Scale(Of T)(ITransformable3D(Of T), Single)
  fullName.vb: Vim.Math3d.Transformable3D.Scale(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single)
  name.vb: Scale(Of T)(ITransformable3D(Of T), Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: Scale<T>
    nameWithType: Transformable3D.Scale<T>
    fullName: Vim.Math3d.Transformable3D.Scale<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: Scale(Of T)
    nameWithType: Transformable3D.Scale(Of T)
    fullName: Vim.Math3d.Transformable3D.Scale(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
  name: Scale<T>(ITransformable3D<T>, Vector3)
  nameWithType: Transformable3D.Scale<T>(ITransformable3D<T>, Vector3)
  fullName: Vim.Math3d.Transformable3D.Scale<T>(Vim.Math3d.ITransformable3D<T>, Vim.Math3d.Vector3)
  nameWithType.vb: Transformable3D.Scale(Of T)(ITransformable3D(Of T), Vector3)
  fullName.vb: Vim.Math3d.Transformable3D.Scale(Of T)(Vim.Math3d.ITransformable3D(Of T), Vim.Math3d.Vector3)
  name.vb: Scale(Of T)(ITransformable3D(Of T), Vector3)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
    name: Scale<T>
    nameWithType: Transformable3D.Scale<T>
    fullName: Vim.Math3d.Transformable3D.Scale<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
    name: Scale(Of T)
    nameWithType: Transformable3D.Scale(Of T)
    fullName: Vim.Math3d.Transformable3D.Scale(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  commentId: M:Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  isExternal: true
  name: Scale<T>(ITransformable3D<T>, Single, Single, Single)
  nameWithType: Transformable3D.Scale<T>(ITransformable3D<T>, Single, Single, Single)
  fullName: Vim.Math3d.Transformable3D.Scale<T>(Vim.Math3d.ITransformable3D<T>, System.Single, System.Single, System.Single)
  nameWithType.vb: Transformable3D.Scale(Of T)(ITransformable3D(Of T), Single, Single, Single)
  fullName.vb: Vim.Math3d.Transformable3D.Scale(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single, System.Single, System.Single)
  name.vb: Scale(Of T)(ITransformable3D(Of T), Single, Single, Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
    name: Scale<T>
    nameWithType: Transformable3D.Scale<T>
    fullName: Vim.Math3d.Transformable3D.Scale<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
    name: Scale(Of T)
    nameWithType: Transformable3D.Scale(Of T)
    fullName: Vim.Math3d.Transformable3D.Scale(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.ScaleX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  commentId: M:Vim.Math3d.Transformable3D.ScaleX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  isExternal: true
  name: ScaleX<T>(ITransformable3D<T>, Single)
  nameWithType: Transformable3D.ScaleX<T>(ITransformable3D<T>, Single)
  fullName: Vim.Math3d.Transformable3D.ScaleX<T>(Vim.Math3d.ITransformable3D<T>, System.Single)
  nameWithType.vb: Transformable3D.ScaleX(Of T)(ITransformable3D(Of T), Single)
  fullName.vb: Vim.Math3d.Transformable3D.ScaleX(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single)
  name.vb: ScaleX(Of T)(ITransformable3D(Of T), Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.ScaleX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: ScaleX<T>
    nameWithType: Transformable3D.ScaleX<T>
    fullName: Vim.Math3d.Transformable3D.ScaleX<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.ScaleX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: ScaleX(Of T)
    nameWithType: Transformable3D.ScaleX(Of T)
    fullName: Vim.Math3d.Transformable3D.ScaleX(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.ScaleY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  commentId: M:Vim.Math3d.Transformable3D.ScaleY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  isExternal: true
  name: ScaleY<T>(ITransformable3D<T>, Single)
  nameWithType: Transformable3D.ScaleY<T>(ITransformable3D<T>, Single)
  fullName: Vim.Math3d.Transformable3D.ScaleY<T>(Vim.Math3d.ITransformable3D<T>, System.Single)
  nameWithType.vb: Transformable3D.ScaleY(Of T)(ITransformable3D(Of T), Single)
  fullName.vb: Vim.Math3d.Transformable3D.ScaleY(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single)
  name.vb: ScaleY(Of T)(ITransformable3D(Of T), Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.ScaleY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: ScaleY<T>
    nameWithType: Transformable3D.ScaleY<T>
    fullName: Vim.Math3d.Transformable3D.ScaleY<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.ScaleY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: ScaleY(Of T)
    nameWithType: Transformable3D.ScaleY(Of T)
    fullName: Vim.Math3d.Transformable3D.ScaleY(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.ScaleZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  commentId: M:Vim.Math3d.Transformable3D.ScaleZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  isExternal: true
  name: ScaleZ<T>(ITransformable3D<T>, Single)
  nameWithType: Transformable3D.ScaleZ<T>(ITransformable3D<T>, Single)
  fullName: Vim.Math3d.Transformable3D.ScaleZ<T>(Vim.Math3d.ITransformable3D<T>, System.Single)
  nameWithType.vb: Transformable3D.ScaleZ(Of T)(ITransformable3D(Of T), Single)
  fullName.vb: Vim.Math3d.Transformable3D.ScaleZ(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single)
  name.vb: ScaleZ(Of T)(ITransformable3D(Of T), Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.ScaleZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: ScaleZ<T>
    nameWithType: Transformable3D.ScaleZ<T>
    fullName: Vim.Math3d.Transformable3D.ScaleZ<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.ScaleZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: ScaleZ(Of T)
    nameWithType: Transformable3D.ScaleZ(Of T)
    fullName: Vim.Math3d.Transformable3D.ScaleZ(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.LookAt``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Transformable3D.LookAt``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  name: LookAt<T>(ITransformable3D<T>, Vector3, Vector3, Vector3)
  nameWithType: Transformable3D.LookAt<T>(ITransformable3D<T>, Vector3, Vector3, Vector3)
  fullName: Vim.Math3d.Transformable3D.LookAt<T>(Vim.Math3d.ITransformable3D<T>, Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  nameWithType.vb: Transformable3D.LookAt(Of T)(ITransformable3D(Of T), Vector3, Vector3, Vector3)
  fullName.vb: Vim.Math3d.Transformable3D.LookAt(Of T)(Vim.Math3d.ITransformable3D(Of T), Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  name.vb: LookAt(Of T)(ITransformable3D(Of T), Vector3, Vector3, Vector3)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.LookAt``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
    name: LookAt<T>
    nameWithType: Transformable3D.LookAt<T>
    fullName: Vim.Math3d.Transformable3D.LookAt<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.LookAt``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
    name: LookAt(Of T)
    nameWithType: Transformable3D.LookAt(Of T)
    fullName: Vim.Math3d.Transformable3D.LookAt(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.RotateAround``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,System.Single)
  commentId: M:Vim.Math3d.Transformable3D.RotateAround``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,System.Single)
  isExternal: true
  name: RotateAround<T>(ITransformable3D<T>, Vector3, Single)
  nameWithType: Transformable3D.RotateAround<T>(ITransformable3D<T>, Vector3, Single)
  fullName: Vim.Math3d.Transformable3D.RotateAround<T>(Vim.Math3d.ITransformable3D<T>, Vim.Math3d.Vector3, System.Single)
  nameWithType.vb: Transformable3D.RotateAround(Of T)(ITransformable3D(Of T), Vector3, Single)
  fullName.vb: Vim.Math3d.Transformable3D.RotateAround(Of T)(Vim.Math3d.ITransformable3D(Of T), Vim.Math3d.Vector3, System.Single)
  name.vb: RotateAround(Of T)(ITransformable3D(Of T), Vector3, Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.RotateAround``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,System.Single)
    name: RotateAround<T>
    nameWithType: Transformable3D.RotateAround<T>
    fullName: Vim.Math3d.Transformable3D.RotateAround<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.RotateAround``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,System.Single)
    name: RotateAround(Of T)
    nameWithType: Transformable3D.RotateAround(Of T)
    fullName: Vim.Math3d.Transformable3D.RotateAround(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  commentId: M:Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  isExternal: true
  name: Rotate<T>(ITransformable3D<T>, Single, Single, Single)
  nameWithType: Transformable3D.Rotate<T>(ITransformable3D<T>, Single, Single, Single)
  fullName: Vim.Math3d.Transformable3D.Rotate<T>(Vim.Math3d.ITransformable3D<T>, System.Single, System.Single, System.Single)
  nameWithType.vb: Transformable3D.Rotate(Of T)(ITransformable3D(Of T), Single, Single, Single)
  fullName.vb: Vim.Math3d.Transformable3D.Rotate(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single, System.Single, System.Single)
  name.vb: Rotate(Of T)(ITransformable3D(Of T), Single, Single, Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
    name: Rotate<T>
    nameWithType: Transformable3D.Rotate<T>
    fullName: Vim.Math3d.Transformable3D.Rotate<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
    name: Rotate(Of T)
    nameWithType: Transformable3D.Rotate(Of T)
    fullName: Vim.Math3d.Transformable3D.Rotate(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.Reflect``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Plane)
  commentId: M:Vim.Math3d.Transformable3D.Reflect``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Plane)
  name: Reflect<T>(ITransformable3D<T>, Plane)
  nameWithType: Transformable3D.Reflect<T>(ITransformable3D<T>, Plane)
  fullName: Vim.Math3d.Transformable3D.Reflect<T>(Vim.Math3d.ITransformable3D<T>, Vim.Math3d.Plane)
  nameWithType.vb: Transformable3D.Reflect(Of T)(ITransformable3D(Of T), Plane)
  fullName.vb: Vim.Math3d.Transformable3D.Reflect(Of T)(Vim.Math3d.ITransformable3D(Of T), Vim.Math3d.Plane)
  name.vb: Reflect(Of T)(ITransformable3D(Of T), Plane)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Reflect``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Plane)
    name: Reflect<T>
    nameWithType: Transformable3D.Reflect<T>
    fullName: Vim.Math3d.Transformable3D.Reflect<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Plane
    name: Plane
    nameWithType: Plane
    fullName: Vim.Math3d.Plane
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Reflect``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Plane)
    name: Reflect(Of T)
    nameWithType: Transformable3D.Reflect(Of T)
    fullName: Vim.Math3d.Transformable3D.Reflect(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Plane
    name: Plane
    nameWithType: Plane
    fullName: Vim.Math3d.Plane
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.RotateX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  commentId: M:Vim.Math3d.Transformable3D.RotateX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  isExternal: true
  name: RotateX<T>(ITransformable3D<T>, Single)
  nameWithType: Transformable3D.RotateX<T>(ITransformable3D<T>, Single)
  fullName: Vim.Math3d.Transformable3D.RotateX<T>(Vim.Math3d.ITransformable3D<T>, System.Single)
  nameWithType.vb: Transformable3D.RotateX(Of T)(ITransformable3D(Of T), Single)
  fullName.vb: Vim.Math3d.Transformable3D.RotateX(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single)
  name.vb: RotateX(Of T)(ITransformable3D(Of T), Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.RotateX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: RotateX<T>
    nameWithType: Transformable3D.RotateX<T>
    fullName: Vim.Math3d.Transformable3D.RotateX<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.RotateX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: RotateX(Of T)
    nameWithType: Transformable3D.RotateX(Of T)
    fullName: Vim.Math3d.Transformable3D.RotateX(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.RotateY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  commentId: M:Vim.Math3d.Transformable3D.RotateY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  isExternal: true
  name: RotateY<T>(ITransformable3D<T>, Single)
  nameWithType: Transformable3D.RotateY<T>(ITransformable3D<T>, Single)
  fullName: Vim.Math3d.Transformable3D.RotateY<T>(Vim.Math3d.ITransformable3D<T>, System.Single)
  nameWithType.vb: Transformable3D.RotateY(Of T)(ITransformable3D(Of T), Single)
  fullName.vb: Vim.Math3d.Transformable3D.RotateY(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single)
  name.vb: RotateY(Of T)(ITransformable3D(Of T), Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.RotateY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: RotateY<T>
    nameWithType: Transformable3D.RotateY<T>
    fullName: Vim.Math3d.Transformable3D.RotateY<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.RotateY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: RotateY(Of T)
    nameWithType: Transformable3D.RotateY(Of T)
    fullName: Vim.Math3d.Transformable3D.RotateY(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.RotateZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  commentId: M:Vim.Math3d.Transformable3D.RotateZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  isExternal: true
  name: RotateZ<T>(ITransformable3D<T>, Single)
  nameWithType: Transformable3D.RotateZ<T>(ITransformable3D<T>, Single)
  fullName: Vim.Math3d.Transformable3D.RotateZ<T>(Vim.Math3d.ITransformable3D<T>, System.Single)
  nameWithType.vb: Transformable3D.RotateZ(Of T)(ITransformable3D(Of T), Single)
  fullName.vb: Vim.Math3d.Transformable3D.RotateZ(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single)
  name.vb: RotateZ(Of T)(ITransformable3D(Of T), Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.RotateZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: RotateZ<T>
    nameWithType: Transformable3D.RotateZ<T>
    fullName: Vim.Math3d.Transformable3D.RotateZ<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.RotateZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: RotateZ(Of T)
    nameWithType: Transformable3D.RotateZ(Of T)
    fullName: Vim.Math3d.Transformable3D.RotateZ(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.TranslateRotateScale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Transformable3D.TranslateRotateScale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
  name: TranslateRotateScale<T>(ITransformable3D<T>, Vector3, Quaternion, Vector3)
  nameWithType: Transformable3D.TranslateRotateScale<T>(ITransformable3D<T>, Vector3, Quaternion, Vector3)
  fullName: Vim.Math3d.Transformable3D.TranslateRotateScale<T>(Vim.Math3d.ITransformable3D<T>, Vim.Math3d.Vector3, Vim.Math3d.Quaternion, Vim.Math3d.Vector3)
  nameWithType.vb: Transformable3D.TranslateRotateScale(Of T)(ITransformable3D(Of T), Vector3, Quaternion, Vector3)
  fullName.vb: Vim.Math3d.Transformable3D.TranslateRotateScale(Of T)(Vim.Math3d.ITransformable3D(Of T), Vim.Math3d.Vector3, Vim.Math3d.Quaternion, Vim.Math3d.Vector3)
  name.vb: TranslateRotateScale(Of T)(ITransformable3D(Of T), Vector3, Quaternion, Vector3)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.TranslateRotateScale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
    name: TranslateRotateScale<T>
    nameWithType: Transformable3D.TranslateRotateScale<T>
    fullName: Vim.Math3d.Transformable3D.TranslateRotateScale<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Quaternion
    name: Quaternion
    nameWithType: Quaternion
    fullName: Vim.Math3d.Quaternion
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.TranslateRotateScale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
    name: TranslateRotateScale(Of T)
    nameWithType: Transformable3D.TranslateRotateScale(Of T)
    fullName: Vim.Math3d.Transformable3D.TranslateRotateScale(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Quaternion
    name: Quaternion
    nameWithType: Quaternion
    fullName: Vim.Math3d.Quaternion
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Plane.#ctor*
  commentId: Overload:Vim.Math3d.Plane.#ctor
  name: Plane
  nameWithType: Plane.Plane
  fullName: Vim.Math3d.Plane.Plane
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Vim.Math3d.Vector4
  commentId: T:Vim.Math3d.Vector4
  parent: Vim.Math3d
  name: Vector4
  nameWithType: Vector4
  fullName: Vim.Math3d.Vector4
- uid: Vim.Math3d.Plane.CreateFromVertices*
  commentId: Overload:Vim.Math3d.Plane.CreateFromVertices
  name: CreateFromVertices
  nameWithType: Plane.CreateFromVertices
  fullName: Vim.Math3d.Plane.CreateFromVertices
- uid: Vim.Math3d.Vector3
  commentId: T:Vim.Math3d.Vector3
  parent: Vim.Math3d
  name: Vector3
  nameWithType: Vector3
  fullName: Vim.Math3d.Vector3
- uid: Vim.Math3d.Plane
  commentId: T:Vim.Math3d.Plane
  parent: Vim.Math3d
  name: Plane
  nameWithType: Plane
  fullName: Vim.Math3d.Plane
- uid: Vim.Math3d.Plane.CreateFromNormalAndPoint*
  commentId: Overload:Vim.Math3d.Plane.CreateFromNormalAndPoint
  name: CreateFromNormalAndPoint
  nameWithType: Plane.CreateFromNormalAndPoint
  fullName: Vim.Math3d.Plane.CreateFromNormalAndPoint
- uid: Vim.Math3d.Plane.Normalize*
  commentId: Overload:Vim.Math3d.Plane.Normalize
  name: Normalize
  nameWithType: Plane.Normalize
  fullName: Vim.Math3d.Plane.Normalize
- uid: Vim.Math3d.Plane.Transform*
  commentId: Overload:Vim.Math3d.Plane.Transform
  name: Transform
  nameWithType: Plane.Transform
  fullName: Vim.Math3d.Plane.Transform
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Plane}.Transform(Vim.Math3d.Matrix4x4)
  commentId: M:Vim.Math3d.ITransformable3D{Vim.Math3d.Plane}.Transform(Vim.Math3d.Matrix4x4)
  parent: Vim.Math3d.ITransformable3D{Vim.Math3d.Plane}
  definition: Vim.Math3d.ITransformable3D`1.Transform(Vim.Math3d.Matrix4x4)
  name: Transform(Matrix4x4)
  nameWithType: ITransformable3D<Plane>.Transform(Matrix4x4)
  fullName: Vim.Math3d.ITransformable3D<Vim.Math3d.Plane>.Transform(Vim.Math3d.Matrix4x4)
  nameWithType.vb: ITransformable3D(Of Plane).Transform(Matrix4x4)
  fullName.vb: Vim.Math3d.ITransformable3D(Of Vim.Math3d.Plane).Transform(Vim.Math3d.Matrix4x4)
  spec.csharp:
  - uid: Vim.Math3d.ITransformable3D`1.Transform(Vim.Math3d.Matrix4x4)
    name: Transform
    nameWithType: ITransformable3D<Plane>.Transform
    fullName: Vim.Math3d.ITransformable3D<Vim.Math3d.Plane>.Transform
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Matrix4x4
    name: Matrix4x4
    nameWithType: Matrix4x4
    fullName: Vim.Math3d.Matrix4x4
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.ITransformable3D`1.Transform(Vim.Math3d.Matrix4x4)
    name: Transform
    nameWithType: ITransformable3D(Of Plane).Transform
    fullName: Vim.Math3d.ITransformable3D(Of Vim.Math3d.Plane).Transform
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Matrix4x4
    name: Matrix4x4
    nameWithType: Matrix4x4
    fullName: Vim.Math3d.Matrix4x4
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Matrix4x4
  commentId: T:Vim.Math3d.Matrix4x4
  parent: Vim.Math3d
  name: Matrix4x4
  nameWithType: Matrix4x4
  fullName: Vim.Math3d.Matrix4x4
- uid: Vim.Math3d.ITransformable3D`1.Transform(Vim.Math3d.Matrix4x4)
  commentId: M:Vim.Math3d.ITransformable3D`1.Transform(Vim.Math3d.Matrix4x4)
  name: Transform(Matrix4x4)
  nameWithType: ITransformable3D<TSelf>.Transform(Matrix4x4)
  fullName: Vim.Math3d.ITransformable3D<TSelf>.Transform(Vim.Math3d.Matrix4x4)
  nameWithType.vb: ITransformable3D(Of TSelf).Transform(Matrix4x4)
  fullName.vb: Vim.Math3d.ITransformable3D(Of TSelf).Transform(Vim.Math3d.Matrix4x4)
  spec.csharp:
  - uid: Vim.Math3d.ITransformable3D`1.Transform(Vim.Math3d.Matrix4x4)
    name: Transform
    nameWithType: ITransformable3D<TSelf>.Transform
    fullName: Vim.Math3d.ITransformable3D<TSelf>.Transform
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Matrix4x4
    name: Matrix4x4
    nameWithType: Matrix4x4
    fullName: Vim.Math3d.Matrix4x4
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.ITransformable3D`1.Transform(Vim.Math3d.Matrix4x4)
    name: Transform
    nameWithType: ITransformable3D(Of TSelf).Transform
    fullName: Vim.Math3d.ITransformable3D(Of TSelf).Transform
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Matrix4x4
    name: Matrix4x4
    nameWithType: Matrix4x4
    fullName: Vim.Math3d.Matrix4x4
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Quaternion
  commentId: T:Vim.Math3d.Quaternion
  parent: Vim.Math3d
  name: Quaternion
  nameWithType: Quaternion
  fullName: Vim.Math3d.Quaternion
- uid: Vim.Math3d.Plane.ProjectPointOntoPlane*
  commentId: Overload:Vim.Math3d.Plane.ProjectPointOntoPlane
  name: ProjectPointOntoPlane
  nameWithType: Plane.ProjectPointOntoPlane
  fullName: Vim.Math3d.Plane.ProjectPointOntoPlane
- uid: Vim.Math3d.Plane.Dot*
  commentId: Overload:Vim.Math3d.Plane.Dot
  name: Dot
  nameWithType: Plane.Dot
  fullName: Vim.Math3d.Plane.Dot
- uid: Vim.Math3d.Plane.DotCoordinate*
  commentId: Overload:Vim.Math3d.Plane.DotCoordinate
  name: DotCoordinate
  nameWithType: Plane.DotCoordinate
  fullName: Vim.Math3d.Plane.DotCoordinate
- uid: Vim.Math3d.Plane.DotNormal*
  commentId: Overload:Vim.Math3d.Plane.DotNormal
  name: DotNormal
  nameWithType: Plane.DotNormal
  fullName: Vim.Math3d.Plane.DotNormal
- uid: Vim.Math3d.Plane.ClassifyPoint*
  commentId: Overload:Vim.Math3d.Plane.ClassifyPoint
  name: ClassifyPoint
  nameWithType: Plane.ClassifyPoint
  fullName: Vim.Math3d.Plane.ClassifyPoint
- uid: Vim.Math3d.Plane.ToVector4*
  commentId: Overload:Vim.Math3d.Plane.ToVector4
  name: ToVector4
  nameWithType: Plane.ToVector4
  fullName: Vim.Math3d.Plane.ToVector4
- uid: System.ValueTuple{Vim.Math3d.Vector3,System.Single}
  commentId: T:System.ValueTuple{Vim.Math3d.Vector3,System.Single}
  parent: System
  definition: System.ValueTuple`2
  name: (T1, T2)<Vector3, Single>
  nameWithType: (T1, T2)<Vector3, Single>
  fullName: System.ValueTuple<Vim.Math3d.Vector3, System.Single>
  nameWithType.vb: (T1, T2)(Of Vector3, Single)
  fullName.vb: System.ValueTuple(Of Vim.Math3d.Vector3, System.Single)
  name.vb: (T1, T2)(Of Vector3, Single)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple`2
  commentId: T:System.ValueTuple`2
  isExternal: true
  name: (T1, T2)<T1, T2>
  nameWithType: (T1, T2)<T1, T2>
  fullName: System.ValueTuple<T1, T2>
  nameWithType.vb: (T1, T2)(Of T1, T2)
  fullName.vb: System.ValueTuple(Of T1, T2)
  name.vb: (T1, T2)(Of T1, T2)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Plane.Create*
  commentId: Overload:Vim.Math3d.Plane.Create
  name: Create
  nameWithType: Plane.Create
  fullName: Vim.Math3d.Plane.Create
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Plane.Equals*
  commentId: Overload:Vim.Math3d.Plane.Equals
  name: Equals
  nameWithType: Plane.Equals
  fullName: Vim.Math3d.Plane.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Plane.GetHashCode*
  commentId: Overload:Vim.Math3d.Plane.GetHashCode
  name: GetHashCode
  nameWithType: Plane.GetHashCode
  fullName: Vim.Math3d.Plane.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Plane.ToString*
  commentId: Overload:Vim.Math3d.Plane.ToString
  name: ToString
  nameWithType: Plane.ToString
  fullName: Vim.Math3d.Plane.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Vim.Math3d.Plane.Deconstruct*
  commentId: Overload:Vim.Math3d.Plane.Deconstruct
  name: Deconstruct
  nameWithType: Plane.Deconstruct
  fullName: Vim.Math3d.Plane.Deconstruct
- uid: System.IEquatable{Vim.Math3d.Plane}.Equals(Vim.Math3d.Plane)
  commentId: M:System.IEquatable{Vim.Math3d.Plane}.Equals(Vim.Math3d.Plane)
  parent: System.IEquatable{Vim.Math3d.Plane}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(Plane)
  nameWithType: IEquatable<Plane>.Equals(Plane)
  fullName: System.IEquatable<Vim.Math3d.Plane>.Equals(Vim.Math3d.Plane)
  nameWithType.vb: IEquatable(Of Plane).Equals(Plane)
  fullName.vb: System.IEquatable(Of Vim.Math3d.Plane).Equals(Vim.Math3d.Plane)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<Plane>.Equals
    fullName: System.IEquatable<Vim.Math3d.Plane>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Plane
    name: Plane
    nameWithType: Plane
    fullName: Vim.Math3d.Plane
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of Plane).Equals
    fullName: System.IEquatable(Of Vim.Math3d.Plane).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Plane
    name: Plane
    nameWithType: Plane
    fullName: Vim.Math3d.Plane
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Plane.op_Equality*
  commentId: Overload:Vim.Math3d.Plane.op_Equality
  name: Equality
  nameWithType: Plane.Equality
  fullName: Vim.Math3d.Plane.Equality
- uid: Vim.Math3d.Plane.op_Inequality*
  commentId: Overload:Vim.Math3d.Plane.op_Inequality
  name: Inequality
  nameWithType: Plane.Inequality
  fullName: Vim.Math3d.Plane.Inequality
- uid: Vim.Math3d.Plane.op_Implicit*
  commentId: Overload:Vim.Math3d.Plane.op_Implicit
  name: Implicit
  nameWithType: Plane.Implicit
  fullName: Vim.Math3d.Plane.Implicit
  nameWithType.vb: Plane.Widening
  fullName.vb: Vim.Math3d.Plane.Widening
  name.vb: Widening
- uid: Vim.Math3d.Plane.AlmostEquals*
  commentId: Overload:Vim.Math3d.Plane.AlmostEquals
  name: AlmostEquals
  nameWithType: Plane.AlmostEquals
  fullName: Vim.Math3d.Plane.AlmostEquals
- uid: Vim.Math3d.Plane.SetNormal*
  commentId: Overload:Vim.Math3d.Plane.SetNormal
  name: SetNormal
  nameWithType: Plane.SetNormal
  fullName: Vim.Math3d.Plane.SetNormal
- uid: Vim.Math3d.Plane.SetD*
  commentId: Overload:Vim.Math3d.Plane.SetD
  name: SetD
  nameWithType: Plane.SetD
  fullName: Vim.Math3d.Plane.SetD

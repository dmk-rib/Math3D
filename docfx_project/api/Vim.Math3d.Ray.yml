### YamlMime:ManagedReference
items:
- uid: Vim.Math3d.Ray
  commentId: T:Vim.Math3d.Ray
  id: Ray
  parent: Vim.Math3d
  children:
  - Vim.Math3d.Ray.#ctor(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3})
  - Vim.Math3d.Ray.#ctor(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  - Vim.Math3d.Ray.AlmostEquals(Vim.Math3d.Ray,System.Single)
  - Vim.Math3d.Ray.Create(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3})
  - Vim.Math3d.Ray.Create(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  - Vim.Math3d.Ray.Deconstruct(Vim.Math3d.Vector3@,Vim.Math3d.Vector3@)
  - Vim.Math3d.Ray.Direction
  - Vim.Math3d.Ray.Equals(System.Object)
  - Vim.Math3d.Ray.Equals(Vim.Math3d.Ray)
  - Vim.Math3d.Ray.GetHashCode
  - Vim.Math3d.Ray.Intersects(Vim.Math3d.AABox)
  - Vim.Math3d.Ray.Intersects(Vim.Math3d.Plane,System.Single)
  - Vim.Math3d.Ray.Intersects(Vim.Math3d.Sphere)
  - Vim.Math3d.Ray.Intersects(Vim.Math3d.Triangle,System.Single)
  - Vim.Math3d.Ray.MaxValue
  - Vim.Math3d.Ray.MinValue
  - Vim.Math3d.Ray.op_Equality(Vim.Math3d.Ray,Vim.Math3d.Ray)
  - Vim.Math3d.Ray.op_Implicit(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3})~Vim.Math3d.Ray
  - Vim.Math3d.Ray.op_Implicit(Vim.Math3d.Ray)~System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3}
  - Vim.Math3d.Ray.op_Inequality(Vim.Math3d.Ray,Vim.Math3d.Ray)
  - Vim.Math3d.Ray.Position
  - Vim.Math3d.Ray.SetDirection(Vim.Math3d.Vector3)
  - Vim.Math3d.Ray.SetPosition(Vim.Math3d.Vector3)
  - Vim.Math3d.Ray.ToString
  - Vim.Math3d.Ray.Transform(Vim.Math3d.Matrix4x4)
  - Vim.Math3d.Ray.Zero
  langs:
  - csharp
  - vb
  name: Ray
  nameWithType: Ray
  fullName: Vim.Math3d.Ray
  type: Struct
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Ray
    path: ../src/Structs.cs
    startLine: 1041
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataContract]

      public readonly struct Ray : ITransformable3D<Ray>, IEquatable<Ray>
    content.vb: >-
      <DataContract>

      Public Structure Ray
          Implements ITransformable3D(Of Ray), IEquatable(Of Ray)
  implements:
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Ray}
  - System.IEquatable{Vim.Math3d.Ray}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Ray}.Vim.Math3d.Transformable3D.Transform``1(Vim.Math3d.Matrix4x4[])
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Ray}.Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.Vector3)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Ray}.Vim.Math3d.Transformable3D.Translate``1(System.Single,System.Single,System.Single)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Ray}.Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.Quaternion)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Ray}.Vim.Math3d.Transformable3D.Scale``1(System.Single)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Ray}.Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.Vector3)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Ray}.Vim.Math3d.Transformable3D.Scale``1(System.Single,System.Single,System.Single)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Ray}.Vim.Math3d.Transformable3D.ScaleX``1(System.Single)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Ray}.Vim.Math3d.Transformable3D.ScaleY``1(System.Single)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Ray}.Vim.Math3d.Transformable3D.ScaleZ``1(System.Single)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Ray}.Vim.Math3d.Transformable3D.LookAt``1(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Ray}.Vim.Math3d.Transformable3D.RotateAround``1(Vim.Math3d.Vector3,System.Single)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Ray}.Vim.Math3d.Transformable3D.Rotate``1(System.Single,System.Single,System.Single)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Ray}.Vim.Math3d.Transformable3D.Reflect``1(Vim.Math3d.Plane)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Ray}.Vim.Math3d.Transformable3D.RotateX``1(System.Single)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Ray}.Vim.Math3d.Transformable3D.RotateY``1(System.Single)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Ray}.Vim.Math3d.Transformable3D.RotateZ``1(System.Single)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Ray}.Vim.Math3d.Transformable3D.TranslateRotateScale``1(Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Vim.Math3d.Ray.Intersects(Vim.Math3d.AABox)
  commentId: M:Vim.Math3d.Ray.Intersects(Vim.Math3d.AABox)
  id: Intersects(Vim.Math3d.AABox)
  parent: Vim.Math3d.Ray
  langs:
  - csharp
  - vb
  name: Intersects(AABox)
  nameWithType: Ray.Intersects(AABox)
  fullName: Vim.Math3d.Ray.Intersects(Vim.Math3d.AABox)
  type: Method
  source:
    remote:
      path: src/Ray.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Intersects
    path: ../src/Ray.cs
    startLine: 16
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly float? Intersects(AABox box)
    parameters:
    - id: box
      type: Vim.Math3d.AABox
    return:
      type: System.Nullable{System.Single}
    content.vb: Public Function Intersects(box As AABox) As Single?
  overload: Vim.Math3d.Ray.Intersects*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Ray.Intersects(Vim.Math3d.Plane,System.Single)
  commentId: M:Vim.Math3d.Ray.Intersects(Vim.Math3d.Plane,System.Single)
  id: Intersects(Vim.Math3d.Plane,System.Single)
  parent: Vim.Math3d.Ray
  langs:
  - csharp
  - vb
  name: Intersects(Plane, Single)
  nameWithType: Ray.Intersects(Plane, Single)
  fullName: Vim.Math3d.Ray.Intersects(Vim.Math3d.Plane, System.Single)
  type: Method
  source:
    remote:
      path: src/Ray.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Intersects
    path: ../src/Ray.cs
    startLine: 100
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly float? Intersects(Plane plane, float tolerance = 1E-07F)
    parameters:
    - id: plane
      type: Vim.Math3d.Plane
    - id: tolerance
      type: System.Single
    return:
      type: System.Nullable{System.Single}
    content.vb: Public Function Intersects(plane As Plane, tolerance As Single = 1E-07F) As Single?
  overload: Vim.Math3d.Ray.Intersects*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Ray.Intersects(Vim.Math3d.Sphere)
  commentId: M:Vim.Math3d.Ray.Intersects(Vim.Math3d.Sphere)
  id: Intersects(Vim.Math3d.Sphere)
  parent: Vim.Math3d.Ray
  langs:
  - csharp
  - vb
  name: Intersects(Sphere)
  nameWithType: Ray.Intersects(Sphere)
  fullName: Vim.Math3d.Ray.Intersects(Vim.Math3d.Sphere)
  type: Method
  source:
    remote:
      path: src/Ray.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Intersects
    path: ../src/Ray.cs
    startLine: 121
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly float? Intersects(Sphere sphere)
    parameters:
    - id: sphere
      type: Vim.Math3d.Sphere
    return:
      type: System.Nullable{System.Single}
    content.vb: Public Function Intersects(sphere As Sphere) As Single?
  overload: Vim.Math3d.Ray.Intersects*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Ray.Transform(Vim.Math3d.Matrix4x4)
  commentId: M:Vim.Math3d.Ray.Transform(Vim.Math3d.Matrix4x4)
  id: Transform(Vim.Math3d.Matrix4x4)
  parent: Vim.Math3d.Ray
  langs:
  - csharp
  - vb
  name: Transform(Matrix4x4)
  nameWithType: Ray.Transform(Matrix4x4)
  fullName: Vim.Math3d.Ray.Transform(Vim.Math3d.Matrix4x4)
  type: Method
  source:
    remote:
      path: src/Ray.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Transform
    path: ../src/Ray.cs
    startLine: 149
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly Ray Transform(Matrix4x4 mat)
    parameters:
    - id: mat
      type: Vim.Math3d.Matrix4x4
    return:
      type: Vim.Math3d.Ray
    content.vb: Public Function Transform(mat As Matrix4x4) As Ray
  overload: Vim.Math3d.Ray.Transform*
  implements:
  - Vim.Math3d.ITransformable3D{Vim.Math3d.Ray}.Transform(Vim.Math3d.Matrix4x4)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Ray.Intersects(Vim.Math3d.Triangle,System.Single)
  commentId: M:Vim.Math3d.Ray.Intersects(Vim.Math3d.Triangle,System.Single)
  id: Intersects(Vim.Math3d.Triangle,System.Single)
  parent: Vim.Math3d.Ray
  langs:
  - csharp
  - vb
  name: Intersects(Triangle, Single)
  nameWithType: Ray.Intersects(Triangle, Single)
  fullName: Vim.Math3d.Ray.Intersects(Vim.Math3d.Triangle, System.Single)
  type: Method
  source:
    remote:
      path: src/Ray.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Intersects
    path: ../src/Ray.cs
    startLine: 154
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly float? Intersects(Triangle tri, float tolerance = 1E-07F)
    parameters:
    - id: tri
      type: Vim.Math3d.Triangle
    - id: tolerance
      type: System.Single
    return:
      type: System.Nullable{System.Single}
    content.vb: Public Function Intersects(tri As Triangle, tolerance As Single = 1E-07F) As Single?
  overload: Vim.Math3d.Ray.Intersects*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Ray.Position
  commentId: F:Vim.Math3d.Ray.Position
  id: Position
  parent: Vim.Math3d.Ray
  langs:
  - csharp
  - vb
  name: Position
  nameWithType: Ray.Position
  fullName: Vim.Math3d.Ray.Position
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Position
    path: ../src/Structs.cs
    startLine: 1047
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataMember]

      public readonly Vector3 Position
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <DataMember>

      Public ReadOnly Position As Vector3
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.Ray.Direction
  commentId: F:Vim.Math3d.Ray.Direction
  id: Direction
  parent: Vim.Math3d.Ray
  langs:
  - csharp
  - vb
  name: Direction
  nameWithType: Ray.Direction
  fullName: Vim.Math3d.Ray.Direction
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Direction
    path: ../src/Structs.cs
    startLine: 1049
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataMember]

      public readonly Vector3 Direction
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <DataMember>

      Public ReadOnly Direction As Vector3
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.Ray.#ctor(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3})
  commentId: M:Vim.Math3d.Ray.#ctor(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3})
  id: '#ctor(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3})'
  parent: Vim.Math3d.Ray
  langs:
  - csharp
  - vb
  name: Ray((Vector3 position, Vector3 direction))
  nameWithType: Ray.Ray((Vector3 position, Vector3 direction))
  fullName: Vim.Math3d.Ray.Ray(System.ValueTuple<Vim.Math3d.Vector3, Vim.Math3d.Vector3>)
  type: Constructor
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: .ctor
    path: ../src/Structs.cs
    startLine: 1050
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public Ray((Vector3 position, Vector3 direction) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3}
    content.vb: Public Sub New(tuple As(position As Vector3, direction As Vector3)(Of Vector3 , Vector3))
  overload: Vim.Math3d.Ray.#ctor*
  nameWithType.vb: Ray.Ray((position As Vector3, direction As Vector3)(Of Vector3, Vector3))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Vim.Math3d.Ray.Ray(System.ValueTuple(Of Vim.Math3d.Vector3, Vim.Math3d.Vector3))
  name.vb: Ray((position As Vector3, direction As Vector3)(Of Vector3, Vector3))
- uid: Vim.Math3d.Ray.#ctor(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Ray.#ctor(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  id: '#ctor(Vim.Math3d.Vector3,Vim.Math3d.Vector3)'
  parent: Vim.Math3d.Ray
  langs:
  - csharp
  - vb
  name: Ray(Vector3, Vector3)
  nameWithType: Ray.Ray(Vector3, Vector3)
  fullName: Vim.Math3d.Ray.Ray(Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  type: Constructor
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: .ctor
    path: ../src/Structs.cs
    startLine: 1051
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public Ray(Vector3 position, Vector3 direction)
    parameters:
    - id: position
      type: Vim.Math3d.Vector3
    - id: direction
      type: Vim.Math3d.Vector3
    content.vb: Public Sub New(position As Vector3, direction As Vector3)
  overload: Vim.Math3d.Ray.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Ray.Create(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Ray.Create(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  id: Create(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  parent: Vim.Math3d.Ray
  langs:
  - csharp
  - vb
  name: Create(Vector3, Vector3)
  nameWithType: Ray.Create(Vector3, Vector3)
  fullName: Vim.Math3d.Ray.Create(Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Create
    path: ../src/Structs.cs
    startLine: 1052
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Ray Create(Vector3 position, Vector3 direction)
    parameters:
    - id: position
      type: Vim.Math3d.Vector3
    - id: direction
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Ray
    content.vb: Public Shared Function Create(position As Vector3, direction As Vector3) As Ray
  overload: Vim.Math3d.Ray.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Ray.Create(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3})
  commentId: M:Vim.Math3d.Ray.Create(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3})
  id: Create(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3})
  parent: Vim.Math3d.Ray
  langs:
  - csharp
  - vb
  name: Create((Vector3 position, Vector3 direction))
  nameWithType: Ray.Create((Vector3 position, Vector3 direction))
  fullName: Vim.Math3d.Ray.Create(System.ValueTuple<Vim.Math3d.Vector3, Vim.Math3d.Vector3>)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Create
    path: ../src/Structs.cs
    startLine: 1053
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Ray Create((Vector3 position, Vector3 direction) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3}
    return:
      type: Vim.Math3d.Ray
    content.vb: Public Shared Function Create(tuple As(position As Vector3, direction As Vector3)(Of Vector3 , Vector3)) As Ray
  overload: Vim.Math3d.Ray.Create*
  nameWithType.vb: Ray.Create((position As Vector3, direction As Vector3)(Of Vector3, Vector3))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.Ray.Create(System.ValueTuple(Of Vim.Math3d.Vector3, Vim.Math3d.Vector3))
  name.vb: Create((position As Vector3, direction As Vector3)(Of Vector3, Vector3))
- uid: Vim.Math3d.Ray.Equals(System.Object)
  commentId: M:Vim.Math3d.Ray.Equals(System.Object)
  id: Equals(System.Object)
  parent: Vim.Math3d.Ray
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Ray.Equals(Object)
  fullName: Vim.Math3d.Ray.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Equals
    path: ../src/Structs.cs
    startLine: 1054
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: Vim.Math3d.Ray.Equals*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.Ray.GetHashCode
  commentId: M:Vim.Math3d.Ray.GetHashCode
  id: GetHashCode
  parent: Vim.Math3d.Ray
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Ray.GetHashCode()
  fullName: Vim.Math3d.Ray.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: GetHashCode
    path: ../src/Structs.cs
    startLine: 1055
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: Vim.Math3d.Ray.GetHashCode*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.Ray.ToString
  commentId: M:Vim.Math3d.Ray.ToString
  id: ToString
  parent: Vim.Math3d.Ray
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Ray.ToString()
  fullName: Vim.Math3d.Ray.ToString()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToString
    path: ../src/Structs.cs
    startLine: 1056
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: Vim.Math3d.Ray.ToString*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.Ray.Deconstruct(Vim.Math3d.Vector3@,Vim.Math3d.Vector3@)
  commentId: M:Vim.Math3d.Ray.Deconstruct(Vim.Math3d.Vector3@,Vim.Math3d.Vector3@)
  id: Deconstruct(Vim.Math3d.Vector3@,Vim.Math3d.Vector3@)
  parent: Vim.Math3d.Ray
  langs:
  - csharp
  - vb
  name: Deconstruct(out Vector3, out Vector3)
  nameWithType: Ray.Deconstruct(out Vector3, out Vector3)
  fullName: Vim.Math3d.Ray.Deconstruct(out Vim.Math3d.Vector3, out Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Deconstruct
    path: ../src/Structs.cs
    startLine: 1057
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly void Deconstruct(out Vector3 position, out Vector3 direction)
    parameters:
    - id: position
      type: Vim.Math3d.Vector3
    - id: direction
      type: Vim.Math3d.Vector3
    content.vb: Public Sub Deconstruct(ByRef position As Vector3, ByRef direction As Vector3)
  overload: Vim.Math3d.Ray.Deconstruct*
  nameWithType.vb: Ray.Deconstruct(ByRef Vector3, ByRef Vector3)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  fullName.vb: Vim.Math3d.Ray.Deconstruct(ByRef Vim.Math3d.Vector3, ByRef Vim.Math3d.Vector3)
  name.vb: Deconstruct(ByRef Vector3, ByRef Vector3)
- uid: Vim.Math3d.Ray.Equals(Vim.Math3d.Ray)
  commentId: M:Vim.Math3d.Ray.Equals(Vim.Math3d.Ray)
  id: Equals(Vim.Math3d.Ray)
  parent: Vim.Math3d.Ray
  langs:
  - csharp
  - vb
  name: Equals(Ray)
  nameWithType: Ray.Equals(Ray)
  fullName: Vim.Math3d.Ray.Equals(Vim.Math3d.Ray)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Equals
    path: ../src/Structs.cs
    startLine: 1058
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool Equals(Ray x)
    parameters:
    - id: x
      type: Vim.Math3d.Ray
    return:
      type: System.Boolean
    content.vb: Public Function Equals(x As Ray) As Boolean
  overload: Vim.Math3d.Ray.Equals*
  implements:
  - System.IEquatable{Vim.Math3d.Ray}.Equals(Vim.Math3d.Ray)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Ray.op_Equality(Vim.Math3d.Ray,Vim.Math3d.Ray)
  commentId: M:Vim.Math3d.Ray.op_Equality(Vim.Math3d.Ray,Vim.Math3d.Ray)
  id: op_Equality(Vim.Math3d.Ray,Vim.Math3d.Ray)
  parent: Vim.Math3d.Ray
  langs:
  - csharp
  - vb
  name: Equality(Ray, Ray)
  nameWithType: Ray.Equality(Ray, Ray)
  fullName: Vim.Math3d.Ray.Equality(Vim.Math3d.Ray, Vim.Math3d.Ray)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Equality
    path: ../src/Structs.cs
    startLine: 1059
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator ==(Ray x0, Ray x1)
    parameters:
    - id: x0
      type: Vim.Math3d.Ray
    - id: x1
      type: Vim.Math3d.Ray
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(x0 As Ray, x1 As Ray) As Boolean
  overload: Vim.Math3d.Ray.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Ray.op_Inequality(Vim.Math3d.Ray,Vim.Math3d.Ray)
  commentId: M:Vim.Math3d.Ray.op_Inequality(Vim.Math3d.Ray,Vim.Math3d.Ray)
  id: op_Inequality(Vim.Math3d.Ray,Vim.Math3d.Ray)
  parent: Vim.Math3d.Ray
  langs:
  - csharp
  - vb
  name: Inequality(Ray, Ray)
  nameWithType: Ray.Inequality(Ray, Ray)
  fullName: Vim.Math3d.Ray.Inequality(Vim.Math3d.Ray, Vim.Math3d.Ray)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Inequality
    path: ../src/Structs.cs
    startLine: 1060
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator !=(Ray x0, Ray x1)
    parameters:
    - id: x0
      type: Vim.Math3d.Ray
    - id: x1
      type: Vim.Math3d.Ray
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(x0 As Ray, x1 As Ray) As Boolean
  overload: Vim.Math3d.Ray.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Ray.op_Implicit(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3})~Vim.Math3d.Ray
  commentId: M:Vim.Math3d.Ray.op_Implicit(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3})~Vim.Math3d.Ray
  id: op_Implicit(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3})~Vim.Math3d.Ray
  parent: Vim.Math3d.Ray
  langs:
  - csharp
  - vb
  name: Implicit((Vector3 position, Vector3 direction) to Ray)
  nameWithType: Ray.Implicit((Vector3 position, Vector3 direction) to Ray)
  fullName: Vim.Math3d.Ray.Implicit(System.ValueTuple<Vim.Math3d.Vector3, Vim.Math3d.Vector3> to Vim.Math3d.Ray)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Implicit
    path: ../src/Structs.cs
    startLine: 1061
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static implicit operator Ray((Vector3 position, Vector3 direction) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3}
    return:
      type: Vim.Math3d.Ray
    content.vb: Public Shared Widening Operator CType(tuple As(position As Vector3, direction As Vector3)(Of Vector3 , Vector3)) As Ray
  overload: Vim.Math3d.Ray.op_Implicit*
  nameWithType.vb: Ray.Widening((position As Vector3, direction As Vector3)(Of Vector3, Vector3) to Ray)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.Ray.Widening(System.ValueTuple(Of Vim.Math3d.Vector3, Vim.Math3d.Vector3) to Vim.Math3d.Ray)
  name.vb: Widening((position As Vector3, direction As Vector3)(Of Vector3, Vector3) to Ray)
- uid: Vim.Math3d.Ray.op_Implicit(Vim.Math3d.Ray)~System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3}
  commentId: M:Vim.Math3d.Ray.op_Implicit(Vim.Math3d.Ray)~System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3}
  id: op_Implicit(Vim.Math3d.Ray)~System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3}
  parent: Vim.Math3d.Ray
  langs:
  - csharp
  - vb
  name: Implicit(Ray to (Vector3 position, Vector3 direction))
  nameWithType: Ray.Implicit(Ray to (Vector3 position, Vector3 direction))
  fullName: Vim.Math3d.Ray.Implicit(Vim.Math3d.Ray to System.ValueTuple<Vim.Math3d.Vector3, Vim.Math3d.Vector3>)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Implicit
    path: ../src/Structs.cs
    startLine: 1062
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static implicit operator (Vector3 position, Vector3 direction)(Ray self)
    parameters:
    - id: self
      type: Vim.Math3d.Ray
    return:
      type: System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3}
    content.vb: Public Shared Widening Operator CType(self As Ray) As(position As Vector3, direction As Vector3)(Of Vector3 , Vector3)
  overload: Vim.Math3d.Ray.op_Implicit*
  nameWithType.vb: Ray.Widening(Ray to (position As Vector3, direction As Vector3)(Of Vector3, Vector3))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.Ray.Widening(Vim.Math3d.Ray to System.ValueTuple(Of Vim.Math3d.Vector3, Vim.Math3d.Vector3))
  name.vb: Widening(Ray to (position As Vector3, direction As Vector3)(Of Vector3, Vector3))
- uid: Vim.Math3d.Ray.AlmostEquals(Vim.Math3d.Ray,System.Single)
  commentId: M:Vim.Math3d.Ray.AlmostEquals(Vim.Math3d.Ray,System.Single)
  id: AlmostEquals(Vim.Math3d.Ray,System.Single)
  parent: Vim.Math3d.Ray
  langs:
  - csharp
  - vb
  name: AlmostEquals(Ray, Single)
  nameWithType: Ray.AlmostEquals(Ray, Single)
  fullName: Vim.Math3d.Ray.AlmostEquals(Vim.Math3d.Ray, System.Single)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: AlmostEquals
    path: ../src/Structs.cs
    startLine: 1064
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool AlmostEquals(Ray x, float tolerance = 1E-07F)
    parameters:
    - id: x
      type: Vim.Math3d.Ray
    - id: tolerance
      type: System.Single
    return:
      type: System.Boolean
    content.vb: Public Function AlmostEquals(x As Ray, tolerance As Single = 1E-07F) As Boolean
  overload: Vim.Math3d.Ray.AlmostEquals*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Ray.Zero
  commentId: F:Vim.Math3d.Ray.Zero
  id: Zero
  parent: Vim.Math3d.Ray
  langs:
  - csharp
  - vb
  name: Zero
  nameWithType: Ray.Zero
  fullName: Vim.Math3d.Ray.Zero
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Zero
    path: ../src/Structs.cs
    startLine: 1065
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Ray Zero
    return:
      type: Vim.Math3d.Ray
    content.vb: Public Shared Zero As Ray
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Ray.MinValue
  commentId: F:Vim.Math3d.Ray.MinValue
  id: MinValue
  parent: Vim.Math3d.Ray
  langs:
  - csharp
  - vb
  name: MinValue
  nameWithType: Ray.MinValue
  fullName: Vim.Math3d.Ray.MinValue
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MinValue
    path: ../src/Structs.cs
    startLine: 1066
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Ray MinValue
    return:
      type: Vim.Math3d.Ray
    content.vb: Public Shared MinValue As Ray
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Ray.MaxValue
  commentId: F:Vim.Math3d.Ray.MaxValue
  id: MaxValue
  parent: Vim.Math3d.Ray
  langs:
  - csharp
  - vb
  name: MaxValue
  nameWithType: Ray.MaxValue
  fullName: Vim.Math3d.Ray.MaxValue
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MaxValue
    path: ../src/Structs.cs
    startLine: 1067
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Ray MaxValue
    return:
      type: Vim.Math3d.Ray
    content.vb: Public Shared MaxValue As Ray
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Ray.SetPosition(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Ray.SetPosition(Vim.Math3d.Vector3)
  id: SetPosition(Vim.Math3d.Vector3)
  parent: Vim.Math3d.Ray
  langs:
  - csharp
  - vb
  name: SetPosition(Vector3)
  nameWithType: Ray.SetPosition(Vector3)
  fullName: Vim.Math3d.Ray.SetPosition(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SetPosition
    path: ../src/Structs.cs
    startLine: 1068
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly Ray SetPosition(Vector3 x)
    parameters:
    - id: x
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Ray
    content.vb: Public Function SetPosition(x As Vector3) As Ray
  overload: Vim.Math3d.Ray.SetPosition*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Ray.SetDirection(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Ray.SetDirection(Vim.Math3d.Vector3)
  id: SetDirection(Vim.Math3d.Vector3)
  parent: Vim.Math3d.Ray
  langs:
  - csharp
  - vb
  name: SetDirection(Vector3)
  nameWithType: Ray.SetDirection(Vector3)
  fullName: Vim.Math3d.Ray.SetDirection(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SetDirection
    path: ../src/Structs.cs
    startLine: 1069
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly Ray SetDirection(Vector3 x)
    parameters:
    - id: x
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Ray
    content.vb: Public Function SetDirection(x As Vector3) As Ray
  overload: Vim.Math3d.Ray.SetDirection*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
references:
- uid: Vim.Math3d
  commentId: N:Vim.Math3d
  name: Vim.Math3d
  nameWithType: Vim.Math3d
  fullName: Vim.Math3d
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Ray}
  commentId: T:Vim.Math3d.ITransformable3D{Vim.Math3d.Ray}
  parent: Vim.Math3d
  definition: Vim.Math3d.ITransformable3D`1
  name: ITransformable3D<Ray>
  nameWithType: ITransformable3D<Ray>
  fullName: Vim.Math3d.ITransformable3D<Vim.Math3d.Ray>
  nameWithType.vb: ITransformable3D(Of Ray)
  fullName.vb: Vim.Math3d.ITransformable3D(Of Vim.Math3d.Ray)
  name.vb: ITransformable3D(Of Ray)
  spec.csharp:
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.Ray
    name: Ray
    nameWithType: Ray
    fullName: Vim.Math3d.Ray
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.Ray
    name: Ray
    nameWithType: Ray
    fullName: Vim.Math3d.Ray
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable{Vim.Math3d.Ray}
  commentId: T:System.IEquatable{Vim.Math3d.Ray}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Ray>
  nameWithType: IEquatable<Ray>
  fullName: System.IEquatable<Vim.Math3d.Ray>
  nameWithType.vb: IEquatable(Of Ray)
  fullName.vb: System.IEquatable(Of Vim.Math3d.Ray)
  name.vb: IEquatable(Of Ray)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.Ray
    name: Ray
    nameWithType: Ray
    fullName: Vim.Math3d.Ray
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.Ray
    name: Ray
    nameWithType: Ray
    fullName: Vim.Math3d.Ray
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Ray}.Vim.Math3d.Transformable3D.Transform``1(Vim.Math3d.Matrix4x4[])
  commentId: M:Vim.Math3d.Transformable3D.Transform``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Matrix4x4[])
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.Transform``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Matrix4x4[])
  name: Transform<Ray>(Matrix4x4[])
  nameWithType: Transformable3D.Transform<Ray>(Matrix4x4[])
  fullName: Vim.Math3d.Transformable3D.Transform<Vim.Math3d.Ray>(Vim.Math3d.Matrix4x4[])
  nameWithType.vb: Transformable3D.Transform(Of Ray)(Matrix4x4())
  fullName.vb: Vim.Math3d.Transformable3D.Transform(Of Vim.Math3d.Ray)(Vim.Math3d.Matrix4x4())
  name.vb: Transform(Of Ray)(Matrix4x4())
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Transform``1(Vim.Math3d.Matrix4x4[])
    name: Transform<Ray>
    nameWithType: Transformable3D.Transform<Ray>
    fullName: Vim.Math3d.Transformable3D.Transform<Vim.Math3d.Ray>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Matrix4x4
    name: Matrix4x4
    nameWithType: Matrix4x4
    fullName: Vim.Math3d.Matrix4x4
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Transform``1(Vim.Math3d.Matrix4x4[])
    name: Transform(Of Ray)
    nameWithType: Transformable3D.Transform(Of Ray)
    fullName: Vim.Math3d.Transformable3D.Transform(Of Vim.Math3d.Ray)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Matrix4x4
    name: Matrix4x4
    nameWithType: Matrix4x4
    fullName: Vim.Math3d.Matrix4x4
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Ray}.Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
  name: Translate<Ray>(Vector3)
  nameWithType: Transformable3D.Translate<Ray>(Vector3)
  fullName: Vim.Math3d.Transformable3D.Translate<Vim.Math3d.Ray>(Vim.Math3d.Vector3)
  nameWithType.vb: Transformable3D.Translate(Of Ray)(Vector3)
  fullName.vb: Vim.Math3d.Transformable3D.Translate(Of Vim.Math3d.Ray)(Vim.Math3d.Vector3)
  name.vb: Translate(Of Ray)(Vector3)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.Vector3)
    name: Translate<Ray>
    nameWithType: Transformable3D.Translate<Ray>
    fullName: Vim.Math3d.Transformable3D.Translate<Vim.Math3d.Ray>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.Vector3)
    name: Translate(Of Ray)
    nameWithType: Transformable3D.Translate(Of Ray)
    fullName: Vim.Math3d.Transformable3D.Translate(Of Vim.Math3d.Ray)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Ray}.Vim.Math3d.Transformable3D.Translate``1(System.Single,System.Single,System.Single)
  commentId: M:Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  name: Translate<Ray>(Single, Single, Single)
  nameWithType: Transformable3D.Translate<Ray>(Single, Single, Single)
  fullName: Vim.Math3d.Transformable3D.Translate<Vim.Math3d.Ray>(System.Single, System.Single, System.Single)
  nameWithType.vb: Transformable3D.Translate(Of Ray)(Single, Single, Single)
  fullName.vb: Vim.Math3d.Transformable3D.Translate(Of Vim.Math3d.Ray)(System.Single, System.Single, System.Single)
  name.vb: Translate(Of Ray)(Single, Single, Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Translate``1(System.Single,System.Single,System.Single)
    name: Translate<Ray>
    nameWithType: Transformable3D.Translate<Ray>
    fullName: Vim.Math3d.Transformable3D.Translate<Vim.Math3d.Ray>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Translate``1(System.Single,System.Single,System.Single)
    name: Translate(Of Ray)
    nameWithType: Transformable3D.Translate(Of Ray)
    fullName: Vim.Math3d.Transformable3D.Translate(Of Vim.Math3d.Ray)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Ray}.Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.Quaternion)
  commentId: M:Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Quaternion)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Quaternion)
  name: Rotate<Ray>(Quaternion)
  nameWithType: Transformable3D.Rotate<Ray>(Quaternion)
  fullName: Vim.Math3d.Transformable3D.Rotate<Vim.Math3d.Ray>(Vim.Math3d.Quaternion)
  nameWithType.vb: Transformable3D.Rotate(Of Ray)(Quaternion)
  fullName.vb: Vim.Math3d.Transformable3D.Rotate(Of Vim.Math3d.Ray)(Vim.Math3d.Quaternion)
  name.vb: Rotate(Of Ray)(Quaternion)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.Quaternion)
    name: Rotate<Ray>
    nameWithType: Transformable3D.Rotate<Ray>
    fullName: Vim.Math3d.Transformable3D.Rotate<Vim.Math3d.Ray>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Quaternion
    name: Quaternion
    nameWithType: Quaternion
    fullName: Vim.Math3d.Quaternion
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.Quaternion)
    name: Rotate(Of Ray)
    nameWithType: Transformable3D.Rotate(Of Ray)
    fullName: Vim.Math3d.Transformable3D.Rotate(Of Vim.Math3d.Ray)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Quaternion
    name: Quaternion
    nameWithType: Quaternion
    fullName: Vim.Math3d.Quaternion
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Ray}.Vim.Math3d.Transformable3D.Scale``1(System.Single)
  commentId: M:Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  name: Scale<Ray>(Single)
  nameWithType: Transformable3D.Scale<Ray>(Single)
  fullName: Vim.Math3d.Transformable3D.Scale<Vim.Math3d.Ray>(System.Single)
  nameWithType.vb: Transformable3D.Scale(Of Ray)(Single)
  fullName.vb: Vim.Math3d.Transformable3D.Scale(Of Vim.Math3d.Ray)(System.Single)
  name.vb: Scale(Of Ray)(Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Scale``1(System.Single)
    name: Scale<Ray>
    nameWithType: Transformable3D.Scale<Ray>
    fullName: Vim.Math3d.Transformable3D.Scale<Vim.Math3d.Ray>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Scale``1(System.Single)
    name: Scale(Of Ray)
    nameWithType: Transformable3D.Scale(Of Ray)
    fullName: Vim.Math3d.Transformable3D.Scale(Of Vim.Math3d.Ray)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Ray}.Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
  name: Scale<Ray>(Vector3)
  nameWithType: Transformable3D.Scale<Ray>(Vector3)
  fullName: Vim.Math3d.Transformable3D.Scale<Vim.Math3d.Ray>(Vim.Math3d.Vector3)
  nameWithType.vb: Transformable3D.Scale(Of Ray)(Vector3)
  fullName.vb: Vim.Math3d.Transformable3D.Scale(Of Vim.Math3d.Ray)(Vim.Math3d.Vector3)
  name.vb: Scale(Of Ray)(Vector3)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.Vector3)
    name: Scale<Ray>
    nameWithType: Transformable3D.Scale<Ray>
    fullName: Vim.Math3d.Transformable3D.Scale<Vim.Math3d.Ray>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.Vector3)
    name: Scale(Of Ray)
    nameWithType: Transformable3D.Scale(Of Ray)
    fullName: Vim.Math3d.Transformable3D.Scale(Of Vim.Math3d.Ray)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Ray}.Vim.Math3d.Transformable3D.Scale``1(System.Single,System.Single,System.Single)
  commentId: M:Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  name: Scale<Ray>(Single, Single, Single)
  nameWithType: Transformable3D.Scale<Ray>(Single, Single, Single)
  fullName: Vim.Math3d.Transformable3D.Scale<Vim.Math3d.Ray>(System.Single, System.Single, System.Single)
  nameWithType.vb: Transformable3D.Scale(Of Ray)(Single, Single, Single)
  fullName.vb: Vim.Math3d.Transformable3D.Scale(Of Vim.Math3d.Ray)(System.Single, System.Single, System.Single)
  name.vb: Scale(Of Ray)(Single, Single, Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Scale``1(System.Single,System.Single,System.Single)
    name: Scale<Ray>
    nameWithType: Transformable3D.Scale<Ray>
    fullName: Vim.Math3d.Transformable3D.Scale<Vim.Math3d.Ray>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Scale``1(System.Single,System.Single,System.Single)
    name: Scale(Of Ray)
    nameWithType: Transformable3D.Scale(Of Ray)
    fullName: Vim.Math3d.Transformable3D.Scale(Of Vim.Math3d.Ray)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Ray}.Vim.Math3d.Transformable3D.ScaleX``1(System.Single)
  commentId: M:Vim.Math3d.Transformable3D.ScaleX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.ScaleX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  name: ScaleX<Ray>(Single)
  nameWithType: Transformable3D.ScaleX<Ray>(Single)
  fullName: Vim.Math3d.Transformable3D.ScaleX<Vim.Math3d.Ray>(System.Single)
  nameWithType.vb: Transformable3D.ScaleX(Of Ray)(Single)
  fullName.vb: Vim.Math3d.Transformable3D.ScaleX(Of Vim.Math3d.Ray)(System.Single)
  name.vb: ScaleX(Of Ray)(Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.ScaleX``1(System.Single)
    name: ScaleX<Ray>
    nameWithType: Transformable3D.ScaleX<Ray>
    fullName: Vim.Math3d.Transformable3D.ScaleX<Vim.Math3d.Ray>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.ScaleX``1(System.Single)
    name: ScaleX(Of Ray)
    nameWithType: Transformable3D.ScaleX(Of Ray)
    fullName: Vim.Math3d.Transformable3D.ScaleX(Of Vim.Math3d.Ray)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Ray}.Vim.Math3d.Transformable3D.ScaleY``1(System.Single)
  commentId: M:Vim.Math3d.Transformable3D.ScaleY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.ScaleY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  name: ScaleY<Ray>(Single)
  nameWithType: Transformable3D.ScaleY<Ray>(Single)
  fullName: Vim.Math3d.Transformable3D.ScaleY<Vim.Math3d.Ray>(System.Single)
  nameWithType.vb: Transformable3D.ScaleY(Of Ray)(Single)
  fullName.vb: Vim.Math3d.Transformable3D.ScaleY(Of Vim.Math3d.Ray)(System.Single)
  name.vb: ScaleY(Of Ray)(Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.ScaleY``1(System.Single)
    name: ScaleY<Ray>
    nameWithType: Transformable3D.ScaleY<Ray>
    fullName: Vim.Math3d.Transformable3D.ScaleY<Vim.Math3d.Ray>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.ScaleY``1(System.Single)
    name: ScaleY(Of Ray)
    nameWithType: Transformable3D.ScaleY(Of Ray)
    fullName: Vim.Math3d.Transformable3D.ScaleY(Of Vim.Math3d.Ray)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Ray}.Vim.Math3d.Transformable3D.ScaleZ``1(System.Single)
  commentId: M:Vim.Math3d.Transformable3D.ScaleZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.ScaleZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  name: ScaleZ<Ray>(Single)
  nameWithType: Transformable3D.ScaleZ<Ray>(Single)
  fullName: Vim.Math3d.Transformable3D.ScaleZ<Vim.Math3d.Ray>(System.Single)
  nameWithType.vb: Transformable3D.ScaleZ(Of Ray)(Single)
  fullName.vb: Vim.Math3d.Transformable3D.ScaleZ(Of Vim.Math3d.Ray)(System.Single)
  name.vb: ScaleZ(Of Ray)(Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.ScaleZ``1(System.Single)
    name: ScaleZ<Ray>
    nameWithType: Transformable3D.ScaleZ<Ray>
    fullName: Vim.Math3d.Transformable3D.ScaleZ<Vim.Math3d.Ray>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.ScaleZ``1(System.Single)
    name: ScaleZ(Of Ray)
    nameWithType: Transformable3D.ScaleZ(Of Ray)
    fullName: Vim.Math3d.Transformable3D.ScaleZ(Of Vim.Math3d.Ray)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Ray}.Vim.Math3d.Transformable3D.LookAt``1(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Transformable3D.LookAt``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.LookAt``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  name: LookAt<Ray>(Vector3, Vector3, Vector3)
  nameWithType: Transformable3D.LookAt<Ray>(Vector3, Vector3, Vector3)
  fullName: Vim.Math3d.Transformable3D.LookAt<Vim.Math3d.Ray>(Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  nameWithType.vb: Transformable3D.LookAt(Of Ray)(Vector3, Vector3, Vector3)
  fullName.vb: Vim.Math3d.Transformable3D.LookAt(Of Vim.Math3d.Ray)(Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  name.vb: LookAt(Of Ray)(Vector3, Vector3, Vector3)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.LookAt``1(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
    name: LookAt<Ray>
    nameWithType: Transformable3D.LookAt<Ray>
    fullName: Vim.Math3d.Transformable3D.LookAt<Vim.Math3d.Ray>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.LookAt``1(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
    name: LookAt(Of Ray)
    nameWithType: Transformable3D.LookAt(Of Ray)
    fullName: Vim.Math3d.Transformable3D.LookAt(Of Vim.Math3d.Ray)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Ray}.Vim.Math3d.Transformable3D.RotateAround``1(Vim.Math3d.Vector3,System.Single)
  commentId: M:Vim.Math3d.Transformable3D.RotateAround``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,System.Single)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.RotateAround``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,System.Single)
  name: RotateAround<Ray>(Vector3, Single)
  nameWithType: Transformable3D.RotateAround<Ray>(Vector3, Single)
  fullName: Vim.Math3d.Transformable3D.RotateAround<Vim.Math3d.Ray>(Vim.Math3d.Vector3, System.Single)
  nameWithType.vb: Transformable3D.RotateAround(Of Ray)(Vector3, Single)
  fullName.vb: Vim.Math3d.Transformable3D.RotateAround(Of Vim.Math3d.Ray)(Vim.Math3d.Vector3, System.Single)
  name.vb: RotateAround(Of Ray)(Vector3, Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.RotateAround``1(Vim.Math3d.Vector3,System.Single)
    name: RotateAround<Ray>
    nameWithType: Transformable3D.RotateAround<Ray>
    fullName: Vim.Math3d.Transformable3D.RotateAround<Vim.Math3d.Ray>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.RotateAround``1(Vim.Math3d.Vector3,System.Single)
    name: RotateAround(Of Ray)
    nameWithType: Transformable3D.RotateAround(Of Ray)
    fullName: Vim.Math3d.Transformable3D.RotateAround(Of Vim.Math3d.Ray)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Ray}.Vim.Math3d.Transformable3D.Rotate``1(System.Single,System.Single,System.Single)
  commentId: M:Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  name: Rotate<Ray>(Single, Single, Single)
  nameWithType: Transformable3D.Rotate<Ray>(Single, Single, Single)
  fullName: Vim.Math3d.Transformable3D.Rotate<Vim.Math3d.Ray>(System.Single, System.Single, System.Single)
  nameWithType.vb: Transformable3D.Rotate(Of Ray)(Single, Single, Single)
  fullName.vb: Vim.Math3d.Transformable3D.Rotate(Of Vim.Math3d.Ray)(System.Single, System.Single, System.Single)
  name.vb: Rotate(Of Ray)(Single, Single, Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Rotate``1(System.Single,System.Single,System.Single)
    name: Rotate<Ray>
    nameWithType: Transformable3D.Rotate<Ray>
    fullName: Vim.Math3d.Transformable3D.Rotate<Vim.Math3d.Ray>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Rotate``1(System.Single,System.Single,System.Single)
    name: Rotate(Of Ray)
    nameWithType: Transformable3D.Rotate(Of Ray)
    fullName: Vim.Math3d.Transformable3D.Rotate(Of Vim.Math3d.Ray)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Ray}.Vim.Math3d.Transformable3D.Reflect``1(Vim.Math3d.Plane)
  commentId: M:Vim.Math3d.Transformable3D.Reflect``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Plane)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.Reflect``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Plane)
  name: Reflect<Ray>(Plane)
  nameWithType: Transformable3D.Reflect<Ray>(Plane)
  fullName: Vim.Math3d.Transformable3D.Reflect<Vim.Math3d.Ray>(Vim.Math3d.Plane)
  nameWithType.vb: Transformable3D.Reflect(Of Ray)(Plane)
  fullName.vb: Vim.Math3d.Transformable3D.Reflect(Of Vim.Math3d.Ray)(Vim.Math3d.Plane)
  name.vb: Reflect(Of Ray)(Plane)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Reflect``1(Vim.Math3d.Plane)
    name: Reflect<Ray>
    nameWithType: Transformable3D.Reflect<Ray>
    fullName: Vim.Math3d.Transformable3D.Reflect<Vim.Math3d.Ray>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Plane
    name: Plane
    nameWithType: Plane
    fullName: Vim.Math3d.Plane
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Reflect``1(Vim.Math3d.Plane)
    name: Reflect(Of Ray)
    nameWithType: Transformable3D.Reflect(Of Ray)
    fullName: Vim.Math3d.Transformable3D.Reflect(Of Vim.Math3d.Ray)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Plane
    name: Plane
    nameWithType: Plane
    fullName: Vim.Math3d.Plane
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Ray}.Vim.Math3d.Transformable3D.RotateX``1(System.Single)
  commentId: M:Vim.Math3d.Transformable3D.RotateX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.RotateX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  name: RotateX<Ray>(Single)
  nameWithType: Transformable3D.RotateX<Ray>(Single)
  fullName: Vim.Math3d.Transformable3D.RotateX<Vim.Math3d.Ray>(System.Single)
  nameWithType.vb: Transformable3D.RotateX(Of Ray)(Single)
  fullName.vb: Vim.Math3d.Transformable3D.RotateX(Of Vim.Math3d.Ray)(System.Single)
  name.vb: RotateX(Of Ray)(Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.RotateX``1(System.Single)
    name: RotateX<Ray>
    nameWithType: Transformable3D.RotateX<Ray>
    fullName: Vim.Math3d.Transformable3D.RotateX<Vim.Math3d.Ray>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.RotateX``1(System.Single)
    name: RotateX(Of Ray)
    nameWithType: Transformable3D.RotateX(Of Ray)
    fullName: Vim.Math3d.Transformable3D.RotateX(Of Vim.Math3d.Ray)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Ray}.Vim.Math3d.Transformable3D.RotateY``1(System.Single)
  commentId: M:Vim.Math3d.Transformable3D.RotateY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.RotateY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  name: RotateY<Ray>(Single)
  nameWithType: Transformable3D.RotateY<Ray>(Single)
  fullName: Vim.Math3d.Transformable3D.RotateY<Vim.Math3d.Ray>(System.Single)
  nameWithType.vb: Transformable3D.RotateY(Of Ray)(Single)
  fullName.vb: Vim.Math3d.Transformable3D.RotateY(Of Vim.Math3d.Ray)(System.Single)
  name.vb: RotateY(Of Ray)(Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.RotateY``1(System.Single)
    name: RotateY<Ray>
    nameWithType: Transformable3D.RotateY<Ray>
    fullName: Vim.Math3d.Transformable3D.RotateY<Vim.Math3d.Ray>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.RotateY``1(System.Single)
    name: RotateY(Of Ray)
    nameWithType: Transformable3D.RotateY(Of Ray)
    fullName: Vim.Math3d.Transformable3D.RotateY(Of Vim.Math3d.Ray)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Ray}.Vim.Math3d.Transformable3D.RotateZ``1(System.Single)
  commentId: M:Vim.Math3d.Transformable3D.RotateZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.RotateZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  name: RotateZ<Ray>(Single)
  nameWithType: Transformable3D.RotateZ<Ray>(Single)
  fullName: Vim.Math3d.Transformable3D.RotateZ<Vim.Math3d.Ray>(System.Single)
  nameWithType.vb: Transformable3D.RotateZ(Of Ray)(Single)
  fullName.vb: Vim.Math3d.Transformable3D.RotateZ(Of Vim.Math3d.Ray)(System.Single)
  name.vb: RotateZ(Of Ray)(Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.RotateZ``1(System.Single)
    name: RotateZ<Ray>
    nameWithType: Transformable3D.RotateZ<Ray>
    fullName: Vim.Math3d.Transformable3D.RotateZ<Vim.Math3d.Ray>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.RotateZ``1(System.Single)
    name: RotateZ(Of Ray)
    nameWithType: Transformable3D.RotateZ(Of Ray)
    fullName: Vim.Math3d.Transformable3D.RotateZ(Of Vim.Math3d.Ray)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Ray}.Vim.Math3d.Transformable3D.TranslateRotateScale``1(Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Transformable3D.TranslateRotateScale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.TranslateRotateScale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
  name: TranslateRotateScale<Ray>(Vector3, Quaternion, Vector3)
  nameWithType: Transformable3D.TranslateRotateScale<Ray>(Vector3, Quaternion, Vector3)
  fullName: Vim.Math3d.Transformable3D.TranslateRotateScale<Vim.Math3d.Ray>(Vim.Math3d.Vector3, Vim.Math3d.Quaternion, Vim.Math3d.Vector3)
  nameWithType.vb: Transformable3D.TranslateRotateScale(Of Ray)(Vector3, Quaternion, Vector3)
  fullName.vb: Vim.Math3d.Transformable3D.TranslateRotateScale(Of Vim.Math3d.Ray)(Vim.Math3d.Vector3, Vim.Math3d.Quaternion, Vim.Math3d.Vector3)
  name.vb: TranslateRotateScale(Of Ray)(Vector3, Quaternion, Vector3)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.TranslateRotateScale``1(Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
    name: TranslateRotateScale<Ray>
    nameWithType: Transformable3D.TranslateRotateScale<Ray>
    fullName: Vim.Math3d.Transformable3D.TranslateRotateScale<Vim.Math3d.Ray>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Quaternion
    name: Quaternion
    nameWithType: Quaternion
    fullName: Vim.Math3d.Quaternion
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.TranslateRotateScale``1(Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
    name: TranslateRotateScale(Of Ray)
    nameWithType: Transformable3D.TranslateRotateScale(Of Ray)
    fullName: Vim.Math3d.Transformable3D.TranslateRotateScale(Of Vim.Math3d.Ray)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Quaternion
    name: Quaternion
    nameWithType: Quaternion
    fullName: Vim.Math3d.Quaternion
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D`1
  commentId: T:Vim.Math3d.ITransformable3D`1
  name: ITransformable3D<TSelf>
  nameWithType: ITransformable3D<TSelf>
  fullName: Vim.Math3d.ITransformable3D<TSelf>
  nameWithType.vb: ITransformable3D(Of TSelf)
  fullName.vb: Vim.Math3d.ITransformable3D(Of TSelf)
  name.vb: ITransformable3D(Of TSelf)
  spec.csharp:
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: TSelf
    nameWithType: TSelf
    fullName: TSelf
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSelf
    nameWithType: TSelf
    fullName: TSelf
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Vim.Math3d.Transformable3D.Transform``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Matrix4x4[])
  commentId: M:Vim.Math3d.Transformable3D.Transform``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Matrix4x4[])
  name: Transform<T>(ITransformable3D<T>, Matrix4x4[])
  nameWithType: Transformable3D.Transform<T>(ITransformable3D<T>, Matrix4x4[])
  fullName: Vim.Math3d.Transformable3D.Transform<T>(Vim.Math3d.ITransformable3D<T>, Vim.Math3d.Matrix4x4[])
  nameWithType.vb: Transformable3D.Transform(Of T)(ITransformable3D(Of T), Matrix4x4())
  fullName.vb: Vim.Math3d.Transformable3D.Transform(Of T)(Vim.Math3d.ITransformable3D(Of T), Vim.Math3d.Matrix4x4())
  name.vb: Transform(Of T)(ITransformable3D(Of T), Matrix4x4())
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Transform``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Matrix4x4[])
    name: Transform<T>
    nameWithType: Transformable3D.Transform<T>
    fullName: Vim.Math3d.Transformable3D.Transform<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Matrix4x4
    name: Matrix4x4
    nameWithType: Matrix4x4
    fullName: Vim.Math3d.Matrix4x4
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Transform``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Matrix4x4[])
    name: Transform(Of T)
    nameWithType: Transformable3D.Transform(Of T)
    fullName: Vim.Math3d.Transformable3D.Transform(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Matrix4x4
    name: Matrix4x4
    nameWithType: Matrix4x4
    fullName: Vim.Math3d.Matrix4x4
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D
  commentId: T:Vim.Math3d.Transformable3D
  parent: Vim.Math3d
  name: Transformable3D
  nameWithType: Transformable3D
  fullName: Vim.Math3d.Transformable3D
- uid: Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
  name: Translate<T>(ITransformable3D<T>, Vector3)
  nameWithType: Transformable3D.Translate<T>(ITransformable3D<T>, Vector3)
  fullName: Vim.Math3d.Transformable3D.Translate<T>(Vim.Math3d.ITransformable3D<T>, Vim.Math3d.Vector3)
  nameWithType.vb: Transformable3D.Translate(Of T)(ITransformable3D(Of T), Vector3)
  fullName.vb: Vim.Math3d.Transformable3D.Translate(Of T)(Vim.Math3d.ITransformable3D(Of T), Vim.Math3d.Vector3)
  name.vb: Translate(Of T)(ITransformable3D(Of T), Vector3)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
    name: Translate<T>
    nameWithType: Transformable3D.Translate<T>
    fullName: Vim.Math3d.Transformable3D.Translate<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
    name: Translate(Of T)
    nameWithType: Transformable3D.Translate(Of T)
    fullName: Vim.Math3d.Transformable3D.Translate(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  commentId: M:Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  isExternal: true
  name: Translate<T>(ITransformable3D<T>, Single, Single, Single)
  nameWithType: Transformable3D.Translate<T>(ITransformable3D<T>, Single, Single, Single)
  fullName: Vim.Math3d.Transformable3D.Translate<T>(Vim.Math3d.ITransformable3D<T>, System.Single, System.Single, System.Single)
  nameWithType.vb: Transformable3D.Translate(Of T)(ITransformable3D(Of T), Single, Single, Single)
  fullName.vb: Vim.Math3d.Transformable3D.Translate(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single, System.Single, System.Single)
  name.vb: Translate(Of T)(ITransformable3D(Of T), Single, Single, Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
    name: Translate<T>
    nameWithType: Transformable3D.Translate<T>
    fullName: Vim.Math3d.Transformable3D.Translate<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
    name: Translate(Of T)
    nameWithType: Transformable3D.Translate(Of T)
    fullName: Vim.Math3d.Transformable3D.Translate(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Quaternion)
  commentId: M:Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Quaternion)
  name: Rotate<T>(ITransformable3D<T>, Quaternion)
  nameWithType: Transformable3D.Rotate<T>(ITransformable3D<T>, Quaternion)
  fullName: Vim.Math3d.Transformable3D.Rotate<T>(Vim.Math3d.ITransformable3D<T>, Vim.Math3d.Quaternion)
  nameWithType.vb: Transformable3D.Rotate(Of T)(ITransformable3D(Of T), Quaternion)
  fullName.vb: Vim.Math3d.Transformable3D.Rotate(Of T)(Vim.Math3d.ITransformable3D(Of T), Vim.Math3d.Quaternion)
  name.vb: Rotate(Of T)(ITransformable3D(Of T), Quaternion)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Quaternion)
    name: Rotate<T>
    nameWithType: Transformable3D.Rotate<T>
    fullName: Vim.Math3d.Transformable3D.Rotate<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Quaternion
    name: Quaternion
    nameWithType: Quaternion
    fullName: Vim.Math3d.Quaternion
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Quaternion)
    name: Rotate(Of T)
    nameWithType: Transformable3D.Rotate(Of T)
    fullName: Vim.Math3d.Transformable3D.Rotate(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Quaternion
    name: Quaternion
    nameWithType: Quaternion
    fullName: Vim.Math3d.Quaternion
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  commentId: M:Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  isExternal: true
  name: Scale<T>(ITransformable3D<T>, Single)
  nameWithType: Transformable3D.Scale<T>(ITransformable3D<T>, Single)
  fullName: Vim.Math3d.Transformable3D.Scale<T>(Vim.Math3d.ITransformable3D<T>, System.Single)
  nameWithType.vb: Transformable3D.Scale(Of T)(ITransformable3D(Of T), Single)
  fullName.vb: Vim.Math3d.Transformable3D.Scale(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single)
  name.vb: Scale(Of T)(ITransformable3D(Of T), Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: Scale<T>
    nameWithType: Transformable3D.Scale<T>
    fullName: Vim.Math3d.Transformable3D.Scale<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: Scale(Of T)
    nameWithType: Transformable3D.Scale(Of T)
    fullName: Vim.Math3d.Transformable3D.Scale(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
  name: Scale<T>(ITransformable3D<T>, Vector3)
  nameWithType: Transformable3D.Scale<T>(ITransformable3D<T>, Vector3)
  fullName: Vim.Math3d.Transformable3D.Scale<T>(Vim.Math3d.ITransformable3D<T>, Vim.Math3d.Vector3)
  nameWithType.vb: Transformable3D.Scale(Of T)(ITransformable3D(Of T), Vector3)
  fullName.vb: Vim.Math3d.Transformable3D.Scale(Of T)(Vim.Math3d.ITransformable3D(Of T), Vim.Math3d.Vector3)
  name.vb: Scale(Of T)(ITransformable3D(Of T), Vector3)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
    name: Scale<T>
    nameWithType: Transformable3D.Scale<T>
    fullName: Vim.Math3d.Transformable3D.Scale<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
    name: Scale(Of T)
    nameWithType: Transformable3D.Scale(Of T)
    fullName: Vim.Math3d.Transformable3D.Scale(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  commentId: M:Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  isExternal: true
  name: Scale<T>(ITransformable3D<T>, Single, Single, Single)
  nameWithType: Transformable3D.Scale<T>(ITransformable3D<T>, Single, Single, Single)
  fullName: Vim.Math3d.Transformable3D.Scale<T>(Vim.Math3d.ITransformable3D<T>, System.Single, System.Single, System.Single)
  nameWithType.vb: Transformable3D.Scale(Of T)(ITransformable3D(Of T), Single, Single, Single)
  fullName.vb: Vim.Math3d.Transformable3D.Scale(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single, System.Single, System.Single)
  name.vb: Scale(Of T)(ITransformable3D(Of T), Single, Single, Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
    name: Scale<T>
    nameWithType: Transformable3D.Scale<T>
    fullName: Vim.Math3d.Transformable3D.Scale<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
    name: Scale(Of T)
    nameWithType: Transformable3D.Scale(Of T)
    fullName: Vim.Math3d.Transformable3D.Scale(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.ScaleX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  commentId: M:Vim.Math3d.Transformable3D.ScaleX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  isExternal: true
  name: ScaleX<T>(ITransformable3D<T>, Single)
  nameWithType: Transformable3D.ScaleX<T>(ITransformable3D<T>, Single)
  fullName: Vim.Math3d.Transformable3D.ScaleX<T>(Vim.Math3d.ITransformable3D<T>, System.Single)
  nameWithType.vb: Transformable3D.ScaleX(Of T)(ITransformable3D(Of T), Single)
  fullName.vb: Vim.Math3d.Transformable3D.ScaleX(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single)
  name.vb: ScaleX(Of T)(ITransformable3D(Of T), Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.ScaleX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: ScaleX<T>
    nameWithType: Transformable3D.ScaleX<T>
    fullName: Vim.Math3d.Transformable3D.ScaleX<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.ScaleX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: ScaleX(Of T)
    nameWithType: Transformable3D.ScaleX(Of T)
    fullName: Vim.Math3d.Transformable3D.ScaleX(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.ScaleY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  commentId: M:Vim.Math3d.Transformable3D.ScaleY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  isExternal: true
  name: ScaleY<T>(ITransformable3D<T>, Single)
  nameWithType: Transformable3D.ScaleY<T>(ITransformable3D<T>, Single)
  fullName: Vim.Math3d.Transformable3D.ScaleY<T>(Vim.Math3d.ITransformable3D<T>, System.Single)
  nameWithType.vb: Transformable3D.ScaleY(Of T)(ITransformable3D(Of T), Single)
  fullName.vb: Vim.Math3d.Transformable3D.ScaleY(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single)
  name.vb: ScaleY(Of T)(ITransformable3D(Of T), Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.ScaleY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: ScaleY<T>
    nameWithType: Transformable3D.ScaleY<T>
    fullName: Vim.Math3d.Transformable3D.ScaleY<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.ScaleY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: ScaleY(Of T)
    nameWithType: Transformable3D.ScaleY(Of T)
    fullName: Vim.Math3d.Transformable3D.ScaleY(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.ScaleZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  commentId: M:Vim.Math3d.Transformable3D.ScaleZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  isExternal: true
  name: ScaleZ<T>(ITransformable3D<T>, Single)
  nameWithType: Transformable3D.ScaleZ<T>(ITransformable3D<T>, Single)
  fullName: Vim.Math3d.Transformable3D.ScaleZ<T>(Vim.Math3d.ITransformable3D<T>, System.Single)
  nameWithType.vb: Transformable3D.ScaleZ(Of T)(ITransformable3D(Of T), Single)
  fullName.vb: Vim.Math3d.Transformable3D.ScaleZ(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single)
  name.vb: ScaleZ(Of T)(ITransformable3D(Of T), Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.ScaleZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: ScaleZ<T>
    nameWithType: Transformable3D.ScaleZ<T>
    fullName: Vim.Math3d.Transformable3D.ScaleZ<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.ScaleZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: ScaleZ(Of T)
    nameWithType: Transformable3D.ScaleZ(Of T)
    fullName: Vim.Math3d.Transformable3D.ScaleZ(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.LookAt``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Transformable3D.LookAt``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  name: LookAt<T>(ITransformable3D<T>, Vector3, Vector3, Vector3)
  nameWithType: Transformable3D.LookAt<T>(ITransformable3D<T>, Vector3, Vector3, Vector3)
  fullName: Vim.Math3d.Transformable3D.LookAt<T>(Vim.Math3d.ITransformable3D<T>, Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  nameWithType.vb: Transformable3D.LookAt(Of T)(ITransformable3D(Of T), Vector3, Vector3, Vector3)
  fullName.vb: Vim.Math3d.Transformable3D.LookAt(Of T)(Vim.Math3d.ITransformable3D(Of T), Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  name.vb: LookAt(Of T)(ITransformable3D(Of T), Vector3, Vector3, Vector3)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.LookAt``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
    name: LookAt<T>
    nameWithType: Transformable3D.LookAt<T>
    fullName: Vim.Math3d.Transformable3D.LookAt<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.LookAt``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
    name: LookAt(Of T)
    nameWithType: Transformable3D.LookAt(Of T)
    fullName: Vim.Math3d.Transformable3D.LookAt(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.RotateAround``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,System.Single)
  commentId: M:Vim.Math3d.Transformable3D.RotateAround``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,System.Single)
  isExternal: true
  name: RotateAround<T>(ITransformable3D<T>, Vector3, Single)
  nameWithType: Transformable3D.RotateAround<T>(ITransformable3D<T>, Vector3, Single)
  fullName: Vim.Math3d.Transformable3D.RotateAround<T>(Vim.Math3d.ITransformable3D<T>, Vim.Math3d.Vector3, System.Single)
  nameWithType.vb: Transformable3D.RotateAround(Of T)(ITransformable3D(Of T), Vector3, Single)
  fullName.vb: Vim.Math3d.Transformable3D.RotateAround(Of T)(Vim.Math3d.ITransformable3D(Of T), Vim.Math3d.Vector3, System.Single)
  name.vb: RotateAround(Of T)(ITransformable3D(Of T), Vector3, Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.RotateAround``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,System.Single)
    name: RotateAround<T>
    nameWithType: Transformable3D.RotateAround<T>
    fullName: Vim.Math3d.Transformable3D.RotateAround<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.RotateAround``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,System.Single)
    name: RotateAround(Of T)
    nameWithType: Transformable3D.RotateAround(Of T)
    fullName: Vim.Math3d.Transformable3D.RotateAround(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  commentId: M:Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  isExternal: true
  name: Rotate<T>(ITransformable3D<T>, Single, Single, Single)
  nameWithType: Transformable3D.Rotate<T>(ITransformable3D<T>, Single, Single, Single)
  fullName: Vim.Math3d.Transformable3D.Rotate<T>(Vim.Math3d.ITransformable3D<T>, System.Single, System.Single, System.Single)
  nameWithType.vb: Transformable3D.Rotate(Of T)(ITransformable3D(Of T), Single, Single, Single)
  fullName.vb: Vim.Math3d.Transformable3D.Rotate(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single, System.Single, System.Single)
  name.vb: Rotate(Of T)(ITransformable3D(Of T), Single, Single, Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
    name: Rotate<T>
    nameWithType: Transformable3D.Rotate<T>
    fullName: Vim.Math3d.Transformable3D.Rotate<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
    name: Rotate(Of T)
    nameWithType: Transformable3D.Rotate(Of T)
    fullName: Vim.Math3d.Transformable3D.Rotate(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.Reflect``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Plane)
  commentId: M:Vim.Math3d.Transformable3D.Reflect``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Plane)
  name: Reflect<T>(ITransformable3D<T>, Plane)
  nameWithType: Transformable3D.Reflect<T>(ITransformable3D<T>, Plane)
  fullName: Vim.Math3d.Transformable3D.Reflect<T>(Vim.Math3d.ITransformable3D<T>, Vim.Math3d.Plane)
  nameWithType.vb: Transformable3D.Reflect(Of T)(ITransformable3D(Of T), Plane)
  fullName.vb: Vim.Math3d.Transformable3D.Reflect(Of T)(Vim.Math3d.ITransformable3D(Of T), Vim.Math3d.Plane)
  name.vb: Reflect(Of T)(ITransformable3D(Of T), Plane)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Reflect``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Plane)
    name: Reflect<T>
    nameWithType: Transformable3D.Reflect<T>
    fullName: Vim.Math3d.Transformable3D.Reflect<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Plane
    name: Plane
    nameWithType: Plane
    fullName: Vim.Math3d.Plane
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Reflect``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Plane)
    name: Reflect(Of T)
    nameWithType: Transformable3D.Reflect(Of T)
    fullName: Vim.Math3d.Transformable3D.Reflect(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Plane
    name: Plane
    nameWithType: Plane
    fullName: Vim.Math3d.Plane
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.RotateX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  commentId: M:Vim.Math3d.Transformable3D.RotateX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  isExternal: true
  name: RotateX<T>(ITransformable3D<T>, Single)
  nameWithType: Transformable3D.RotateX<T>(ITransformable3D<T>, Single)
  fullName: Vim.Math3d.Transformable3D.RotateX<T>(Vim.Math3d.ITransformable3D<T>, System.Single)
  nameWithType.vb: Transformable3D.RotateX(Of T)(ITransformable3D(Of T), Single)
  fullName.vb: Vim.Math3d.Transformable3D.RotateX(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single)
  name.vb: RotateX(Of T)(ITransformable3D(Of T), Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.RotateX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: RotateX<T>
    nameWithType: Transformable3D.RotateX<T>
    fullName: Vim.Math3d.Transformable3D.RotateX<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.RotateX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: RotateX(Of T)
    nameWithType: Transformable3D.RotateX(Of T)
    fullName: Vim.Math3d.Transformable3D.RotateX(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.RotateY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  commentId: M:Vim.Math3d.Transformable3D.RotateY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  isExternal: true
  name: RotateY<T>(ITransformable3D<T>, Single)
  nameWithType: Transformable3D.RotateY<T>(ITransformable3D<T>, Single)
  fullName: Vim.Math3d.Transformable3D.RotateY<T>(Vim.Math3d.ITransformable3D<T>, System.Single)
  nameWithType.vb: Transformable3D.RotateY(Of T)(ITransformable3D(Of T), Single)
  fullName.vb: Vim.Math3d.Transformable3D.RotateY(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single)
  name.vb: RotateY(Of T)(ITransformable3D(Of T), Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.RotateY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: RotateY<T>
    nameWithType: Transformable3D.RotateY<T>
    fullName: Vim.Math3d.Transformable3D.RotateY<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.RotateY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: RotateY(Of T)
    nameWithType: Transformable3D.RotateY(Of T)
    fullName: Vim.Math3d.Transformable3D.RotateY(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.RotateZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  commentId: M:Vim.Math3d.Transformable3D.RotateZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  isExternal: true
  name: RotateZ<T>(ITransformable3D<T>, Single)
  nameWithType: Transformable3D.RotateZ<T>(ITransformable3D<T>, Single)
  fullName: Vim.Math3d.Transformable3D.RotateZ<T>(Vim.Math3d.ITransformable3D<T>, System.Single)
  nameWithType.vb: Transformable3D.RotateZ(Of T)(ITransformable3D(Of T), Single)
  fullName.vb: Vim.Math3d.Transformable3D.RotateZ(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single)
  name.vb: RotateZ(Of T)(ITransformable3D(Of T), Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.RotateZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: RotateZ<T>
    nameWithType: Transformable3D.RotateZ<T>
    fullName: Vim.Math3d.Transformable3D.RotateZ<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.RotateZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: RotateZ(Of T)
    nameWithType: Transformable3D.RotateZ(Of T)
    fullName: Vim.Math3d.Transformable3D.RotateZ(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.TranslateRotateScale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Transformable3D.TranslateRotateScale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
  name: TranslateRotateScale<T>(ITransformable3D<T>, Vector3, Quaternion, Vector3)
  nameWithType: Transformable3D.TranslateRotateScale<T>(ITransformable3D<T>, Vector3, Quaternion, Vector3)
  fullName: Vim.Math3d.Transformable3D.TranslateRotateScale<T>(Vim.Math3d.ITransformable3D<T>, Vim.Math3d.Vector3, Vim.Math3d.Quaternion, Vim.Math3d.Vector3)
  nameWithType.vb: Transformable3D.TranslateRotateScale(Of T)(ITransformable3D(Of T), Vector3, Quaternion, Vector3)
  fullName.vb: Vim.Math3d.Transformable3D.TranslateRotateScale(Of T)(Vim.Math3d.ITransformable3D(Of T), Vim.Math3d.Vector3, Vim.Math3d.Quaternion, Vim.Math3d.Vector3)
  name.vb: TranslateRotateScale(Of T)(ITransformable3D(Of T), Vector3, Quaternion, Vector3)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.TranslateRotateScale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
    name: TranslateRotateScale<T>
    nameWithType: Transformable3D.TranslateRotateScale<T>
    fullName: Vim.Math3d.Transformable3D.TranslateRotateScale<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Quaternion
    name: Quaternion
    nameWithType: Quaternion
    fullName: Vim.Math3d.Quaternion
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.TranslateRotateScale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
    name: TranslateRotateScale(Of T)
    nameWithType: Transformable3D.TranslateRotateScale(Of T)
    fullName: Vim.Math3d.Transformable3D.TranslateRotateScale(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Quaternion
    name: Quaternion
    nameWithType: Quaternion
    fullName: Vim.Math3d.Quaternion
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Ray.Intersects*
  commentId: Overload:Vim.Math3d.Ray.Intersects
  name: Intersects
  nameWithType: Ray.Intersects
  fullName: Vim.Math3d.Ray.Intersects
- uid: Vim.Math3d.AABox
  commentId: T:Vim.Math3d.AABox
  parent: Vim.Math3d
  name: AABox
  nameWithType: AABox
  fullName: Vim.Math3d.AABox
- uid: System.Nullable{System.Single}
  commentId: T:System.Nullable{System.Single}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Single>
  nameWithType: Nullable<Single>
  fullName: System.Nullable<System.Single>
  nameWithType.vb: Nullable(Of Single)
  fullName.vb: System.Nullable(Of System.Single)
  name.vb: Nullable(Of Single)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Plane
  commentId: T:Vim.Math3d.Plane
  parent: Vim.Math3d
  name: Plane
  nameWithType: Plane
  fullName: Vim.Math3d.Plane
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Vim.Math3d.Sphere
  commentId: T:Vim.Math3d.Sphere
  parent: Vim.Math3d
  name: Sphere
  nameWithType: Sphere
  fullName: Vim.Math3d.Sphere
- uid: Vim.Math3d.Ray.Transform*
  commentId: Overload:Vim.Math3d.Ray.Transform
  name: Transform
  nameWithType: Ray.Transform
  fullName: Vim.Math3d.Ray.Transform
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.Ray}.Transform(Vim.Math3d.Matrix4x4)
  commentId: M:Vim.Math3d.ITransformable3D{Vim.Math3d.Ray}.Transform(Vim.Math3d.Matrix4x4)
  parent: Vim.Math3d.ITransformable3D{Vim.Math3d.Ray}
  definition: Vim.Math3d.ITransformable3D`1.Transform(Vim.Math3d.Matrix4x4)
  name: Transform(Matrix4x4)
  nameWithType: ITransformable3D<Ray>.Transform(Matrix4x4)
  fullName: Vim.Math3d.ITransformable3D<Vim.Math3d.Ray>.Transform(Vim.Math3d.Matrix4x4)
  nameWithType.vb: ITransformable3D(Of Ray).Transform(Matrix4x4)
  fullName.vb: Vim.Math3d.ITransformable3D(Of Vim.Math3d.Ray).Transform(Vim.Math3d.Matrix4x4)
  spec.csharp:
  - uid: Vim.Math3d.ITransformable3D`1.Transform(Vim.Math3d.Matrix4x4)
    name: Transform
    nameWithType: ITransformable3D<Ray>.Transform
    fullName: Vim.Math3d.ITransformable3D<Vim.Math3d.Ray>.Transform
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Matrix4x4
    name: Matrix4x4
    nameWithType: Matrix4x4
    fullName: Vim.Math3d.Matrix4x4
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.ITransformable3D`1.Transform(Vim.Math3d.Matrix4x4)
    name: Transform
    nameWithType: ITransformable3D(Of Ray).Transform
    fullName: Vim.Math3d.ITransformable3D(Of Vim.Math3d.Ray).Transform
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Matrix4x4
    name: Matrix4x4
    nameWithType: Matrix4x4
    fullName: Vim.Math3d.Matrix4x4
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Matrix4x4
  commentId: T:Vim.Math3d.Matrix4x4
  parent: Vim.Math3d
  name: Matrix4x4
  nameWithType: Matrix4x4
  fullName: Vim.Math3d.Matrix4x4
- uid: Vim.Math3d.Ray
  commentId: T:Vim.Math3d.Ray
  parent: Vim.Math3d
  name: Ray
  nameWithType: Ray
  fullName: Vim.Math3d.Ray
- uid: Vim.Math3d.ITransformable3D`1.Transform(Vim.Math3d.Matrix4x4)
  commentId: M:Vim.Math3d.ITransformable3D`1.Transform(Vim.Math3d.Matrix4x4)
  name: Transform(Matrix4x4)
  nameWithType: ITransformable3D<TSelf>.Transform(Matrix4x4)
  fullName: Vim.Math3d.ITransformable3D<TSelf>.Transform(Vim.Math3d.Matrix4x4)
  nameWithType.vb: ITransformable3D(Of TSelf).Transform(Matrix4x4)
  fullName.vb: Vim.Math3d.ITransformable3D(Of TSelf).Transform(Vim.Math3d.Matrix4x4)
  spec.csharp:
  - uid: Vim.Math3d.ITransformable3D`1.Transform(Vim.Math3d.Matrix4x4)
    name: Transform
    nameWithType: ITransformable3D<TSelf>.Transform
    fullName: Vim.Math3d.ITransformable3D<TSelf>.Transform
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Matrix4x4
    name: Matrix4x4
    nameWithType: Matrix4x4
    fullName: Vim.Math3d.Matrix4x4
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.ITransformable3D`1.Transform(Vim.Math3d.Matrix4x4)
    name: Transform
    nameWithType: ITransformable3D(Of TSelf).Transform
    fullName: Vim.Math3d.ITransformable3D(Of TSelf).Transform
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Matrix4x4
    name: Matrix4x4
    nameWithType: Matrix4x4
    fullName: Vim.Math3d.Matrix4x4
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Triangle
  commentId: T:Vim.Math3d.Triangle
  parent: Vim.Math3d
  name: Triangle
  nameWithType: Triangle
  fullName: Vim.Math3d.Triangle
- uid: Vim.Math3d.Vector3
  commentId: T:Vim.Math3d.Vector3
  parent: Vim.Math3d
  name: Vector3
  nameWithType: Vector3
  fullName: Vim.Math3d.Vector3
- uid: Vim.Math3d.Ray.#ctor*
  commentId: Overload:Vim.Math3d.Ray.#ctor
  name: Ray
  nameWithType: Ray.Ray
  fullName: Vim.Math3d.Ray.Ray
- uid: System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3}
  commentId: T:System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3}
  parent: System
  definition: System.ValueTuple`2
  name: (T1, T2)<Vector3, Vector3>
  nameWithType: (T1, T2)<Vector3, Vector3>
  fullName: System.ValueTuple<Vim.Math3d.Vector3, Vim.Math3d.Vector3>
  nameWithType.vb: (T1, T2)(Of Vector3, Vector3)
  fullName.vb: System.ValueTuple(Of Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  name.vb: (T1, T2)(Of Vector3, Vector3)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple`2
  commentId: T:System.ValueTuple`2
  isExternal: true
  name: (T1, T2)<T1, T2>
  nameWithType: (T1, T2)<T1, T2>
  fullName: System.ValueTuple<T1, T2>
  nameWithType.vb: (T1, T2)(Of T1, T2)
  fullName.vb: System.ValueTuple(Of T1, T2)
  name.vb: (T1, T2)(Of T1, T2)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Ray.Create*
  commentId: Overload:Vim.Math3d.Ray.Create
  name: Create
  nameWithType: Ray.Create
  fullName: Vim.Math3d.Ray.Create
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Ray.Equals*
  commentId: Overload:Vim.Math3d.Ray.Equals
  name: Equals
  nameWithType: Ray.Equals
  fullName: Vim.Math3d.Ray.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Ray.GetHashCode*
  commentId: Overload:Vim.Math3d.Ray.GetHashCode
  name: GetHashCode
  nameWithType: Ray.GetHashCode
  fullName: Vim.Math3d.Ray.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Ray.ToString*
  commentId: Overload:Vim.Math3d.Ray.ToString
  name: ToString
  nameWithType: Ray.ToString
  fullName: Vim.Math3d.Ray.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Vim.Math3d.Ray.Deconstruct*
  commentId: Overload:Vim.Math3d.Ray.Deconstruct
  name: Deconstruct
  nameWithType: Ray.Deconstruct
  fullName: Vim.Math3d.Ray.Deconstruct
- uid: System.IEquatable{Vim.Math3d.Ray}.Equals(Vim.Math3d.Ray)
  commentId: M:System.IEquatable{Vim.Math3d.Ray}.Equals(Vim.Math3d.Ray)
  parent: System.IEquatable{Vim.Math3d.Ray}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(Ray)
  nameWithType: IEquatable<Ray>.Equals(Ray)
  fullName: System.IEquatable<Vim.Math3d.Ray>.Equals(Vim.Math3d.Ray)
  nameWithType.vb: IEquatable(Of Ray).Equals(Ray)
  fullName.vb: System.IEquatable(Of Vim.Math3d.Ray).Equals(Vim.Math3d.Ray)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<Ray>.Equals
    fullName: System.IEquatable<Vim.Math3d.Ray>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Ray
    name: Ray
    nameWithType: Ray
    fullName: Vim.Math3d.Ray
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of Ray).Equals
    fullName: System.IEquatable(Of Vim.Math3d.Ray).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Ray
    name: Ray
    nameWithType: Ray
    fullName: Vim.Math3d.Ray
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Ray.op_Equality*
  commentId: Overload:Vim.Math3d.Ray.op_Equality
  name: Equality
  nameWithType: Ray.Equality
  fullName: Vim.Math3d.Ray.Equality
- uid: Vim.Math3d.Ray.op_Inequality*
  commentId: Overload:Vim.Math3d.Ray.op_Inequality
  name: Inequality
  nameWithType: Ray.Inequality
  fullName: Vim.Math3d.Ray.Inequality
- uid: Vim.Math3d.Ray.op_Implicit*
  commentId: Overload:Vim.Math3d.Ray.op_Implicit
  name: Implicit
  nameWithType: Ray.Implicit
  fullName: Vim.Math3d.Ray.Implicit
  nameWithType.vb: Ray.Widening
  fullName.vb: Vim.Math3d.Ray.Widening
  name.vb: Widening
- uid: Vim.Math3d.Ray.AlmostEquals*
  commentId: Overload:Vim.Math3d.Ray.AlmostEquals
  name: AlmostEquals
  nameWithType: Ray.AlmostEquals
  fullName: Vim.Math3d.Ray.AlmostEquals
- uid: Vim.Math3d.Ray.SetPosition*
  commentId: Overload:Vim.Math3d.Ray.SetPosition
  name: SetPosition
  nameWithType: Ray.SetPosition
  fullName: Vim.Math3d.Ray.SetPosition
- uid: Vim.Math3d.Ray.SetDirection*
  commentId: Overload:Vim.Math3d.Ray.SetDirection
  name: SetDirection
  nameWithType: Ray.SetDirection
  fullName: Vim.Math3d.Ray.SetDirection

### YamlMime:ManagedReference
items:
- uid: Vim.Math3d.Motion
  commentId: T:Vim.Math3d.Motion
  id: Motion
  parent: Vim.Math3d
  children:
  - Vim.Math3d.Motion.#ctor(System.ValueTuple{Vim.Math3d.LinearMotion,Vim.Math3d.AngularMotion})
  - Vim.Math3d.Motion.#ctor(Vim.Math3d.LinearMotion,Vim.Math3d.AngularMotion)
  - Vim.Math3d.Motion.AlmostEquals(Vim.Math3d.Motion,System.Single)
  - Vim.Math3d.Motion.Angular
  - Vim.Math3d.Motion.Create(System.ValueTuple{Vim.Math3d.LinearMotion,Vim.Math3d.AngularMotion})
  - Vim.Math3d.Motion.Create(Vim.Math3d.LinearMotion,Vim.Math3d.AngularMotion)
  - Vim.Math3d.Motion.Deconstruct(Vim.Math3d.LinearMotion@,Vim.Math3d.AngularMotion@)
  - Vim.Math3d.Motion.Equals(System.Object)
  - Vim.Math3d.Motion.Equals(Vim.Math3d.Motion)
  - Vim.Math3d.Motion.GetHashCode
  - Vim.Math3d.Motion.Linear
  - Vim.Math3d.Motion.MaxValue
  - Vim.Math3d.Motion.MinValue
  - Vim.Math3d.Motion.op_Equality(Vim.Math3d.Motion,Vim.Math3d.Motion)
  - Vim.Math3d.Motion.op_Implicit(System.ValueTuple{Vim.Math3d.LinearMotion,Vim.Math3d.AngularMotion})~Vim.Math3d.Motion
  - Vim.Math3d.Motion.op_Implicit(Vim.Math3d.Motion)~System.ValueTuple{Vim.Math3d.LinearMotion,Vim.Math3d.AngularMotion}
  - Vim.Math3d.Motion.op_Inequality(Vim.Math3d.Motion,Vim.Math3d.Motion)
  - Vim.Math3d.Motion.SetAngular(Vim.Math3d.AngularMotion)
  - Vim.Math3d.Motion.SetLinear(Vim.Math3d.LinearMotion)
  - Vim.Math3d.Motion.ToString
  - Vim.Math3d.Motion.Zero
  langs:
  - csharp
  - vb
  name: Motion
  nameWithType: Motion
  fullName: Vim.Math3d.Motion
  type: Struct
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Motion
    path: ../src/Structs.cs
    startLine: 2237
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataContract]

      public readonly struct Motion : IEquatable<Motion>
    content.vb: >-
      <DataContract>

      Public Structure Motion
          Implements IEquatable(Of Motion)
  implements:
  - System.IEquatable{Vim.Math3d.Motion}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Vim.Math3d.Motion.Linear
  commentId: F:Vim.Math3d.Motion.Linear
  id: Linear
  parent: Vim.Math3d.Motion
  langs:
  - csharp
  - vb
  name: Linear
  nameWithType: Motion.Linear
  fullName: Vim.Math3d.Motion.Linear
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Linear
    path: ../src/Structs.cs
    startLine: 2243
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataMember]

      public readonly LinearMotion Linear
    return:
      type: Vim.Math3d.LinearMotion
    content.vb: >-
      <DataMember>

      Public ReadOnly Linear As LinearMotion
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.Motion.Angular
  commentId: F:Vim.Math3d.Motion.Angular
  id: Angular
  parent: Vim.Math3d.Motion
  langs:
  - csharp
  - vb
  name: Angular
  nameWithType: Motion.Angular
  fullName: Vim.Math3d.Motion.Angular
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Angular
    path: ../src/Structs.cs
    startLine: 2245
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataMember]

      public readonly AngularMotion Angular
    return:
      type: Vim.Math3d.AngularMotion
    content.vb: >-
      <DataMember>

      Public ReadOnly Angular As AngularMotion
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.Motion.#ctor(System.ValueTuple{Vim.Math3d.LinearMotion,Vim.Math3d.AngularMotion})
  commentId: M:Vim.Math3d.Motion.#ctor(System.ValueTuple{Vim.Math3d.LinearMotion,Vim.Math3d.AngularMotion})
  id: '#ctor(System.ValueTuple{Vim.Math3d.LinearMotion,Vim.Math3d.AngularMotion})'
  parent: Vim.Math3d.Motion
  langs:
  - csharp
  - vb
  name: Motion((LinearMotion linear, AngularMotion angular))
  nameWithType: Motion.Motion((LinearMotion linear, AngularMotion angular))
  fullName: Vim.Math3d.Motion.Motion(System.ValueTuple<Vim.Math3d.LinearMotion, Vim.Math3d.AngularMotion>)
  type: Constructor
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: .ctor
    path: ../src/Structs.cs
    startLine: 2246
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public Motion((LinearMotion linear, AngularMotion angular) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{Vim.Math3d.LinearMotion,Vim.Math3d.AngularMotion}
    content.vb: Public Sub New(tuple As(linear As LinearMotion, angular As AngularMotion)(Of LinearMotion , AngularMotion))
  overload: Vim.Math3d.Motion.#ctor*
  nameWithType.vb: Motion.Motion((linear As LinearMotion, angular As AngularMotion)(Of LinearMotion, AngularMotion))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Vim.Math3d.Motion.Motion(System.ValueTuple(Of Vim.Math3d.LinearMotion, Vim.Math3d.AngularMotion))
  name.vb: Motion((linear As LinearMotion, angular As AngularMotion)(Of LinearMotion, AngularMotion))
- uid: Vim.Math3d.Motion.#ctor(Vim.Math3d.LinearMotion,Vim.Math3d.AngularMotion)
  commentId: M:Vim.Math3d.Motion.#ctor(Vim.Math3d.LinearMotion,Vim.Math3d.AngularMotion)
  id: '#ctor(Vim.Math3d.LinearMotion,Vim.Math3d.AngularMotion)'
  parent: Vim.Math3d.Motion
  langs:
  - csharp
  - vb
  name: Motion(LinearMotion, AngularMotion)
  nameWithType: Motion.Motion(LinearMotion, AngularMotion)
  fullName: Vim.Math3d.Motion.Motion(Vim.Math3d.LinearMotion, Vim.Math3d.AngularMotion)
  type: Constructor
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: .ctor
    path: ../src/Structs.cs
    startLine: 2247
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public Motion(LinearMotion linear, AngularMotion angular)
    parameters:
    - id: linear
      type: Vim.Math3d.LinearMotion
    - id: angular
      type: Vim.Math3d.AngularMotion
    content.vb: Public Sub New(linear As LinearMotion, angular As AngularMotion)
  overload: Vim.Math3d.Motion.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Motion.Create(Vim.Math3d.LinearMotion,Vim.Math3d.AngularMotion)
  commentId: M:Vim.Math3d.Motion.Create(Vim.Math3d.LinearMotion,Vim.Math3d.AngularMotion)
  id: Create(Vim.Math3d.LinearMotion,Vim.Math3d.AngularMotion)
  parent: Vim.Math3d.Motion
  langs:
  - csharp
  - vb
  name: Create(LinearMotion, AngularMotion)
  nameWithType: Motion.Create(LinearMotion, AngularMotion)
  fullName: Vim.Math3d.Motion.Create(Vim.Math3d.LinearMotion, Vim.Math3d.AngularMotion)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Create
    path: ../src/Structs.cs
    startLine: 2248
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Motion Create(LinearMotion linear, AngularMotion angular)
    parameters:
    - id: linear
      type: Vim.Math3d.LinearMotion
    - id: angular
      type: Vim.Math3d.AngularMotion
    return:
      type: Vim.Math3d.Motion
    content.vb: Public Shared Function Create(linear As LinearMotion, angular As AngularMotion) As Motion
  overload: Vim.Math3d.Motion.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Motion.Create(System.ValueTuple{Vim.Math3d.LinearMotion,Vim.Math3d.AngularMotion})
  commentId: M:Vim.Math3d.Motion.Create(System.ValueTuple{Vim.Math3d.LinearMotion,Vim.Math3d.AngularMotion})
  id: Create(System.ValueTuple{Vim.Math3d.LinearMotion,Vim.Math3d.AngularMotion})
  parent: Vim.Math3d.Motion
  langs:
  - csharp
  - vb
  name: Create((LinearMotion linear, AngularMotion angular))
  nameWithType: Motion.Create((LinearMotion linear, AngularMotion angular))
  fullName: Vim.Math3d.Motion.Create(System.ValueTuple<Vim.Math3d.LinearMotion, Vim.Math3d.AngularMotion>)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Create
    path: ../src/Structs.cs
    startLine: 2249
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Motion Create((LinearMotion linear, AngularMotion angular) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{Vim.Math3d.LinearMotion,Vim.Math3d.AngularMotion}
    return:
      type: Vim.Math3d.Motion
    content.vb: Public Shared Function Create(tuple As(linear As LinearMotion, angular As AngularMotion)(Of LinearMotion , AngularMotion)) As Motion
  overload: Vim.Math3d.Motion.Create*
  nameWithType.vb: Motion.Create((linear As LinearMotion, angular As AngularMotion)(Of LinearMotion, AngularMotion))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.Motion.Create(System.ValueTuple(Of Vim.Math3d.LinearMotion, Vim.Math3d.AngularMotion))
  name.vb: Create((linear As LinearMotion, angular As AngularMotion)(Of LinearMotion, AngularMotion))
- uid: Vim.Math3d.Motion.Equals(System.Object)
  commentId: M:Vim.Math3d.Motion.Equals(System.Object)
  id: Equals(System.Object)
  parent: Vim.Math3d.Motion
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Motion.Equals(Object)
  fullName: Vim.Math3d.Motion.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Equals
    path: ../src/Structs.cs
    startLine: 2250
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: Vim.Math3d.Motion.Equals*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.Motion.GetHashCode
  commentId: M:Vim.Math3d.Motion.GetHashCode
  id: GetHashCode
  parent: Vim.Math3d.Motion
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Motion.GetHashCode()
  fullName: Vim.Math3d.Motion.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: GetHashCode
    path: ../src/Structs.cs
    startLine: 2251
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: Vim.Math3d.Motion.GetHashCode*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.Motion.ToString
  commentId: M:Vim.Math3d.Motion.ToString
  id: ToString
  parent: Vim.Math3d.Motion
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Motion.ToString()
  fullName: Vim.Math3d.Motion.ToString()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToString
    path: ../src/Structs.cs
    startLine: 2252
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: Vim.Math3d.Motion.ToString*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.Motion.Deconstruct(Vim.Math3d.LinearMotion@,Vim.Math3d.AngularMotion@)
  commentId: M:Vim.Math3d.Motion.Deconstruct(Vim.Math3d.LinearMotion@,Vim.Math3d.AngularMotion@)
  id: Deconstruct(Vim.Math3d.LinearMotion@,Vim.Math3d.AngularMotion@)
  parent: Vim.Math3d.Motion
  langs:
  - csharp
  - vb
  name: Deconstruct(out LinearMotion, out AngularMotion)
  nameWithType: Motion.Deconstruct(out LinearMotion, out AngularMotion)
  fullName: Vim.Math3d.Motion.Deconstruct(out Vim.Math3d.LinearMotion, out Vim.Math3d.AngularMotion)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Deconstruct
    path: ../src/Structs.cs
    startLine: 2253
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly void Deconstruct(out LinearMotion linear, out AngularMotion angular)
    parameters:
    - id: linear
      type: Vim.Math3d.LinearMotion
    - id: angular
      type: Vim.Math3d.AngularMotion
    content.vb: Public Sub Deconstruct(ByRef linear As LinearMotion, ByRef angular As AngularMotion)
  overload: Vim.Math3d.Motion.Deconstruct*
  nameWithType.vb: Motion.Deconstruct(ByRef LinearMotion, ByRef AngularMotion)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  fullName.vb: Vim.Math3d.Motion.Deconstruct(ByRef Vim.Math3d.LinearMotion, ByRef Vim.Math3d.AngularMotion)
  name.vb: Deconstruct(ByRef LinearMotion, ByRef AngularMotion)
- uid: Vim.Math3d.Motion.Equals(Vim.Math3d.Motion)
  commentId: M:Vim.Math3d.Motion.Equals(Vim.Math3d.Motion)
  id: Equals(Vim.Math3d.Motion)
  parent: Vim.Math3d.Motion
  langs:
  - csharp
  - vb
  name: Equals(Motion)
  nameWithType: Motion.Equals(Motion)
  fullName: Vim.Math3d.Motion.Equals(Vim.Math3d.Motion)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Equals
    path: ../src/Structs.cs
    startLine: 2254
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool Equals(Motion x)
    parameters:
    - id: x
      type: Vim.Math3d.Motion
    return:
      type: System.Boolean
    content.vb: Public Function Equals(x As Motion) As Boolean
  overload: Vim.Math3d.Motion.Equals*
  implements:
  - System.IEquatable{Vim.Math3d.Motion}.Equals(Vim.Math3d.Motion)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Motion.op_Equality(Vim.Math3d.Motion,Vim.Math3d.Motion)
  commentId: M:Vim.Math3d.Motion.op_Equality(Vim.Math3d.Motion,Vim.Math3d.Motion)
  id: op_Equality(Vim.Math3d.Motion,Vim.Math3d.Motion)
  parent: Vim.Math3d.Motion
  langs:
  - csharp
  - vb
  name: Equality(Motion, Motion)
  nameWithType: Motion.Equality(Motion, Motion)
  fullName: Vim.Math3d.Motion.Equality(Vim.Math3d.Motion, Vim.Math3d.Motion)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Equality
    path: ../src/Structs.cs
    startLine: 2255
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator ==(Motion x0, Motion x1)
    parameters:
    - id: x0
      type: Vim.Math3d.Motion
    - id: x1
      type: Vim.Math3d.Motion
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(x0 As Motion, x1 As Motion) As Boolean
  overload: Vim.Math3d.Motion.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Motion.op_Inequality(Vim.Math3d.Motion,Vim.Math3d.Motion)
  commentId: M:Vim.Math3d.Motion.op_Inequality(Vim.Math3d.Motion,Vim.Math3d.Motion)
  id: op_Inequality(Vim.Math3d.Motion,Vim.Math3d.Motion)
  parent: Vim.Math3d.Motion
  langs:
  - csharp
  - vb
  name: Inequality(Motion, Motion)
  nameWithType: Motion.Inequality(Motion, Motion)
  fullName: Vim.Math3d.Motion.Inequality(Vim.Math3d.Motion, Vim.Math3d.Motion)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Inequality
    path: ../src/Structs.cs
    startLine: 2256
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator !=(Motion x0, Motion x1)
    parameters:
    - id: x0
      type: Vim.Math3d.Motion
    - id: x1
      type: Vim.Math3d.Motion
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(x0 As Motion, x1 As Motion) As Boolean
  overload: Vim.Math3d.Motion.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Motion.op_Implicit(System.ValueTuple{Vim.Math3d.LinearMotion,Vim.Math3d.AngularMotion})~Vim.Math3d.Motion
  commentId: M:Vim.Math3d.Motion.op_Implicit(System.ValueTuple{Vim.Math3d.LinearMotion,Vim.Math3d.AngularMotion})~Vim.Math3d.Motion
  id: op_Implicit(System.ValueTuple{Vim.Math3d.LinearMotion,Vim.Math3d.AngularMotion})~Vim.Math3d.Motion
  parent: Vim.Math3d.Motion
  langs:
  - csharp
  - vb
  name: Implicit((LinearMotion linear, AngularMotion angular) to Motion)
  nameWithType: Motion.Implicit((LinearMotion linear, AngularMotion angular) to Motion)
  fullName: Vim.Math3d.Motion.Implicit(System.ValueTuple<Vim.Math3d.LinearMotion, Vim.Math3d.AngularMotion> to Vim.Math3d.Motion)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Implicit
    path: ../src/Structs.cs
    startLine: 2257
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static implicit operator Motion((LinearMotion linear, AngularMotion angular) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{Vim.Math3d.LinearMotion,Vim.Math3d.AngularMotion}
    return:
      type: Vim.Math3d.Motion
    content.vb: Public Shared Widening Operator CType(tuple As(linear As LinearMotion, angular As AngularMotion)(Of LinearMotion , AngularMotion)) As Motion
  overload: Vim.Math3d.Motion.op_Implicit*
  nameWithType.vb: Motion.Widening((linear As LinearMotion, angular As AngularMotion)(Of LinearMotion, AngularMotion) to Motion)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.Motion.Widening(System.ValueTuple(Of Vim.Math3d.LinearMotion, Vim.Math3d.AngularMotion) to Vim.Math3d.Motion)
  name.vb: Widening((linear As LinearMotion, angular As AngularMotion)(Of LinearMotion, AngularMotion) to Motion)
- uid: Vim.Math3d.Motion.op_Implicit(Vim.Math3d.Motion)~System.ValueTuple{Vim.Math3d.LinearMotion,Vim.Math3d.AngularMotion}
  commentId: M:Vim.Math3d.Motion.op_Implicit(Vim.Math3d.Motion)~System.ValueTuple{Vim.Math3d.LinearMotion,Vim.Math3d.AngularMotion}
  id: op_Implicit(Vim.Math3d.Motion)~System.ValueTuple{Vim.Math3d.LinearMotion,Vim.Math3d.AngularMotion}
  parent: Vim.Math3d.Motion
  langs:
  - csharp
  - vb
  name: Implicit(Motion to (LinearMotion linear, AngularMotion angular))
  nameWithType: Motion.Implicit(Motion to (LinearMotion linear, AngularMotion angular))
  fullName: Vim.Math3d.Motion.Implicit(Vim.Math3d.Motion to System.ValueTuple<Vim.Math3d.LinearMotion, Vim.Math3d.AngularMotion>)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Implicit
    path: ../src/Structs.cs
    startLine: 2258
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static implicit operator (LinearMotion linear, AngularMotion angular)(Motion self)
    parameters:
    - id: self
      type: Vim.Math3d.Motion
    return:
      type: System.ValueTuple{Vim.Math3d.LinearMotion,Vim.Math3d.AngularMotion}
    content.vb: Public Shared Widening Operator CType(self As Motion) As(linear As LinearMotion, angular As AngularMotion)(Of LinearMotion , AngularMotion)
  overload: Vim.Math3d.Motion.op_Implicit*
  nameWithType.vb: Motion.Widening(Motion to (linear As LinearMotion, angular As AngularMotion)(Of LinearMotion, AngularMotion))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.Motion.Widening(Vim.Math3d.Motion to System.ValueTuple(Of Vim.Math3d.LinearMotion, Vim.Math3d.AngularMotion))
  name.vb: Widening(Motion to (linear As LinearMotion, angular As AngularMotion)(Of LinearMotion, AngularMotion))
- uid: Vim.Math3d.Motion.AlmostEquals(Vim.Math3d.Motion,System.Single)
  commentId: M:Vim.Math3d.Motion.AlmostEquals(Vim.Math3d.Motion,System.Single)
  id: AlmostEquals(Vim.Math3d.Motion,System.Single)
  parent: Vim.Math3d.Motion
  langs:
  - csharp
  - vb
  name: AlmostEquals(Motion, Single)
  nameWithType: Motion.AlmostEquals(Motion, Single)
  fullName: Vim.Math3d.Motion.AlmostEquals(Vim.Math3d.Motion, System.Single)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: AlmostEquals
    path: ../src/Structs.cs
    startLine: 2260
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool AlmostEquals(Motion x, float tolerance = 1E-07F)
    parameters:
    - id: x
      type: Vim.Math3d.Motion
    - id: tolerance
      type: System.Single
    return:
      type: System.Boolean
    content.vb: Public Function AlmostEquals(x As Motion, tolerance As Single = 1E-07F) As Boolean
  overload: Vim.Math3d.Motion.AlmostEquals*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Motion.Zero
  commentId: F:Vim.Math3d.Motion.Zero
  id: Zero
  parent: Vim.Math3d.Motion
  langs:
  - csharp
  - vb
  name: Zero
  nameWithType: Motion.Zero
  fullName: Vim.Math3d.Motion.Zero
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Zero
    path: ../src/Structs.cs
    startLine: 2261
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Motion Zero
    return:
      type: Vim.Math3d.Motion
    content.vb: Public Shared Zero As Motion
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Motion.MinValue
  commentId: F:Vim.Math3d.Motion.MinValue
  id: MinValue
  parent: Vim.Math3d.Motion
  langs:
  - csharp
  - vb
  name: MinValue
  nameWithType: Motion.MinValue
  fullName: Vim.Math3d.Motion.MinValue
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MinValue
    path: ../src/Structs.cs
    startLine: 2262
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Motion MinValue
    return:
      type: Vim.Math3d.Motion
    content.vb: Public Shared MinValue As Motion
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Motion.MaxValue
  commentId: F:Vim.Math3d.Motion.MaxValue
  id: MaxValue
  parent: Vim.Math3d.Motion
  langs:
  - csharp
  - vb
  name: MaxValue
  nameWithType: Motion.MaxValue
  fullName: Vim.Math3d.Motion.MaxValue
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MaxValue
    path: ../src/Structs.cs
    startLine: 2263
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Motion MaxValue
    return:
      type: Vim.Math3d.Motion
    content.vb: Public Shared MaxValue As Motion
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Motion.SetLinear(Vim.Math3d.LinearMotion)
  commentId: M:Vim.Math3d.Motion.SetLinear(Vim.Math3d.LinearMotion)
  id: SetLinear(Vim.Math3d.LinearMotion)
  parent: Vim.Math3d.Motion
  langs:
  - csharp
  - vb
  name: SetLinear(LinearMotion)
  nameWithType: Motion.SetLinear(LinearMotion)
  fullName: Vim.Math3d.Motion.SetLinear(Vim.Math3d.LinearMotion)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SetLinear
    path: ../src/Structs.cs
    startLine: 2264
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly Motion SetLinear(LinearMotion x)
    parameters:
    - id: x
      type: Vim.Math3d.LinearMotion
    return:
      type: Vim.Math3d.Motion
    content.vb: Public Function SetLinear(x As LinearMotion) As Motion
  overload: Vim.Math3d.Motion.SetLinear*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Motion.SetAngular(Vim.Math3d.AngularMotion)
  commentId: M:Vim.Math3d.Motion.SetAngular(Vim.Math3d.AngularMotion)
  id: SetAngular(Vim.Math3d.AngularMotion)
  parent: Vim.Math3d.Motion
  langs:
  - csharp
  - vb
  name: SetAngular(AngularMotion)
  nameWithType: Motion.SetAngular(AngularMotion)
  fullName: Vim.Math3d.Motion.SetAngular(Vim.Math3d.AngularMotion)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SetAngular
    path: ../src/Structs.cs
    startLine: 2265
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly Motion SetAngular(AngularMotion x)
    parameters:
    - id: x
      type: Vim.Math3d.AngularMotion
    return:
      type: Vim.Math3d.Motion
    content.vb: Public Function SetAngular(x As AngularMotion) As Motion
  overload: Vim.Math3d.Motion.SetAngular*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
references:
- uid: Vim.Math3d
  commentId: N:Vim.Math3d
  name: Vim.Math3d
  nameWithType: Vim.Math3d
  fullName: Vim.Math3d
- uid: System.IEquatable{Vim.Math3d.Motion}
  commentId: T:System.IEquatable{Vim.Math3d.Motion}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Motion>
  nameWithType: IEquatable<Motion>
  fullName: System.IEquatable<Vim.Math3d.Motion>
  nameWithType.vb: IEquatable(Of Motion)
  fullName.vb: System.IEquatable(Of Vim.Math3d.Motion)
  name.vb: IEquatable(Of Motion)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.Motion
    name: Motion
    nameWithType: Motion
    fullName: Vim.Math3d.Motion
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.Motion
    name: Motion
    nameWithType: Motion
    fullName: Vim.Math3d.Motion
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Vim.Math3d.LinearMotion
  commentId: T:Vim.Math3d.LinearMotion
  parent: Vim.Math3d
  name: LinearMotion
  nameWithType: LinearMotion
  fullName: Vim.Math3d.LinearMotion
- uid: Vim.Math3d.AngularMotion
  commentId: T:Vim.Math3d.AngularMotion
  parent: Vim.Math3d
  name: AngularMotion
  nameWithType: AngularMotion
  fullName: Vim.Math3d.AngularMotion
- uid: Vim.Math3d.Motion.#ctor*
  commentId: Overload:Vim.Math3d.Motion.#ctor
  name: Motion
  nameWithType: Motion.Motion
  fullName: Vim.Math3d.Motion.Motion
- uid: System.ValueTuple{Vim.Math3d.LinearMotion,Vim.Math3d.AngularMotion}
  commentId: T:System.ValueTuple{Vim.Math3d.LinearMotion,Vim.Math3d.AngularMotion}
  parent: System
  definition: System.ValueTuple`2
  name: (T1, T2)<LinearMotion, AngularMotion>
  nameWithType: (T1, T2)<LinearMotion, AngularMotion>
  fullName: System.ValueTuple<Vim.Math3d.LinearMotion, Vim.Math3d.AngularMotion>
  nameWithType.vb: (T1, T2)(Of LinearMotion, AngularMotion)
  fullName.vb: System.ValueTuple(Of Vim.Math3d.LinearMotion, Vim.Math3d.AngularMotion)
  name.vb: (T1, T2)(Of LinearMotion, AngularMotion)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.LinearMotion
    name: LinearMotion
    nameWithType: LinearMotion
    fullName: Vim.Math3d.LinearMotion
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.AngularMotion
    name: AngularMotion
    nameWithType: AngularMotion
    fullName: Vim.Math3d.AngularMotion
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.LinearMotion
    name: LinearMotion
    nameWithType: LinearMotion
    fullName: Vim.Math3d.LinearMotion
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.AngularMotion
    name: AngularMotion
    nameWithType: AngularMotion
    fullName: Vim.Math3d.AngularMotion
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple`2
  commentId: T:System.ValueTuple`2
  isExternal: true
  name: (T1, T2)<T1, T2>
  nameWithType: (T1, T2)<T1, T2>
  fullName: System.ValueTuple<T1, T2>
  nameWithType.vb: (T1, T2)(Of T1, T2)
  fullName.vb: System.ValueTuple(Of T1, T2)
  name.vb: (T1, T2)(Of T1, T2)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Motion.Create*
  commentId: Overload:Vim.Math3d.Motion.Create
  name: Create
  nameWithType: Motion.Create
  fullName: Vim.Math3d.Motion.Create
- uid: Vim.Math3d.Motion
  commentId: T:Vim.Math3d.Motion
  parent: Vim.Math3d
  name: Motion
  nameWithType: Motion
  fullName: Vim.Math3d.Motion
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Motion.Equals*
  commentId: Overload:Vim.Math3d.Motion.Equals
  name: Equals
  nameWithType: Motion.Equals
  fullName: Vim.Math3d.Motion.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Motion.GetHashCode*
  commentId: Overload:Vim.Math3d.Motion.GetHashCode
  name: GetHashCode
  nameWithType: Motion.GetHashCode
  fullName: Vim.Math3d.Motion.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Motion.ToString*
  commentId: Overload:Vim.Math3d.Motion.ToString
  name: ToString
  nameWithType: Motion.ToString
  fullName: Vim.Math3d.Motion.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Vim.Math3d.Motion.Deconstruct*
  commentId: Overload:Vim.Math3d.Motion.Deconstruct
  name: Deconstruct
  nameWithType: Motion.Deconstruct
  fullName: Vim.Math3d.Motion.Deconstruct
- uid: System.IEquatable{Vim.Math3d.Motion}.Equals(Vim.Math3d.Motion)
  commentId: M:System.IEquatable{Vim.Math3d.Motion}.Equals(Vim.Math3d.Motion)
  parent: System.IEquatable{Vim.Math3d.Motion}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(Motion)
  nameWithType: IEquatable<Motion>.Equals(Motion)
  fullName: System.IEquatable<Vim.Math3d.Motion>.Equals(Vim.Math3d.Motion)
  nameWithType.vb: IEquatable(Of Motion).Equals(Motion)
  fullName.vb: System.IEquatable(Of Vim.Math3d.Motion).Equals(Vim.Math3d.Motion)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<Motion>.Equals
    fullName: System.IEquatable<Vim.Math3d.Motion>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Motion
    name: Motion
    nameWithType: Motion
    fullName: Vim.Math3d.Motion
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of Motion).Equals
    fullName: System.IEquatable(Of Vim.Math3d.Motion).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Motion
    name: Motion
    nameWithType: Motion
    fullName: Vim.Math3d.Motion
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Motion.op_Equality*
  commentId: Overload:Vim.Math3d.Motion.op_Equality
  name: Equality
  nameWithType: Motion.Equality
  fullName: Vim.Math3d.Motion.Equality
- uid: Vim.Math3d.Motion.op_Inequality*
  commentId: Overload:Vim.Math3d.Motion.op_Inequality
  name: Inequality
  nameWithType: Motion.Inequality
  fullName: Vim.Math3d.Motion.Inequality
- uid: Vim.Math3d.Motion.op_Implicit*
  commentId: Overload:Vim.Math3d.Motion.op_Implicit
  name: Implicit
  nameWithType: Motion.Implicit
  fullName: Vim.Math3d.Motion.Implicit
  nameWithType.vb: Motion.Widening
  fullName.vb: Vim.Math3d.Motion.Widening
  name.vb: Widening
- uid: Vim.Math3d.Motion.AlmostEquals*
  commentId: Overload:Vim.Math3d.Motion.AlmostEquals
  name: AlmostEquals
  nameWithType: Motion.AlmostEquals
  fullName: Vim.Math3d.Motion.AlmostEquals
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Vim.Math3d.Motion.SetLinear*
  commentId: Overload:Vim.Math3d.Motion.SetLinear
  name: SetLinear
  nameWithType: Motion.SetLinear
  fullName: Vim.Math3d.Motion.SetLinear
- uid: Vim.Math3d.Motion.SetAngular*
  commentId: Overload:Vim.Math3d.Motion.SetAngular
  name: SetAngular
  nameWithType: Motion.SetAngular
  fullName: Vim.Math3d.Motion.SetAngular

### YamlMime:ManagedReference
items:
- uid: Vim.Math3d.AABox
  commentId: T:Vim.Math3d.AABox
  id: AABox
  parent: Vim.Math3d
  children:
  - Vim.Math3d.AABox.#ctor(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3})
  - Vim.Math3d.AABox.#ctor(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  - Vim.Math3d.AABox.AlmostEquals(Vim.Math3d.AABox,System.Single)
  - Vim.Math3d.AABox.BackIndices
  - Vim.Math3d.AABox.BottomIndices
  - Vim.Math3d.AABox.Center
  - Vim.Math3d.AABox.CenterBottom
  - Vim.Math3d.AABox.CenterDistance(Vim.Math3d.Vector3)
  - Vim.Math3d.AABox.CenterDistanceToOrigin
  - Vim.Math3d.AABox.CompareTo(Vim.Math3d.AABox)
  - Vim.Math3d.AABox.Contains(Vim.Math3d.AABox)
  - Vim.Math3d.AABox.Contains(Vim.Math3d.Sphere)
  - Vim.Math3d.AABox.Contains(Vim.Math3d.Vector3)
  - Vim.Math3d.AABox.Corners
  - Vim.Math3d.AABox.Count
  - Vim.Math3d.AABox.Create(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector3})
  - Vim.Math3d.AABox.Create(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3})
  - Vim.Math3d.AABox.Create(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  - Vim.Math3d.AABox.Create(Vim.Math3d.Vector3[])
  - Vim.Math3d.AABox.CreateFromSphere(Vim.Math3d.Sphere)
  - Vim.Math3d.AABox.Deconstruct(Vim.Math3d.Vector3@,Vim.Math3d.Vector3@)
  - Vim.Math3d.AABox.Diagonal
  - Vim.Math3d.AABox.Distance(Vim.Math3d.Vector3)
  - Vim.Math3d.AABox.DistanceToOrigin
  - Vim.Math3d.AABox.Empty
  - Vim.Math3d.AABox.Equals(System.Object)
  - Vim.Math3d.AABox.Equals(Vim.Math3d.AABox)
  - Vim.Math3d.AABox.Extent
  - Vim.Math3d.AABox.FaceCenters
  - Vim.Math3d.AABox.FromCenterAndExtent(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  - Vim.Math3d.AABox.FrontIndices
  - Vim.Math3d.AABox.GetCorners(Vim.Math3d.Vector3[])
  - Vim.Math3d.AABox.GetCornersAndFaceCenters
  - Vim.Math3d.AABox.GetHashCode
  - Vim.Math3d.AABox.Intersection(Vim.Math3d.AABox)
  - Vim.Math3d.AABox.Intersects(Vim.Math3d.AABox)
  - Vim.Math3d.AABox.Intersects(Vim.Math3d.AABox,System.Boolean@)
  - Vim.Math3d.AABox.Intersects(Vim.Math3d.Plane)
  - Vim.Math3d.AABox.Intersects(Vim.Math3d.Sphere)
  - Vim.Math3d.AABox.IsEmpty
  - Vim.Math3d.AABox.IsInfinity
  - Vim.Math3d.AABox.IsNaN
  - Vim.Math3d.AABox.IsValid
  - Vim.Math3d.AABox.Item(System.Int32)
  - Vim.Math3d.AABox.LeftIndices
  - Vim.Math3d.AABox.Lerp(Vim.Math3d.Vector3)
  - Vim.Math3d.AABox.Magnitude
  - Vim.Math3d.AABox.MagnitudeSquared
  - Vim.Math3d.AABox.Max
  - Vim.Math3d.AABox.MaxFaceArea
  - Vim.Math3d.AABox.MaxSide
  - Vim.Math3d.AABox.MaxValue
  - Vim.Math3d.AABox.Merge(Vim.Math3d.AABox)
  - Vim.Math3d.AABox.Merge(Vim.Math3d.Vector3)
  - Vim.Math3d.AABox.Min
  - Vim.Math3d.AABox.MinSide
  - Vim.Math3d.AABox.MinValue
  - Vim.Math3d.AABox.op_Addition(Vim.Math3d.AABox,Vim.Math3d.AABox)
  - Vim.Math3d.AABox.op_Addition(Vim.Math3d.AABox,Vim.Math3d.Vector3)
  - Vim.Math3d.AABox.op_Equality(Vim.Math3d.AABox,Vim.Math3d.AABox)
  - Vim.Math3d.AABox.op_GreaterThan(Vim.Math3d.AABox,Vim.Math3d.AABox)
  - Vim.Math3d.AABox.op_GreaterThanOrEqual(Vim.Math3d.AABox,Vim.Math3d.AABox)
  - Vim.Math3d.AABox.op_Implicit(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3})~Vim.Math3d.AABox
  - Vim.Math3d.AABox.op_Implicit(Vim.Math3d.AABox)~System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3}
  - Vim.Math3d.AABox.op_Inequality(Vim.Math3d.AABox,Vim.Math3d.AABox)
  - Vim.Math3d.AABox.op_LessThan(Vim.Math3d.AABox,Vim.Math3d.AABox)
  - Vim.Math3d.AABox.op_LessThanOrEqual(Vim.Math3d.AABox,Vim.Math3d.AABox)
  - Vim.Math3d.AABox.op_Subtraction(Vim.Math3d.AABox,Vim.Math3d.AABox)
  - Vim.Math3d.AABox.Recenter
  - Vim.Math3d.AABox.RelativePosition(Vim.Math3d.Vector3)
  - Vim.Math3d.AABox.RightIndices
  - Vim.Math3d.AABox.Scale(System.Single)
  - Vim.Math3d.AABox.SetCenter(Vim.Math3d.Vector3)
  - Vim.Math3d.AABox.SetExtent(Vim.Math3d.Vector3)
  - Vim.Math3d.AABox.SetMax(Vim.Math3d.Vector3)
  - Vim.Math3d.AABox.SetMin(Vim.Math3d.Vector3)
  - Vim.Math3d.AABox.TopIndices
  - Vim.Math3d.AABox.ToSphere
  - Vim.Math3d.AABox.ToString
  - Vim.Math3d.AABox.Transform(Vim.Math3d.Matrix4x4)
  - Vim.Math3d.AABox.Translate(Vim.Math3d.Vector3)
  - Vim.Math3d.AABox.Unit
  - Vim.Math3d.AABox.Volume
  - Vim.Math3d.AABox.Zero
  langs:
  - csharp
  - vb
  name: AABox
  nameWithType: AABox
  fullName: Vim.Math3d.AABox
  type: Struct
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: AABox
    path: ../src/Structs.cs
    startLine: 747
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataContract]

      public readonly struct AABox : ITransformable3D<AABox>, IEquatable<AABox>, IComparable<AABox>
    content.vb: >-
      <DataContract>

      Public Structure AABox
          Implements ITransformable3D(Of AABox), IEquatable(Of AABox), IComparable(Of AABox)
  implements:
  - Vim.Math3d.ITransformable3D{Vim.Math3d.AABox}
  - System.IEquatable{Vim.Math3d.AABox}
  - System.IComparable{Vim.Math3d.AABox}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - Vim.Math3d.ITransformable3D{Vim.Math3d.AABox}.Vim.Math3d.Transformable3D.Transform``1(Vim.Math3d.Matrix4x4[])
  - Vim.Math3d.ITransformable3D{Vim.Math3d.AABox}.Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.Vector3)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.AABox}.Vim.Math3d.Transformable3D.Translate``1(System.Single,System.Single,System.Single)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.AABox}.Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.Quaternion)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.AABox}.Vim.Math3d.Transformable3D.Scale``1(System.Single)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.AABox}.Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.Vector3)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.AABox}.Vim.Math3d.Transformable3D.Scale``1(System.Single,System.Single,System.Single)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.AABox}.Vim.Math3d.Transformable3D.ScaleX``1(System.Single)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.AABox}.Vim.Math3d.Transformable3D.ScaleY``1(System.Single)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.AABox}.Vim.Math3d.Transformable3D.ScaleZ``1(System.Single)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.AABox}.Vim.Math3d.Transformable3D.LookAt``1(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.AABox}.Vim.Math3d.Transformable3D.RotateAround``1(Vim.Math3d.Vector3,System.Single)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.AABox}.Vim.Math3d.Transformable3D.Rotate``1(System.Single,System.Single,System.Single)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.AABox}.Vim.Math3d.Transformable3D.Reflect``1(Vim.Math3d.Plane)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.AABox}.Vim.Math3d.Transformable3D.RotateX``1(System.Single)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.AABox}.Vim.Math3d.Transformable3D.RotateY``1(System.Single)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.AABox}.Vim.Math3d.Transformable3D.RotateZ``1(System.Single)
  - Vim.Math3d.ITransformable3D{Vim.Math3d.AABox}.Vim.Math3d.Transformable3D.TranslateRotateScale``1(Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Vim.Math3d.AABox.Count
  commentId: P:Vim.Math3d.AABox.Count
  id: Count
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: AABox.Count
  fullName: Vim.Math3d.AABox.Count
  type: Property
  source:
    remote:
      path: src/AABox.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Count
    path: ../src/AABox.cs
    startLine: 16
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: Vim.Math3d.AABox.Count*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.AABox.CenterBottom
  commentId: P:Vim.Math3d.AABox.CenterBottom
  id: CenterBottom
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: CenterBottom
  nameWithType: AABox.CenterBottom
  fullName: Vim.Math3d.AABox.CenterBottom
  type: Property
  source:
    remote:
      path: src/AABox.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: CenterBottom
    path: ../src/AABox.cs
    startLine: 19
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly Vector3 CenterBottom { get; }
    parameters: []
    return:
      type: Vim.Math3d.Vector3
    content.vb: Public ReadOnly Property CenterBottom As Vector3
  overload: Vim.Math3d.AABox.CenterBottom*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.AABox.Corners
  commentId: P:Vim.Math3d.AABox.Corners
  id: Corners
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: Corners
  nameWithType: AABox.Corners
  fullName: Vim.Math3d.AABox.Corners
  type: Property
  source:
    remote:
      path: src/AABox.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Corners
    path: ../src/AABox.cs
    startLine: 22
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly Vector3[] Corners { get; }
    parameters: []
    return:
      type: Vim.Math3d.Vector3[]
    content.vb: Public ReadOnly Property Corners As Vector3()
  overload: Vim.Math3d.AABox.Corners*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.AABox.IsEmpty
  commentId: P:Vim.Math3d.AABox.IsEmpty
  id: IsEmpty
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: IsEmpty
  nameWithType: AABox.IsEmpty
  fullName: Vim.Math3d.AABox.IsEmpty
  type: Property
  source:
    remote:
      path: src/AABox.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: IsEmpty
    path: ../src/AABox.cs
    startLine: 25
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool IsEmpty { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsEmpty As Boolean
  overload: Vim.Math3d.AABox.IsEmpty*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.AABox.IsValid
  commentId: P:Vim.Math3d.AABox.IsValid
  id: IsValid
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: IsValid
  nameWithType: AABox.IsValid
  fullName: Vim.Math3d.AABox.IsValid
  type: Property
  source:
    remote:
      path: src/AABox.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: IsValid
    path: ../src/AABox.cs
    startLine: 28
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool IsValid { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsValid As Boolean
  overload: Vim.Math3d.AABox.IsValid*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.AABox.Distance(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.AABox.Distance(Vim.Math3d.Vector3)
  id: Distance(Vim.Math3d.Vector3)
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: Distance(Vector3)
  nameWithType: AABox.Distance(Vector3)
  fullName: Vim.Math3d.AABox.Distance(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/AABox.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Distance
    path: ../src/AABox.cs
    startLine: 32
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly float Distance(Vector3 point)
    parameters:
    - id: point
      type: Vim.Math3d.Vector3
    return:
      type: System.Single
    content.vb: Public Function Distance(point As Vector3) As Single
  overload: Vim.Math3d.AABox.Distance*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AABox.CenterDistance(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.AABox.CenterDistance(Vim.Math3d.Vector3)
  id: CenterDistance(Vim.Math3d.Vector3)
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: CenterDistance(Vector3)
  nameWithType: AABox.CenterDistance(Vector3)
  fullName: Vim.Math3d.AABox.CenterDistance(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/AABox.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: CenterDistance
    path: ../src/AABox.cs
    startLine: 39
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nReturns the distance of the point to the box center. \n"
  example: []
  syntax:
    content: public readonly float CenterDistance(Vector3 point)
    parameters:
    - id: point
      type: Vim.Math3d.Vector3
    return:
      type: System.Single
    content.vb: Public Function CenterDistance(point As Vector3) As Single
  overload: Vim.Math3d.AABox.CenterDistance*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AABox.Translate(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.AABox.Translate(Vim.Math3d.Vector3)
  id: Translate(Vim.Math3d.Vector3)
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: Translate(Vector3)
  nameWithType: AABox.Translate(Vector3)
  fullName: Vim.Math3d.AABox.Translate(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/AABox.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Translate
    path: ../src/AABox.cs
    startLine: 46
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nMoves the box by the given vector offset\n"
  example: []
  syntax:
    content: public readonly AABox Translate(Vector3 offset)
    parameters:
    - id: offset
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.AABox
    content.vb: Public Function Translate(offset As Vector3) As AABox
  overload: Vim.Math3d.AABox.Translate*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AABox.DistanceToOrigin
  commentId: P:Vim.Math3d.AABox.DistanceToOrigin
  id: DistanceToOrigin
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: DistanceToOrigin
  nameWithType: AABox.DistanceToOrigin
  fullName: Vim.Math3d.AABox.DistanceToOrigin
  type: Property
  source:
    remote:
      path: src/AABox.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: DistanceToOrigin
    path: ../src/AABox.cs
    startLine: 50
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly float DistanceToOrigin { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property DistanceToOrigin As Single
  overload: Vim.Math3d.AABox.DistanceToOrigin*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.AABox.CenterDistanceToOrigin
  commentId: P:Vim.Math3d.AABox.CenterDistanceToOrigin
  id: CenterDistanceToOrigin
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: CenterDistanceToOrigin
  nameWithType: AABox.CenterDistanceToOrigin
  fullName: Vim.Math3d.AABox.CenterDistanceToOrigin
  type: Property
  source:
    remote:
      path: src/AABox.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: CenterDistanceToOrigin
    path: ../src/AABox.cs
    startLine: 53
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly float CenterDistanceToOrigin { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property CenterDistanceToOrigin As Single
  overload: Vim.Math3d.AABox.CenterDistanceToOrigin*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.AABox.Volume
  commentId: P:Vim.Math3d.AABox.Volume
  id: Volume
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: Volume
  nameWithType: AABox.Volume
  fullName: Vim.Math3d.AABox.Volume
  type: Property
  source:
    remote:
      path: src/AABox.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Volume
    path: ../src/AABox.cs
    startLine: 56
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly float Volume { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property Volume As Single
  overload: Vim.Math3d.AABox.Volume*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.AABox.Item(System.Int32)
  commentId: P:Vim.Math3d.AABox.Item(System.Int32)
  id: Item(System.Int32)
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: AABox.Item[Int32]
  fullName: Vim.Math3d.AABox.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/AABox.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: this[]
    path: ../src/AABox.cs
    startLine: 59
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly Vector3 this[int n] { get; }
    parameters:
    - id: n
      type: System.Int32
    return:
      type: Vim.Math3d.Vector3
    content.vb: Public ReadOnly Property Item(n As Integer) As Vector3
  overload: Vim.Math3d.AABox.Item*
  nameWithType.vb: AABox.Item(Int32)
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Vim.Math3d.AABox.Item(System.Int32)
  name.vb: Item(Int32)
- uid: Vim.Math3d.AABox.MaxSide
  commentId: P:Vim.Math3d.AABox.MaxSide
  id: MaxSide
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: MaxSide
  nameWithType: AABox.MaxSide
  fullName: Vim.Math3d.AABox.MaxSide
  type: Property
  source:
    remote:
      path: src/AABox.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MaxSide
    path: ../src/AABox.cs
    startLine: 62
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly float MaxSide { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property MaxSide As Single
  overload: Vim.Math3d.AABox.MaxSide*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.AABox.MaxFaceArea
  commentId: P:Vim.Math3d.AABox.MaxFaceArea
  id: MaxFaceArea
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: MaxFaceArea
  nameWithType: AABox.MaxFaceArea
  fullName: Vim.Math3d.AABox.MaxFaceArea
  type: Property
  source:
    remote:
      path: src/AABox.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MaxFaceArea
    path: ../src/AABox.cs
    startLine: 65
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly float MaxFaceArea { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property MaxFaceArea As Single
  overload: Vim.Math3d.AABox.MaxFaceArea*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.AABox.MinSide
  commentId: P:Vim.Math3d.AABox.MinSide
  id: MinSide
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: MinSide
  nameWithType: AABox.MinSide
  fullName: Vim.Math3d.AABox.MinSide
  type: Property
  source:
    remote:
      path: src/AABox.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MinSide
    path: ../src/AABox.cs
    startLine: 70
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly float MinSide { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property MinSide As Single
  overload: Vim.Math3d.AABox.MinSide*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.AABox.Diagonal
  commentId: P:Vim.Math3d.AABox.Diagonal
  id: Diagonal
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: Diagonal
  nameWithType: AABox.Diagonal
  fullName: Vim.Math3d.AABox.Diagonal
  type: Property
  source:
    remote:
      path: src/AABox.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Diagonal
    path: ../src/AABox.cs
    startLine: 73
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly float Diagonal { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property Diagonal As Single
  overload: Vim.Math3d.AABox.Diagonal*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.AABox.Contains(Vim.Math3d.AABox)
  commentId: M:Vim.Math3d.AABox.Contains(Vim.Math3d.AABox)
  id: Contains(Vim.Math3d.AABox)
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: Contains(AABox)
  nameWithType: AABox.Contains(AABox)
  fullName: Vim.Math3d.AABox.Contains(Vim.Math3d.AABox)
  type: Method
  source:
    remote:
      path: src/AABox.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Contains
    path: ../src/AABox.cs
    startLine: 76
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly ContainmentType Contains(AABox box)
    parameters:
    - id: box
      type: Vim.Math3d.AABox
    return:
      type: Vim.Math3d.ContainmentType
    content.vb: Public Function Contains(box As AABox) As ContainmentType
  overload: Vim.Math3d.AABox.Contains*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AABox.Contains(Vim.Math3d.Sphere)
  commentId: M:Vim.Math3d.AABox.Contains(Vim.Math3d.Sphere)
  id: Contains(Vim.Math3d.Sphere)
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: Contains(Sphere)
  nameWithType: AABox.Contains(Sphere)
  fullName: Vim.Math3d.AABox.Contains(Vim.Math3d.Sphere)
  type: Method
  source:
    remote:
      path: src/AABox.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Contains
    path: ../src/AABox.cs
    startLine: 103
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly ContainmentType Contains(Sphere sphere)
    parameters:
    - id: sphere
      type: Vim.Math3d.Sphere
    return:
      type: Vim.Math3d.ContainmentType
    content.vb: Public Function Contains(sphere As Sphere) As ContainmentType
  overload: Vim.Math3d.AABox.Contains*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AABox.Contains(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.AABox.Contains(Vim.Math3d.Vector3)
  id: Contains(Vim.Math3d.Vector3)
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: Contains(Vector3)
  nameWithType: AABox.Contains(Vector3)
  fullName: Vim.Math3d.AABox.Contains(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/AABox.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Contains
    path: ../src/AABox.cs
    startLine: 181
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool Contains(Vector3 point)
    parameters:
    - id: point
      type: Vim.Math3d.Vector3
    return:
      type: System.Boolean
    content.vb: Public Function Contains(point As Vector3) As Boolean
  overload: Vim.Math3d.AABox.Contains*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AABox.Create(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector3})
  commentId: M:Vim.Math3d.AABox.Create(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector3})
  id: Create(System.Collections.Generic.IEnumerable{Vim.Math3d.Vector3})
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: Create(IEnumerable<Vector3>)
  nameWithType: AABox.Create(IEnumerable<Vector3>)
  fullName: Vim.Math3d.AABox.Create(System.Collections.Generic.IEnumerable<Vim.Math3d.Vector3>)
  type: Method
  source:
    remote:
      path: src/AABox.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Create
    path: ../src/AABox.cs
    startLine: 193
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nCreate a bounding box from the given list of points.\n"
  example: []
  syntax:
    content: public static AABox Create(IEnumerable<Vector3> points = null)
    parameters:
    - id: points
      type: System.Collections.Generic.IEnumerable{Vim.Math3d.Vector3}
    return:
      type: Vim.Math3d.AABox
    content.vb: Public Shared Function Create(points As IEnumerable(Of Vector3) = Nothing) As AABox
  overload: Vim.Math3d.AABox.Create*
  nameWithType.vb: AABox.Create(IEnumerable(Of Vector3))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.AABox.Create(System.Collections.Generic.IEnumerable(Of Vim.Math3d.Vector3))
  name.vb: Create(IEnumerable(Of Vector3))
- uid: Vim.Math3d.AABox.Create(Vim.Math3d.Vector3[])
  commentId: M:Vim.Math3d.AABox.Create(Vim.Math3d.Vector3[])
  id: Create(Vim.Math3d.Vector3[])
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: Create(Vector3[])
  nameWithType: AABox.Create(Vector3[])
  fullName: Vim.Math3d.AABox.Create(Vim.Math3d.Vector3[])
  type: Method
  source:
    remote:
      path: src/AABox.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Create
    path: ../src/AABox.cs
    startLine: 197
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static AABox Create(params Vector3[] points)
    parameters:
    - id: points
      type: Vim.Math3d.Vector3[]
    return:
      type: Vim.Math3d.AABox
    content.vb: Public Shared Function Create(ParamArray points As Vector3()) As AABox
  overload: Vim.Math3d.AABox.Create*
  nameWithType.vb: AABox.Create(Vector3())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.AABox.Create(Vim.Math3d.Vector3())
  name.vb: Create(Vector3())
- uid: Vim.Math3d.AABox.CreateFromSphere(Vim.Math3d.Sphere)
  commentId: M:Vim.Math3d.AABox.CreateFromSphere(Vim.Math3d.Sphere)
  id: CreateFromSphere(Vim.Math3d.Sphere)
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: CreateFromSphere(Sphere)
  nameWithType: AABox.CreateFromSphere(Sphere)
  fullName: Vim.Math3d.AABox.CreateFromSphere(Vim.Math3d.Sphere)
  type: Method
  source:
    remote:
      path: src/AABox.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: CreateFromSphere
    path: ../src/AABox.cs
    startLine: 201
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static AABox CreateFromSphere(Sphere sphere)
    parameters:
    - id: sphere
      type: Vim.Math3d.Sphere
    return:
      type: Vim.Math3d.AABox
    content.vb: Public Shared Function CreateFromSphere(sphere As Sphere) As AABox
  overload: Vim.Math3d.AABox.CreateFromSphere*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.AABox.GetCorners(Vim.Math3d.Vector3[])
  commentId: M:Vim.Math3d.AABox.GetCorners(Vim.Math3d.Vector3[])
  id: GetCorners(Vim.Math3d.Vector3[])
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: GetCorners(Vector3[])
  nameWithType: AABox.GetCorners(Vector3[])
  fullName: Vim.Math3d.AABox.GetCorners(Vim.Math3d.Vector3[])
  type: Method
  source:
    remote:
      path: src/AABox.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: GetCorners
    path: ../src/AABox.cs
    startLine: 209
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nThis is the four front corners followed by the four back corners all as if looking from the front\ngoing in counter-clockwise order from bottom left. \n"
  example: []
  syntax:
    content: public readonly Vector3[] GetCorners(Vector3[] corners = null)
    parameters:
    - id: corners
      type: Vim.Math3d.Vector3[]
    return:
      type: Vim.Math3d.Vector3[]
    content.vb: Public Function GetCorners(corners As Vector3() = Nothing) As Vector3()
  overload: Vim.Math3d.AABox.GetCorners*
  nameWithType.vb: AABox.GetCorners(Vector3())
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  fullName.vb: Vim.Math3d.AABox.GetCorners(Vim.Math3d.Vector3())
  name.vb: GetCorners(Vector3())
- uid: Vim.Math3d.AABox.TopIndices
  commentId: F:Vim.Math3d.AABox.TopIndices
  id: TopIndices
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: TopIndices
  nameWithType: AABox.TopIndices
  fullName: Vim.Math3d.AABox.TopIndices
  type: Field
  source:
    remote:
      path: src/AABox.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: TopIndices
    path: ../src/AABox.cs
    startLine: 229
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static readonly int[] TopIndices
    return:
      type: System.Int32[]
    content.vb: Public Shared ReadOnly TopIndices As Integer()
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Vim.Math3d.AABox.BottomIndices
  commentId: F:Vim.Math3d.AABox.BottomIndices
  id: BottomIndices
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: BottomIndices
  nameWithType: AABox.BottomIndices
  fullName: Vim.Math3d.AABox.BottomIndices
  type: Field
  source:
    remote:
      path: src/AABox.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: BottomIndices
    path: ../src/AABox.cs
    startLine: 230
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static readonly int[] BottomIndices
    return:
      type: System.Int32[]
    content.vb: Public Shared ReadOnly BottomIndices As Integer()
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Vim.Math3d.AABox.FrontIndices
  commentId: F:Vim.Math3d.AABox.FrontIndices
  id: FrontIndices
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: FrontIndices
  nameWithType: AABox.FrontIndices
  fullName: Vim.Math3d.AABox.FrontIndices
  type: Field
  source:
    remote:
      path: src/AABox.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: FrontIndices
    path: ../src/AABox.cs
    startLine: 231
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static readonly int[] FrontIndices
    return:
      type: System.Int32[]
    content.vb: Public Shared ReadOnly FrontIndices As Integer()
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Vim.Math3d.AABox.RightIndices
  commentId: F:Vim.Math3d.AABox.RightIndices
  id: RightIndices
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: RightIndices
  nameWithType: AABox.RightIndices
  fullName: Vim.Math3d.AABox.RightIndices
  type: Field
  source:
    remote:
      path: src/AABox.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: RightIndices
    path: ../src/AABox.cs
    startLine: 232
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static readonly int[] RightIndices
    return:
      type: System.Int32[]
    content.vb: Public Shared ReadOnly RightIndices As Integer()
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Vim.Math3d.AABox.BackIndices
  commentId: F:Vim.Math3d.AABox.BackIndices
  id: BackIndices
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: BackIndices
  nameWithType: AABox.BackIndices
  fullName: Vim.Math3d.AABox.BackIndices
  type: Field
  source:
    remote:
      path: src/AABox.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: BackIndices
    path: ../src/AABox.cs
    startLine: 233
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static readonly int[] BackIndices
    return:
      type: System.Int32[]
    content.vb: Public Shared ReadOnly BackIndices As Integer()
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Vim.Math3d.AABox.LeftIndices
  commentId: F:Vim.Math3d.AABox.LeftIndices
  id: LeftIndices
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: LeftIndices
  nameWithType: AABox.LeftIndices
  fullName: Vim.Math3d.AABox.LeftIndices
  type: Field
  source:
    remote:
      path: src/AABox.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: LeftIndices
    path: ../src/AABox.cs
    startLine: 234
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static readonly int[] LeftIndices
    return:
      type: System.Int32[]
    content.vb: Public Shared ReadOnly LeftIndices As Integer()
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Vim.Math3d.AABox.Intersects(Vim.Math3d.AABox)
  commentId: M:Vim.Math3d.AABox.Intersects(Vim.Math3d.AABox)
  id: Intersects(Vim.Math3d.AABox)
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: Intersects(AABox)
  nameWithType: AABox.Intersects(AABox)
  fullName: Vim.Math3d.AABox.Intersects(Vim.Math3d.AABox)
  type: Method
  source:
    remote:
      path: src/AABox.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Intersects
    path: ../src/AABox.cs
    startLine: 236
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool Intersects(AABox box)
    parameters:
    - id: box
      type: Vim.Math3d.AABox
    return:
      type: System.Boolean
    content.vb: Public Function Intersects(box As AABox) As Boolean
  overload: Vim.Math3d.AABox.Intersects*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AABox.Intersects(Vim.Math3d.AABox,System.Boolean@)
  commentId: M:Vim.Math3d.AABox.Intersects(Vim.Math3d.AABox,System.Boolean@)
  id: Intersects(Vim.Math3d.AABox,System.Boolean@)
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: Intersects(AABox, out Boolean)
  nameWithType: AABox.Intersects(AABox, out Boolean)
  fullName: Vim.Math3d.AABox.Intersects(Vim.Math3d.AABox, out System.Boolean)
  type: Method
  source:
    remote:
      path: src/AABox.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Intersects
    path: ../src/AABox.cs
    startLine: 243
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly void Intersects(AABox box, out bool result)
    parameters:
    - id: box
      type: Vim.Math3d.AABox
    - id: result
      type: System.Boolean
    content.vb: Public Sub Intersects(box As AABox, ByRef result As Boolean)
  overload: Vim.Math3d.AABox.Intersects*
  nameWithType.vb: AABox.Intersects(AABox, ByRef Boolean)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  fullName.vb: Vim.Math3d.AABox.Intersects(Vim.Math3d.AABox, ByRef System.Boolean)
  name.vb: Intersects(AABox, ByRef Boolean)
- uid: Vim.Math3d.AABox.Intersects(Vim.Math3d.Sphere)
  commentId: M:Vim.Math3d.AABox.Intersects(Vim.Math3d.Sphere)
  id: Intersects(Vim.Math3d.Sphere)
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: Intersects(Sphere)
  nameWithType: AABox.Intersects(Sphere)
  fullName: Vim.Math3d.AABox.Intersects(Vim.Math3d.Sphere)
  type: Method
  source:
    remote:
      path: src/AABox.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Intersects
    path: ../src/AABox.cs
    startLine: 261
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool Intersects(Sphere sphere)
    parameters:
    - id: sphere
      type: Vim.Math3d.Sphere
    return:
      type: System.Boolean
    content.vb: Public Function Intersects(sphere As Sphere) As Boolean
  overload: Vim.Math3d.AABox.Intersects*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AABox.Intersects(Vim.Math3d.Plane)
  commentId: M:Vim.Math3d.AABox.Intersects(Vim.Math3d.Plane)
  id: Intersects(Vim.Math3d.Plane)
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: Intersects(Plane)
  nameWithType: AABox.Intersects(Plane)
  fullName: Vim.Math3d.AABox.Intersects(Vim.Math3d.Plane)
  type: Method
  source:
    remote:
      path: src/AABox.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Intersects
    path: ../src/AABox.cs
    startLine: 297
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly PlaneIntersectionType Intersects(Plane plane)
    parameters:
    - id: plane
      type: Vim.Math3d.Plane
    return:
      type: Vim.Math3d.PlaneIntersectionType
    content.vb: Public Function Intersects(plane As Plane) As PlaneIntersectionType
  overload: Vim.Math3d.AABox.Intersects*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AABox.Unit
  commentId: F:Vim.Math3d.AABox.Unit
  id: Unit
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: Unit
  nameWithType: AABox.Unit
  fullName: Vim.Math3d.AABox.Unit
  type: Field
  source:
    remote:
      path: src/AABox.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Unit
    path: ../src/AABox.cs
    startLine: 350
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static readonly AABox Unit
    return:
      type: Vim.Math3d.AABox
    content.vb: Public Shared ReadOnly Unit As AABox
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Vim.Math3d.AABox.RelativePosition(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.AABox.RelativePosition(Vim.Math3d.Vector3)
  id: RelativePosition(Vim.Math3d.Vector3)
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: RelativePosition(Vector3)
  nameWithType: AABox.RelativePosition(Vector3)
  fullName: Vim.Math3d.AABox.RelativePosition(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/AABox.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: RelativePosition
    path: ../src/AABox.cs
    startLine: 356
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nReturns where a point is relative to the bounding box on a scale of 0..1 \n"
  example: []
  syntax:
    content: public readonly Vector3 RelativePosition(Vector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Vector3
    content.vb: Public Function RelativePosition(v As Vector3) As Vector3
  overload: Vim.Math3d.AABox.RelativePosition*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AABox.Recenter
  commentId: M:Vim.Math3d.AABox.Recenter
  id: Recenter
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: Recenter()
  nameWithType: AABox.Recenter()
  fullName: Vim.Math3d.AABox.Recenter()
  type: Method
  source:
    remote:
      path: src/AABox.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Recenter
    path: ../src/AABox.cs
    startLine: 363
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nMoves the box so that it&apos;s origin is on the center\n"
  example: []
  syntax:
    content: public readonly AABox Recenter()
    return:
      type: Vim.Math3d.AABox
    content.vb: Public Function Recenter As AABox
  overload: Vim.Math3d.AABox.Recenter*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AABox.Scale(System.Single)
  commentId: M:Vim.Math3d.AABox.Scale(System.Single)
  id: Scale(System.Single)
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: Scale(Single)
  nameWithType: AABox.Scale(Single)
  fullName: Vim.Math3d.AABox.Scale(System.Single)
  type: Method
  source:
    remote:
      path: src/AABox.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Scale
    path: ../src/AABox.cs
    startLine: 370
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nRescales the box\n"
  example: []
  syntax:
    content: public readonly AABox Scale(float scale)
    parameters:
    - id: scale
      type: System.Single
    return:
      type: Vim.Math3d.AABox
    content.vb: Public Function Scale(scale As Single) As AABox
  overload: Vim.Math3d.AABox.Scale*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AABox.FaceCenters
  commentId: M:Vim.Math3d.AABox.FaceCenters
  id: FaceCenters
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: FaceCenters()
  nameWithType: AABox.FaceCenters()
  fullName: Vim.Math3d.AABox.FaceCenters()
  type: Method
  source:
    remote:
      path: src/AABox.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: FaceCenters
    path: ../src/AABox.cs
    startLine: 377
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nReturns the center of each face.\n"
  example: []
  syntax:
    content: public readonly Vector3[] FaceCenters()
    return:
      type: Vim.Math3d.Vector3[]
    content.vb: Public Function FaceCenters As Vector3()
  overload: Vim.Math3d.AABox.FaceCenters*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AABox.GetCornersAndFaceCenters
  commentId: M:Vim.Math3d.AABox.GetCornersAndFaceCenters
  id: GetCornersAndFaceCenters
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: GetCornersAndFaceCenters()
  nameWithType: AABox.GetCornersAndFaceCenters()
  fullName: Vim.Math3d.AABox.GetCornersAndFaceCenters()
  type: Method
  source:
    remote:
      path: src/AABox.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: GetCornersAndFaceCenters
    path: ../src/AABox.cs
    startLine: 392
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly IEnumerable<Vector3> GetCornersAndFaceCenters()
    return:
      type: System.Collections.Generic.IEnumerable{Vim.Math3d.Vector3}
    content.vb: Public Function GetCornersAndFaceCenters As IEnumerable(Of Vector3)
  overload: Vim.Math3d.AABox.GetCornersAndFaceCenters*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AABox.ToSphere
  commentId: M:Vim.Math3d.AABox.ToSphere
  id: ToSphere
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: ToSphere()
  nameWithType: AABox.ToSphere()
  fullName: Vim.Math3d.AABox.ToSphere()
  type: Method
  source:
    remote:
      path: src/AABox.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToSphere
    path: ../src/AABox.cs
    startLine: 400
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nReturns the enclosing bounding sphere.\n"
  example: []
  syntax:
    content: public readonly Sphere ToSphere()
    return:
      type: Vim.Math3d.Sphere
      description: ''
    content.vb: Public Function ToSphere As Sphere
  overload: Vim.Math3d.AABox.ToSphere*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AABox.Lerp(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.AABox.Lerp(Vim.Math3d.Vector3)
  id: Lerp(Vim.Math3d.Vector3)
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: Lerp(Vector3)
  nameWithType: AABox.Lerp(Vector3)
  fullName: Vim.Math3d.AABox.Lerp(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/AABox.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Lerp
    path: ../src/AABox.cs
    startLine: 406
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  summary: "\nGiven a normalized position in bounding box, returns the actual position. \n"
  example: []
  syntax:
    content: public readonly Vector3 Lerp(Vector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.Vector3
    content.vb: Public Function Lerp(v As Vector3) As Vector3
  overload: Vim.Math3d.AABox.Lerp*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AABox.SetCenter(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.AABox.SetCenter(Vim.Math3d.Vector3)
  id: SetCenter(Vim.Math3d.Vector3)
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: SetCenter(Vector3)
  nameWithType: AABox.SetCenter(Vector3)
  fullName: Vim.Math3d.AABox.SetCenter(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/AABox.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SetCenter
    path: ../src/AABox.cs
    startLine: 410
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly AABox SetCenter(Vector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.AABox
    content.vb: Public Function SetCenter(v As Vector3) As AABox
  overload: Vim.Math3d.AABox.SetCenter*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AABox.SetExtent(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.AABox.SetExtent(Vim.Math3d.Vector3)
  id: SetExtent(Vim.Math3d.Vector3)
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: SetExtent(Vector3)
  nameWithType: AABox.SetExtent(Vector3)
  fullName: Vim.Math3d.AABox.SetExtent(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/AABox.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SetExtent
    path: ../src/AABox.cs
    startLine: 413
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly AABox SetExtent(Vector3 v)
    parameters:
    - id: v
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.AABox
    content.vb: Public Function SetExtent(v As Vector3) As AABox
  overload: Vim.Math3d.AABox.SetExtent*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AABox.FromCenterAndExtent(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.AABox.FromCenterAndExtent(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  id: FromCenterAndExtent(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: FromCenterAndExtent(Vector3, Vector3)
  nameWithType: AABox.FromCenterAndExtent(Vector3, Vector3)
  fullName: Vim.Math3d.AABox.FromCenterAndExtent(Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/AABox.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: FromCenterAndExtent
    path: ../src/AABox.cs
    startLine: 416
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static AABox FromCenterAndExtent(Vector3 center, Vector3 extent)
    parameters:
    - id: center
      type: Vim.Math3d.Vector3
    - id: extent
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.AABox
    content.vb: Public Shared Function FromCenterAndExtent(center As Vector3, extent As Vector3) As AABox
  overload: Vim.Math3d.AABox.FromCenterAndExtent*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.AABox.Transform(Vim.Math3d.Matrix4x4)
  commentId: M:Vim.Math3d.AABox.Transform(Vim.Math3d.Matrix4x4)
  id: Transform(Vim.Math3d.Matrix4x4)
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: Transform(Matrix4x4)
  nameWithType: AABox.Transform(Matrix4x4)
  fullName: Vim.Math3d.AABox.Transform(Vim.Math3d.Matrix4x4)
  type: Method
  source:
    remote:
      path: src/AABox.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Transform
    path: ../src/AABox.cs
    startLine: 419
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly AABox Transform(Matrix4x4 mat)
    parameters:
    - id: mat
      type: Vim.Math3d.Matrix4x4
    return:
      type: Vim.Math3d.AABox
    content.vb: Public Function Transform(mat As Matrix4x4) As AABox
  overload: Vim.Math3d.AABox.Transform*
  implements:
  - Vim.Math3d.ITransformable3D{Vim.Math3d.AABox}.Transform(Vim.Math3d.Matrix4x4)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AABox.Min
  commentId: F:Vim.Math3d.AABox.Min
  id: Min
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: Min
  nameWithType: AABox.Min
  fullName: Vim.Math3d.AABox.Min
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Min
    path: ../src/Structs.cs
    startLine: 754
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataMember]

      public readonly Vector3 Min
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <DataMember>

      Public ReadOnly Min As Vector3
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.AABox.Max
  commentId: F:Vim.Math3d.AABox.Max
  id: Max
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: Max
  nameWithType: AABox.Max
  fullName: Vim.Math3d.AABox.Max
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Max
    path: ../src/Structs.cs
    startLine: 756
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataMember]

      public readonly Vector3 Max
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <DataMember>

      Public ReadOnly Max As Vector3
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.AABox.#ctor(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3})
  commentId: M:Vim.Math3d.AABox.#ctor(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3})
  id: '#ctor(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3})'
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: AABox((Vector3 min, Vector3 max))
  nameWithType: AABox.AABox((Vector3 min, Vector3 max))
  fullName: Vim.Math3d.AABox.AABox(System.ValueTuple<Vim.Math3d.Vector3, Vim.Math3d.Vector3>)
  type: Constructor
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: .ctor
    path: ../src/Structs.cs
    startLine: 757
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public AABox((Vector3 min, Vector3 max) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3}
    content.vb: Public Sub New(tuple As(min As Vector3, max As Vector3)(Of Vector3 , Vector3))
  overload: Vim.Math3d.AABox.#ctor*
  nameWithType.vb: AABox.AABox((min As Vector3, max As Vector3)(Of Vector3, Vector3))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Vim.Math3d.AABox.AABox(System.ValueTuple(Of Vim.Math3d.Vector3, Vim.Math3d.Vector3))
  name.vb: AABox((min As Vector3, max As Vector3)(Of Vector3, Vector3))
- uid: Vim.Math3d.AABox.#ctor(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.AABox.#ctor(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  id: '#ctor(Vim.Math3d.Vector3,Vim.Math3d.Vector3)'
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: AABox(Vector3, Vector3)
  nameWithType: AABox.AABox(Vector3, Vector3)
  fullName: Vim.Math3d.AABox.AABox(Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  type: Constructor
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: .ctor
    path: ../src/Structs.cs
    startLine: 758
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public AABox(Vector3 min, Vector3 max)
    parameters:
    - id: min
      type: Vim.Math3d.Vector3
    - id: max
      type: Vim.Math3d.Vector3
    content.vb: Public Sub New(min As Vector3, max As Vector3)
  overload: Vim.Math3d.AABox.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AABox.Create(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.AABox.Create(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  id: Create(Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: Create(Vector3, Vector3)
  nameWithType: AABox.Create(Vector3, Vector3)
  fullName: Vim.Math3d.AABox.Create(Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Create
    path: ../src/Structs.cs
    startLine: 759
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static AABox Create(Vector3 min, Vector3 max)
    parameters:
    - id: min
      type: Vim.Math3d.Vector3
    - id: max
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.AABox
    content.vb: Public Shared Function Create(min As Vector3, max As Vector3) As AABox
  overload: Vim.Math3d.AABox.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.AABox.Create(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3})
  commentId: M:Vim.Math3d.AABox.Create(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3})
  id: Create(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3})
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: Create((Vector3 min, Vector3 max))
  nameWithType: AABox.Create((Vector3 min, Vector3 max))
  fullName: Vim.Math3d.AABox.Create(System.ValueTuple<Vim.Math3d.Vector3, Vim.Math3d.Vector3>)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Create
    path: ../src/Structs.cs
    startLine: 760
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static AABox Create((Vector3 min, Vector3 max) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3}
    return:
      type: Vim.Math3d.AABox
    content.vb: Public Shared Function Create(tuple As(min As Vector3, max As Vector3)(Of Vector3 , Vector3)) As AABox
  overload: Vim.Math3d.AABox.Create*
  nameWithType.vb: AABox.Create((min As Vector3, max As Vector3)(Of Vector3, Vector3))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.AABox.Create(System.ValueTuple(Of Vim.Math3d.Vector3, Vim.Math3d.Vector3))
  name.vb: Create((min As Vector3, max As Vector3)(Of Vector3, Vector3))
- uid: Vim.Math3d.AABox.Equals(System.Object)
  commentId: M:Vim.Math3d.AABox.Equals(System.Object)
  id: Equals(System.Object)
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: AABox.Equals(Object)
  fullName: Vim.Math3d.AABox.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Equals
    path: ../src/Structs.cs
    startLine: 761
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: Vim.Math3d.AABox.Equals*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.AABox.GetHashCode
  commentId: M:Vim.Math3d.AABox.GetHashCode
  id: GetHashCode
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: AABox.GetHashCode()
  fullName: Vim.Math3d.AABox.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: GetHashCode
    path: ../src/Structs.cs
    startLine: 762
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: Vim.Math3d.AABox.GetHashCode*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.AABox.ToString
  commentId: M:Vim.Math3d.AABox.ToString
  id: ToString
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: AABox.ToString()
  fullName: Vim.Math3d.AABox.ToString()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToString
    path: ../src/Structs.cs
    startLine: 763
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: Vim.Math3d.AABox.ToString*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.AABox.Deconstruct(Vim.Math3d.Vector3@,Vim.Math3d.Vector3@)
  commentId: M:Vim.Math3d.AABox.Deconstruct(Vim.Math3d.Vector3@,Vim.Math3d.Vector3@)
  id: Deconstruct(Vim.Math3d.Vector3@,Vim.Math3d.Vector3@)
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: Deconstruct(out Vector3, out Vector3)
  nameWithType: AABox.Deconstruct(out Vector3, out Vector3)
  fullName: Vim.Math3d.AABox.Deconstruct(out Vim.Math3d.Vector3, out Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Deconstruct
    path: ../src/Structs.cs
    startLine: 764
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly void Deconstruct(out Vector3 min, out Vector3 max)
    parameters:
    - id: min
      type: Vim.Math3d.Vector3
    - id: max
      type: Vim.Math3d.Vector3
    content.vb: Public Sub Deconstruct(ByRef min As Vector3, ByRef max As Vector3)
  overload: Vim.Math3d.AABox.Deconstruct*
  nameWithType.vb: AABox.Deconstruct(ByRef Vector3, ByRef Vector3)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  fullName.vb: Vim.Math3d.AABox.Deconstruct(ByRef Vim.Math3d.Vector3, ByRef Vim.Math3d.Vector3)
  name.vb: Deconstruct(ByRef Vector3, ByRef Vector3)
- uid: Vim.Math3d.AABox.Equals(Vim.Math3d.AABox)
  commentId: M:Vim.Math3d.AABox.Equals(Vim.Math3d.AABox)
  id: Equals(Vim.Math3d.AABox)
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: Equals(AABox)
  nameWithType: AABox.Equals(AABox)
  fullName: Vim.Math3d.AABox.Equals(Vim.Math3d.AABox)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Equals
    path: ../src/Structs.cs
    startLine: 765
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool Equals(AABox x)
    parameters:
    - id: x
      type: Vim.Math3d.AABox
    return:
      type: System.Boolean
    content.vb: Public Function Equals(x As AABox) As Boolean
  overload: Vim.Math3d.AABox.Equals*
  implements:
  - System.IEquatable{Vim.Math3d.AABox}.Equals(Vim.Math3d.AABox)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AABox.op_Equality(Vim.Math3d.AABox,Vim.Math3d.AABox)
  commentId: M:Vim.Math3d.AABox.op_Equality(Vim.Math3d.AABox,Vim.Math3d.AABox)
  id: op_Equality(Vim.Math3d.AABox,Vim.Math3d.AABox)
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: Equality(AABox, AABox)
  nameWithType: AABox.Equality(AABox, AABox)
  fullName: Vim.Math3d.AABox.Equality(Vim.Math3d.AABox, Vim.Math3d.AABox)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Equality
    path: ../src/Structs.cs
    startLine: 766
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator ==(AABox x0, AABox x1)
    parameters:
    - id: x0
      type: Vim.Math3d.AABox
    - id: x1
      type: Vim.Math3d.AABox
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(x0 As AABox, x1 As AABox) As Boolean
  overload: Vim.Math3d.AABox.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.AABox.op_Inequality(Vim.Math3d.AABox,Vim.Math3d.AABox)
  commentId: M:Vim.Math3d.AABox.op_Inequality(Vim.Math3d.AABox,Vim.Math3d.AABox)
  id: op_Inequality(Vim.Math3d.AABox,Vim.Math3d.AABox)
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: Inequality(AABox, AABox)
  nameWithType: AABox.Inequality(AABox, AABox)
  fullName: Vim.Math3d.AABox.Inequality(Vim.Math3d.AABox, Vim.Math3d.AABox)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Inequality
    path: ../src/Structs.cs
    startLine: 767
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator !=(AABox x0, AABox x1)
    parameters:
    - id: x0
      type: Vim.Math3d.AABox
    - id: x1
      type: Vim.Math3d.AABox
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(x0 As AABox, x1 As AABox) As Boolean
  overload: Vim.Math3d.AABox.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.AABox.op_Implicit(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3})~Vim.Math3d.AABox
  commentId: M:Vim.Math3d.AABox.op_Implicit(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3})~Vim.Math3d.AABox
  id: op_Implicit(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3})~Vim.Math3d.AABox
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: Implicit((Vector3 min, Vector3 max) to AABox)
  nameWithType: AABox.Implicit((Vector3 min, Vector3 max) to AABox)
  fullName: Vim.Math3d.AABox.Implicit(System.ValueTuple<Vim.Math3d.Vector3, Vim.Math3d.Vector3> to Vim.Math3d.AABox)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Implicit
    path: ../src/Structs.cs
    startLine: 768
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static implicit operator AABox((Vector3 min, Vector3 max) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3}
    return:
      type: Vim.Math3d.AABox
    content.vb: Public Shared Widening Operator CType(tuple As(min As Vector3, max As Vector3)(Of Vector3 , Vector3)) As AABox
  overload: Vim.Math3d.AABox.op_Implicit*
  nameWithType.vb: AABox.Widening((min As Vector3, max As Vector3)(Of Vector3, Vector3) to AABox)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.AABox.Widening(System.ValueTuple(Of Vim.Math3d.Vector3, Vim.Math3d.Vector3) to Vim.Math3d.AABox)
  name.vb: Widening((min As Vector3, max As Vector3)(Of Vector3, Vector3) to AABox)
- uid: Vim.Math3d.AABox.op_Implicit(Vim.Math3d.AABox)~System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3}
  commentId: M:Vim.Math3d.AABox.op_Implicit(Vim.Math3d.AABox)~System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3}
  id: op_Implicit(Vim.Math3d.AABox)~System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3}
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: Implicit(AABox to (Vector3 min, Vector3 max))
  nameWithType: AABox.Implicit(AABox to (Vector3 min, Vector3 max))
  fullName: Vim.Math3d.AABox.Implicit(Vim.Math3d.AABox to System.ValueTuple<Vim.Math3d.Vector3, Vim.Math3d.Vector3>)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Implicit
    path: ../src/Structs.cs
    startLine: 769
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static implicit operator (Vector3 min, Vector3 max)(AABox self)
    parameters:
    - id: self
      type: Vim.Math3d.AABox
    return:
      type: System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3}
    content.vb: Public Shared Widening Operator CType(self As AABox) As(min As Vector3, max As Vector3)(Of Vector3 , Vector3)
  overload: Vim.Math3d.AABox.op_Implicit*
  nameWithType.vb: AABox.Widening(AABox to (min As Vector3, max As Vector3)(Of Vector3, Vector3))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.AABox.Widening(Vim.Math3d.AABox to System.ValueTuple(Of Vim.Math3d.Vector3, Vim.Math3d.Vector3))
  name.vb: Widening(AABox to (min As Vector3, max As Vector3)(Of Vector3, Vector3))
- uid: Vim.Math3d.AABox.AlmostEquals(Vim.Math3d.AABox,System.Single)
  commentId: M:Vim.Math3d.AABox.AlmostEquals(Vim.Math3d.AABox,System.Single)
  id: AlmostEquals(Vim.Math3d.AABox,System.Single)
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: AlmostEquals(AABox, Single)
  nameWithType: AABox.AlmostEquals(AABox, Single)
  fullName: Vim.Math3d.AABox.AlmostEquals(Vim.Math3d.AABox, System.Single)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: AlmostEquals
    path: ../src/Structs.cs
    startLine: 771
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool AlmostEquals(AABox x, float tolerance = 1E-07F)
    parameters:
    - id: x
      type: Vim.Math3d.AABox
    - id: tolerance
      type: System.Single
    return:
      type: System.Boolean
    content.vb: Public Function AlmostEquals(x As AABox, tolerance As Single = 1E-07F) As Boolean
  overload: Vim.Math3d.AABox.AlmostEquals*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AABox.Zero
  commentId: F:Vim.Math3d.AABox.Zero
  id: Zero
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: Zero
  nameWithType: AABox.Zero
  fullName: Vim.Math3d.AABox.Zero
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Zero
    path: ../src/Structs.cs
    startLine: 772
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static AABox Zero
    return:
      type: Vim.Math3d.AABox
    content.vb: Public Shared Zero As AABox
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.AABox.MinValue
  commentId: F:Vim.Math3d.AABox.MinValue
  id: MinValue
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: MinValue
  nameWithType: AABox.MinValue
  fullName: Vim.Math3d.AABox.MinValue
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MinValue
    path: ../src/Structs.cs
    startLine: 773
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static AABox MinValue
    return:
      type: Vim.Math3d.AABox
    content.vb: Public Shared MinValue As AABox
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.AABox.MaxValue
  commentId: F:Vim.Math3d.AABox.MaxValue
  id: MaxValue
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: MaxValue
  nameWithType: AABox.MaxValue
  fullName: Vim.Math3d.AABox.MaxValue
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MaxValue
    path: ../src/Structs.cs
    startLine: 774
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static AABox MaxValue
    return:
      type: Vim.Math3d.AABox
    content.vb: Public Shared MaxValue As AABox
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.AABox.SetMin(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.AABox.SetMin(Vim.Math3d.Vector3)
  id: SetMin(Vim.Math3d.Vector3)
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: SetMin(Vector3)
  nameWithType: AABox.SetMin(Vector3)
  fullName: Vim.Math3d.AABox.SetMin(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SetMin
    path: ../src/Structs.cs
    startLine: 775
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly AABox SetMin(Vector3 x)
    parameters:
    - id: x
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.AABox
    content.vb: Public Function SetMin(x As Vector3) As AABox
  overload: Vim.Math3d.AABox.SetMin*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AABox.SetMax(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.AABox.SetMax(Vim.Math3d.Vector3)
  id: SetMax(Vim.Math3d.Vector3)
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: SetMax(Vector3)
  nameWithType: AABox.SetMax(Vector3)
  fullName: Vim.Math3d.AABox.SetMax(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SetMax
    path: ../src/Structs.cs
    startLine: 776
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly AABox SetMax(Vector3 x)
    parameters:
    - id: x
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.AABox
    content.vb: Public Function SetMax(x As Vector3) As AABox
  overload: Vim.Math3d.AABox.SetMax*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AABox.Extent
  commentId: P:Vim.Math3d.AABox.Extent
  id: Extent
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: Extent
  nameWithType: AABox.Extent
  fullName: Vim.Math3d.AABox.Extent
  type: Property
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Extent
    path: ../src/Structs.cs
    startLine: 777
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly Vector3 Extent { get; }
    parameters: []
    return:
      type: Vim.Math3d.Vector3
    content.vb: Public ReadOnly Property Extent As Vector3
  overload: Vim.Math3d.AABox.Extent*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.AABox.Center
  commentId: P:Vim.Math3d.AABox.Center
  id: Center
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: Center
  nameWithType: AABox.Center
  fullName: Vim.Math3d.AABox.Center
  type: Property
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Center
    path: ../src/Structs.cs
    startLine: 778
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly Vector3 Center { get; }
    parameters: []
    return:
      type: Vim.Math3d.Vector3
    content.vb: Public ReadOnly Property Center As Vector3
  overload: Vim.Math3d.AABox.Center*
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.AABox.MagnitudeSquared
  commentId: M:Vim.Math3d.AABox.MagnitudeSquared
  id: MagnitudeSquared
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: MagnitudeSquared()
  nameWithType: AABox.MagnitudeSquared()
  fullName: Vim.Math3d.AABox.MagnitudeSquared()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MagnitudeSquared
    path: ../src/Structs.cs
    startLine: 779
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly double MagnitudeSquared()
    return:
      type: System.Double
    content.vb: Public Function MagnitudeSquared As Double
  overload: Vim.Math3d.AABox.MagnitudeSquared*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AABox.Magnitude
  commentId: M:Vim.Math3d.AABox.Magnitude
  id: Magnitude
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: Magnitude()
  nameWithType: AABox.Magnitude()
  fullName: Vim.Math3d.AABox.Magnitude()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Magnitude
    path: ../src/Structs.cs
    startLine: 780
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly double Magnitude()
    return:
      type: System.Double
    content.vb: Public Function Magnitude As Double
  overload: Vim.Math3d.AABox.Magnitude*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AABox.Merge(Vim.Math3d.AABox)
  commentId: M:Vim.Math3d.AABox.Merge(Vim.Math3d.AABox)
  id: Merge(Vim.Math3d.AABox)
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: Merge(AABox)
  nameWithType: AABox.Merge(AABox)
  fullName: Vim.Math3d.AABox.Merge(Vim.Math3d.AABox)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Merge
    path: ../src/Structs.cs
    startLine: 781
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly AABox Merge(AABox other)
    parameters:
    - id: other
      type: Vim.Math3d.AABox
    return:
      type: Vim.Math3d.AABox
    content.vb: Public Function Merge(other As AABox) As AABox
  overload: Vim.Math3d.AABox.Merge*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AABox.Intersection(Vim.Math3d.AABox)
  commentId: M:Vim.Math3d.AABox.Intersection(Vim.Math3d.AABox)
  id: Intersection(Vim.Math3d.AABox)
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: Intersection(AABox)
  nameWithType: AABox.Intersection(AABox)
  fullName: Vim.Math3d.AABox.Intersection(Vim.Math3d.AABox)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Intersection
    path: ../src/Structs.cs
    startLine: 782
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly AABox Intersection(AABox other)
    parameters:
    - id: other
      type: Vim.Math3d.AABox
    return:
      type: Vim.Math3d.AABox
    content.vb: Public Function Intersection(other As AABox) As AABox
  overload: Vim.Math3d.AABox.Intersection*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AABox.op_Addition(Vim.Math3d.AABox,Vim.Math3d.AABox)
  commentId: M:Vim.Math3d.AABox.op_Addition(Vim.Math3d.AABox,Vim.Math3d.AABox)
  id: op_Addition(Vim.Math3d.AABox,Vim.Math3d.AABox)
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: Addition(AABox, AABox)
  nameWithType: AABox.Addition(AABox, AABox)
  fullName: Vim.Math3d.AABox.Addition(Vim.Math3d.AABox, Vim.Math3d.AABox)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Addition
    path: ../src/Structs.cs
    startLine: 783
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static AABox operator +(AABox value1, AABox value2)
    parameters:
    - id: value1
      type: Vim.Math3d.AABox
    - id: value2
      type: Vim.Math3d.AABox
    return:
      type: Vim.Math3d.AABox
    content.vb: Public Shared Operator +(value1 As AABox, value2 As AABox) As AABox
  overload: Vim.Math3d.AABox.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.AABox.op_Subtraction(Vim.Math3d.AABox,Vim.Math3d.AABox)
  commentId: M:Vim.Math3d.AABox.op_Subtraction(Vim.Math3d.AABox,Vim.Math3d.AABox)
  id: op_Subtraction(Vim.Math3d.AABox,Vim.Math3d.AABox)
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: Subtraction(AABox, AABox)
  nameWithType: AABox.Subtraction(AABox, AABox)
  fullName: Vim.Math3d.AABox.Subtraction(Vim.Math3d.AABox, Vim.Math3d.AABox)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Subtraction
    path: ../src/Structs.cs
    startLine: 784
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static AABox operator -(AABox value1, AABox value2)
    parameters:
    - id: value1
      type: Vim.Math3d.AABox
    - id: value2
      type: Vim.Math3d.AABox
    return:
      type: Vim.Math3d.AABox
    content.vb: Public Shared Operator -(value1 As AABox, value2 As AABox) As AABox
  overload: Vim.Math3d.AABox.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.AABox.Merge(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.AABox.Merge(Vim.Math3d.Vector3)
  id: Merge(Vim.Math3d.Vector3)
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: Merge(Vector3)
  nameWithType: AABox.Merge(Vector3)
  fullName: Vim.Math3d.AABox.Merge(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Merge
    path: ../src/Structs.cs
    startLine: 785
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly AABox Merge(Vector3 other)
    parameters:
    - id: other
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.AABox
    content.vb: Public Function Merge(other As Vector3) As AABox
  overload: Vim.Math3d.AABox.Merge*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AABox.op_Addition(Vim.Math3d.AABox,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.AABox.op_Addition(Vim.Math3d.AABox,Vim.Math3d.Vector3)
  id: op_Addition(Vim.Math3d.AABox,Vim.Math3d.Vector3)
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: Addition(AABox, Vector3)
  nameWithType: AABox.Addition(AABox, Vector3)
  fullName: Vim.Math3d.AABox.Addition(Vim.Math3d.AABox, Vim.Math3d.Vector3)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Addition
    path: ../src/Structs.cs
    startLine: 786
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static AABox operator +(AABox value1, Vector3 value2)
    parameters:
    - id: value1
      type: Vim.Math3d.AABox
    - id: value2
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.AABox
    content.vb: Public Shared Operator +(value1 As AABox, value2 As Vector3) As AABox
  overload: Vim.Math3d.AABox.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.AABox.Empty
  commentId: F:Vim.Math3d.AABox.Empty
  id: Empty
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: Empty
  nameWithType: AABox.Empty
  fullName: Vim.Math3d.AABox.Empty
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Empty
    path: ../src/Structs.cs
    startLine: 787
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static AABox Empty
    return:
      type: Vim.Math3d.AABox
    content.vb: Public Shared Empty As AABox
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.AABox.IsNaN
  commentId: M:Vim.Math3d.AABox.IsNaN
  id: IsNaN
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: IsNaN()
  nameWithType: AABox.IsNaN()
  fullName: Vim.Math3d.AABox.IsNaN()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: IsNaN
    path: ../src/Structs.cs
    startLine: 788
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool IsNaN()
    return:
      type: System.Boolean
    content.vb: Public Function IsNaN As Boolean
  overload: Vim.Math3d.AABox.IsNaN*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AABox.IsInfinity
  commentId: M:Vim.Math3d.AABox.IsInfinity
  id: IsInfinity
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: IsInfinity()
  nameWithType: AABox.IsInfinity()
  fullName: Vim.Math3d.AABox.IsInfinity()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: IsInfinity
    path: ../src/Structs.cs
    startLine: 789
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool IsInfinity()
    return:
      type: System.Boolean
    content.vb: Public Function IsInfinity As Boolean
  overload: Vim.Math3d.AABox.IsInfinity*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AABox.CompareTo(Vim.Math3d.AABox)
  commentId: M:Vim.Math3d.AABox.CompareTo(Vim.Math3d.AABox)
  id: CompareTo(Vim.Math3d.AABox)
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: CompareTo(AABox)
  nameWithType: AABox.CompareTo(AABox)
  fullName: Vim.Math3d.AABox.CompareTo(Vim.Math3d.AABox)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: CompareTo
    path: ../src/Structs.cs
    startLine: 790
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly int CompareTo(AABox x)
    parameters:
    - id: x
      type: Vim.Math3d.AABox
    return:
      type: System.Int32
    content.vb: Public Function CompareTo(x As AABox) As Integer
  overload: Vim.Math3d.AABox.CompareTo*
  implements:
  - System.IComparable{Vim.Math3d.AABox}.CompareTo(Vim.Math3d.AABox)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AABox.op_LessThan(Vim.Math3d.AABox,Vim.Math3d.AABox)
  commentId: M:Vim.Math3d.AABox.op_LessThan(Vim.Math3d.AABox,Vim.Math3d.AABox)
  id: op_LessThan(Vim.Math3d.AABox,Vim.Math3d.AABox)
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: LessThan(AABox, AABox)
  nameWithType: AABox.LessThan(AABox, AABox)
  fullName: Vim.Math3d.AABox.LessThan(Vim.Math3d.AABox, Vim.Math3d.AABox)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_LessThan
    path: ../src/Structs.cs
    startLine: 791
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator <(AABox x0, AABox x1)
    parameters:
    - id: x0
      type: Vim.Math3d.AABox
    - id: x1
      type: Vim.Math3d.AABox
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <(x0 As AABox, x1 As AABox) As Boolean
  overload: Vim.Math3d.AABox.op_LessThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.AABox.op_LessThanOrEqual(Vim.Math3d.AABox,Vim.Math3d.AABox)
  commentId: M:Vim.Math3d.AABox.op_LessThanOrEqual(Vim.Math3d.AABox,Vim.Math3d.AABox)
  id: op_LessThanOrEqual(Vim.Math3d.AABox,Vim.Math3d.AABox)
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(AABox, AABox)
  nameWithType: AABox.LessThanOrEqual(AABox, AABox)
  fullName: Vim.Math3d.AABox.LessThanOrEqual(Vim.Math3d.AABox, Vim.Math3d.AABox)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_LessThanOrEqual
    path: ../src/Structs.cs
    startLine: 792
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator <=(AABox x0, AABox x1)
    parameters:
    - id: x0
      type: Vim.Math3d.AABox
    - id: x1
      type: Vim.Math3d.AABox
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <=(x0 As AABox, x1 As AABox) As Boolean
  overload: Vim.Math3d.AABox.op_LessThanOrEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.AABox.op_GreaterThan(Vim.Math3d.AABox,Vim.Math3d.AABox)
  commentId: M:Vim.Math3d.AABox.op_GreaterThan(Vim.Math3d.AABox,Vim.Math3d.AABox)
  id: op_GreaterThan(Vim.Math3d.AABox,Vim.Math3d.AABox)
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: GreaterThan(AABox, AABox)
  nameWithType: AABox.GreaterThan(AABox, AABox)
  fullName: Vim.Math3d.AABox.GreaterThan(Vim.Math3d.AABox, Vim.Math3d.AABox)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_GreaterThan
    path: ../src/Structs.cs
    startLine: 793
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator>(AABox x0, AABox x1)
    parameters:
    - id: x0
      type: Vim.Math3d.AABox
    - id: x1
      type: Vim.Math3d.AABox
    return:
      type: System.Boolean
    content.vb: Public Shared Operator>(x0 As AABox, x1 As AABox) As Boolean
  overload: Vim.Math3d.AABox.op_GreaterThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.AABox.op_GreaterThanOrEqual(Vim.Math3d.AABox,Vim.Math3d.AABox)
  commentId: M:Vim.Math3d.AABox.op_GreaterThanOrEqual(Vim.Math3d.AABox,Vim.Math3d.AABox)
  id: op_GreaterThanOrEqual(Vim.Math3d.AABox,Vim.Math3d.AABox)
  parent: Vim.Math3d.AABox
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(AABox, AABox)
  nameWithType: AABox.GreaterThanOrEqual(AABox, AABox)
  fullName: Vim.Math3d.AABox.GreaterThanOrEqual(Vim.Math3d.AABox, Vim.Math3d.AABox)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_GreaterThanOrEqual
    path: ../src/Structs.cs
    startLine: 794
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator >=(AABox x0, AABox x1)
    parameters:
    - id: x0
      type: Vim.Math3d.AABox
    - id: x1
      type: Vim.Math3d.AABox
    return:
      type: System.Boolean
    content.vb: Public Shared Operator >=(x0 As AABox, x1 As AABox) As Boolean
  overload: Vim.Math3d.AABox.op_GreaterThanOrEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Vim.Math3d
  commentId: N:Vim.Math3d
  name: Vim.Math3d
  nameWithType: Vim.Math3d
  fullName: Vim.Math3d
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.AABox}
  commentId: T:Vim.Math3d.ITransformable3D{Vim.Math3d.AABox}
  parent: Vim.Math3d
  definition: Vim.Math3d.ITransformable3D`1
  name: ITransformable3D<AABox>
  nameWithType: ITransformable3D<AABox>
  fullName: Vim.Math3d.ITransformable3D<Vim.Math3d.AABox>
  nameWithType.vb: ITransformable3D(Of AABox)
  fullName.vb: Vim.Math3d.ITransformable3D(Of Vim.Math3d.AABox)
  name.vb: ITransformable3D(Of AABox)
  spec.csharp:
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.AABox
    name: AABox
    nameWithType: AABox
    fullName: Vim.Math3d.AABox
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.AABox
    name: AABox
    nameWithType: AABox
    fullName: Vim.Math3d.AABox
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable{Vim.Math3d.AABox}
  commentId: T:System.IEquatable{Vim.Math3d.AABox}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<AABox>
  nameWithType: IEquatable<AABox>
  fullName: System.IEquatable<Vim.Math3d.AABox>
  nameWithType.vb: IEquatable(Of AABox)
  fullName.vb: System.IEquatable(Of Vim.Math3d.AABox)
  name.vb: IEquatable(Of AABox)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.AABox
    name: AABox
    nameWithType: AABox
    fullName: Vim.Math3d.AABox
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.AABox
    name: AABox
    nameWithType: AABox
    fullName: Vim.Math3d.AABox
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable{Vim.Math3d.AABox}
  commentId: T:System.IComparable{Vim.Math3d.AABox}
  parent: System
  definition: System.IComparable`1
  name: IComparable<AABox>
  nameWithType: IComparable<AABox>
  fullName: System.IComparable<Vim.Math3d.AABox>
  nameWithType.vb: IComparable(Of AABox)
  fullName.vb: System.IComparable(Of Vim.Math3d.AABox)
  name.vb: IComparable(Of AABox)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.AABox
    name: AABox
    nameWithType: AABox
    fullName: Vim.Math3d.AABox
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.AABox
    name: AABox
    nameWithType: AABox
    fullName: Vim.Math3d.AABox
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.AABox}.Vim.Math3d.Transformable3D.Transform``1(Vim.Math3d.Matrix4x4[])
  commentId: M:Vim.Math3d.Transformable3D.Transform``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Matrix4x4[])
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.Transform``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Matrix4x4[])
  name: Transform<AABox>(Matrix4x4[])
  nameWithType: Transformable3D.Transform<AABox>(Matrix4x4[])
  fullName: Vim.Math3d.Transformable3D.Transform<Vim.Math3d.AABox>(Vim.Math3d.Matrix4x4[])
  nameWithType.vb: Transformable3D.Transform(Of AABox)(Matrix4x4())
  fullName.vb: Vim.Math3d.Transformable3D.Transform(Of Vim.Math3d.AABox)(Vim.Math3d.Matrix4x4())
  name.vb: Transform(Of AABox)(Matrix4x4())
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Transform``1(Vim.Math3d.Matrix4x4[])
    name: Transform<AABox>
    nameWithType: Transformable3D.Transform<AABox>
    fullName: Vim.Math3d.Transformable3D.Transform<Vim.Math3d.AABox>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Matrix4x4
    name: Matrix4x4
    nameWithType: Matrix4x4
    fullName: Vim.Math3d.Matrix4x4
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Transform``1(Vim.Math3d.Matrix4x4[])
    name: Transform(Of AABox)
    nameWithType: Transformable3D.Transform(Of AABox)
    fullName: Vim.Math3d.Transformable3D.Transform(Of Vim.Math3d.AABox)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Matrix4x4
    name: Matrix4x4
    nameWithType: Matrix4x4
    fullName: Vim.Math3d.Matrix4x4
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.AABox}.Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
  name: Translate<AABox>(Vector3)
  nameWithType: Transformable3D.Translate<AABox>(Vector3)
  fullName: Vim.Math3d.Transformable3D.Translate<Vim.Math3d.AABox>(Vim.Math3d.Vector3)
  nameWithType.vb: Transformable3D.Translate(Of AABox)(Vector3)
  fullName.vb: Vim.Math3d.Transformable3D.Translate(Of Vim.Math3d.AABox)(Vim.Math3d.Vector3)
  name.vb: Translate(Of AABox)(Vector3)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.Vector3)
    name: Translate<AABox>
    nameWithType: Transformable3D.Translate<AABox>
    fullName: Vim.Math3d.Transformable3D.Translate<Vim.Math3d.AABox>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.Vector3)
    name: Translate(Of AABox)
    nameWithType: Transformable3D.Translate(Of AABox)
    fullName: Vim.Math3d.Transformable3D.Translate(Of Vim.Math3d.AABox)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.AABox}.Vim.Math3d.Transformable3D.Translate``1(System.Single,System.Single,System.Single)
  commentId: M:Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  name: Translate<AABox>(Single, Single, Single)
  nameWithType: Transformable3D.Translate<AABox>(Single, Single, Single)
  fullName: Vim.Math3d.Transformable3D.Translate<Vim.Math3d.AABox>(System.Single, System.Single, System.Single)
  nameWithType.vb: Transformable3D.Translate(Of AABox)(Single, Single, Single)
  fullName.vb: Vim.Math3d.Transformable3D.Translate(Of Vim.Math3d.AABox)(System.Single, System.Single, System.Single)
  name.vb: Translate(Of AABox)(Single, Single, Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Translate``1(System.Single,System.Single,System.Single)
    name: Translate<AABox>
    nameWithType: Transformable3D.Translate<AABox>
    fullName: Vim.Math3d.Transformable3D.Translate<Vim.Math3d.AABox>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Translate``1(System.Single,System.Single,System.Single)
    name: Translate(Of AABox)
    nameWithType: Transformable3D.Translate(Of AABox)
    fullName: Vim.Math3d.Transformable3D.Translate(Of Vim.Math3d.AABox)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.AABox}.Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.Quaternion)
  commentId: M:Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Quaternion)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Quaternion)
  name: Rotate<AABox>(Quaternion)
  nameWithType: Transformable3D.Rotate<AABox>(Quaternion)
  fullName: Vim.Math3d.Transformable3D.Rotate<Vim.Math3d.AABox>(Vim.Math3d.Quaternion)
  nameWithType.vb: Transformable3D.Rotate(Of AABox)(Quaternion)
  fullName.vb: Vim.Math3d.Transformable3D.Rotate(Of Vim.Math3d.AABox)(Vim.Math3d.Quaternion)
  name.vb: Rotate(Of AABox)(Quaternion)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.Quaternion)
    name: Rotate<AABox>
    nameWithType: Transformable3D.Rotate<AABox>
    fullName: Vim.Math3d.Transformable3D.Rotate<Vim.Math3d.AABox>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Quaternion
    name: Quaternion
    nameWithType: Quaternion
    fullName: Vim.Math3d.Quaternion
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.Quaternion)
    name: Rotate(Of AABox)
    nameWithType: Transformable3D.Rotate(Of AABox)
    fullName: Vim.Math3d.Transformable3D.Rotate(Of Vim.Math3d.AABox)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Quaternion
    name: Quaternion
    nameWithType: Quaternion
    fullName: Vim.Math3d.Quaternion
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.AABox}.Vim.Math3d.Transformable3D.Scale``1(System.Single)
  commentId: M:Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  name: Scale<AABox>(Single)
  nameWithType: Transformable3D.Scale<AABox>(Single)
  fullName: Vim.Math3d.Transformable3D.Scale<Vim.Math3d.AABox>(System.Single)
  nameWithType.vb: Transformable3D.Scale(Of AABox)(Single)
  fullName.vb: Vim.Math3d.Transformable3D.Scale(Of Vim.Math3d.AABox)(System.Single)
  name.vb: Scale(Of AABox)(Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Scale``1(System.Single)
    name: Scale<AABox>
    nameWithType: Transformable3D.Scale<AABox>
    fullName: Vim.Math3d.Transformable3D.Scale<Vim.Math3d.AABox>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Scale``1(System.Single)
    name: Scale(Of AABox)
    nameWithType: Transformable3D.Scale(Of AABox)
    fullName: Vim.Math3d.Transformable3D.Scale(Of Vim.Math3d.AABox)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.AABox}.Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
  name: Scale<AABox>(Vector3)
  nameWithType: Transformable3D.Scale<AABox>(Vector3)
  fullName: Vim.Math3d.Transformable3D.Scale<Vim.Math3d.AABox>(Vim.Math3d.Vector3)
  nameWithType.vb: Transformable3D.Scale(Of AABox)(Vector3)
  fullName.vb: Vim.Math3d.Transformable3D.Scale(Of Vim.Math3d.AABox)(Vim.Math3d.Vector3)
  name.vb: Scale(Of AABox)(Vector3)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.Vector3)
    name: Scale<AABox>
    nameWithType: Transformable3D.Scale<AABox>
    fullName: Vim.Math3d.Transformable3D.Scale<Vim.Math3d.AABox>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.Vector3)
    name: Scale(Of AABox)
    nameWithType: Transformable3D.Scale(Of AABox)
    fullName: Vim.Math3d.Transformable3D.Scale(Of Vim.Math3d.AABox)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.AABox}.Vim.Math3d.Transformable3D.Scale``1(System.Single,System.Single,System.Single)
  commentId: M:Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  name: Scale<AABox>(Single, Single, Single)
  nameWithType: Transformable3D.Scale<AABox>(Single, Single, Single)
  fullName: Vim.Math3d.Transformable3D.Scale<Vim.Math3d.AABox>(System.Single, System.Single, System.Single)
  nameWithType.vb: Transformable3D.Scale(Of AABox)(Single, Single, Single)
  fullName.vb: Vim.Math3d.Transformable3D.Scale(Of Vim.Math3d.AABox)(System.Single, System.Single, System.Single)
  name.vb: Scale(Of AABox)(Single, Single, Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Scale``1(System.Single,System.Single,System.Single)
    name: Scale<AABox>
    nameWithType: Transformable3D.Scale<AABox>
    fullName: Vim.Math3d.Transformable3D.Scale<Vim.Math3d.AABox>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Scale``1(System.Single,System.Single,System.Single)
    name: Scale(Of AABox)
    nameWithType: Transformable3D.Scale(Of AABox)
    fullName: Vim.Math3d.Transformable3D.Scale(Of Vim.Math3d.AABox)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.AABox}.Vim.Math3d.Transformable3D.ScaleX``1(System.Single)
  commentId: M:Vim.Math3d.Transformable3D.ScaleX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.ScaleX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  name: ScaleX<AABox>(Single)
  nameWithType: Transformable3D.ScaleX<AABox>(Single)
  fullName: Vim.Math3d.Transformable3D.ScaleX<Vim.Math3d.AABox>(System.Single)
  nameWithType.vb: Transformable3D.ScaleX(Of AABox)(Single)
  fullName.vb: Vim.Math3d.Transformable3D.ScaleX(Of Vim.Math3d.AABox)(System.Single)
  name.vb: ScaleX(Of AABox)(Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.ScaleX``1(System.Single)
    name: ScaleX<AABox>
    nameWithType: Transformable3D.ScaleX<AABox>
    fullName: Vim.Math3d.Transformable3D.ScaleX<Vim.Math3d.AABox>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.ScaleX``1(System.Single)
    name: ScaleX(Of AABox)
    nameWithType: Transformable3D.ScaleX(Of AABox)
    fullName: Vim.Math3d.Transformable3D.ScaleX(Of Vim.Math3d.AABox)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.AABox}.Vim.Math3d.Transformable3D.ScaleY``1(System.Single)
  commentId: M:Vim.Math3d.Transformable3D.ScaleY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.ScaleY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  name: ScaleY<AABox>(Single)
  nameWithType: Transformable3D.ScaleY<AABox>(Single)
  fullName: Vim.Math3d.Transformable3D.ScaleY<Vim.Math3d.AABox>(System.Single)
  nameWithType.vb: Transformable3D.ScaleY(Of AABox)(Single)
  fullName.vb: Vim.Math3d.Transformable3D.ScaleY(Of Vim.Math3d.AABox)(System.Single)
  name.vb: ScaleY(Of AABox)(Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.ScaleY``1(System.Single)
    name: ScaleY<AABox>
    nameWithType: Transformable3D.ScaleY<AABox>
    fullName: Vim.Math3d.Transformable3D.ScaleY<Vim.Math3d.AABox>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.ScaleY``1(System.Single)
    name: ScaleY(Of AABox)
    nameWithType: Transformable3D.ScaleY(Of AABox)
    fullName: Vim.Math3d.Transformable3D.ScaleY(Of Vim.Math3d.AABox)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.AABox}.Vim.Math3d.Transformable3D.ScaleZ``1(System.Single)
  commentId: M:Vim.Math3d.Transformable3D.ScaleZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.ScaleZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  name: ScaleZ<AABox>(Single)
  nameWithType: Transformable3D.ScaleZ<AABox>(Single)
  fullName: Vim.Math3d.Transformable3D.ScaleZ<Vim.Math3d.AABox>(System.Single)
  nameWithType.vb: Transformable3D.ScaleZ(Of AABox)(Single)
  fullName.vb: Vim.Math3d.Transformable3D.ScaleZ(Of Vim.Math3d.AABox)(System.Single)
  name.vb: ScaleZ(Of AABox)(Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.ScaleZ``1(System.Single)
    name: ScaleZ<AABox>
    nameWithType: Transformable3D.ScaleZ<AABox>
    fullName: Vim.Math3d.Transformable3D.ScaleZ<Vim.Math3d.AABox>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.ScaleZ``1(System.Single)
    name: ScaleZ(Of AABox)
    nameWithType: Transformable3D.ScaleZ(Of AABox)
    fullName: Vim.Math3d.Transformable3D.ScaleZ(Of Vim.Math3d.AABox)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.AABox}.Vim.Math3d.Transformable3D.LookAt``1(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Transformable3D.LookAt``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.LookAt``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  name: LookAt<AABox>(Vector3, Vector3, Vector3)
  nameWithType: Transformable3D.LookAt<AABox>(Vector3, Vector3, Vector3)
  fullName: Vim.Math3d.Transformable3D.LookAt<Vim.Math3d.AABox>(Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  nameWithType.vb: Transformable3D.LookAt(Of AABox)(Vector3, Vector3, Vector3)
  fullName.vb: Vim.Math3d.Transformable3D.LookAt(Of Vim.Math3d.AABox)(Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  name.vb: LookAt(Of AABox)(Vector3, Vector3, Vector3)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.LookAt``1(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
    name: LookAt<AABox>
    nameWithType: Transformable3D.LookAt<AABox>
    fullName: Vim.Math3d.Transformable3D.LookAt<Vim.Math3d.AABox>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.LookAt``1(Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
    name: LookAt(Of AABox)
    nameWithType: Transformable3D.LookAt(Of AABox)
    fullName: Vim.Math3d.Transformable3D.LookAt(Of Vim.Math3d.AABox)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.AABox}.Vim.Math3d.Transformable3D.RotateAround``1(Vim.Math3d.Vector3,System.Single)
  commentId: M:Vim.Math3d.Transformable3D.RotateAround``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,System.Single)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.RotateAround``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,System.Single)
  name: RotateAround<AABox>(Vector3, Single)
  nameWithType: Transformable3D.RotateAround<AABox>(Vector3, Single)
  fullName: Vim.Math3d.Transformable3D.RotateAround<Vim.Math3d.AABox>(Vim.Math3d.Vector3, System.Single)
  nameWithType.vb: Transformable3D.RotateAround(Of AABox)(Vector3, Single)
  fullName.vb: Vim.Math3d.Transformable3D.RotateAround(Of Vim.Math3d.AABox)(Vim.Math3d.Vector3, System.Single)
  name.vb: RotateAround(Of AABox)(Vector3, Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.RotateAround``1(Vim.Math3d.Vector3,System.Single)
    name: RotateAround<AABox>
    nameWithType: Transformable3D.RotateAround<AABox>
    fullName: Vim.Math3d.Transformable3D.RotateAround<Vim.Math3d.AABox>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.RotateAround``1(Vim.Math3d.Vector3,System.Single)
    name: RotateAround(Of AABox)
    nameWithType: Transformable3D.RotateAround(Of AABox)
    fullName: Vim.Math3d.Transformable3D.RotateAround(Of Vim.Math3d.AABox)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.AABox}.Vim.Math3d.Transformable3D.Rotate``1(System.Single,System.Single,System.Single)
  commentId: M:Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  name: Rotate<AABox>(Single, Single, Single)
  nameWithType: Transformable3D.Rotate<AABox>(Single, Single, Single)
  fullName: Vim.Math3d.Transformable3D.Rotate<Vim.Math3d.AABox>(System.Single, System.Single, System.Single)
  nameWithType.vb: Transformable3D.Rotate(Of AABox)(Single, Single, Single)
  fullName.vb: Vim.Math3d.Transformable3D.Rotate(Of Vim.Math3d.AABox)(System.Single, System.Single, System.Single)
  name.vb: Rotate(Of AABox)(Single, Single, Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Rotate``1(System.Single,System.Single,System.Single)
    name: Rotate<AABox>
    nameWithType: Transformable3D.Rotate<AABox>
    fullName: Vim.Math3d.Transformable3D.Rotate<Vim.Math3d.AABox>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Rotate``1(System.Single,System.Single,System.Single)
    name: Rotate(Of AABox)
    nameWithType: Transformable3D.Rotate(Of AABox)
    fullName: Vim.Math3d.Transformable3D.Rotate(Of Vim.Math3d.AABox)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.AABox}.Vim.Math3d.Transformable3D.Reflect``1(Vim.Math3d.Plane)
  commentId: M:Vim.Math3d.Transformable3D.Reflect``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Plane)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.Reflect``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Plane)
  name: Reflect<AABox>(Plane)
  nameWithType: Transformable3D.Reflect<AABox>(Plane)
  fullName: Vim.Math3d.Transformable3D.Reflect<Vim.Math3d.AABox>(Vim.Math3d.Plane)
  nameWithType.vb: Transformable3D.Reflect(Of AABox)(Plane)
  fullName.vb: Vim.Math3d.Transformable3D.Reflect(Of Vim.Math3d.AABox)(Vim.Math3d.Plane)
  name.vb: Reflect(Of AABox)(Plane)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Reflect``1(Vim.Math3d.Plane)
    name: Reflect<AABox>
    nameWithType: Transformable3D.Reflect<AABox>
    fullName: Vim.Math3d.Transformable3D.Reflect<Vim.Math3d.AABox>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Plane
    name: Plane
    nameWithType: Plane
    fullName: Vim.Math3d.Plane
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Reflect``1(Vim.Math3d.Plane)
    name: Reflect(Of AABox)
    nameWithType: Transformable3D.Reflect(Of AABox)
    fullName: Vim.Math3d.Transformable3D.Reflect(Of Vim.Math3d.AABox)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Plane
    name: Plane
    nameWithType: Plane
    fullName: Vim.Math3d.Plane
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.AABox}.Vim.Math3d.Transformable3D.RotateX``1(System.Single)
  commentId: M:Vim.Math3d.Transformable3D.RotateX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.RotateX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  name: RotateX<AABox>(Single)
  nameWithType: Transformable3D.RotateX<AABox>(Single)
  fullName: Vim.Math3d.Transformable3D.RotateX<Vim.Math3d.AABox>(System.Single)
  nameWithType.vb: Transformable3D.RotateX(Of AABox)(Single)
  fullName.vb: Vim.Math3d.Transformable3D.RotateX(Of Vim.Math3d.AABox)(System.Single)
  name.vb: RotateX(Of AABox)(Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.RotateX``1(System.Single)
    name: RotateX<AABox>
    nameWithType: Transformable3D.RotateX<AABox>
    fullName: Vim.Math3d.Transformable3D.RotateX<Vim.Math3d.AABox>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.RotateX``1(System.Single)
    name: RotateX(Of AABox)
    nameWithType: Transformable3D.RotateX(Of AABox)
    fullName: Vim.Math3d.Transformable3D.RotateX(Of Vim.Math3d.AABox)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.AABox}.Vim.Math3d.Transformable3D.RotateY``1(System.Single)
  commentId: M:Vim.Math3d.Transformable3D.RotateY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.RotateY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  name: RotateY<AABox>(Single)
  nameWithType: Transformable3D.RotateY<AABox>(Single)
  fullName: Vim.Math3d.Transformable3D.RotateY<Vim.Math3d.AABox>(System.Single)
  nameWithType.vb: Transformable3D.RotateY(Of AABox)(Single)
  fullName.vb: Vim.Math3d.Transformable3D.RotateY(Of Vim.Math3d.AABox)(System.Single)
  name.vb: RotateY(Of AABox)(Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.RotateY``1(System.Single)
    name: RotateY<AABox>
    nameWithType: Transformable3D.RotateY<AABox>
    fullName: Vim.Math3d.Transformable3D.RotateY<Vim.Math3d.AABox>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.RotateY``1(System.Single)
    name: RotateY(Of AABox)
    nameWithType: Transformable3D.RotateY(Of AABox)
    fullName: Vim.Math3d.Transformable3D.RotateY(Of Vim.Math3d.AABox)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.AABox}.Vim.Math3d.Transformable3D.RotateZ``1(System.Single)
  commentId: M:Vim.Math3d.Transformable3D.RotateZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.RotateZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  name: RotateZ<AABox>(Single)
  nameWithType: Transformable3D.RotateZ<AABox>(Single)
  fullName: Vim.Math3d.Transformable3D.RotateZ<Vim.Math3d.AABox>(System.Single)
  nameWithType.vb: Transformable3D.RotateZ(Of AABox)(Single)
  fullName.vb: Vim.Math3d.Transformable3D.RotateZ(Of Vim.Math3d.AABox)(System.Single)
  name.vb: RotateZ(Of AABox)(Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.RotateZ``1(System.Single)
    name: RotateZ<AABox>
    nameWithType: Transformable3D.RotateZ<AABox>
    fullName: Vim.Math3d.Transformable3D.RotateZ<Vim.Math3d.AABox>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.RotateZ``1(System.Single)
    name: RotateZ(Of AABox)
    nameWithType: Transformable3D.RotateZ(Of AABox)
    fullName: Vim.Math3d.Transformable3D.RotateZ(Of Vim.Math3d.AABox)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.AABox}.Vim.Math3d.Transformable3D.TranslateRotateScale``1(Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Transformable3D.TranslateRotateScale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
  parent: Vim.Math3d.Transformable3D
  definition: Vim.Math3d.Transformable3D.TranslateRotateScale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
  name: TranslateRotateScale<AABox>(Vector3, Quaternion, Vector3)
  nameWithType: Transformable3D.TranslateRotateScale<AABox>(Vector3, Quaternion, Vector3)
  fullName: Vim.Math3d.Transformable3D.TranslateRotateScale<Vim.Math3d.AABox>(Vim.Math3d.Vector3, Vim.Math3d.Quaternion, Vim.Math3d.Vector3)
  nameWithType.vb: Transformable3D.TranslateRotateScale(Of AABox)(Vector3, Quaternion, Vector3)
  fullName.vb: Vim.Math3d.Transformable3D.TranslateRotateScale(Of Vim.Math3d.AABox)(Vim.Math3d.Vector3, Vim.Math3d.Quaternion, Vim.Math3d.Vector3)
  name.vb: TranslateRotateScale(Of AABox)(Vector3, Quaternion, Vector3)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.TranslateRotateScale``1(Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
    name: TranslateRotateScale<AABox>
    nameWithType: Transformable3D.TranslateRotateScale<AABox>
    fullName: Vim.Math3d.Transformable3D.TranslateRotateScale<Vim.Math3d.AABox>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Quaternion
    name: Quaternion
    nameWithType: Quaternion
    fullName: Vim.Math3d.Quaternion
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.TranslateRotateScale``1(Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
    name: TranslateRotateScale(Of AABox)
    nameWithType: Transformable3D.TranslateRotateScale(Of AABox)
    fullName: Vim.Math3d.Transformable3D.TranslateRotateScale(Of Vim.Math3d.AABox)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Quaternion
    name: Quaternion
    nameWithType: Quaternion
    fullName: Vim.Math3d.Quaternion
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.ITransformable3D`1
  commentId: T:Vim.Math3d.ITransformable3D`1
  name: ITransformable3D<TSelf>
  nameWithType: ITransformable3D<TSelf>
  fullName: Vim.Math3d.ITransformable3D<TSelf>
  nameWithType.vb: ITransformable3D(Of TSelf)
  fullName.vb: Vim.Math3d.ITransformable3D(Of TSelf)
  name.vb: ITransformable3D(Of TSelf)
  spec.csharp:
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: TSelf
    nameWithType: TSelf
    fullName: TSelf
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSelf
    nameWithType: TSelf
    fullName: TSelf
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Vim.Math3d.Transformable3D.Transform``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Matrix4x4[])
  commentId: M:Vim.Math3d.Transformable3D.Transform``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Matrix4x4[])
  name: Transform<T>(ITransformable3D<T>, Matrix4x4[])
  nameWithType: Transformable3D.Transform<T>(ITransformable3D<T>, Matrix4x4[])
  fullName: Vim.Math3d.Transformable3D.Transform<T>(Vim.Math3d.ITransformable3D<T>, Vim.Math3d.Matrix4x4[])
  nameWithType.vb: Transformable3D.Transform(Of T)(ITransformable3D(Of T), Matrix4x4())
  fullName.vb: Vim.Math3d.Transformable3D.Transform(Of T)(Vim.Math3d.ITransformable3D(Of T), Vim.Math3d.Matrix4x4())
  name.vb: Transform(Of T)(ITransformable3D(Of T), Matrix4x4())
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Transform``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Matrix4x4[])
    name: Transform<T>
    nameWithType: Transformable3D.Transform<T>
    fullName: Vim.Math3d.Transformable3D.Transform<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Matrix4x4
    name: Matrix4x4
    nameWithType: Matrix4x4
    fullName: Vim.Math3d.Matrix4x4
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Transform``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Matrix4x4[])
    name: Transform(Of T)
    nameWithType: Transformable3D.Transform(Of T)
    fullName: Vim.Math3d.Transformable3D.Transform(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Matrix4x4
    name: Matrix4x4
    nameWithType: Matrix4x4
    fullName: Vim.Math3d.Matrix4x4
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D
  commentId: T:Vim.Math3d.Transformable3D
  parent: Vim.Math3d
  name: Transformable3D
  nameWithType: Transformable3D
  fullName: Vim.Math3d.Transformable3D
- uid: Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
  name: Translate<T>(ITransformable3D<T>, Vector3)
  nameWithType: Transformable3D.Translate<T>(ITransformable3D<T>, Vector3)
  fullName: Vim.Math3d.Transformable3D.Translate<T>(Vim.Math3d.ITransformable3D<T>, Vim.Math3d.Vector3)
  nameWithType.vb: Transformable3D.Translate(Of T)(ITransformable3D(Of T), Vector3)
  fullName.vb: Vim.Math3d.Transformable3D.Translate(Of T)(Vim.Math3d.ITransformable3D(Of T), Vim.Math3d.Vector3)
  name.vb: Translate(Of T)(ITransformable3D(Of T), Vector3)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
    name: Translate<T>
    nameWithType: Transformable3D.Translate<T>
    fullName: Vim.Math3d.Transformable3D.Translate<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
    name: Translate(Of T)
    nameWithType: Transformable3D.Translate(Of T)
    fullName: Vim.Math3d.Transformable3D.Translate(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  commentId: M:Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  isExternal: true
  name: Translate<T>(ITransformable3D<T>, Single, Single, Single)
  nameWithType: Transformable3D.Translate<T>(ITransformable3D<T>, Single, Single, Single)
  fullName: Vim.Math3d.Transformable3D.Translate<T>(Vim.Math3d.ITransformable3D<T>, System.Single, System.Single, System.Single)
  nameWithType.vb: Transformable3D.Translate(Of T)(ITransformable3D(Of T), Single, Single, Single)
  fullName.vb: Vim.Math3d.Transformable3D.Translate(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single, System.Single, System.Single)
  name.vb: Translate(Of T)(ITransformable3D(Of T), Single, Single, Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
    name: Translate<T>
    nameWithType: Transformable3D.Translate<T>
    fullName: Vim.Math3d.Transformable3D.Translate<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Translate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
    name: Translate(Of T)
    nameWithType: Transformable3D.Translate(Of T)
    fullName: Vim.Math3d.Transformable3D.Translate(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Quaternion)
  commentId: M:Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Quaternion)
  name: Rotate<T>(ITransformable3D<T>, Quaternion)
  nameWithType: Transformable3D.Rotate<T>(ITransformable3D<T>, Quaternion)
  fullName: Vim.Math3d.Transformable3D.Rotate<T>(Vim.Math3d.ITransformable3D<T>, Vim.Math3d.Quaternion)
  nameWithType.vb: Transformable3D.Rotate(Of T)(ITransformable3D(Of T), Quaternion)
  fullName.vb: Vim.Math3d.Transformable3D.Rotate(Of T)(Vim.Math3d.ITransformable3D(Of T), Vim.Math3d.Quaternion)
  name.vb: Rotate(Of T)(ITransformable3D(Of T), Quaternion)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Quaternion)
    name: Rotate<T>
    nameWithType: Transformable3D.Rotate<T>
    fullName: Vim.Math3d.Transformable3D.Rotate<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Quaternion
    name: Quaternion
    nameWithType: Quaternion
    fullName: Vim.Math3d.Quaternion
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Quaternion)
    name: Rotate(Of T)
    nameWithType: Transformable3D.Rotate(Of T)
    fullName: Vim.Math3d.Transformable3D.Rotate(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Quaternion
    name: Quaternion
    nameWithType: Quaternion
    fullName: Vim.Math3d.Quaternion
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  commentId: M:Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  isExternal: true
  name: Scale<T>(ITransformable3D<T>, Single)
  nameWithType: Transformable3D.Scale<T>(ITransformable3D<T>, Single)
  fullName: Vim.Math3d.Transformable3D.Scale<T>(Vim.Math3d.ITransformable3D<T>, System.Single)
  nameWithType.vb: Transformable3D.Scale(Of T)(ITransformable3D(Of T), Single)
  fullName.vb: Vim.Math3d.Transformable3D.Scale(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single)
  name.vb: Scale(Of T)(ITransformable3D(Of T), Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: Scale<T>
    nameWithType: Transformable3D.Scale<T>
    fullName: Vim.Math3d.Transformable3D.Scale<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: Scale(Of T)
    nameWithType: Transformable3D.Scale(Of T)
    fullName: Vim.Math3d.Transformable3D.Scale(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
  name: Scale<T>(ITransformable3D<T>, Vector3)
  nameWithType: Transformable3D.Scale<T>(ITransformable3D<T>, Vector3)
  fullName: Vim.Math3d.Transformable3D.Scale<T>(Vim.Math3d.ITransformable3D<T>, Vim.Math3d.Vector3)
  nameWithType.vb: Transformable3D.Scale(Of T)(ITransformable3D(Of T), Vector3)
  fullName.vb: Vim.Math3d.Transformable3D.Scale(Of T)(Vim.Math3d.ITransformable3D(Of T), Vim.Math3d.Vector3)
  name.vb: Scale(Of T)(ITransformable3D(Of T), Vector3)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
    name: Scale<T>
    nameWithType: Transformable3D.Scale<T>
    fullName: Vim.Math3d.Transformable3D.Scale<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3)
    name: Scale(Of T)
    nameWithType: Transformable3D.Scale(Of T)
    fullName: Vim.Math3d.Transformable3D.Scale(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  commentId: M:Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  isExternal: true
  name: Scale<T>(ITransformable3D<T>, Single, Single, Single)
  nameWithType: Transformable3D.Scale<T>(ITransformable3D<T>, Single, Single, Single)
  fullName: Vim.Math3d.Transformable3D.Scale<T>(Vim.Math3d.ITransformable3D<T>, System.Single, System.Single, System.Single)
  nameWithType.vb: Transformable3D.Scale(Of T)(ITransformable3D(Of T), Single, Single, Single)
  fullName.vb: Vim.Math3d.Transformable3D.Scale(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single, System.Single, System.Single)
  name.vb: Scale(Of T)(ITransformable3D(Of T), Single, Single, Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
    name: Scale<T>
    nameWithType: Transformable3D.Scale<T>
    fullName: Vim.Math3d.Transformable3D.Scale<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Scale``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
    name: Scale(Of T)
    nameWithType: Transformable3D.Scale(Of T)
    fullName: Vim.Math3d.Transformable3D.Scale(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.ScaleX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  commentId: M:Vim.Math3d.Transformable3D.ScaleX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  isExternal: true
  name: ScaleX<T>(ITransformable3D<T>, Single)
  nameWithType: Transformable3D.ScaleX<T>(ITransformable3D<T>, Single)
  fullName: Vim.Math3d.Transformable3D.ScaleX<T>(Vim.Math3d.ITransformable3D<T>, System.Single)
  nameWithType.vb: Transformable3D.ScaleX(Of T)(ITransformable3D(Of T), Single)
  fullName.vb: Vim.Math3d.Transformable3D.ScaleX(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single)
  name.vb: ScaleX(Of T)(ITransformable3D(Of T), Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.ScaleX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: ScaleX<T>
    nameWithType: Transformable3D.ScaleX<T>
    fullName: Vim.Math3d.Transformable3D.ScaleX<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.ScaleX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: ScaleX(Of T)
    nameWithType: Transformable3D.ScaleX(Of T)
    fullName: Vim.Math3d.Transformable3D.ScaleX(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.ScaleY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  commentId: M:Vim.Math3d.Transformable3D.ScaleY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  isExternal: true
  name: ScaleY<T>(ITransformable3D<T>, Single)
  nameWithType: Transformable3D.ScaleY<T>(ITransformable3D<T>, Single)
  fullName: Vim.Math3d.Transformable3D.ScaleY<T>(Vim.Math3d.ITransformable3D<T>, System.Single)
  nameWithType.vb: Transformable3D.ScaleY(Of T)(ITransformable3D(Of T), Single)
  fullName.vb: Vim.Math3d.Transformable3D.ScaleY(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single)
  name.vb: ScaleY(Of T)(ITransformable3D(Of T), Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.ScaleY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: ScaleY<T>
    nameWithType: Transformable3D.ScaleY<T>
    fullName: Vim.Math3d.Transformable3D.ScaleY<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.ScaleY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: ScaleY(Of T)
    nameWithType: Transformable3D.ScaleY(Of T)
    fullName: Vim.Math3d.Transformable3D.ScaleY(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.ScaleZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  commentId: M:Vim.Math3d.Transformable3D.ScaleZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  isExternal: true
  name: ScaleZ<T>(ITransformable3D<T>, Single)
  nameWithType: Transformable3D.ScaleZ<T>(ITransformable3D<T>, Single)
  fullName: Vim.Math3d.Transformable3D.ScaleZ<T>(Vim.Math3d.ITransformable3D<T>, System.Single)
  nameWithType.vb: Transformable3D.ScaleZ(Of T)(ITransformable3D(Of T), Single)
  fullName.vb: Vim.Math3d.Transformable3D.ScaleZ(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single)
  name.vb: ScaleZ(Of T)(ITransformable3D(Of T), Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.ScaleZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: ScaleZ<T>
    nameWithType: Transformable3D.ScaleZ<T>
    fullName: Vim.Math3d.Transformable3D.ScaleZ<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.ScaleZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: ScaleZ(Of T)
    nameWithType: Transformable3D.ScaleZ(Of T)
    fullName: Vim.Math3d.Transformable3D.ScaleZ(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.LookAt``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Transformable3D.LookAt``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
  name: LookAt<T>(ITransformable3D<T>, Vector3, Vector3, Vector3)
  nameWithType: Transformable3D.LookAt<T>(ITransformable3D<T>, Vector3, Vector3, Vector3)
  fullName: Vim.Math3d.Transformable3D.LookAt<T>(Vim.Math3d.ITransformable3D<T>, Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  nameWithType.vb: Transformable3D.LookAt(Of T)(ITransformable3D(Of T), Vector3, Vector3, Vector3)
  fullName.vb: Vim.Math3d.Transformable3D.LookAt(Of T)(Vim.Math3d.ITransformable3D(Of T), Vim.Math3d.Vector3, Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  name.vb: LookAt(Of T)(ITransformable3D(Of T), Vector3, Vector3, Vector3)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.LookAt``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
    name: LookAt<T>
    nameWithType: Transformable3D.LookAt<T>
    fullName: Vim.Math3d.Transformable3D.LookAt<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.LookAt``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Vector3,Vim.Math3d.Vector3)
    name: LookAt(Of T)
    nameWithType: Transformable3D.LookAt(Of T)
    fullName: Vim.Math3d.Transformable3D.LookAt(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.RotateAround``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,System.Single)
  commentId: M:Vim.Math3d.Transformable3D.RotateAround``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,System.Single)
  isExternal: true
  name: RotateAround<T>(ITransformable3D<T>, Vector3, Single)
  nameWithType: Transformable3D.RotateAround<T>(ITransformable3D<T>, Vector3, Single)
  fullName: Vim.Math3d.Transformable3D.RotateAround<T>(Vim.Math3d.ITransformable3D<T>, Vim.Math3d.Vector3, System.Single)
  nameWithType.vb: Transformable3D.RotateAround(Of T)(ITransformable3D(Of T), Vector3, Single)
  fullName.vb: Vim.Math3d.Transformable3D.RotateAround(Of T)(Vim.Math3d.ITransformable3D(Of T), Vim.Math3d.Vector3, System.Single)
  name.vb: RotateAround(Of T)(ITransformable3D(Of T), Vector3, Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.RotateAround``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,System.Single)
    name: RotateAround<T>
    nameWithType: Transformable3D.RotateAround<T>
    fullName: Vim.Math3d.Transformable3D.RotateAround<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.RotateAround``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,System.Single)
    name: RotateAround(Of T)
    nameWithType: Transformable3D.RotateAround(Of T)
    fullName: Vim.Math3d.Transformable3D.RotateAround(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  commentId: M:Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
  isExternal: true
  name: Rotate<T>(ITransformable3D<T>, Single, Single, Single)
  nameWithType: Transformable3D.Rotate<T>(ITransformable3D<T>, Single, Single, Single)
  fullName: Vim.Math3d.Transformable3D.Rotate<T>(Vim.Math3d.ITransformable3D<T>, System.Single, System.Single, System.Single)
  nameWithType.vb: Transformable3D.Rotate(Of T)(ITransformable3D(Of T), Single, Single, Single)
  fullName.vb: Vim.Math3d.Transformable3D.Rotate(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single, System.Single, System.Single)
  name.vb: Rotate(Of T)(ITransformable3D(Of T), Single, Single, Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
    name: Rotate<T>
    nameWithType: Transformable3D.Rotate<T>
    fullName: Vim.Math3d.Transformable3D.Rotate<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Rotate``1(Vim.Math3d.ITransformable3D{``0},System.Single,System.Single,System.Single)
    name: Rotate(Of T)
    nameWithType: Transformable3D.Rotate(Of T)
    fullName: Vim.Math3d.Transformable3D.Rotate(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.Reflect``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Plane)
  commentId: M:Vim.Math3d.Transformable3D.Reflect``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Plane)
  name: Reflect<T>(ITransformable3D<T>, Plane)
  nameWithType: Transformable3D.Reflect<T>(ITransformable3D<T>, Plane)
  fullName: Vim.Math3d.Transformable3D.Reflect<T>(Vim.Math3d.ITransformable3D<T>, Vim.Math3d.Plane)
  nameWithType.vb: Transformable3D.Reflect(Of T)(ITransformable3D(Of T), Plane)
  fullName.vb: Vim.Math3d.Transformable3D.Reflect(Of T)(Vim.Math3d.ITransformable3D(Of T), Vim.Math3d.Plane)
  name.vb: Reflect(Of T)(ITransformable3D(Of T), Plane)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.Reflect``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Plane)
    name: Reflect<T>
    nameWithType: Transformable3D.Reflect<T>
    fullName: Vim.Math3d.Transformable3D.Reflect<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Plane
    name: Plane
    nameWithType: Plane
    fullName: Vim.Math3d.Plane
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.Reflect``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Plane)
    name: Reflect(Of T)
    nameWithType: Transformable3D.Reflect(Of T)
    fullName: Vim.Math3d.Transformable3D.Reflect(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Plane
    name: Plane
    nameWithType: Plane
    fullName: Vim.Math3d.Plane
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.RotateX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  commentId: M:Vim.Math3d.Transformable3D.RotateX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  isExternal: true
  name: RotateX<T>(ITransformable3D<T>, Single)
  nameWithType: Transformable3D.RotateX<T>(ITransformable3D<T>, Single)
  fullName: Vim.Math3d.Transformable3D.RotateX<T>(Vim.Math3d.ITransformable3D<T>, System.Single)
  nameWithType.vb: Transformable3D.RotateX(Of T)(ITransformable3D(Of T), Single)
  fullName.vb: Vim.Math3d.Transformable3D.RotateX(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single)
  name.vb: RotateX(Of T)(ITransformable3D(Of T), Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.RotateX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: RotateX<T>
    nameWithType: Transformable3D.RotateX<T>
    fullName: Vim.Math3d.Transformable3D.RotateX<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.RotateX``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: RotateX(Of T)
    nameWithType: Transformable3D.RotateX(Of T)
    fullName: Vim.Math3d.Transformable3D.RotateX(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.RotateY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  commentId: M:Vim.Math3d.Transformable3D.RotateY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  isExternal: true
  name: RotateY<T>(ITransformable3D<T>, Single)
  nameWithType: Transformable3D.RotateY<T>(ITransformable3D<T>, Single)
  fullName: Vim.Math3d.Transformable3D.RotateY<T>(Vim.Math3d.ITransformable3D<T>, System.Single)
  nameWithType.vb: Transformable3D.RotateY(Of T)(ITransformable3D(Of T), Single)
  fullName.vb: Vim.Math3d.Transformable3D.RotateY(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single)
  name.vb: RotateY(Of T)(ITransformable3D(Of T), Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.RotateY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: RotateY<T>
    nameWithType: Transformable3D.RotateY<T>
    fullName: Vim.Math3d.Transformable3D.RotateY<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.RotateY``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: RotateY(Of T)
    nameWithType: Transformable3D.RotateY(Of T)
    fullName: Vim.Math3d.Transformable3D.RotateY(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.RotateZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  commentId: M:Vim.Math3d.Transformable3D.RotateZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
  isExternal: true
  name: RotateZ<T>(ITransformable3D<T>, Single)
  nameWithType: Transformable3D.RotateZ<T>(ITransformable3D<T>, Single)
  fullName: Vim.Math3d.Transformable3D.RotateZ<T>(Vim.Math3d.ITransformable3D<T>, System.Single)
  nameWithType.vb: Transformable3D.RotateZ(Of T)(ITransformable3D(Of T), Single)
  fullName.vb: Vim.Math3d.Transformable3D.RotateZ(Of T)(Vim.Math3d.ITransformable3D(Of T), System.Single)
  name.vb: RotateZ(Of T)(ITransformable3D(Of T), Single)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.RotateZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: RotateZ<T>
    nameWithType: Transformable3D.RotateZ<T>
    fullName: Vim.Math3d.Transformable3D.RotateZ<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.RotateZ``1(Vim.Math3d.ITransformable3D{``0},System.Single)
    name: RotateZ(Of T)
    nameWithType: Transformable3D.RotateZ(Of T)
    fullName: Vim.Math3d.Transformable3D.RotateZ(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Transformable3D.TranslateRotateScale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.Transformable3D.TranslateRotateScale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
  name: TranslateRotateScale<T>(ITransformable3D<T>, Vector3, Quaternion, Vector3)
  nameWithType: Transformable3D.TranslateRotateScale<T>(ITransformable3D<T>, Vector3, Quaternion, Vector3)
  fullName: Vim.Math3d.Transformable3D.TranslateRotateScale<T>(Vim.Math3d.ITransformable3D<T>, Vim.Math3d.Vector3, Vim.Math3d.Quaternion, Vim.Math3d.Vector3)
  nameWithType.vb: Transformable3D.TranslateRotateScale(Of T)(ITransformable3D(Of T), Vector3, Quaternion, Vector3)
  fullName.vb: Vim.Math3d.Transformable3D.TranslateRotateScale(Of T)(Vim.Math3d.ITransformable3D(Of T), Vim.Math3d.Vector3, Vim.Math3d.Quaternion, Vim.Math3d.Vector3)
  name.vb: TranslateRotateScale(Of T)(ITransformable3D(Of T), Vector3, Quaternion, Vector3)
  spec.csharp:
  - uid: Vim.Math3d.Transformable3D.TranslateRotateScale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
    name: TranslateRotateScale<T>
    nameWithType: Transformable3D.TranslateRotateScale<T>
    fullName: Vim.Math3d.Transformable3D.TranslateRotateScale<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Quaternion
    name: Quaternion
    nameWithType: Quaternion
    fullName: Vim.Math3d.Quaternion
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.Transformable3D.TranslateRotateScale``1(Vim.Math3d.ITransformable3D{``0},Vim.Math3d.Vector3,Vim.Math3d.Quaternion,Vim.Math3d.Vector3)
    name: TranslateRotateScale(Of T)
    nameWithType: Transformable3D.TranslateRotateScale(Of T)
    fullName: Vim.Math3d.Transformable3D.TranslateRotateScale(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.ITransformable3D`1
    name: ITransformable3D
    nameWithType: ITransformable3D
    fullName: Vim.Math3d.ITransformable3D
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Quaternion
    name: Quaternion
    nameWithType: Quaternion
    fullName: Vim.Math3d.Quaternion
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.AABox.Count*
  commentId: Overload:Vim.Math3d.AABox.Count
  name: Count
  nameWithType: AABox.Count
  fullName: Vim.Math3d.AABox.Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Vim.Math3d.AABox.CenterBottom*
  commentId: Overload:Vim.Math3d.AABox.CenterBottom
  name: CenterBottom
  nameWithType: AABox.CenterBottom
  fullName: Vim.Math3d.AABox.CenterBottom
- uid: Vim.Math3d.Vector3
  commentId: T:Vim.Math3d.Vector3
  parent: Vim.Math3d
  name: Vector3
  nameWithType: Vector3
  fullName: Vim.Math3d.Vector3
- uid: Vim.Math3d.AABox.Corners*
  commentId: Overload:Vim.Math3d.AABox.Corners
  name: Corners
  nameWithType: AABox.Corners
  fullName: Vim.Math3d.AABox.Corners
- uid: Vim.Math3d.Vector3[]
  isExternal: true
  name: Vector3[]
  nameWithType: Vector3[]
  fullName: Vim.Math3d.Vector3[]
  nameWithType.vb: Vector3()
  fullName.vb: Vim.Math3d.Vector3()
  name.vb: Vector3()
  spec.csharp:
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Vim.Math3d.AABox.IsEmpty*
  commentId: Overload:Vim.Math3d.AABox.IsEmpty
  name: IsEmpty
  nameWithType: AABox.IsEmpty
  fullName: Vim.Math3d.AABox.IsEmpty
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Vim.Math3d.AABox.IsValid*
  commentId: Overload:Vim.Math3d.AABox.IsValid
  name: IsValid
  nameWithType: AABox.IsValid
  fullName: Vim.Math3d.AABox.IsValid
- uid: Vim.Math3d.AABox.Distance*
  commentId: Overload:Vim.Math3d.AABox.Distance
  name: Distance
  nameWithType: AABox.Distance
  fullName: Vim.Math3d.AABox.Distance
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Vim.Math3d.AABox.CenterDistance*
  commentId: Overload:Vim.Math3d.AABox.CenterDistance
  name: CenterDistance
  nameWithType: AABox.CenterDistance
  fullName: Vim.Math3d.AABox.CenterDistance
- uid: Vim.Math3d.AABox.Translate*
  commentId: Overload:Vim.Math3d.AABox.Translate
  name: Translate
  nameWithType: AABox.Translate
  fullName: Vim.Math3d.AABox.Translate
- uid: Vim.Math3d.AABox
  commentId: T:Vim.Math3d.AABox
  parent: Vim.Math3d
  name: AABox
  nameWithType: AABox
  fullName: Vim.Math3d.AABox
- uid: Vim.Math3d.AABox.DistanceToOrigin*
  commentId: Overload:Vim.Math3d.AABox.DistanceToOrigin
  name: DistanceToOrigin
  nameWithType: AABox.DistanceToOrigin
  fullName: Vim.Math3d.AABox.DistanceToOrigin
- uid: Vim.Math3d.AABox.CenterDistanceToOrigin*
  commentId: Overload:Vim.Math3d.AABox.CenterDistanceToOrigin
  name: CenterDistanceToOrigin
  nameWithType: AABox.CenterDistanceToOrigin
  fullName: Vim.Math3d.AABox.CenterDistanceToOrigin
- uid: Vim.Math3d.AABox.Volume*
  commentId: Overload:Vim.Math3d.AABox.Volume
  name: Volume
  nameWithType: AABox.Volume
  fullName: Vim.Math3d.AABox.Volume
- uid: Vim.Math3d.AABox.Item*
  commentId: Overload:Vim.Math3d.AABox.Item
  name: Item
  nameWithType: AABox.Item
  fullName: Vim.Math3d.AABox.Item
- uid: Vim.Math3d.AABox.MaxSide*
  commentId: Overload:Vim.Math3d.AABox.MaxSide
  name: MaxSide
  nameWithType: AABox.MaxSide
  fullName: Vim.Math3d.AABox.MaxSide
- uid: Vim.Math3d.AABox.MaxFaceArea*
  commentId: Overload:Vim.Math3d.AABox.MaxFaceArea
  name: MaxFaceArea
  nameWithType: AABox.MaxFaceArea
  fullName: Vim.Math3d.AABox.MaxFaceArea
- uid: Vim.Math3d.AABox.MinSide*
  commentId: Overload:Vim.Math3d.AABox.MinSide
  name: MinSide
  nameWithType: AABox.MinSide
  fullName: Vim.Math3d.AABox.MinSide
- uid: Vim.Math3d.AABox.Diagonal*
  commentId: Overload:Vim.Math3d.AABox.Diagonal
  name: Diagonal
  nameWithType: AABox.Diagonal
  fullName: Vim.Math3d.AABox.Diagonal
- uid: Vim.Math3d.AABox.Contains*
  commentId: Overload:Vim.Math3d.AABox.Contains
  name: Contains
  nameWithType: AABox.Contains
  fullName: Vim.Math3d.AABox.Contains
- uid: Vim.Math3d.ContainmentType
  commentId: T:Vim.Math3d.ContainmentType
  parent: Vim.Math3d
  name: ContainmentType
  nameWithType: ContainmentType
  fullName: Vim.Math3d.ContainmentType
- uid: Vim.Math3d.Sphere
  commentId: T:Vim.Math3d.Sphere
  parent: Vim.Math3d
  name: Sphere
  nameWithType: Sphere
  fullName: Vim.Math3d.Sphere
- uid: Vim.Math3d.AABox.Create*
  commentId: Overload:Vim.Math3d.AABox.Create
  name: Create
  nameWithType: AABox.Create
  fullName: Vim.Math3d.AABox.Create
- uid: System.Collections.Generic.IEnumerable{Vim.Math3d.Vector3}
  commentId: T:System.Collections.Generic.IEnumerable{Vim.Math3d.Vector3}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Vector3>
  nameWithType: IEnumerable<Vector3>
  fullName: System.Collections.Generic.IEnumerable<Vim.Math3d.Vector3>
  nameWithType.vb: IEnumerable(Of Vector3)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Vim.Math3d.Vector3)
  name.vb: IEnumerable(Of Vector3)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Vim.Math3d.AABox.CreateFromSphere*
  commentId: Overload:Vim.Math3d.AABox.CreateFromSphere
  name: CreateFromSphere
  nameWithType: AABox.CreateFromSphere
  fullName: Vim.Math3d.AABox.CreateFromSphere
- uid: Vim.Math3d.AABox.GetCorners*
  commentId: Overload:Vim.Math3d.AABox.GetCorners
  name: GetCorners
  nameWithType: AABox.GetCorners
  fullName: Vim.Math3d.AABox.GetCorners
- uid: System.Int32[]
  isExternal: true
  name: Int32[]
  nameWithType: Int32[]
  fullName: System.Int32[]
  nameWithType.vb: Int32()
  fullName.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Vim.Math3d.AABox.Intersects*
  commentId: Overload:Vim.Math3d.AABox.Intersects
  name: Intersects
  nameWithType: AABox.Intersects
  fullName: Vim.Math3d.AABox.Intersects
- uid: Vim.Math3d.Plane
  commentId: T:Vim.Math3d.Plane
  parent: Vim.Math3d
  name: Plane
  nameWithType: Plane
  fullName: Vim.Math3d.Plane
- uid: Vim.Math3d.PlaneIntersectionType
  commentId: T:Vim.Math3d.PlaneIntersectionType
  parent: Vim.Math3d
  name: PlaneIntersectionType
  nameWithType: PlaneIntersectionType
  fullName: Vim.Math3d.PlaneIntersectionType
- uid: Vim.Math3d.AABox.RelativePosition*
  commentId: Overload:Vim.Math3d.AABox.RelativePosition
  name: RelativePosition
  nameWithType: AABox.RelativePosition
  fullName: Vim.Math3d.AABox.RelativePosition
- uid: Vim.Math3d.AABox.Recenter*
  commentId: Overload:Vim.Math3d.AABox.Recenter
  name: Recenter
  nameWithType: AABox.Recenter
  fullName: Vim.Math3d.AABox.Recenter
- uid: Vim.Math3d.AABox.Scale*
  commentId: Overload:Vim.Math3d.AABox.Scale
  name: Scale
  nameWithType: AABox.Scale
  fullName: Vim.Math3d.AABox.Scale
- uid: Vim.Math3d.AABox.FaceCenters*
  commentId: Overload:Vim.Math3d.AABox.FaceCenters
  name: FaceCenters
  nameWithType: AABox.FaceCenters
  fullName: Vim.Math3d.AABox.FaceCenters
- uid: Vim.Math3d.AABox.GetCornersAndFaceCenters*
  commentId: Overload:Vim.Math3d.AABox.GetCornersAndFaceCenters
  name: GetCornersAndFaceCenters
  nameWithType: AABox.GetCornersAndFaceCenters
  fullName: Vim.Math3d.AABox.GetCornersAndFaceCenters
- uid: Vim.Math3d.AABox.ToSphere*
  commentId: Overload:Vim.Math3d.AABox.ToSphere
  name: ToSphere
  nameWithType: AABox.ToSphere
  fullName: Vim.Math3d.AABox.ToSphere
- uid: Vim.Math3d.AABox.Lerp*
  commentId: Overload:Vim.Math3d.AABox.Lerp
  name: Lerp
  nameWithType: AABox.Lerp
  fullName: Vim.Math3d.AABox.Lerp
- uid: Vim.Math3d.AABox.SetCenter*
  commentId: Overload:Vim.Math3d.AABox.SetCenter
  name: SetCenter
  nameWithType: AABox.SetCenter
  fullName: Vim.Math3d.AABox.SetCenter
- uid: Vim.Math3d.AABox.SetExtent*
  commentId: Overload:Vim.Math3d.AABox.SetExtent
  name: SetExtent
  nameWithType: AABox.SetExtent
  fullName: Vim.Math3d.AABox.SetExtent
- uid: Vim.Math3d.AABox.FromCenterAndExtent*
  commentId: Overload:Vim.Math3d.AABox.FromCenterAndExtent
  name: FromCenterAndExtent
  nameWithType: AABox.FromCenterAndExtent
  fullName: Vim.Math3d.AABox.FromCenterAndExtent
- uid: Vim.Math3d.AABox.Transform*
  commentId: Overload:Vim.Math3d.AABox.Transform
  name: Transform
  nameWithType: AABox.Transform
  fullName: Vim.Math3d.AABox.Transform
- uid: Vim.Math3d.ITransformable3D{Vim.Math3d.AABox}.Transform(Vim.Math3d.Matrix4x4)
  commentId: M:Vim.Math3d.ITransformable3D{Vim.Math3d.AABox}.Transform(Vim.Math3d.Matrix4x4)
  parent: Vim.Math3d.ITransformable3D{Vim.Math3d.AABox}
  definition: Vim.Math3d.ITransformable3D`1.Transform(Vim.Math3d.Matrix4x4)
  name: Transform(Matrix4x4)
  nameWithType: ITransformable3D<AABox>.Transform(Matrix4x4)
  fullName: Vim.Math3d.ITransformable3D<Vim.Math3d.AABox>.Transform(Vim.Math3d.Matrix4x4)
  nameWithType.vb: ITransformable3D(Of AABox).Transform(Matrix4x4)
  fullName.vb: Vim.Math3d.ITransformable3D(Of Vim.Math3d.AABox).Transform(Vim.Math3d.Matrix4x4)
  spec.csharp:
  - uid: Vim.Math3d.ITransformable3D`1.Transform(Vim.Math3d.Matrix4x4)
    name: Transform
    nameWithType: ITransformable3D<AABox>.Transform
    fullName: Vim.Math3d.ITransformable3D<Vim.Math3d.AABox>.Transform
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Matrix4x4
    name: Matrix4x4
    nameWithType: Matrix4x4
    fullName: Vim.Math3d.Matrix4x4
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.ITransformable3D`1.Transform(Vim.Math3d.Matrix4x4)
    name: Transform
    nameWithType: ITransformable3D(Of AABox).Transform
    fullName: Vim.Math3d.ITransformable3D(Of Vim.Math3d.AABox).Transform
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Matrix4x4
    name: Matrix4x4
    nameWithType: Matrix4x4
    fullName: Vim.Math3d.Matrix4x4
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Matrix4x4
  commentId: T:Vim.Math3d.Matrix4x4
  parent: Vim.Math3d
  name: Matrix4x4
  nameWithType: Matrix4x4
  fullName: Vim.Math3d.Matrix4x4
- uid: Vim.Math3d.ITransformable3D`1.Transform(Vim.Math3d.Matrix4x4)
  commentId: M:Vim.Math3d.ITransformable3D`1.Transform(Vim.Math3d.Matrix4x4)
  name: Transform(Matrix4x4)
  nameWithType: ITransformable3D<TSelf>.Transform(Matrix4x4)
  fullName: Vim.Math3d.ITransformable3D<TSelf>.Transform(Vim.Math3d.Matrix4x4)
  nameWithType.vb: ITransformable3D(Of TSelf).Transform(Matrix4x4)
  fullName.vb: Vim.Math3d.ITransformable3D(Of TSelf).Transform(Vim.Math3d.Matrix4x4)
  spec.csharp:
  - uid: Vim.Math3d.ITransformable3D`1.Transform(Vim.Math3d.Matrix4x4)
    name: Transform
    nameWithType: ITransformable3D<TSelf>.Transform
    fullName: Vim.Math3d.ITransformable3D<TSelf>.Transform
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Matrix4x4
    name: Matrix4x4
    nameWithType: Matrix4x4
    fullName: Vim.Math3d.Matrix4x4
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Vim.Math3d.ITransformable3D`1.Transform(Vim.Math3d.Matrix4x4)
    name: Transform
    nameWithType: ITransformable3D(Of TSelf).Transform
    fullName: Vim.Math3d.ITransformable3D(Of TSelf).Transform
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Matrix4x4
    name: Matrix4x4
    nameWithType: Matrix4x4
    fullName: Vim.Math3d.Matrix4x4
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.AABox.#ctor*
  commentId: Overload:Vim.Math3d.AABox.#ctor
  name: AABox
  nameWithType: AABox.AABox
  fullName: Vim.Math3d.AABox.AABox
- uid: System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3}
  commentId: T:System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3}
  parent: System
  definition: System.ValueTuple`2
  name: (T1, T2)<Vector3, Vector3>
  nameWithType: (T1, T2)<Vector3, Vector3>
  fullName: System.ValueTuple<Vim.Math3d.Vector3, Vim.Math3d.Vector3>
  nameWithType.vb: (T1, T2)(Of Vector3, Vector3)
  fullName.vb: System.ValueTuple(Of Vim.Math3d.Vector3, Vim.Math3d.Vector3)
  name.vb: (T1, T2)(Of Vector3, Vector3)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple`2
  commentId: T:System.ValueTuple`2
  isExternal: true
  name: (T1, T2)<T1, T2>
  nameWithType: (T1, T2)<T1, T2>
  fullName: System.ValueTuple<T1, T2>
  nameWithType.vb: (T1, T2)(Of T1, T2)
  fullName.vb: System.ValueTuple(Of T1, T2)
  name.vb: (T1, T2)(Of T1, T2)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.AABox.Equals*
  commentId: Overload:Vim.Math3d.AABox.Equals
  name: Equals
  nameWithType: AABox.Equals
  fullName: Vim.Math3d.AABox.Equals
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.AABox.GetHashCode*
  commentId: Overload:Vim.Math3d.AABox.GetHashCode
  name: GetHashCode
  nameWithType: AABox.GetHashCode
  fullName: Vim.Math3d.AABox.GetHashCode
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.AABox.ToString*
  commentId: Overload:Vim.Math3d.AABox.ToString
  name: ToString
  nameWithType: AABox.ToString
  fullName: Vim.Math3d.AABox.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Vim.Math3d.AABox.Deconstruct*
  commentId: Overload:Vim.Math3d.AABox.Deconstruct
  name: Deconstruct
  nameWithType: AABox.Deconstruct
  fullName: Vim.Math3d.AABox.Deconstruct
- uid: System.IEquatable{Vim.Math3d.AABox}.Equals(Vim.Math3d.AABox)
  commentId: M:System.IEquatable{Vim.Math3d.AABox}.Equals(Vim.Math3d.AABox)
  parent: System.IEquatable{Vim.Math3d.AABox}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(AABox)
  nameWithType: IEquatable<AABox>.Equals(AABox)
  fullName: System.IEquatable<Vim.Math3d.AABox>.Equals(Vim.Math3d.AABox)
  nameWithType.vb: IEquatable(Of AABox).Equals(AABox)
  fullName.vb: System.IEquatable(Of Vim.Math3d.AABox).Equals(Vim.Math3d.AABox)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<AABox>.Equals
    fullName: System.IEquatable<Vim.Math3d.AABox>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.AABox
    name: AABox
    nameWithType: AABox
    fullName: Vim.Math3d.AABox
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of AABox).Equals
    fullName: System.IEquatable(Of Vim.Math3d.AABox).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.AABox
    name: AABox
    nameWithType: AABox
    fullName: Vim.Math3d.AABox
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.AABox.op_Equality*
  commentId: Overload:Vim.Math3d.AABox.op_Equality
  name: Equality
  nameWithType: AABox.Equality
  fullName: Vim.Math3d.AABox.Equality
- uid: Vim.Math3d.AABox.op_Inequality*
  commentId: Overload:Vim.Math3d.AABox.op_Inequality
  name: Inequality
  nameWithType: AABox.Inequality
  fullName: Vim.Math3d.AABox.Inequality
- uid: Vim.Math3d.AABox.op_Implicit*
  commentId: Overload:Vim.Math3d.AABox.op_Implicit
  name: Implicit
  nameWithType: AABox.Implicit
  fullName: Vim.Math3d.AABox.Implicit
  nameWithType.vb: AABox.Widening
  fullName.vb: Vim.Math3d.AABox.Widening
  name.vb: Widening
- uid: Vim.Math3d.AABox.AlmostEquals*
  commentId: Overload:Vim.Math3d.AABox.AlmostEquals
  name: AlmostEquals
  nameWithType: AABox.AlmostEquals
  fullName: Vim.Math3d.AABox.AlmostEquals
- uid: Vim.Math3d.AABox.SetMin*
  commentId: Overload:Vim.Math3d.AABox.SetMin
  name: SetMin
  nameWithType: AABox.SetMin
  fullName: Vim.Math3d.AABox.SetMin
- uid: Vim.Math3d.AABox.SetMax*
  commentId: Overload:Vim.Math3d.AABox.SetMax
  name: SetMax
  nameWithType: AABox.SetMax
  fullName: Vim.Math3d.AABox.SetMax
- uid: Vim.Math3d.AABox.Extent*
  commentId: Overload:Vim.Math3d.AABox.Extent
  name: Extent
  nameWithType: AABox.Extent
  fullName: Vim.Math3d.AABox.Extent
- uid: Vim.Math3d.AABox.Center*
  commentId: Overload:Vim.Math3d.AABox.Center
  name: Center
  nameWithType: AABox.Center
  fullName: Vim.Math3d.AABox.Center
- uid: Vim.Math3d.AABox.MagnitudeSquared*
  commentId: Overload:Vim.Math3d.AABox.MagnitudeSquared
  name: MagnitudeSquared
  nameWithType: AABox.MagnitudeSquared
  fullName: Vim.Math3d.AABox.MagnitudeSquared
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Vim.Math3d.AABox.Magnitude*
  commentId: Overload:Vim.Math3d.AABox.Magnitude
  name: Magnitude
  nameWithType: AABox.Magnitude
  fullName: Vim.Math3d.AABox.Magnitude
- uid: Vim.Math3d.AABox.Merge*
  commentId: Overload:Vim.Math3d.AABox.Merge
  name: Merge
  nameWithType: AABox.Merge
  fullName: Vim.Math3d.AABox.Merge
- uid: Vim.Math3d.AABox.Intersection*
  commentId: Overload:Vim.Math3d.AABox.Intersection
  name: Intersection
  nameWithType: AABox.Intersection
  fullName: Vim.Math3d.AABox.Intersection
- uid: Vim.Math3d.AABox.op_Addition*
  commentId: Overload:Vim.Math3d.AABox.op_Addition
  name: Addition
  nameWithType: AABox.Addition
  fullName: Vim.Math3d.AABox.Addition
- uid: Vim.Math3d.AABox.op_Subtraction*
  commentId: Overload:Vim.Math3d.AABox.op_Subtraction
  name: Subtraction
  nameWithType: AABox.Subtraction
  fullName: Vim.Math3d.AABox.Subtraction
- uid: Vim.Math3d.AABox.IsNaN*
  commentId: Overload:Vim.Math3d.AABox.IsNaN
  name: IsNaN
  nameWithType: AABox.IsNaN
  fullName: Vim.Math3d.AABox.IsNaN
- uid: Vim.Math3d.AABox.IsInfinity*
  commentId: Overload:Vim.Math3d.AABox.IsInfinity
  name: IsInfinity
  nameWithType: AABox.IsInfinity
  fullName: Vim.Math3d.AABox.IsInfinity
- uid: Vim.Math3d.AABox.CompareTo*
  commentId: Overload:Vim.Math3d.AABox.CompareTo
  name: CompareTo
  nameWithType: AABox.CompareTo
  fullName: Vim.Math3d.AABox.CompareTo
- uid: System.IComparable{Vim.Math3d.AABox}.CompareTo(Vim.Math3d.AABox)
  commentId: M:System.IComparable{Vim.Math3d.AABox}.CompareTo(Vim.Math3d.AABox)
  parent: System.IComparable{Vim.Math3d.AABox}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(AABox)
  nameWithType: IComparable<AABox>.CompareTo(AABox)
  fullName: System.IComparable<Vim.Math3d.AABox>.CompareTo(Vim.Math3d.AABox)
  nameWithType.vb: IComparable(Of AABox).CompareTo(AABox)
  fullName.vb: System.IComparable(Of Vim.Math3d.AABox).CompareTo(Vim.Math3d.AABox)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<AABox>.CompareTo
    fullName: System.IComparable<Vim.Math3d.AABox>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.AABox
    name: AABox
    nameWithType: AABox
    fullName: Vim.Math3d.AABox
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of AABox).CompareTo
    fullName: System.IComparable(Of Vim.Math3d.AABox).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.AABox
    name: AABox
    nameWithType: AABox
    fullName: Vim.Math3d.AABox
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable`1.CompareTo(`0)
  commentId: M:System.IComparable`1.CompareTo(`0)
  isExternal: true
  name: CompareTo(T)
  nameWithType: IComparable<T>.CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
  fullName.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<T>.CompareTo
    fullName: System.IComparable<T>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of T).CompareTo
    fullName: System.IComparable(Of T).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.AABox.op_LessThan*
  commentId: Overload:Vim.Math3d.AABox.op_LessThan
  name: LessThan
  nameWithType: AABox.LessThan
  fullName: Vim.Math3d.AABox.LessThan
- uid: Vim.Math3d.AABox.op_LessThanOrEqual*
  commentId: Overload:Vim.Math3d.AABox.op_LessThanOrEqual
  name: LessThanOrEqual
  nameWithType: AABox.LessThanOrEqual
  fullName: Vim.Math3d.AABox.LessThanOrEqual
- uid: Vim.Math3d.AABox.op_GreaterThan*
  commentId: Overload:Vim.Math3d.AABox.op_GreaterThan
  name: GreaterThan
  nameWithType: AABox.GreaterThan
  fullName: Vim.Math3d.AABox.GreaterThan
- uid: Vim.Math3d.AABox.op_GreaterThanOrEqual*
  commentId: Overload:Vim.Math3d.AABox.op_GreaterThanOrEqual
  name: GreaterThanOrEqual
  nameWithType: AABox.GreaterThanOrEqual
  fullName: Vim.Math3d.AABox.GreaterThanOrEqual

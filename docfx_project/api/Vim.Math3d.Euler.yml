### YamlMime:ManagedReference
items:
- uid: Vim.Math3d.Euler
  commentId: T:Vim.Math3d.Euler
  id: Euler
  parent: Vim.Math3d
  children:
  - Vim.Math3d.Euler.#ctor(System.Double)
  - Vim.Math3d.Euler.#ctor(System.Double,System.Double,System.Double)
  - Vim.Math3d.Euler.#ctor(System.ValueTuple{System.Double,System.Double,System.Double})
  - Vim.Math3d.Euler.AlmostEquals(Vim.Math3d.Euler,System.Single)
  - Vim.Math3d.Euler.AlmostZero(System.Single)
  - Vim.Math3d.Euler.AnyComponentNegative
  - Vim.Math3d.Euler.CompareTo(Vim.Math3d.Euler)
  - Vim.Math3d.Euler.Create(System.Double,System.Double,System.Double)
  - Vim.Math3d.Euler.Create(System.ValueTuple{System.Double,System.Double,System.Double})
  - Vim.Math3d.Euler.Deconstruct(System.Double@,System.Double@,System.Double@)
  - Vim.Math3d.Euler.Dot(Vim.Math3d.Euler)
  - Vim.Math3d.Euler.Dot(Vim.Math3d.Euler,Vim.Math3d.Euler)
  - Vim.Math3d.Euler.Equals(System.Object)
  - Vim.Math3d.Euler.Equals(Vim.Math3d.Euler)
  - Vim.Math3d.Euler.GetComponent(System.Int32)
  - Vim.Math3d.Euler.GetHashCode
  - Vim.Math3d.Euler.IsInfinity
  - Vim.Math3d.Euler.IsNaN
  - Vim.Math3d.Euler.Magnitude
  - Vim.Math3d.Euler.MagnitudeSquared
  - Vim.Math3d.Euler.MaxComponent
  - Vim.Math3d.Euler.MaxValue
  - Vim.Math3d.Euler.MinComponent
  - Vim.Math3d.Euler.MinValue
  - Vim.Math3d.Euler.NumComponents
  - Vim.Math3d.Euler.One
  - Vim.Math3d.Euler.op_Addition(System.Double,Vim.Math3d.Euler)
  - Vim.Math3d.Euler.op_Addition(Vim.Math3d.Euler,System.Double)
  - Vim.Math3d.Euler.op_Addition(Vim.Math3d.Euler,Vim.Math3d.Euler)
  - Vim.Math3d.Euler.op_Division(System.Double,Vim.Math3d.Euler)
  - Vim.Math3d.Euler.op_Division(Vim.Math3d.Euler,System.Double)
  - Vim.Math3d.Euler.op_Division(Vim.Math3d.Euler,Vim.Math3d.Euler)
  - Vim.Math3d.Euler.op_Equality(Vim.Math3d.Euler,Vim.Math3d.Euler)
  - Vim.Math3d.Euler.op_GreaterThan(Vim.Math3d.Euler,Vim.Math3d.Euler)
  - Vim.Math3d.Euler.op_GreaterThanOrEqual(Vim.Math3d.Euler,Vim.Math3d.Euler)
  - Vim.Math3d.Euler.op_Implicit(System.ValueTuple{System.Double,System.Double,System.Double})~Vim.Math3d.Euler
  - Vim.Math3d.Euler.op_Implicit(Vim.Math3d.Euler)~System.ValueTuple{System.Double,System.Double,System.Double}
  - Vim.Math3d.Euler.op_Inequality(Vim.Math3d.Euler,Vim.Math3d.Euler)
  - Vim.Math3d.Euler.op_LessThan(Vim.Math3d.Euler,Vim.Math3d.Euler)
  - Vim.Math3d.Euler.op_LessThanOrEqual(Vim.Math3d.Euler,Vim.Math3d.Euler)
  - Vim.Math3d.Euler.op_Multiply(System.Double,Vim.Math3d.Euler)
  - Vim.Math3d.Euler.op_Multiply(Vim.Math3d.Euler,System.Double)
  - Vim.Math3d.Euler.op_Multiply(Vim.Math3d.Euler,Vim.Math3d.Euler)
  - Vim.Math3d.Euler.op_Subtraction(System.Double,Vim.Math3d.Euler)
  - Vim.Math3d.Euler.op_Subtraction(Vim.Math3d.Euler,System.Double)
  - Vim.Math3d.Euler.op_Subtraction(Vim.Math3d.Euler,Vim.Math3d.Euler)
  - Vim.Math3d.Euler.op_UnaryNegation(Vim.Math3d.Euler)
  - Vim.Math3d.Euler.Pitch
  - Vim.Math3d.Euler.ProductComponents
  - Vim.Math3d.Euler.Roll
  - Vim.Math3d.Euler.SetPitch(System.Double)
  - Vim.Math3d.Euler.SetRoll(System.Double)
  - Vim.Math3d.Euler.SetYaw(System.Double)
  - Vim.Math3d.Euler.SumComponents
  - Vim.Math3d.Euler.SumSqrComponents
  - Vim.Math3d.Euler.ToString
  - Vim.Math3d.Euler.UnitPitch
  - Vim.Math3d.Euler.UnitRoll
  - Vim.Math3d.Euler.UnitYaw
  - Vim.Math3d.Euler.Yaw
  - Vim.Math3d.Euler.Zero
  langs:
  - csharp
  - vb
  name: Euler
  nameWithType: Euler
  fullName: Vim.Math3d.Euler
  type: Struct
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Euler
    path: ../src/Structs.cs
    startLine: 2098
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataContract]

      public readonly struct Euler : IEquatable<Euler>, IComparable<Euler>
    content.vb: >-
      <DataContract>

      Public Structure Euler
          Implements IEquatable(Of Euler), IComparable(Of Euler)
  implements:
  - System.IEquatable{Vim.Math3d.Euler}
  - System.IComparable{Vim.Math3d.Euler}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Vim.Math3d.Euler.Yaw
  commentId: F:Vim.Math3d.Euler.Yaw
  id: Yaw
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: Yaw
  nameWithType: Euler.Yaw
  fullName: Vim.Math3d.Euler.Yaw
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Yaw
    path: ../src/Structs.cs
    startLine: 2105
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataMember]

      public readonly double Yaw
    return:
      type: System.Double
    content.vb: >-
      <DataMember>

      Public ReadOnly Yaw As Double
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.Euler.Pitch
  commentId: F:Vim.Math3d.Euler.Pitch
  id: Pitch
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: Pitch
  nameWithType: Euler.Pitch
  fullName: Vim.Math3d.Euler.Pitch
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Pitch
    path: ../src/Structs.cs
    startLine: 2107
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataMember]

      public readonly double Pitch
    return:
      type: System.Double
    content.vb: >-
      <DataMember>

      Public ReadOnly Pitch As Double
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.Euler.Roll
  commentId: F:Vim.Math3d.Euler.Roll
  id: Roll
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: Roll
  nameWithType: Euler.Roll
  fullName: Vim.Math3d.Euler.Roll
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Roll
    path: ../src/Structs.cs
    startLine: 2109
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataMember]

      public readonly double Roll
    return:
      type: System.Double
    content.vb: >-
      <DataMember>

      Public ReadOnly Roll As Double
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.Euler.#ctor(System.ValueTuple{System.Double,System.Double,System.Double})
  commentId: M:Vim.Math3d.Euler.#ctor(System.ValueTuple{System.Double,System.Double,System.Double})
  id: '#ctor(System.ValueTuple{System.Double,System.Double,System.Double})'
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: Euler((Double yaw, Double pitch, Double roll))
  nameWithType: Euler.Euler((Double yaw, Double pitch, Double roll))
  fullName: Vim.Math3d.Euler.Euler(System.ValueTuple<System.Double, System.Double, System.Double>)
  type: Constructor
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: .ctor
    path: ../src/Structs.cs
    startLine: 2110
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public Euler((double yaw, double pitch, double roll) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{System.Double,System.Double,System.Double}
    content.vb: Public Sub New(tuple As(yaw As Double, pitch As Double, roll As Double)(Of Double , Double, Double))
  overload: Vim.Math3d.Euler.#ctor*
  nameWithType.vb: Euler.Euler((yaw As Double, pitch As Double, roll As Double)(Of Double, Double, Double))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Vim.Math3d.Euler.Euler(System.ValueTuple(Of System.Double, System.Double, System.Double))
  name.vb: Euler((yaw As Double, pitch As Double, roll As Double)(Of Double, Double, Double))
- uid: Vim.Math3d.Euler.#ctor(System.Double,System.Double,System.Double)
  commentId: M:Vim.Math3d.Euler.#ctor(System.Double,System.Double,System.Double)
  id: '#ctor(System.Double,System.Double,System.Double)'
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: Euler(Double, Double, Double)
  nameWithType: Euler.Euler(Double, Double, Double)
  fullName: Vim.Math3d.Euler.Euler(System.Double, System.Double, System.Double)
  type: Constructor
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: .ctor
    path: ../src/Structs.cs
    startLine: 2111
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public Euler(double yaw, double pitch, double roll)
    parameters:
    - id: yaw
      type: System.Double
    - id: pitch
      type: System.Double
    - id: roll
      type: System.Double
    content.vb: Public Sub New(yaw As Double, pitch As Double, roll As Double)
  overload: Vim.Math3d.Euler.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Euler.Create(System.Double,System.Double,System.Double)
  commentId: M:Vim.Math3d.Euler.Create(System.Double,System.Double,System.Double)
  id: Create(System.Double,System.Double,System.Double)
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: Create(Double, Double, Double)
  nameWithType: Euler.Create(Double, Double, Double)
  fullName: Vim.Math3d.Euler.Create(System.Double, System.Double, System.Double)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Create
    path: ../src/Structs.cs
    startLine: 2112
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Euler Create(double yaw, double pitch, double roll)
    parameters:
    - id: yaw
      type: System.Double
    - id: pitch
      type: System.Double
    - id: roll
      type: System.Double
    return:
      type: Vim.Math3d.Euler
    content.vb: Public Shared Function Create(yaw As Double, pitch As Double, roll As Double) As Euler
  overload: Vim.Math3d.Euler.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Euler.Create(System.ValueTuple{System.Double,System.Double,System.Double})
  commentId: M:Vim.Math3d.Euler.Create(System.ValueTuple{System.Double,System.Double,System.Double})
  id: Create(System.ValueTuple{System.Double,System.Double,System.Double})
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: Create((Double yaw, Double pitch, Double roll))
  nameWithType: Euler.Create((Double yaw, Double pitch, Double roll))
  fullName: Vim.Math3d.Euler.Create(System.ValueTuple<System.Double, System.Double, System.Double>)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Create
    path: ../src/Structs.cs
    startLine: 2113
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Euler Create((double yaw, double pitch, double roll) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{System.Double,System.Double,System.Double}
    return:
      type: Vim.Math3d.Euler
    content.vb: Public Shared Function Create(tuple As(yaw As Double, pitch As Double, roll As Double)(Of Double , Double, Double)) As Euler
  overload: Vim.Math3d.Euler.Create*
  nameWithType.vb: Euler.Create((yaw As Double, pitch As Double, roll As Double)(Of Double, Double, Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.Euler.Create(System.ValueTuple(Of System.Double, System.Double, System.Double))
  name.vb: Create((yaw As Double, pitch As Double, roll As Double)(Of Double, Double, Double))
- uid: Vim.Math3d.Euler.Equals(System.Object)
  commentId: M:Vim.Math3d.Euler.Equals(System.Object)
  id: Equals(System.Object)
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Euler.Equals(Object)
  fullName: Vim.Math3d.Euler.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Equals
    path: ../src/Structs.cs
    startLine: 2114
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: Vim.Math3d.Euler.Equals*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.Euler.GetHashCode
  commentId: M:Vim.Math3d.Euler.GetHashCode
  id: GetHashCode
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Euler.GetHashCode()
  fullName: Vim.Math3d.Euler.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: GetHashCode
    path: ../src/Structs.cs
    startLine: 2115
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: Vim.Math3d.Euler.GetHashCode*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.Euler.ToString
  commentId: M:Vim.Math3d.Euler.ToString
  id: ToString
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Euler.ToString()
  fullName: Vim.Math3d.Euler.ToString()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToString
    path: ../src/Structs.cs
    startLine: 2116
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: Vim.Math3d.Euler.ToString*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.Euler.Deconstruct(System.Double@,System.Double@,System.Double@)
  commentId: M:Vim.Math3d.Euler.Deconstruct(System.Double@,System.Double@,System.Double@)
  id: Deconstruct(System.Double@,System.Double@,System.Double@)
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: Deconstruct(out Double, out Double, out Double)
  nameWithType: Euler.Deconstruct(out Double, out Double, out Double)
  fullName: Vim.Math3d.Euler.Deconstruct(out System.Double, out System.Double, out System.Double)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Deconstruct
    path: ../src/Structs.cs
    startLine: 2117
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly void Deconstruct(out double yaw, out double pitch, out double roll)
    parameters:
    - id: yaw
      type: System.Double
    - id: pitch
      type: System.Double
    - id: roll
      type: System.Double
    content.vb: Public Sub Deconstruct(ByRef yaw As Double, ByRef pitch As Double, ByRef roll As Double)
  overload: Vim.Math3d.Euler.Deconstruct*
  nameWithType.vb: Euler.Deconstruct(ByRef Double, ByRef Double, ByRef Double)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  fullName.vb: Vim.Math3d.Euler.Deconstruct(ByRef System.Double, ByRef System.Double, ByRef System.Double)
  name.vb: Deconstruct(ByRef Double, ByRef Double, ByRef Double)
- uid: Vim.Math3d.Euler.Equals(Vim.Math3d.Euler)
  commentId: M:Vim.Math3d.Euler.Equals(Vim.Math3d.Euler)
  id: Equals(Vim.Math3d.Euler)
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: Equals(Euler)
  nameWithType: Euler.Equals(Euler)
  fullName: Vim.Math3d.Euler.Equals(Vim.Math3d.Euler)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Equals
    path: ../src/Structs.cs
    startLine: 2118
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool Equals(Euler x)
    parameters:
    - id: x
      type: Vim.Math3d.Euler
    return:
      type: System.Boolean
    content.vb: Public Function Equals(x As Euler) As Boolean
  overload: Vim.Math3d.Euler.Equals*
  implements:
  - System.IEquatable{Vim.Math3d.Euler}.Equals(Vim.Math3d.Euler)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Euler.op_Equality(Vim.Math3d.Euler,Vim.Math3d.Euler)
  commentId: M:Vim.Math3d.Euler.op_Equality(Vim.Math3d.Euler,Vim.Math3d.Euler)
  id: op_Equality(Vim.Math3d.Euler,Vim.Math3d.Euler)
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: Equality(Euler, Euler)
  nameWithType: Euler.Equality(Euler, Euler)
  fullName: Vim.Math3d.Euler.Equality(Vim.Math3d.Euler, Vim.Math3d.Euler)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Equality
    path: ../src/Structs.cs
    startLine: 2119
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator ==(Euler x0, Euler x1)
    parameters:
    - id: x0
      type: Vim.Math3d.Euler
    - id: x1
      type: Vim.Math3d.Euler
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(x0 As Euler, x1 As Euler) As Boolean
  overload: Vim.Math3d.Euler.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Euler.op_Inequality(Vim.Math3d.Euler,Vim.Math3d.Euler)
  commentId: M:Vim.Math3d.Euler.op_Inequality(Vim.Math3d.Euler,Vim.Math3d.Euler)
  id: op_Inequality(Vim.Math3d.Euler,Vim.Math3d.Euler)
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: Inequality(Euler, Euler)
  nameWithType: Euler.Inequality(Euler, Euler)
  fullName: Vim.Math3d.Euler.Inequality(Vim.Math3d.Euler, Vim.Math3d.Euler)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Inequality
    path: ../src/Structs.cs
    startLine: 2120
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator !=(Euler x0, Euler x1)
    parameters:
    - id: x0
      type: Vim.Math3d.Euler
    - id: x1
      type: Vim.Math3d.Euler
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(x0 As Euler, x1 As Euler) As Boolean
  overload: Vim.Math3d.Euler.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Euler.op_Implicit(System.ValueTuple{System.Double,System.Double,System.Double})~Vim.Math3d.Euler
  commentId: M:Vim.Math3d.Euler.op_Implicit(System.ValueTuple{System.Double,System.Double,System.Double})~Vim.Math3d.Euler
  id: op_Implicit(System.ValueTuple{System.Double,System.Double,System.Double})~Vim.Math3d.Euler
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: Implicit((Double yaw, Double pitch, Double roll) to Euler)
  nameWithType: Euler.Implicit((Double yaw, Double pitch, Double roll) to Euler)
  fullName: Vim.Math3d.Euler.Implicit(System.ValueTuple<System.Double, System.Double, System.Double> to Vim.Math3d.Euler)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Implicit
    path: ../src/Structs.cs
    startLine: 2121
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static implicit operator Euler((double yaw, double pitch, double roll) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{System.Double,System.Double,System.Double}
    return:
      type: Vim.Math3d.Euler
    content.vb: Public Shared Widening Operator CType(tuple As(yaw As Double, pitch As Double, roll As Double)(Of Double , Double, Double)) As Euler
  overload: Vim.Math3d.Euler.op_Implicit*
  nameWithType.vb: Euler.Widening((yaw As Double, pitch As Double, roll As Double)(Of Double, Double, Double) to Euler)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.Euler.Widening(System.ValueTuple(Of System.Double, System.Double, System.Double) to Vim.Math3d.Euler)
  name.vb: Widening((yaw As Double, pitch As Double, roll As Double)(Of Double, Double, Double) to Euler)
- uid: Vim.Math3d.Euler.op_Implicit(Vim.Math3d.Euler)~System.ValueTuple{System.Double,System.Double,System.Double}
  commentId: M:Vim.Math3d.Euler.op_Implicit(Vim.Math3d.Euler)~System.ValueTuple{System.Double,System.Double,System.Double}
  id: op_Implicit(Vim.Math3d.Euler)~System.ValueTuple{System.Double,System.Double,System.Double}
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: Implicit(Euler to (Double yaw, Double pitch, Double roll))
  nameWithType: Euler.Implicit(Euler to (Double yaw, Double pitch, Double roll))
  fullName: Vim.Math3d.Euler.Implicit(Vim.Math3d.Euler to System.ValueTuple<System.Double, System.Double, System.Double>)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Implicit
    path: ../src/Structs.cs
    startLine: 2122
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static implicit operator (double yaw, double pitch, double roll)(Euler self)
    parameters:
    - id: self
      type: Vim.Math3d.Euler
    return:
      type: System.ValueTuple{System.Double,System.Double,System.Double}
    content.vb: Public Shared Widening Operator CType(self As Euler) As(yaw As Double, pitch As Double, roll As Double)(Of Double , Double, Double)
  overload: Vim.Math3d.Euler.op_Implicit*
  nameWithType.vb: Euler.Widening(Euler to (yaw As Double, pitch As Double, roll As Double)(Of Double, Double, Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.Euler.Widening(Vim.Math3d.Euler to System.ValueTuple(Of System.Double, System.Double, System.Double))
  name.vb: Widening(Euler to (yaw As Double, pitch As Double, roll As Double)(Of Double, Double, Double))
- uid: Vim.Math3d.Euler.AlmostEquals(Vim.Math3d.Euler,System.Single)
  commentId: M:Vim.Math3d.Euler.AlmostEquals(Vim.Math3d.Euler,System.Single)
  id: AlmostEquals(Vim.Math3d.Euler,System.Single)
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: AlmostEquals(Euler, Single)
  nameWithType: Euler.AlmostEquals(Euler, Single)
  fullName: Vim.Math3d.Euler.AlmostEquals(Vim.Math3d.Euler, System.Single)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: AlmostEquals
    path: ../src/Structs.cs
    startLine: 2124
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool AlmostEquals(Euler x, float tolerance = 1E-07F)
    parameters:
    - id: x
      type: Vim.Math3d.Euler
    - id: tolerance
      type: System.Single
    return:
      type: System.Boolean
    content.vb: Public Function AlmostEquals(x As Euler, tolerance As Single = 1E-07F) As Boolean
  overload: Vim.Math3d.Euler.AlmostEquals*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Euler.Zero
  commentId: F:Vim.Math3d.Euler.Zero
  id: Zero
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: Zero
  nameWithType: Euler.Zero
  fullName: Vim.Math3d.Euler.Zero
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Zero
    path: ../src/Structs.cs
    startLine: 2125
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Euler Zero
    return:
      type: Vim.Math3d.Euler
    content.vb: Public Shared Zero As Euler
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Euler.MinValue
  commentId: F:Vim.Math3d.Euler.MinValue
  id: MinValue
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: MinValue
  nameWithType: Euler.MinValue
  fullName: Vim.Math3d.Euler.MinValue
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MinValue
    path: ../src/Structs.cs
    startLine: 2126
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Euler MinValue
    return:
      type: Vim.Math3d.Euler
    content.vb: Public Shared MinValue As Euler
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Euler.MaxValue
  commentId: F:Vim.Math3d.Euler.MaxValue
  id: MaxValue
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: MaxValue
  nameWithType: Euler.MaxValue
  fullName: Vim.Math3d.Euler.MaxValue
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MaxValue
    path: ../src/Structs.cs
    startLine: 2127
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Euler MaxValue
    return:
      type: Vim.Math3d.Euler
    content.vb: Public Shared MaxValue As Euler
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Euler.SetYaw(System.Double)
  commentId: M:Vim.Math3d.Euler.SetYaw(System.Double)
  id: SetYaw(System.Double)
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: SetYaw(Double)
  nameWithType: Euler.SetYaw(Double)
  fullName: Vim.Math3d.Euler.SetYaw(System.Double)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SetYaw
    path: ../src/Structs.cs
    startLine: 2128
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly Euler SetYaw(double x)
    parameters:
    - id: x
      type: System.Double
    return:
      type: Vim.Math3d.Euler
    content.vb: Public Function SetYaw(x As Double) As Euler
  overload: Vim.Math3d.Euler.SetYaw*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Euler.SetPitch(System.Double)
  commentId: M:Vim.Math3d.Euler.SetPitch(System.Double)
  id: SetPitch(System.Double)
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: SetPitch(Double)
  nameWithType: Euler.SetPitch(Double)
  fullName: Vim.Math3d.Euler.SetPitch(System.Double)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SetPitch
    path: ../src/Structs.cs
    startLine: 2129
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly Euler SetPitch(double x)
    parameters:
    - id: x
      type: System.Double
    return:
      type: Vim.Math3d.Euler
    content.vb: Public Function SetPitch(x As Double) As Euler
  overload: Vim.Math3d.Euler.SetPitch*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Euler.SetRoll(System.Double)
  commentId: M:Vim.Math3d.Euler.SetRoll(System.Double)
  id: SetRoll(System.Double)
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: SetRoll(Double)
  nameWithType: Euler.SetRoll(Double)
  fullName: Vim.Math3d.Euler.SetRoll(System.Double)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SetRoll
    path: ../src/Structs.cs
    startLine: 2130
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly Euler SetRoll(double x)
    parameters:
    - id: x
      type: System.Double
    return:
      type: Vim.Math3d.Euler
    content.vb: Public Function SetRoll(x As Double) As Euler
  overload: Vim.Math3d.Euler.SetRoll*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Euler.op_Addition(Vim.Math3d.Euler,Vim.Math3d.Euler)
  commentId: M:Vim.Math3d.Euler.op_Addition(Vim.Math3d.Euler,Vim.Math3d.Euler)
  id: op_Addition(Vim.Math3d.Euler,Vim.Math3d.Euler)
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: Addition(Euler, Euler)
  nameWithType: Euler.Addition(Euler, Euler)
  fullName: Vim.Math3d.Euler.Addition(Vim.Math3d.Euler, Vim.Math3d.Euler)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Addition
    path: ../src/Structs.cs
    startLine: 2131
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Euler operator +(Euler value1, Euler value2)
    parameters:
    - id: value1
      type: Vim.Math3d.Euler
    - id: value2
      type: Vim.Math3d.Euler
    return:
      type: Vim.Math3d.Euler
    content.vb: Public Shared Operator +(value1 As Euler, value2 As Euler) As Euler
  overload: Vim.Math3d.Euler.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Euler.op_Addition(Vim.Math3d.Euler,System.Double)
  commentId: M:Vim.Math3d.Euler.op_Addition(Vim.Math3d.Euler,System.Double)
  id: op_Addition(Vim.Math3d.Euler,System.Double)
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: Addition(Euler, Double)
  nameWithType: Euler.Addition(Euler, Double)
  fullName: Vim.Math3d.Euler.Addition(Vim.Math3d.Euler, System.Double)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Addition
    path: ../src/Structs.cs
    startLine: 2132
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Euler operator +(Euler value1, double value2)
    parameters:
    - id: value1
      type: Vim.Math3d.Euler
    - id: value2
      type: System.Double
    return:
      type: Vim.Math3d.Euler
    content.vb: Public Shared Operator +(value1 As Euler, value2 As Double) As Euler
  overload: Vim.Math3d.Euler.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Euler.op_Addition(System.Double,Vim.Math3d.Euler)
  commentId: M:Vim.Math3d.Euler.op_Addition(System.Double,Vim.Math3d.Euler)
  id: op_Addition(System.Double,Vim.Math3d.Euler)
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: Addition(Double, Euler)
  nameWithType: Euler.Addition(Double, Euler)
  fullName: Vim.Math3d.Euler.Addition(System.Double, Vim.Math3d.Euler)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Addition
    path: ../src/Structs.cs
    startLine: 2133
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Euler operator +(double value1, Euler value2)
    parameters:
    - id: value1
      type: System.Double
    - id: value2
      type: Vim.Math3d.Euler
    return:
      type: Vim.Math3d.Euler
    content.vb: Public Shared Operator +(value1 As Double, value2 As Euler) As Euler
  overload: Vim.Math3d.Euler.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Euler.op_Subtraction(Vim.Math3d.Euler,Vim.Math3d.Euler)
  commentId: M:Vim.Math3d.Euler.op_Subtraction(Vim.Math3d.Euler,Vim.Math3d.Euler)
  id: op_Subtraction(Vim.Math3d.Euler,Vim.Math3d.Euler)
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: Subtraction(Euler, Euler)
  nameWithType: Euler.Subtraction(Euler, Euler)
  fullName: Vim.Math3d.Euler.Subtraction(Vim.Math3d.Euler, Vim.Math3d.Euler)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Subtraction
    path: ../src/Structs.cs
    startLine: 2134
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Euler operator -(Euler value1, Euler value2)
    parameters:
    - id: value1
      type: Vim.Math3d.Euler
    - id: value2
      type: Vim.Math3d.Euler
    return:
      type: Vim.Math3d.Euler
    content.vb: Public Shared Operator -(value1 As Euler, value2 As Euler) As Euler
  overload: Vim.Math3d.Euler.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Euler.op_Subtraction(Vim.Math3d.Euler,System.Double)
  commentId: M:Vim.Math3d.Euler.op_Subtraction(Vim.Math3d.Euler,System.Double)
  id: op_Subtraction(Vim.Math3d.Euler,System.Double)
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: Subtraction(Euler, Double)
  nameWithType: Euler.Subtraction(Euler, Double)
  fullName: Vim.Math3d.Euler.Subtraction(Vim.Math3d.Euler, System.Double)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Subtraction
    path: ../src/Structs.cs
    startLine: 2135
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Euler operator -(Euler value1, double value2)
    parameters:
    - id: value1
      type: Vim.Math3d.Euler
    - id: value2
      type: System.Double
    return:
      type: Vim.Math3d.Euler
    content.vb: Public Shared Operator -(value1 As Euler, value2 As Double) As Euler
  overload: Vim.Math3d.Euler.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Euler.op_Subtraction(System.Double,Vim.Math3d.Euler)
  commentId: M:Vim.Math3d.Euler.op_Subtraction(System.Double,Vim.Math3d.Euler)
  id: op_Subtraction(System.Double,Vim.Math3d.Euler)
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: Subtraction(Double, Euler)
  nameWithType: Euler.Subtraction(Double, Euler)
  fullName: Vim.Math3d.Euler.Subtraction(System.Double, Vim.Math3d.Euler)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Subtraction
    path: ../src/Structs.cs
    startLine: 2136
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Euler operator -(double value1, Euler value2)
    parameters:
    - id: value1
      type: System.Double
    - id: value2
      type: Vim.Math3d.Euler
    return:
      type: Vim.Math3d.Euler
    content.vb: Public Shared Operator -(value1 As Double, value2 As Euler) As Euler
  overload: Vim.Math3d.Euler.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Euler.op_Multiply(Vim.Math3d.Euler,Vim.Math3d.Euler)
  commentId: M:Vim.Math3d.Euler.op_Multiply(Vim.Math3d.Euler,Vim.Math3d.Euler)
  id: op_Multiply(Vim.Math3d.Euler,Vim.Math3d.Euler)
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: Multiply(Euler, Euler)
  nameWithType: Euler.Multiply(Euler, Euler)
  fullName: Vim.Math3d.Euler.Multiply(Vim.Math3d.Euler, Vim.Math3d.Euler)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Multiply
    path: ../src/Structs.cs
    startLine: 2137
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Euler operator *(Euler value1, Euler value2)
    parameters:
    - id: value1
      type: Vim.Math3d.Euler
    - id: value2
      type: Vim.Math3d.Euler
    return:
      type: Vim.Math3d.Euler
    content.vb: Public Shared Operator *(value1 As Euler, value2 As Euler) As Euler
  overload: Vim.Math3d.Euler.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Euler.op_Multiply(Vim.Math3d.Euler,System.Double)
  commentId: M:Vim.Math3d.Euler.op_Multiply(Vim.Math3d.Euler,System.Double)
  id: op_Multiply(Vim.Math3d.Euler,System.Double)
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: Multiply(Euler, Double)
  nameWithType: Euler.Multiply(Euler, Double)
  fullName: Vim.Math3d.Euler.Multiply(Vim.Math3d.Euler, System.Double)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Multiply
    path: ../src/Structs.cs
    startLine: 2138
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Euler operator *(Euler value1, double value2)
    parameters:
    - id: value1
      type: Vim.Math3d.Euler
    - id: value2
      type: System.Double
    return:
      type: Vim.Math3d.Euler
    content.vb: Public Shared Operator *(value1 As Euler, value2 As Double) As Euler
  overload: Vim.Math3d.Euler.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Euler.op_Multiply(System.Double,Vim.Math3d.Euler)
  commentId: M:Vim.Math3d.Euler.op_Multiply(System.Double,Vim.Math3d.Euler)
  id: op_Multiply(System.Double,Vim.Math3d.Euler)
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: Multiply(Double, Euler)
  nameWithType: Euler.Multiply(Double, Euler)
  fullName: Vim.Math3d.Euler.Multiply(System.Double, Vim.Math3d.Euler)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Multiply
    path: ../src/Structs.cs
    startLine: 2139
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Euler operator *(double value1, Euler value2)
    parameters:
    - id: value1
      type: System.Double
    - id: value2
      type: Vim.Math3d.Euler
    return:
      type: Vim.Math3d.Euler
    content.vb: Public Shared Operator *(value1 As Double, value2 As Euler) As Euler
  overload: Vim.Math3d.Euler.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Euler.op_Division(Vim.Math3d.Euler,Vim.Math3d.Euler)
  commentId: M:Vim.Math3d.Euler.op_Division(Vim.Math3d.Euler,Vim.Math3d.Euler)
  id: op_Division(Vim.Math3d.Euler,Vim.Math3d.Euler)
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: Division(Euler, Euler)
  nameWithType: Euler.Division(Euler, Euler)
  fullName: Vim.Math3d.Euler.Division(Vim.Math3d.Euler, Vim.Math3d.Euler)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Division
    path: ../src/Structs.cs
    startLine: 2140
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Euler operator /(Euler value1, Euler value2)
    parameters:
    - id: value1
      type: Vim.Math3d.Euler
    - id: value2
      type: Vim.Math3d.Euler
    return:
      type: Vim.Math3d.Euler
    content.vb: Public Shared Operator /(value1 As Euler, value2 As Euler) As Euler
  overload: Vim.Math3d.Euler.op_Division*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Euler.op_Division(Vim.Math3d.Euler,System.Double)
  commentId: M:Vim.Math3d.Euler.op_Division(Vim.Math3d.Euler,System.Double)
  id: op_Division(Vim.Math3d.Euler,System.Double)
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: Division(Euler, Double)
  nameWithType: Euler.Division(Euler, Double)
  fullName: Vim.Math3d.Euler.Division(Vim.Math3d.Euler, System.Double)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Division
    path: ../src/Structs.cs
    startLine: 2141
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Euler operator /(Euler value1, double value2)
    parameters:
    - id: value1
      type: Vim.Math3d.Euler
    - id: value2
      type: System.Double
    return:
      type: Vim.Math3d.Euler
    content.vb: Public Shared Operator /(value1 As Euler, value2 As Double) As Euler
  overload: Vim.Math3d.Euler.op_Division*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Euler.op_Division(System.Double,Vim.Math3d.Euler)
  commentId: M:Vim.Math3d.Euler.op_Division(System.Double,Vim.Math3d.Euler)
  id: op_Division(System.Double,Vim.Math3d.Euler)
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: Division(Double, Euler)
  nameWithType: Euler.Division(Double, Euler)
  fullName: Vim.Math3d.Euler.Division(System.Double, Vim.Math3d.Euler)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Division
    path: ../src/Structs.cs
    startLine: 2142
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Euler operator /(double value1, Euler value2)
    parameters:
    - id: value1
      type: System.Double
    - id: value2
      type: Vim.Math3d.Euler
    return:
      type: Vim.Math3d.Euler
    content.vb: Public Shared Operator /(value1 As Double, value2 As Euler) As Euler
  overload: Vim.Math3d.Euler.op_Division*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Euler.One
  commentId: F:Vim.Math3d.Euler.One
  id: One
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: One
  nameWithType: Euler.One
  fullName: Vim.Math3d.Euler.One
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: One
    path: ../src/Structs.cs
    startLine: 2143
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Euler One
    return:
      type: Vim.Math3d.Euler
    content.vb: Public Shared One As Euler
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Euler.UnitYaw
  commentId: F:Vim.Math3d.Euler.UnitYaw
  id: UnitYaw
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: UnitYaw
  nameWithType: Euler.UnitYaw
  fullName: Vim.Math3d.Euler.UnitYaw
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: UnitYaw
    path: ../src/Structs.cs
    startLine: 2144
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Euler UnitYaw
    return:
      type: Vim.Math3d.Euler
    content.vb: Public Shared UnitYaw As Euler
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Euler.UnitPitch
  commentId: F:Vim.Math3d.Euler.UnitPitch
  id: UnitPitch
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: UnitPitch
  nameWithType: Euler.UnitPitch
  fullName: Vim.Math3d.Euler.UnitPitch
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: UnitPitch
    path: ../src/Structs.cs
    startLine: 2145
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Euler UnitPitch
    return:
      type: Vim.Math3d.Euler
    content.vb: Public Shared UnitPitch As Euler
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Euler.UnitRoll
  commentId: F:Vim.Math3d.Euler.UnitRoll
  id: UnitRoll
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: UnitRoll
  nameWithType: Euler.UnitRoll
  fullName: Vim.Math3d.Euler.UnitRoll
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: UnitRoll
    path: ../src/Structs.cs
    startLine: 2146
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Euler UnitRoll
    return:
      type: Vim.Math3d.Euler
    content.vb: Public Shared UnitRoll As Euler
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Euler.#ctor(System.Double)
  commentId: M:Vim.Math3d.Euler.#ctor(System.Double)
  id: '#ctor(System.Double)'
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: Euler(Double)
  nameWithType: Euler.Euler(Double)
  fullName: Vim.Math3d.Euler.Euler(System.Double)
  type: Constructor
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: .ctor
    path: ../src/Structs.cs
    startLine: 2147
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public Euler(double value)
    parameters:
    - id: value
      type: System.Double
    content.vb: Public Sub New(value As Double)
  overload: Vim.Math3d.Euler.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Euler.op_UnaryNegation(Vim.Math3d.Euler)
  commentId: M:Vim.Math3d.Euler.op_UnaryNegation(Vim.Math3d.Euler)
  id: op_UnaryNegation(Vim.Math3d.Euler)
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: UnaryNegation(Euler)
  nameWithType: Euler.UnaryNegation(Euler)
  fullName: Vim.Math3d.Euler.UnaryNegation(Vim.Math3d.Euler)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_UnaryNegation
    path: ../src/Structs.cs
    startLine: 2148
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Euler operator -(Euler value)
    parameters:
    - id: value
      type: Vim.Math3d.Euler
    return:
      type: Vim.Math3d.Euler
    content.vb: Public Shared Operator -(value As Euler) As Euler
  overload: Vim.Math3d.Euler.op_UnaryNegation*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Euler.Dot(Vim.Math3d.Euler,Vim.Math3d.Euler)
  commentId: M:Vim.Math3d.Euler.Dot(Vim.Math3d.Euler,Vim.Math3d.Euler)
  id: Dot(Vim.Math3d.Euler,Vim.Math3d.Euler)
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: Dot(Euler, Euler)
  nameWithType: Euler.Dot(Euler, Euler)
  fullName: Vim.Math3d.Euler.Dot(Vim.Math3d.Euler, Vim.Math3d.Euler)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Dot
    path: ../src/Structs.cs
    startLine: 2149
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static double Dot(Euler value1, Euler value2)
    parameters:
    - id: value1
      type: Vim.Math3d.Euler
    - id: value2
      type: Vim.Math3d.Euler
    return:
      type: System.Double
    content.vb: Public Shared Function Dot(value1 As Euler, value2 As Euler) As Double
  overload: Vim.Math3d.Euler.Dot*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Euler.Dot(Vim.Math3d.Euler)
  commentId: M:Vim.Math3d.Euler.Dot(Vim.Math3d.Euler)
  id: Dot(Vim.Math3d.Euler)
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: Dot(Euler)
  nameWithType: Euler.Dot(Euler)
  fullName: Vim.Math3d.Euler.Dot(Vim.Math3d.Euler)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Dot
    path: ../src/Structs.cs
    startLine: 2150
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly double Dot(Euler value)
    parameters:
    - id: value
      type: Vim.Math3d.Euler
    return:
      type: System.Double
    content.vb: Public Function Dot(value As Euler) As Double
  overload: Vim.Math3d.Euler.Dot*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Euler.AlmostZero(System.Single)
  commentId: M:Vim.Math3d.Euler.AlmostZero(System.Single)
  id: AlmostZero(System.Single)
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: AlmostZero(Single)
  nameWithType: Euler.AlmostZero(Single)
  fullName: Vim.Math3d.Euler.AlmostZero(System.Single)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: AlmostZero
    path: ../src/Structs.cs
    startLine: 2151
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool AlmostZero(float tolerance = 1E-07F)
    parameters:
    - id: tolerance
      type: System.Single
    return:
      type: System.Boolean
    content.vb: Public Function AlmostZero(tolerance As Single = 1E-07F) As Boolean
  overload: Vim.Math3d.Euler.AlmostZero*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Euler.AnyComponentNegative
  commentId: M:Vim.Math3d.Euler.AnyComponentNegative
  id: AnyComponentNegative
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: AnyComponentNegative()
  nameWithType: Euler.AnyComponentNegative()
  fullName: Vim.Math3d.Euler.AnyComponentNegative()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: AnyComponentNegative
    path: ../src/Structs.cs
    startLine: 2152
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool AnyComponentNegative()
    return:
      type: System.Boolean
    content.vb: Public Function AnyComponentNegative As Boolean
  overload: Vim.Math3d.Euler.AnyComponentNegative*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Euler.MinComponent
  commentId: M:Vim.Math3d.Euler.MinComponent
  id: MinComponent
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: MinComponent()
  nameWithType: Euler.MinComponent()
  fullName: Vim.Math3d.Euler.MinComponent()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MinComponent
    path: ../src/Structs.cs
    startLine: 2153
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly double MinComponent()
    return:
      type: System.Double
    content.vb: Public Function MinComponent As Double
  overload: Vim.Math3d.Euler.MinComponent*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Euler.MaxComponent
  commentId: M:Vim.Math3d.Euler.MaxComponent
  id: MaxComponent
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: MaxComponent()
  nameWithType: Euler.MaxComponent()
  fullName: Vim.Math3d.Euler.MaxComponent()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MaxComponent
    path: ../src/Structs.cs
    startLine: 2154
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly double MaxComponent()
    return:
      type: System.Double
    content.vb: Public Function MaxComponent As Double
  overload: Vim.Math3d.Euler.MaxComponent*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Euler.SumComponents
  commentId: M:Vim.Math3d.Euler.SumComponents
  id: SumComponents
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: SumComponents()
  nameWithType: Euler.SumComponents()
  fullName: Vim.Math3d.Euler.SumComponents()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SumComponents
    path: ../src/Structs.cs
    startLine: 2155
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly double SumComponents()
    return:
      type: System.Double
    content.vb: Public Function SumComponents As Double
  overload: Vim.Math3d.Euler.SumComponents*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Euler.SumSqrComponents
  commentId: M:Vim.Math3d.Euler.SumSqrComponents
  id: SumSqrComponents
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: SumSqrComponents()
  nameWithType: Euler.SumSqrComponents()
  fullName: Vim.Math3d.Euler.SumSqrComponents()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SumSqrComponents
    path: ../src/Structs.cs
    startLine: 2156
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly double SumSqrComponents()
    return:
      type: System.Double
    content.vb: Public Function SumSqrComponents As Double
  overload: Vim.Math3d.Euler.SumSqrComponents*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Euler.ProductComponents
  commentId: M:Vim.Math3d.Euler.ProductComponents
  id: ProductComponents
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: ProductComponents()
  nameWithType: Euler.ProductComponents()
  fullName: Vim.Math3d.Euler.ProductComponents()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ProductComponents
    path: ../src/Structs.cs
    startLine: 2157
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly double ProductComponents()
    return:
      type: System.Double
    content.vb: Public Function ProductComponents As Double
  overload: Vim.Math3d.Euler.ProductComponents*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Euler.GetComponent(System.Int32)
  commentId: M:Vim.Math3d.Euler.GetComponent(System.Int32)
  id: GetComponent(System.Int32)
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: GetComponent(Int32)
  nameWithType: Euler.GetComponent(Int32)
  fullName: Vim.Math3d.Euler.GetComponent(System.Int32)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: GetComponent
    path: ../src/Structs.cs
    startLine: 2158
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly double GetComponent(int n)
    parameters:
    - id: n
      type: System.Int32
    return:
      type: System.Double
    content.vb: Public Function GetComponent(n As Integer) As Double
  overload: Vim.Math3d.Euler.GetComponent*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Euler.MagnitudeSquared
  commentId: M:Vim.Math3d.Euler.MagnitudeSquared
  id: MagnitudeSquared
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: MagnitudeSquared()
  nameWithType: Euler.MagnitudeSquared()
  fullName: Vim.Math3d.Euler.MagnitudeSquared()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MagnitudeSquared
    path: ../src/Structs.cs
    startLine: 2159
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly double MagnitudeSquared()
    return:
      type: System.Double
    content.vb: Public Function MagnitudeSquared As Double
  overload: Vim.Math3d.Euler.MagnitudeSquared*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Euler.Magnitude
  commentId: M:Vim.Math3d.Euler.Magnitude
  id: Magnitude
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: Magnitude()
  nameWithType: Euler.Magnitude()
  fullName: Vim.Math3d.Euler.Magnitude()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Magnitude
    path: ../src/Structs.cs
    startLine: 2160
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly double Magnitude()
    return:
      type: System.Double
    content.vb: Public Function Magnitude As Double
  overload: Vim.Math3d.Euler.Magnitude*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Euler.NumComponents
  commentId: F:Vim.Math3d.Euler.NumComponents
  id: NumComponents
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: NumComponents
  nameWithType: Euler.NumComponents
  fullName: Vim.Math3d.Euler.NumComponents
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: NumComponents
    path: ../src/Structs.cs
    startLine: 2161
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public const int NumComponents = 3
    return:
      type: System.Int32
    content.vb: Public Const NumComponents As Integer = 3
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Vim.Math3d.Euler.IsNaN
  commentId: M:Vim.Math3d.Euler.IsNaN
  id: IsNaN
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: IsNaN()
  nameWithType: Euler.IsNaN()
  fullName: Vim.Math3d.Euler.IsNaN()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: IsNaN
    path: ../src/Structs.cs
    startLine: 2163
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool IsNaN()
    return:
      type: System.Boolean
    content.vb: Public Function IsNaN As Boolean
  overload: Vim.Math3d.Euler.IsNaN*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Euler.IsInfinity
  commentId: M:Vim.Math3d.Euler.IsInfinity
  id: IsInfinity
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: IsInfinity()
  nameWithType: Euler.IsInfinity()
  fullName: Vim.Math3d.Euler.IsInfinity()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: IsInfinity
    path: ../src/Structs.cs
    startLine: 2164
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool IsInfinity()
    return:
      type: System.Boolean
    content.vb: Public Function IsInfinity As Boolean
  overload: Vim.Math3d.Euler.IsInfinity*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Euler.CompareTo(Vim.Math3d.Euler)
  commentId: M:Vim.Math3d.Euler.CompareTo(Vim.Math3d.Euler)
  id: CompareTo(Vim.Math3d.Euler)
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: CompareTo(Euler)
  nameWithType: Euler.CompareTo(Euler)
  fullName: Vim.Math3d.Euler.CompareTo(Vim.Math3d.Euler)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: CompareTo
    path: ../src/Structs.cs
    startLine: 2165
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly int CompareTo(Euler x)
    parameters:
    - id: x
      type: Vim.Math3d.Euler
    return:
      type: System.Int32
    content.vb: Public Function CompareTo(x As Euler) As Integer
  overload: Vim.Math3d.Euler.CompareTo*
  implements:
  - System.IComparable{Vim.Math3d.Euler}.CompareTo(Vim.Math3d.Euler)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Euler.op_LessThan(Vim.Math3d.Euler,Vim.Math3d.Euler)
  commentId: M:Vim.Math3d.Euler.op_LessThan(Vim.Math3d.Euler,Vim.Math3d.Euler)
  id: op_LessThan(Vim.Math3d.Euler,Vim.Math3d.Euler)
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: LessThan(Euler, Euler)
  nameWithType: Euler.LessThan(Euler, Euler)
  fullName: Vim.Math3d.Euler.LessThan(Vim.Math3d.Euler, Vim.Math3d.Euler)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_LessThan
    path: ../src/Structs.cs
    startLine: 2166
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator <(Euler x0, Euler x1)
    parameters:
    - id: x0
      type: Vim.Math3d.Euler
    - id: x1
      type: Vim.Math3d.Euler
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <(x0 As Euler, x1 As Euler) As Boolean
  overload: Vim.Math3d.Euler.op_LessThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Euler.op_LessThanOrEqual(Vim.Math3d.Euler,Vim.Math3d.Euler)
  commentId: M:Vim.Math3d.Euler.op_LessThanOrEqual(Vim.Math3d.Euler,Vim.Math3d.Euler)
  id: op_LessThanOrEqual(Vim.Math3d.Euler,Vim.Math3d.Euler)
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(Euler, Euler)
  nameWithType: Euler.LessThanOrEqual(Euler, Euler)
  fullName: Vim.Math3d.Euler.LessThanOrEqual(Vim.Math3d.Euler, Vim.Math3d.Euler)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_LessThanOrEqual
    path: ../src/Structs.cs
    startLine: 2167
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator <=(Euler x0, Euler x1)
    parameters:
    - id: x0
      type: Vim.Math3d.Euler
    - id: x1
      type: Vim.Math3d.Euler
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <=(x0 As Euler, x1 As Euler) As Boolean
  overload: Vim.Math3d.Euler.op_LessThanOrEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Euler.op_GreaterThan(Vim.Math3d.Euler,Vim.Math3d.Euler)
  commentId: M:Vim.Math3d.Euler.op_GreaterThan(Vim.Math3d.Euler,Vim.Math3d.Euler)
  id: op_GreaterThan(Vim.Math3d.Euler,Vim.Math3d.Euler)
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: GreaterThan(Euler, Euler)
  nameWithType: Euler.GreaterThan(Euler, Euler)
  fullName: Vim.Math3d.Euler.GreaterThan(Vim.Math3d.Euler, Vim.Math3d.Euler)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_GreaterThan
    path: ../src/Structs.cs
    startLine: 2168
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator>(Euler x0, Euler x1)
    parameters:
    - id: x0
      type: Vim.Math3d.Euler
    - id: x1
      type: Vim.Math3d.Euler
    return:
      type: System.Boolean
    content.vb: Public Shared Operator>(x0 As Euler, x1 As Euler) As Boolean
  overload: Vim.Math3d.Euler.op_GreaterThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Euler.op_GreaterThanOrEqual(Vim.Math3d.Euler,Vim.Math3d.Euler)
  commentId: M:Vim.Math3d.Euler.op_GreaterThanOrEqual(Vim.Math3d.Euler,Vim.Math3d.Euler)
  id: op_GreaterThanOrEqual(Vim.Math3d.Euler,Vim.Math3d.Euler)
  parent: Vim.Math3d.Euler
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(Euler, Euler)
  nameWithType: Euler.GreaterThanOrEqual(Euler, Euler)
  fullName: Vim.Math3d.Euler.GreaterThanOrEqual(Vim.Math3d.Euler, Vim.Math3d.Euler)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_GreaterThanOrEqual
    path: ../src/Structs.cs
    startLine: 2169
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator >=(Euler x0, Euler x1)
    parameters:
    - id: x0
      type: Vim.Math3d.Euler
    - id: x1
      type: Vim.Math3d.Euler
    return:
      type: System.Boolean
    content.vb: Public Shared Operator >=(x0 As Euler, x1 As Euler) As Boolean
  overload: Vim.Math3d.Euler.op_GreaterThanOrEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Vim.Math3d
  commentId: N:Vim.Math3d
  name: Vim.Math3d
  nameWithType: Vim.Math3d
  fullName: Vim.Math3d
- uid: System.IEquatable{Vim.Math3d.Euler}
  commentId: T:System.IEquatable{Vim.Math3d.Euler}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Euler>
  nameWithType: IEquatable<Euler>
  fullName: System.IEquatable<Vim.Math3d.Euler>
  nameWithType.vb: IEquatable(Of Euler)
  fullName.vb: System.IEquatable(Of Vim.Math3d.Euler)
  name.vb: IEquatable(Of Euler)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.Euler
    name: Euler
    nameWithType: Euler
    fullName: Vim.Math3d.Euler
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.Euler
    name: Euler
    nameWithType: Euler
    fullName: Vim.Math3d.Euler
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable{Vim.Math3d.Euler}
  commentId: T:System.IComparable{Vim.Math3d.Euler}
  parent: System
  definition: System.IComparable`1
  name: IComparable<Euler>
  nameWithType: IComparable<Euler>
  fullName: System.IComparable<Vim.Math3d.Euler>
  nameWithType.vb: IComparable(Of Euler)
  fullName.vb: System.IComparable(Of Vim.Math3d.Euler)
  name.vb: IComparable(Of Euler)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.Euler
    name: Euler
    nameWithType: Euler
    fullName: Vim.Math3d.Euler
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.Euler
    name: Euler
    nameWithType: Euler
    fullName: Vim.Math3d.Euler
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Vim.Math3d.Euler.#ctor*
  commentId: Overload:Vim.Math3d.Euler.#ctor
  name: Euler
  nameWithType: Euler.Euler
  fullName: Vim.Math3d.Euler.Euler
- uid: System.ValueTuple{System.Double,System.Double,System.Double}
  commentId: T:System.ValueTuple{System.Double,System.Double,System.Double}
  parent: System
  definition: System.ValueTuple`3
  name: (T1, T2, T3)<Double, Double, Double>
  nameWithType: (T1, T2, T3)<Double, Double, Double>
  fullName: System.ValueTuple<System.Double, System.Double, System.Double>
  nameWithType.vb: (T1, T2, T3)(Of Double, Double, Double)
  fullName.vb: System.ValueTuple(Of System.Double, System.Double, System.Double)
  name.vb: (T1, T2, T3)(Of Double, Double, Double)
  spec.csharp:
  - uid: System.ValueTuple`3
    name: (T1, T2, T3)
    nameWithType: (T1, T2, T3)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`3
    name: (T1, T2, T3)
    nameWithType: (T1, T2, T3)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple`3
  commentId: T:System.ValueTuple`3
  isExternal: true
  name: (T1, T2, T3)<T1, T2, T3>
  nameWithType: (T1, T2, T3)<T1, T2, T3>
  fullName: System.ValueTuple<T1, T2, T3>
  nameWithType.vb: (T1, T2, T3)(Of T1, T2, T3)
  fullName.vb: System.ValueTuple(Of T1, T2, T3)
  name.vb: (T1, T2, T3)(Of T1, T2, T3)
  spec.csharp:
  - uid: System.ValueTuple`3
    name: (T1, T2, T3)
    nameWithType: (T1, T2, T3)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`3
    name: (T1, T2, T3)
    nameWithType: (T1, T2, T3)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Euler.Create*
  commentId: Overload:Vim.Math3d.Euler.Create
  name: Create
  nameWithType: Euler.Create
  fullName: Vim.Math3d.Euler.Create
- uid: Vim.Math3d.Euler
  commentId: T:Vim.Math3d.Euler
  parent: Vim.Math3d
  name: Euler
  nameWithType: Euler
  fullName: Vim.Math3d.Euler
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Euler.Equals*
  commentId: Overload:Vim.Math3d.Euler.Equals
  name: Equals
  nameWithType: Euler.Equals
  fullName: Vim.Math3d.Euler.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Euler.GetHashCode*
  commentId: Overload:Vim.Math3d.Euler.GetHashCode
  name: GetHashCode
  nameWithType: Euler.GetHashCode
  fullName: Vim.Math3d.Euler.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Euler.ToString*
  commentId: Overload:Vim.Math3d.Euler.ToString
  name: ToString
  nameWithType: Euler.ToString
  fullName: Vim.Math3d.Euler.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Vim.Math3d.Euler.Deconstruct*
  commentId: Overload:Vim.Math3d.Euler.Deconstruct
  name: Deconstruct
  nameWithType: Euler.Deconstruct
  fullName: Vim.Math3d.Euler.Deconstruct
- uid: System.IEquatable{Vim.Math3d.Euler}.Equals(Vim.Math3d.Euler)
  commentId: M:System.IEquatable{Vim.Math3d.Euler}.Equals(Vim.Math3d.Euler)
  parent: System.IEquatable{Vim.Math3d.Euler}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(Euler)
  nameWithType: IEquatable<Euler>.Equals(Euler)
  fullName: System.IEquatable<Vim.Math3d.Euler>.Equals(Vim.Math3d.Euler)
  nameWithType.vb: IEquatable(Of Euler).Equals(Euler)
  fullName.vb: System.IEquatable(Of Vim.Math3d.Euler).Equals(Vim.Math3d.Euler)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<Euler>.Equals
    fullName: System.IEquatable<Vim.Math3d.Euler>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Euler
    name: Euler
    nameWithType: Euler
    fullName: Vim.Math3d.Euler
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of Euler).Equals
    fullName: System.IEquatable(Of Vim.Math3d.Euler).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Euler
    name: Euler
    nameWithType: Euler
    fullName: Vim.Math3d.Euler
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Euler.op_Equality*
  commentId: Overload:Vim.Math3d.Euler.op_Equality
  name: Equality
  nameWithType: Euler.Equality
  fullName: Vim.Math3d.Euler.Equality
- uid: Vim.Math3d.Euler.op_Inequality*
  commentId: Overload:Vim.Math3d.Euler.op_Inequality
  name: Inequality
  nameWithType: Euler.Inequality
  fullName: Vim.Math3d.Euler.Inequality
- uid: Vim.Math3d.Euler.op_Implicit*
  commentId: Overload:Vim.Math3d.Euler.op_Implicit
  name: Implicit
  nameWithType: Euler.Implicit
  fullName: Vim.Math3d.Euler.Implicit
  nameWithType.vb: Euler.Widening
  fullName.vb: Vim.Math3d.Euler.Widening
  name.vb: Widening
- uid: Vim.Math3d.Euler.AlmostEquals*
  commentId: Overload:Vim.Math3d.Euler.AlmostEquals
  name: AlmostEquals
  nameWithType: Euler.AlmostEquals
  fullName: Vim.Math3d.Euler.AlmostEquals
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Vim.Math3d.Euler.SetYaw*
  commentId: Overload:Vim.Math3d.Euler.SetYaw
  name: SetYaw
  nameWithType: Euler.SetYaw
  fullName: Vim.Math3d.Euler.SetYaw
- uid: Vim.Math3d.Euler.SetPitch*
  commentId: Overload:Vim.Math3d.Euler.SetPitch
  name: SetPitch
  nameWithType: Euler.SetPitch
  fullName: Vim.Math3d.Euler.SetPitch
- uid: Vim.Math3d.Euler.SetRoll*
  commentId: Overload:Vim.Math3d.Euler.SetRoll
  name: SetRoll
  nameWithType: Euler.SetRoll
  fullName: Vim.Math3d.Euler.SetRoll
- uid: Vim.Math3d.Euler.op_Addition*
  commentId: Overload:Vim.Math3d.Euler.op_Addition
  name: Addition
  nameWithType: Euler.Addition
  fullName: Vim.Math3d.Euler.Addition
- uid: Vim.Math3d.Euler.op_Subtraction*
  commentId: Overload:Vim.Math3d.Euler.op_Subtraction
  name: Subtraction
  nameWithType: Euler.Subtraction
  fullName: Vim.Math3d.Euler.Subtraction
- uid: Vim.Math3d.Euler.op_Multiply*
  commentId: Overload:Vim.Math3d.Euler.op_Multiply
  name: Multiply
  nameWithType: Euler.Multiply
  fullName: Vim.Math3d.Euler.Multiply
- uid: Vim.Math3d.Euler.op_Division*
  commentId: Overload:Vim.Math3d.Euler.op_Division
  name: Division
  nameWithType: Euler.Division
  fullName: Vim.Math3d.Euler.Division
- uid: Vim.Math3d.Euler.op_UnaryNegation*
  commentId: Overload:Vim.Math3d.Euler.op_UnaryNegation
  name: UnaryNegation
  nameWithType: Euler.UnaryNegation
  fullName: Vim.Math3d.Euler.UnaryNegation
- uid: Vim.Math3d.Euler.Dot*
  commentId: Overload:Vim.Math3d.Euler.Dot
  name: Dot
  nameWithType: Euler.Dot
  fullName: Vim.Math3d.Euler.Dot
- uid: Vim.Math3d.Euler.AlmostZero*
  commentId: Overload:Vim.Math3d.Euler.AlmostZero
  name: AlmostZero
  nameWithType: Euler.AlmostZero
  fullName: Vim.Math3d.Euler.AlmostZero
- uid: Vim.Math3d.Euler.AnyComponentNegative*
  commentId: Overload:Vim.Math3d.Euler.AnyComponentNegative
  name: AnyComponentNegative
  nameWithType: Euler.AnyComponentNegative
  fullName: Vim.Math3d.Euler.AnyComponentNegative
- uid: Vim.Math3d.Euler.MinComponent*
  commentId: Overload:Vim.Math3d.Euler.MinComponent
  name: MinComponent
  nameWithType: Euler.MinComponent
  fullName: Vim.Math3d.Euler.MinComponent
- uid: Vim.Math3d.Euler.MaxComponent*
  commentId: Overload:Vim.Math3d.Euler.MaxComponent
  name: MaxComponent
  nameWithType: Euler.MaxComponent
  fullName: Vim.Math3d.Euler.MaxComponent
- uid: Vim.Math3d.Euler.SumComponents*
  commentId: Overload:Vim.Math3d.Euler.SumComponents
  name: SumComponents
  nameWithType: Euler.SumComponents
  fullName: Vim.Math3d.Euler.SumComponents
- uid: Vim.Math3d.Euler.SumSqrComponents*
  commentId: Overload:Vim.Math3d.Euler.SumSqrComponents
  name: SumSqrComponents
  nameWithType: Euler.SumSqrComponents
  fullName: Vim.Math3d.Euler.SumSqrComponents
- uid: Vim.Math3d.Euler.ProductComponents*
  commentId: Overload:Vim.Math3d.Euler.ProductComponents
  name: ProductComponents
  nameWithType: Euler.ProductComponents
  fullName: Vim.Math3d.Euler.ProductComponents
- uid: Vim.Math3d.Euler.GetComponent*
  commentId: Overload:Vim.Math3d.Euler.GetComponent
  name: GetComponent
  nameWithType: Euler.GetComponent
  fullName: Vim.Math3d.Euler.GetComponent
- uid: Vim.Math3d.Euler.MagnitudeSquared*
  commentId: Overload:Vim.Math3d.Euler.MagnitudeSquared
  name: MagnitudeSquared
  nameWithType: Euler.MagnitudeSquared
  fullName: Vim.Math3d.Euler.MagnitudeSquared
- uid: Vim.Math3d.Euler.Magnitude*
  commentId: Overload:Vim.Math3d.Euler.Magnitude
  name: Magnitude
  nameWithType: Euler.Magnitude
  fullName: Vim.Math3d.Euler.Magnitude
- uid: Vim.Math3d.Euler.IsNaN*
  commentId: Overload:Vim.Math3d.Euler.IsNaN
  name: IsNaN
  nameWithType: Euler.IsNaN
  fullName: Vim.Math3d.Euler.IsNaN
- uid: Vim.Math3d.Euler.IsInfinity*
  commentId: Overload:Vim.Math3d.Euler.IsInfinity
  name: IsInfinity
  nameWithType: Euler.IsInfinity
  fullName: Vim.Math3d.Euler.IsInfinity
- uid: Vim.Math3d.Euler.CompareTo*
  commentId: Overload:Vim.Math3d.Euler.CompareTo
  name: CompareTo
  nameWithType: Euler.CompareTo
  fullName: Vim.Math3d.Euler.CompareTo
- uid: System.IComparable{Vim.Math3d.Euler}.CompareTo(Vim.Math3d.Euler)
  commentId: M:System.IComparable{Vim.Math3d.Euler}.CompareTo(Vim.Math3d.Euler)
  parent: System.IComparable{Vim.Math3d.Euler}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(Euler)
  nameWithType: IComparable<Euler>.CompareTo(Euler)
  fullName: System.IComparable<Vim.Math3d.Euler>.CompareTo(Vim.Math3d.Euler)
  nameWithType.vb: IComparable(Of Euler).CompareTo(Euler)
  fullName.vb: System.IComparable(Of Vim.Math3d.Euler).CompareTo(Vim.Math3d.Euler)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<Euler>.CompareTo
    fullName: System.IComparable<Vim.Math3d.Euler>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Euler
    name: Euler
    nameWithType: Euler
    fullName: Vim.Math3d.Euler
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of Euler).CompareTo
    fullName: System.IComparable(Of Vim.Math3d.Euler).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Euler
    name: Euler
    nameWithType: Euler
    fullName: Vim.Math3d.Euler
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable`1.CompareTo(`0)
  commentId: M:System.IComparable`1.CompareTo(`0)
  isExternal: true
  name: CompareTo(T)
  nameWithType: IComparable<T>.CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
  fullName.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<T>.CompareTo
    fullName: System.IComparable<T>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of T).CompareTo
    fullName: System.IComparable(Of T).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Euler.op_LessThan*
  commentId: Overload:Vim.Math3d.Euler.op_LessThan
  name: LessThan
  nameWithType: Euler.LessThan
  fullName: Vim.Math3d.Euler.LessThan
- uid: Vim.Math3d.Euler.op_LessThanOrEqual*
  commentId: Overload:Vim.Math3d.Euler.op_LessThanOrEqual
  name: LessThanOrEqual
  nameWithType: Euler.LessThanOrEqual
  fullName: Vim.Math3d.Euler.LessThanOrEqual
- uid: Vim.Math3d.Euler.op_GreaterThan*
  commentId: Overload:Vim.Math3d.Euler.op_GreaterThan
  name: GreaterThan
  nameWithType: Euler.GreaterThan
  fullName: Vim.Math3d.Euler.GreaterThan
- uid: Vim.Math3d.Euler.op_GreaterThanOrEqual*
  commentId: Overload:Vim.Math3d.Euler.op_GreaterThanOrEqual
  name: GreaterThanOrEqual
  nameWithType: Euler.GreaterThanOrEqual
  fullName: Vim.Math3d.Euler.GreaterThanOrEqual

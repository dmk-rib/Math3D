### YamlMime:ManagedReference
items:
- uid: Vim.Math3d.Int4
  commentId: T:Vim.Math3d.Int4
  id: Int4
  parent: Vim.Math3d
  children:
  - Vim.Math3d.Int4.#ctor(System.Int32)
  - Vim.Math3d.Int4.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)
  - Vim.Math3d.Int4.#ctor(System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32})
  - Vim.Math3d.Int4.AlmostZero(System.Single)
  - Vim.Math3d.Int4.AnyComponentNegative
  - Vim.Math3d.Int4.CompareTo(Vim.Math3d.Int4)
  - Vim.Math3d.Int4.Create(System.Int32,System.Int32,System.Int32,System.Int32)
  - Vim.Math3d.Int4.Create(System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32})
  - Vim.Math3d.Int4.Deconstruct(System.Int32@,System.Int32@,System.Int32@,System.Int32@)
  - Vim.Math3d.Int4.Dot(Vim.Math3d.Int4)
  - Vim.Math3d.Int4.Dot(Vim.Math3d.Int4,Vim.Math3d.Int4)
  - Vim.Math3d.Int4.Equals(System.Object)
  - Vim.Math3d.Int4.Equals(Vim.Math3d.Int4)
  - Vim.Math3d.Int4.GetComponent(System.Int32)
  - Vim.Math3d.Int4.GetHashCode
  - Vim.Math3d.Int4.IsInfinity
  - Vim.Math3d.Int4.IsNaN
  - Vim.Math3d.Int4.Magnitude
  - Vim.Math3d.Int4.MagnitudeSquared
  - Vim.Math3d.Int4.MaxComponent
  - Vim.Math3d.Int4.MaxValue
  - Vim.Math3d.Int4.MinComponent
  - Vim.Math3d.Int4.MinValue
  - Vim.Math3d.Int4.NumComponents
  - Vim.Math3d.Int4.One
  - Vim.Math3d.Int4.op_Addition(System.Int32,Vim.Math3d.Int4)
  - Vim.Math3d.Int4.op_Addition(Vim.Math3d.Int4,System.Int32)
  - Vim.Math3d.Int4.op_Addition(Vim.Math3d.Int4,Vim.Math3d.Int4)
  - Vim.Math3d.Int4.op_Division(System.Int32,Vim.Math3d.Int4)
  - Vim.Math3d.Int4.op_Division(Vim.Math3d.Int4,System.Int32)
  - Vim.Math3d.Int4.op_Division(Vim.Math3d.Int4,Vim.Math3d.Int4)
  - Vim.Math3d.Int4.op_Equality(Vim.Math3d.Int4,Vim.Math3d.Int4)
  - Vim.Math3d.Int4.op_GreaterThan(Vim.Math3d.Int4,Vim.Math3d.Int4)
  - Vim.Math3d.Int4.op_GreaterThanOrEqual(Vim.Math3d.Int4,Vim.Math3d.Int4)
  - Vim.Math3d.Int4.op_Implicit(System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32})~Vim.Math3d.Int4
  - Vim.Math3d.Int4.op_Implicit(Vim.Math3d.Int4)~System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32}
  - Vim.Math3d.Int4.op_Inequality(Vim.Math3d.Int4,Vim.Math3d.Int4)
  - Vim.Math3d.Int4.op_LessThan(Vim.Math3d.Int4,Vim.Math3d.Int4)
  - Vim.Math3d.Int4.op_LessThanOrEqual(Vim.Math3d.Int4,Vim.Math3d.Int4)
  - Vim.Math3d.Int4.op_Multiply(System.Int32,Vim.Math3d.Int4)
  - Vim.Math3d.Int4.op_Multiply(Vim.Math3d.Int4,System.Int32)
  - Vim.Math3d.Int4.op_Multiply(Vim.Math3d.Int4,Vim.Math3d.Int4)
  - Vim.Math3d.Int4.op_Subtraction(System.Int32,Vim.Math3d.Int4)
  - Vim.Math3d.Int4.op_Subtraction(Vim.Math3d.Int4,System.Int32)
  - Vim.Math3d.Int4.op_Subtraction(Vim.Math3d.Int4,Vim.Math3d.Int4)
  - Vim.Math3d.Int4.op_UnaryNegation(Vim.Math3d.Int4)
  - Vim.Math3d.Int4.ProductComponents
  - Vim.Math3d.Int4.SetW(System.Int32)
  - Vim.Math3d.Int4.SetX(System.Int32)
  - Vim.Math3d.Int4.SetY(System.Int32)
  - Vim.Math3d.Int4.SetZ(System.Int32)
  - Vim.Math3d.Int4.SumComponents
  - Vim.Math3d.Int4.SumSqrComponents
  - Vim.Math3d.Int4.ToString
  - Vim.Math3d.Int4.UnitW
  - Vim.Math3d.Int4.UnitX
  - Vim.Math3d.Int4.UnitY
  - Vim.Math3d.Int4.UnitZ
  - Vim.Math3d.Int4.W
  - Vim.Math3d.Int4.X
  - Vim.Math3d.Int4.Y
  - Vim.Math3d.Int4.Z
  - Vim.Math3d.Int4.Zero
  langs:
  - csharp
  - vb
  name: Int4
  nameWithType: Int4
  fullName: Vim.Math3d.Int4
  type: Struct
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Int4
    path: ../src/Structs.cs
    startLine: 1529
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataContract]

      public readonly struct Int4 : IEquatable<Int4>, IComparable<Int4>
    content.vb: >-
      <DataContract>

      Public Structure Int4
          Implements IEquatable(Of Int4), IComparable(Of Int4)
  implements:
  - System.IEquatable{Vim.Math3d.Int4}
  - System.IComparable{Vim.Math3d.Int4}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Vim.Math3d.Int4.X
  commentId: F:Vim.Math3d.Int4.X
  id: X
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: X
  nameWithType: Int4.X
  fullName: Vim.Math3d.Int4.X
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: X
    path: ../src/Structs.cs
    startLine: 1536
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataMember]

      public readonly int X
    return:
      type: System.Int32
    content.vb: >-
      <DataMember>

      Public ReadOnly X As Integer
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.Int4.Y
  commentId: F:Vim.Math3d.Int4.Y
  id: Y
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: Y
  nameWithType: Int4.Y
  fullName: Vim.Math3d.Int4.Y
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Y
    path: ../src/Structs.cs
    startLine: 1538
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataMember]

      public readonly int Y
    return:
      type: System.Int32
    content.vb: >-
      <DataMember>

      Public ReadOnly Y As Integer
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.Int4.Z
  commentId: F:Vim.Math3d.Int4.Z
  id: Z
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: Z
  nameWithType: Int4.Z
  fullName: Vim.Math3d.Int4.Z
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Z
    path: ../src/Structs.cs
    startLine: 1540
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataMember]

      public readonly int Z
    return:
      type: System.Int32
    content.vb: >-
      <DataMember>

      Public ReadOnly Z As Integer
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.Int4.W
  commentId: F:Vim.Math3d.Int4.W
  id: W
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: W
  nameWithType: Int4.W
  fullName: Vim.Math3d.Int4.W
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: W
    path: ../src/Structs.cs
    startLine: 1542
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataMember]

      public readonly int W
    return:
      type: System.Int32
    content.vb: >-
      <DataMember>

      Public ReadOnly W As Integer
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.Int4.#ctor(System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32})
  commentId: M:Vim.Math3d.Int4.#ctor(System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32})
  id: '#ctor(System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32})'
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: Int4((Int32 x, Int32 y, Int32 z, Int32 w))
  nameWithType: Int4.Int4((Int32 x, Int32 y, Int32 z, Int32 w))
  fullName: Vim.Math3d.Int4.Int4(System.ValueTuple<System.Int32, System.Int32, System.Int32, System.Int32>)
  type: Constructor
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: .ctor
    path: ../src/Structs.cs
    startLine: 1543
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public Int4((int x, int y, int z, int w) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32}
    content.vb: Public Sub New(tuple As(x As Integer, y As Integer, z As Integer, w As Integer)(Of Integer , Integer, Integer, Integer))
  overload: Vim.Math3d.Int4.#ctor*
  nameWithType.vb: Int4.Int4((x As Int32, y As Int32, z As Int32, w As Int32)(Of Int32, Int32, Int32, Int32))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Vim.Math3d.Int4.Int4(System.ValueTuple(Of System.Int32, System.Int32, System.Int32, System.Int32))
  name.vb: Int4((x As Int32, y As Int32, z As Int32, w As Int32)(Of Int32, Int32, Int32, Int32))
- uid: Vim.Math3d.Int4.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:Vim.Math3d.Int4.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32,System.Int32,System.Int32)'
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: Int4(Int32, Int32, Int32, Int32)
  nameWithType: Int4.Int4(Int32, Int32, Int32, Int32)
  fullName: Vim.Math3d.Int4.Int4(System.Int32, System.Int32, System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: .ctor
    path: ../src/Structs.cs
    startLine: 1544
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public Int4(int x, int y, int z, int w)
    parameters:
    - id: x
      type: System.Int32
    - id: y
      type: System.Int32
    - id: z
      type: System.Int32
    - id: w
      type: System.Int32
    content.vb: Public Sub New(x As Integer, y As Integer, z As Integer, w As Integer)
  overload: Vim.Math3d.Int4.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Int4.Create(System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:Vim.Math3d.Int4.Create(System.Int32,System.Int32,System.Int32,System.Int32)
  id: Create(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: Create(Int32, Int32, Int32, Int32)
  nameWithType: Int4.Create(Int32, Int32, Int32, Int32)
  fullName: Vim.Math3d.Int4.Create(System.Int32, System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Create
    path: ../src/Structs.cs
    startLine: 1545
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Int4 Create(int x, int y, int z, int w)
    parameters:
    - id: x
      type: System.Int32
    - id: y
      type: System.Int32
    - id: z
      type: System.Int32
    - id: w
      type: System.Int32
    return:
      type: Vim.Math3d.Int4
    content.vb: Public Shared Function Create(x As Integer, y As Integer, z As Integer, w As Integer) As Int4
  overload: Vim.Math3d.Int4.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Int4.Create(System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32})
  commentId: M:Vim.Math3d.Int4.Create(System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32})
  id: Create(System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32})
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: Create((Int32 x, Int32 y, Int32 z, Int32 w))
  nameWithType: Int4.Create((Int32 x, Int32 y, Int32 z, Int32 w))
  fullName: Vim.Math3d.Int4.Create(System.ValueTuple<System.Int32, System.Int32, System.Int32, System.Int32>)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Create
    path: ../src/Structs.cs
    startLine: 1546
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Int4 Create((int x, int y, int z, int w) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32}
    return:
      type: Vim.Math3d.Int4
    content.vb: Public Shared Function Create(tuple As(x As Integer, y As Integer, z As Integer, w As Integer)(Of Integer , Integer, Integer, Integer)) As Int4
  overload: Vim.Math3d.Int4.Create*
  nameWithType.vb: Int4.Create((x As Int32, y As Int32, z As Int32, w As Int32)(Of Int32, Int32, Int32, Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.Int4.Create(System.ValueTuple(Of System.Int32, System.Int32, System.Int32, System.Int32))
  name.vb: Create((x As Int32, y As Int32, z As Int32, w As Int32)(Of Int32, Int32, Int32, Int32))
- uid: Vim.Math3d.Int4.Equals(System.Object)
  commentId: M:Vim.Math3d.Int4.Equals(System.Object)
  id: Equals(System.Object)
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Int4.Equals(Object)
  fullName: Vim.Math3d.Int4.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Equals
    path: ../src/Structs.cs
    startLine: 1547
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: Vim.Math3d.Int4.Equals*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.Int4.GetHashCode
  commentId: M:Vim.Math3d.Int4.GetHashCode
  id: GetHashCode
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Int4.GetHashCode()
  fullName: Vim.Math3d.Int4.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: GetHashCode
    path: ../src/Structs.cs
    startLine: 1548
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: Vim.Math3d.Int4.GetHashCode*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.Int4.ToString
  commentId: M:Vim.Math3d.Int4.ToString
  id: ToString
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Int4.ToString()
  fullName: Vim.Math3d.Int4.ToString()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToString
    path: ../src/Structs.cs
    startLine: 1549
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: Vim.Math3d.Int4.ToString*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.Int4.Deconstruct(System.Int32@,System.Int32@,System.Int32@,System.Int32@)
  commentId: M:Vim.Math3d.Int4.Deconstruct(System.Int32@,System.Int32@,System.Int32@,System.Int32@)
  id: Deconstruct(System.Int32@,System.Int32@,System.Int32@,System.Int32@)
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: Deconstruct(out Int32, out Int32, out Int32, out Int32)
  nameWithType: Int4.Deconstruct(out Int32, out Int32, out Int32, out Int32)
  fullName: Vim.Math3d.Int4.Deconstruct(out System.Int32, out System.Int32, out System.Int32, out System.Int32)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Deconstruct
    path: ../src/Structs.cs
    startLine: 1550
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly void Deconstruct(out int x, out int y, out int z, out int w)
    parameters:
    - id: x
      type: System.Int32
    - id: y
      type: System.Int32
    - id: z
      type: System.Int32
    - id: w
      type: System.Int32
    content.vb: Public Sub Deconstruct(ByRef x As Integer, ByRef y As Integer, ByRef z As Integer, ByRef w As Integer)
  overload: Vim.Math3d.Int4.Deconstruct*
  nameWithType.vb: Int4.Deconstruct(ByRef Int32, ByRef Int32, ByRef Int32, ByRef Int32)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  fullName.vb: Vim.Math3d.Int4.Deconstruct(ByRef System.Int32, ByRef System.Int32, ByRef System.Int32, ByRef System.Int32)
  name.vb: Deconstruct(ByRef Int32, ByRef Int32, ByRef Int32, ByRef Int32)
- uid: Vim.Math3d.Int4.Equals(Vim.Math3d.Int4)
  commentId: M:Vim.Math3d.Int4.Equals(Vim.Math3d.Int4)
  id: Equals(Vim.Math3d.Int4)
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: Equals(Int4)
  nameWithType: Int4.Equals(Int4)
  fullName: Vim.Math3d.Int4.Equals(Vim.Math3d.Int4)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Equals
    path: ../src/Structs.cs
    startLine: 1551
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool Equals(Int4 x)
    parameters:
    - id: x
      type: Vim.Math3d.Int4
    return:
      type: System.Boolean
    content.vb: Public Function Equals(x As Int4) As Boolean
  overload: Vim.Math3d.Int4.Equals*
  implements:
  - System.IEquatable{Vim.Math3d.Int4}.Equals(Vim.Math3d.Int4)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Int4.op_Equality(Vim.Math3d.Int4,Vim.Math3d.Int4)
  commentId: M:Vim.Math3d.Int4.op_Equality(Vim.Math3d.Int4,Vim.Math3d.Int4)
  id: op_Equality(Vim.Math3d.Int4,Vim.Math3d.Int4)
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: Equality(Int4, Int4)
  nameWithType: Int4.Equality(Int4, Int4)
  fullName: Vim.Math3d.Int4.Equality(Vim.Math3d.Int4, Vim.Math3d.Int4)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Equality
    path: ../src/Structs.cs
    startLine: 1552
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator ==(Int4 x0, Int4 x1)
    parameters:
    - id: x0
      type: Vim.Math3d.Int4
    - id: x1
      type: Vim.Math3d.Int4
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(x0 As Int4, x1 As Int4) As Boolean
  overload: Vim.Math3d.Int4.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Int4.op_Inequality(Vim.Math3d.Int4,Vim.Math3d.Int4)
  commentId: M:Vim.Math3d.Int4.op_Inequality(Vim.Math3d.Int4,Vim.Math3d.Int4)
  id: op_Inequality(Vim.Math3d.Int4,Vim.Math3d.Int4)
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: Inequality(Int4, Int4)
  nameWithType: Int4.Inequality(Int4, Int4)
  fullName: Vim.Math3d.Int4.Inequality(Vim.Math3d.Int4, Vim.Math3d.Int4)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Inequality
    path: ../src/Structs.cs
    startLine: 1553
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator !=(Int4 x0, Int4 x1)
    parameters:
    - id: x0
      type: Vim.Math3d.Int4
    - id: x1
      type: Vim.Math3d.Int4
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(x0 As Int4, x1 As Int4) As Boolean
  overload: Vim.Math3d.Int4.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Int4.op_Implicit(System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32})~Vim.Math3d.Int4
  commentId: M:Vim.Math3d.Int4.op_Implicit(System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32})~Vim.Math3d.Int4
  id: op_Implicit(System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32})~Vim.Math3d.Int4
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: Implicit((Int32 x, Int32 y, Int32 z, Int32 w) to Int4)
  nameWithType: Int4.Implicit((Int32 x, Int32 y, Int32 z, Int32 w) to Int4)
  fullName: Vim.Math3d.Int4.Implicit(System.ValueTuple<System.Int32, System.Int32, System.Int32, System.Int32> to Vim.Math3d.Int4)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Implicit
    path: ../src/Structs.cs
    startLine: 1554
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static implicit operator Int4((int x, int y, int z, int w) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32}
    return:
      type: Vim.Math3d.Int4
    content.vb: Public Shared Widening Operator CType(tuple As(x As Integer, y As Integer, z As Integer, w As Integer)(Of Integer , Integer, Integer, Integer)) As Int4
  overload: Vim.Math3d.Int4.op_Implicit*
  nameWithType.vb: Int4.Widening((x As Int32, y As Int32, z As Int32, w As Int32)(Of Int32, Int32, Int32, Int32) to Int4)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.Int4.Widening(System.ValueTuple(Of System.Int32, System.Int32, System.Int32, System.Int32) to Vim.Math3d.Int4)
  name.vb: Widening((x As Int32, y As Int32, z As Int32, w As Int32)(Of Int32, Int32, Int32, Int32) to Int4)
- uid: Vim.Math3d.Int4.op_Implicit(Vim.Math3d.Int4)~System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32}
  commentId: M:Vim.Math3d.Int4.op_Implicit(Vim.Math3d.Int4)~System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32}
  id: op_Implicit(Vim.Math3d.Int4)~System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32}
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: Implicit(Int4 to (Int32 x, Int32 y, Int32 z, Int32 w))
  nameWithType: Int4.Implicit(Int4 to (Int32 x, Int32 y, Int32 z, Int32 w))
  fullName: Vim.Math3d.Int4.Implicit(Vim.Math3d.Int4 to System.ValueTuple<System.Int32, System.Int32, System.Int32, System.Int32>)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Implicit
    path: ../src/Structs.cs
    startLine: 1555
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static implicit operator (int x, int y, int z, int w)(Int4 self)
    parameters:
    - id: self
      type: Vim.Math3d.Int4
    return:
      type: System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32}
    content.vb: Public Shared Widening Operator CType(self As Int4) As(x As Integer, y As Integer, z As Integer, w As Integer)(Of Integer , Integer, Integer, Integer)
  overload: Vim.Math3d.Int4.op_Implicit*
  nameWithType.vb: Int4.Widening(Int4 to (x As Int32, y As Int32, z As Int32, w As Int32)(Of Int32, Int32, Int32, Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.Int4.Widening(Vim.Math3d.Int4 to System.ValueTuple(Of System.Int32, System.Int32, System.Int32, System.Int32))
  name.vb: Widening(Int4 to (x As Int32, y As Int32, z As Int32, w As Int32)(Of Int32, Int32, Int32, Int32))
- uid: Vim.Math3d.Int4.Zero
  commentId: F:Vim.Math3d.Int4.Zero
  id: Zero
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: Zero
  nameWithType: Int4.Zero
  fullName: Vim.Math3d.Int4.Zero
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Zero
    path: ../src/Structs.cs
    startLine: 1557
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Int4 Zero
    return:
      type: Vim.Math3d.Int4
    content.vb: Public Shared Zero As Int4
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Int4.MinValue
  commentId: F:Vim.Math3d.Int4.MinValue
  id: MinValue
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: MinValue
  nameWithType: Int4.MinValue
  fullName: Vim.Math3d.Int4.MinValue
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MinValue
    path: ../src/Structs.cs
    startLine: 1558
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Int4 MinValue
    return:
      type: Vim.Math3d.Int4
    content.vb: Public Shared MinValue As Int4
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Int4.MaxValue
  commentId: F:Vim.Math3d.Int4.MaxValue
  id: MaxValue
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: MaxValue
  nameWithType: Int4.MaxValue
  fullName: Vim.Math3d.Int4.MaxValue
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MaxValue
    path: ../src/Structs.cs
    startLine: 1559
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Int4 MaxValue
    return:
      type: Vim.Math3d.Int4
    content.vb: Public Shared MaxValue As Int4
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Int4.SetX(System.Int32)
  commentId: M:Vim.Math3d.Int4.SetX(System.Int32)
  id: SetX(System.Int32)
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: SetX(Int32)
  nameWithType: Int4.SetX(Int32)
  fullName: Vim.Math3d.Int4.SetX(System.Int32)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SetX
    path: ../src/Structs.cs
    startLine: 1560
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly Int4 SetX(int x)
    parameters:
    - id: x
      type: System.Int32
    return:
      type: Vim.Math3d.Int4
    content.vb: Public Function SetX(x As Integer) As Int4
  overload: Vim.Math3d.Int4.SetX*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Int4.SetY(System.Int32)
  commentId: M:Vim.Math3d.Int4.SetY(System.Int32)
  id: SetY(System.Int32)
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: SetY(Int32)
  nameWithType: Int4.SetY(Int32)
  fullName: Vim.Math3d.Int4.SetY(System.Int32)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SetY
    path: ../src/Structs.cs
    startLine: 1561
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly Int4 SetY(int x)
    parameters:
    - id: x
      type: System.Int32
    return:
      type: Vim.Math3d.Int4
    content.vb: Public Function SetY(x As Integer) As Int4
  overload: Vim.Math3d.Int4.SetY*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Int4.SetZ(System.Int32)
  commentId: M:Vim.Math3d.Int4.SetZ(System.Int32)
  id: SetZ(System.Int32)
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: SetZ(Int32)
  nameWithType: Int4.SetZ(Int32)
  fullName: Vim.Math3d.Int4.SetZ(System.Int32)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SetZ
    path: ../src/Structs.cs
    startLine: 1562
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly Int4 SetZ(int x)
    parameters:
    - id: x
      type: System.Int32
    return:
      type: Vim.Math3d.Int4
    content.vb: Public Function SetZ(x As Integer) As Int4
  overload: Vim.Math3d.Int4.SetZ*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Int4.SetW(System.Int32)
  commentId: M:Vim.Math3d.Int4.SetW(System.Int32)
  id: SetW(System.Int32)
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: SetW(Int32)
  nameWithType: Int4.SetW(Int32)
  fullName: Vim.Math3d.Int4.SetW(System.Int32)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SetW
    path: ../src/Structs.cs
    startLine: 1563
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly Int4 SetW(int x)
    parameters:
    - id: x
      type: System.Int32
    return:
      type: Vim.Math3d.Int4
    content.vb: Public Function SetW(x As Integer) As Int4
  overload: Vim.Math3d.Int4.SetW*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Int4.op_Addition(Vim.Math3d.Int4,Vim.Math3d.Int4)
  commentId: M:Vim.Math3d.Int4.op_Addition(Vim.Math3d.Int4,Vim.Math3d.Int4)
  id: op_Addition(Vim.Math3d.Int4,Vim.Math3d.Int4)
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: Addition(Int4, Int4)
  nameWithType: Int4.Addition(Int4, Int4)
  fullName: Vim.Math3d.Int4.Addition(Vim.Math3d.Int4, Vim.Math3d.Int4)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Addition
    path: ../src/Structs.cs
    startLine: 1564
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Int4 operator +(Int4 value1, Int4 value2)
    parameters:
    - id: value1
      type: Vim.Math3d.Int4
    - id: value2
      type: Vim.Math3d.Int4
    return:
      type: Vim.Math3d.Int4
    content.vb: Public Shared Operator +(value1 As Int4, value2 As Int4) As Int4
  overload: Vim.Math3d.Int4.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Int4.op_Addition(Vim.Math3d.Int4,System.Int32)
  commentId: M:Vim.Math3d.Int4.op_Addition(Vim.Math3d.Int4,System.Int32)
  id: op_Addition(Vim.Math3d.Int4,System.Int32)
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: Addition(Int4, Int32)
  nameWithType: Int4.Addition(Int4, Int32)
  fullName: Vim.Math3d.Int4.Addition(Vim.Math3d.Int4, System.Int32)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Addition
    path: ../src/Structs.cs
    startLine: 1565
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Int4 operator +(Int4 value1, int value2)
    parameters:
    - id: value1
      type: Vim.Math3d.Int4
    - id: value2
      type: System.Int32
    return:
      type: Vim.Math3d.Int4
    content.vb: Public Shared Operator +(value1 As Int4, value2 As Integer) As Int4
  overload: Vim.Math3d.Int4.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Int4.op_Addition(System.Int32,Vim.Math3d.Int4)
  commentId: M:Vim.Math3d.Int4.op_Addition(System.Int32,Vim.Math3d.Int4)
  id: op_Addition(System.Int32,Vim.Math3d.Int4)
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: Addition(Int32, Int4)
  nameWithType: Int4.Addition(Int32, Int4)
  fullName: Vim.Math3d.Int4.Addition(System.Int32, Vim.Math3d.Int4)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Addition
    path: ../src/Structs.cs
    startLine: 1566
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Int4 operator +(int value1, Int4 value2)
    parameters:
    - id: value1
      type: System.Int32
    - id: value2
      type: Vim.Math3d.Int4
    return:
      type: Vim.Math3d.Int4
    content.vb: Public Shared Operator +(value1 As Integer, value2 As Int4) As Int4
  overload: Vim.Math3d.Int4.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Int4.op_Subtraction(Vim.Math3d.Int4,Vim.Math3d.Int4)
  commentId: M:Vim.Math3d.Int4.op_Subtraction(Vim.Math3d.Int4,Vim.Math3d.Int4)
  id: op_Subtraction(Vim.Math3d.Int4,Vim.Math3d.Int4)
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: Subtraction(Int4, Int4)
  nameWithType: Int4.Subtraction(Int4, Int4)
  fullName: Vim.Math3d.Int4.Subtraction(Vim.Math3d.Int4, Vim.Math3d.Int4)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Subtraction
    path: ../src/Structs.cs
    startLine: 1567
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Int4 operator -(Int4 value1, Int4 value2)
    parameters:
    - id: value1
      type: Vim.Math3d.Int4
    - id: value2
      type: Vim.Math3d.Int4
    return:
      type: Vim.Math3d.Int4
    content.vb: Public Shared Operator -(value1 As Int4, value2 As Int4) As Int4
  overload: Vim.Math3d.Int4.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Int4.op_Subtraction(Vim.Math3d.Int4,System.Int32)
  commentId: M:Vim.Math3d.Int4.op_Subtraction(Vim.Math3d.Int4,System.Int32)
  id: op_Subtraction(Vim.Math3d.Int4,System.Int32)
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: Subtraction(Int4, Int32)
  nameWithType: Int4.Subtraction(Int4, Int32)
  fullName: Vim.Math3d.Int4.Subtraction(Vim.Math3d.Int4, System.Int32)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Subtraction
    path: ../src/Structs.cs
    startLine: 1568
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Int4 operator -(Int4 value1, int value2)
    parameters:
    - id: value1
      type: Vim.Math3d.Int4
    - id: value2
      type: System.Int32
    return:
      type: Vim.Math3d.Int4
    content.vb: Public Shared Operator -(value1 As Int4, value2 As Integer) As Int4
  overload: Vim.Math3d.Int4.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Int4.op_Subtraction(System.Int32,Vim.Math3d.Int4)
  commentId: M:Vim.Math3d.Int4.op_Subtraction(System.Int32,Vim.Math3d.Int4)
  id: op_Subtraction(System.Int32,Vim.Math3d.Int4)
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: Subtraction(Int32, Int4)
  nameWithType: Int4.Subtraction(Int32, Int4)
  fullName: Vim.Math3d.Int4.Subtraction(System.Int32, Vim.Math3d.Int4)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Subtraction
    path: ../src/Structs.cs
    startLine: 1569
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Int4 operator -(int value1, Int4 value2)
    parameters:
    - id: value1
      type: System.Int32
    - id: value2
      type: Vim.Math3d.Int4
    return:
      type: Vim.Math3d.Int4
    content.vb: Public Shared Operator -(value1 As Integer, value2 As Int4) As Int4
  overload: Vim.Math3d.Int4.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Int4.op_Multiply(Vim.Math3d.Int4,Vim.Math3d.Int4)
  commentId: M:Vim.Math3d.Int4.op_Multiply(Vim.Math3d.Int4,Vim.Math3d.Int4)
  id: op_Multiply(Vim.Math3d.Int4,Vim.Math3d.Int4)
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: Multiply(Int4, Int4)
  nameWithType: Int4.Multiply(Int4, Int4)
  fullName: Vim.Math3d.Int4.Multiply(Vim.Math3d.Int4, Vim.Math3d.Int4)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Multiply
    path: ../src/Structs.cs
    startLine: 1570
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Int4 operator *(Int4 value1, Int4 value2)
    parameters:
    - id: value1
      type: Vim.Math3d.Int4
    - id: value2
      type: Vim.Math3d.Int4
    return:
      type: Vim.Math3d.Int4
    content.vb: Public Shared Operator *(value1 As Int4, value2 As Int4) As Int4
  overload: Vim.Math3d.Int4.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Int4.op_Multiply(Vim.Math3d.Int4,System.Int32)
  commentId: M:Vim.Math3d.Int4.op_Multiply(Vim.Math3d.Int4,System.Int32)
  id: op_Multiply(Vim.Math3d.Int4,System.Int32)
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: Multiply(Int4, Int32)
  nameWithType: Int4.Multiply(Int4, Int32)
  fullName: Vim.Math3d.Int4.Multiply(Vim.Math3d.Int4, System.Int32)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Multiply
    path: ../src/Structs.cs
    startLine: 1571
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Int4 operator *(Int4 value1, int value2)
    parameters:
    - id: value1
      type: Vim.Math3d.Int4
    - id: value2
      type: System.Int32
    return:
      type: Vim.Math3d.Int4
    content.vb: Public Shared Operator *(value1 As Int4, value2 As Integer) As Int4
  overload: Vim.Math3d.Int4.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Int4.op_Multiply(System.Int32,Vim.Math3d.Int4)
  commentId: M:Vim.Math3d.Int4.op_Multiply(System.Int32,Vim.Math3d.Int4)
  id: op_Multiply(System.Int32,Vim.Math3d.Int4)
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: Multiply(Int32, Int4)
  nameWithType: Int4.Multiply(Int32, Int4)
  fullName: Vim.Math3d.Int4.Multiply(System.Int32, Vim.Math3d.Int4)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Multiply
    path: ../src/Structs.cs
    startLine: 1572
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Int4 operator *(int value1, Int4 value2)
    parameters:
    - id: value1
      type: System.Int32
    - id: value2
      type: Vim.Math3d.Int4
    return:
      type: Vim.Math3d.Int4
    content.vb: Public Shared Operator *(value1 As Integer, value2 As Int4) As Int4
  overload: Vim.Math3d.Int4.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Int4.op_Division(Vim.Math3d.Int4,Vim.Math3d.Int4)
  commentId: M:Vim.Math3d.Int4.op_Division(Vim.Math3d.Int4,Vim.Math3d.Int4)
  id: op_Division(Vim.Math3d.Int4,Vim.Math3d.Int4)
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: Division(Int4, Int4)
  nameWithType: Int4.Division(Int4, Int4)
  fullName: Vim.Math3d.Int4.Division(Vim.Math3d.Int4, Vim.Math3d.Int4)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Division
    path: ../src/Structs.cs
    startLine: 1573
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Int4 operator /(Int4 value1, Int4 value2)
    parameters:
    - id: value1
      type: Vim.Math3d.Int4
    - id: value2
      type: Vim.Math3d.Int4
    return:
      type: Vim.Math3d.Int4
    content.vb: Public Shared Operator /(value1 As Int4, value2 As Int4) As Int4
  overload: Vim.Math3d.Int4.op_Division*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Int4.op_Division(Vim.Math3d.Int4,System.Int32)
  commentId: M:Vim.Math3d.Int4.op_Division(Vim.Math3d.Int4,System.Int32)
  id: op_Division(Vim.Math3d.Int4,System.Int32)
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: Division(Int4, Int32)
  nameWithType: Int4.Division(Int4, Int32)
  fullName: Vim.Math3d.Int4.Division(Vim.Math3d.Int4, System.Int32)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Division
    path: ../src/Structs.cs
    startLine: 1574
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Int4 operator /(Int4 value1, int value2)
    parameters:
    - id: value1
      type: Vim.Math3d.Int4
    - id: value2
      type: System.Int32
    return:
      type: Vim.Math3d.Int4
    content.vb: Public Shared Operator /(value1 As Int4, value2 As Integer) As Int4
  overload: Vim.Math3d.Int4.op_Division*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Int4.op_Division(System.Int32,Vim.Math3d.Int4)
  commentId: M:Vim.Math3d.Int4.op_Division(System.Int32,Vim.Math3d.Int4)
  id: op_Division(System.Int32,Vim.Math3d.Int4)
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: Division(Int32, Int4)
  nameWithType: Int4.Division(Int32, Int4)
  fullName: Vim.Math3d.Int4.Division(System.Int32, Vim.Math3d.Int4)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Division
    path: ../src/Structs.cs
    startLine: 1575
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Int4 operator /(int value1, Int4 value2)
    parameters:
    - id: value1
      type: System.Int32
    - id: value2
      type: Vim.Math3d.Int4
    return:
      type: Vim.Math3d.Int4
    content.vb: Public Shared Operator /(value1 As Integer, value2 As Int4) As Int4
  overload: Vim.Math3d.Int4.op_Division*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Int4.One
  commentId: F:Vim.Math3d.Int4.One
  id: One
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: One
  nameWithType: Int4.One
  fullName: Vim.Math3d.Int4.One
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: One
    path: ../src/Structs.cs
    startLine: 1576
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Int4 One
    return:
      type: Vim.Math3d.Int4
    content.vb: Public Shared One As Int4
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Int4.UnitX
  commentId: F:Vim.Math3d.Int4.UnitX
  id: UnitX
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: UnitX
  nameWithType: Int4.UnitX
  fullName: Vim.Math3d.Int4.UnitX
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: UnitX
    path: ../src/Structs.cs
    startLine: 1577
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Int4 UnitX
    return:
      type: Vim.Math3d.Int4
    content.vb: Public Shared UnitX As Int4
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Int4.UnitY
  commentId: F:Vim.Math3d.Int4.UnitY
  id: UnitY
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: UnitY
  nameWithType: Int4.UnitY
  fullName: Vim.Math3d.Int4.UnitY
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: UnitY
    path: ../src/Structs.cs
    startLine: 1578
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Int4 UnitY
    return:
      type: Vim.Math3d.Int4
    content.vb: Public Shared UnitY As Int4
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Int4.UnitZ
  commentId: F:Vim.Math3d.Int4.UnitZ
  id: UnitZ
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: UnitZ
  nameWithType: Int4.UnitZ
  fullName: Vim.Math3d.Int4.UnitZ
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: UnitZ
    path: ../src/Structs.cs
    startLine: 1579
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Int4 UnitZ
    return:
      type: Vim.Math3d.Int4
    content.vb: Public Shared UnitZ As Int4
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Int4.UnitW
  commentId: F:Vim.Math3d.Int4.UnitW
  id: UnitW
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: UnitW
  nameWithType: Int4.UnitW
  fullName: Vim.Math3d.Int4.UnitW
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: UnitW
    path: ../src/Structs.cs
    startLine: 1580
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Int4 UnitW
    return:
      type: Vim.Math3d.Int4
    content.vb: Public Shared UnitW As Int4
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Int4.#ctor(System.Int32)
  commentId: M:Vim.Math3d.Int4.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: Int4(Int32)
  nameWithType: Int4.Int4(Int32)
  fullName: Vim.Math3d.Int4.Int4(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: .ctor
    path: ../src/Structs.cs
    startLine: 1581
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public Int4(int value)
    parameters:
    - id: value
      type: System.Int32
    content.vb: Public Sub New(value As Integer)
  overload: Vim.Math3d.Int4.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Int4.op_UnaryNegation(Vim.Math3d.Int4)
  commentId: M:Vim.Math3d.Int4.op_UnaryNegation(Vim.Math3d.Int4)
  id: op_UnaryNegation(Vim.Math3d.Int4)
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: UnaryNegation(Int4)
  nameWithType: Int4.UnaryNegation(Int4)
  fullName: Vim.Math3d.Int4.UnaryNegation(Vim.Math3d.Int4)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_UnaryNegation
    path: ../src/Structs.cs
    startLine: 1582
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Int4 operator -(Int4 value)
    parameters:
    - id: value
      type: Vim.Math3d.Int4
    return:
      type: Vim.Math3d.Int4
    content.vb: Public Shared Operator -(value As Int4) As Int4
  overload: Vim.Math3d.Int4.op_UnaryNegation*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Int4.Dot(Vim.Math3d.Int4,Vim.Math3d.Int4)
  commentId: M:Vim.Math3d.Int4.Dot(Vim.Math3d.Int4,Vim.Math3d.Int4)
  id: Dot(Vim.Math3d.Int4,Vim.Math3d.Int4)
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: Dot(Int4, Int4)
  nameWithType: Int4.Dot(Int4, Int4)
  fullName: Vim.Math3d.Int4.Dot(Vim.Math3d.Int4, Vim.Math3d.Int4)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Dot
    path: ../src/Structs.cs
    startLine: 1583
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static int Dot(Int4 value1, Int4 value2)
    parameters:
    - id: value1
      type: Vim.Math3d.Int4
    - id: value2
      type: Vim.Math3d.Int4
    return:
      type: System.Int32
    content.vb: Public Shared Function Dot(value1 As Int4, value2 As Int4) As Integer
  overload: Vim.Math3d.Int4.Dot*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Int4.Dot(Vim.Math3d.Int4)
  commentId: M:Vim.Math3d.Int4.Dot(Vim.Math3d.Int4)
  id: Dot(Vim.Math3d.Int4)
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: Dot(Int4)
  nameWithType: Int4.Dot(Int4)
  fullName: Vim.Math3d.Int4.Dot(Vim.Math3d.Int4)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Dot
    path: ../src/Structs.cs
    startLine: 1584
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly int Dot(Int4 value)
    parameters:
    - id: value
      type: Vim.Math3d.Int4
    return:
      type: System.Int32
    content.vb: Public Function Dot(value As Int4) As Integer
  overload: Vim.Math3d.Int4.Dot*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Int4.AlmostZero(System.Single)
  commentId: M:Vim.Math3d.Int4.AlmostZero(System.Single)
  id: AlmostZero(System.Single)
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: AlmostZero(Single)
  nameWithType: Int4.AlmostZero(Single)
  fullName: Vim.Math3d.Int4.AlmostZero(System.Single)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: AlmostZero
    path: ../src/Structs.cs
    startLine: 1585
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool AlmostZero(float tolerance = 1E-07F)
    parameters:
    - id: tolerance
      type: System.Single
    return:
      type: System.Boolean
    content.vb: Public Function AlmostZero(tolerance As Single = 1E-07F) As Boolean
  overload: Vim.Math3d.Int4.AlmostZero*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Int4.AnyComponentNegative
  commentId: M:Vim.Math3d.Int4.AnyComponentNegative
  id: AnyComponentNegative
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: AnyComponentNegative()
  nameWithType: Int4.AnyComponentNegative()
  fullName: Vim.Math3d.Int4.AnyComponentNegative()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: AnyComponentNegative
    path: ../src/Structs.cs
    startLine: 1586
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool AnyComponentNegative()
    return:
      type: System.Boolean
    content.vb: Public Function AnyComponentNegative As Boolean
  overload: Vim.Math3d.Int4.AnyComponentNegative*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Int4.MinComponent
  commentId: M:Vim.Math3d.Int4.MinComponent
  id: MinComponent
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: MinComponent()
  nameWithType: Int4.MinComponent()
  fullName: Vim.Math3d.Int4.MinComponent()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MinComponent
    path: ../src/Structs.cs
    startLine: 1587
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly int MinComponent()
    return:
      type: System.Int32
    content.vb: Public Function MinComponent As Integer
  overload: Vim.Math3d.Int4.MinComponent*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Int4.MaxComponent
  commentId: M:Vim.Math3d.Int4.MaxComponent
  id: MaxComponent
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: MaxComponent()
  nameWithType: Int4.MaxComponent()
  fullName: Vim.Math3d.Int4.MaxComponent()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MaxComponent
    path: ../src/Structs.cs
    startLine: 1588
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly int MaxComponent()
    return:
      type: System.Int32
    content.vb: Public Function MaxComponent As Integer
  overload: Vim.Math3d.Int4.MaxComponent*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Int4.SumComponents
  commentId: M:Vim.Math3d.Int4.SumComponents
  id: SumComponents
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: SumComponents()
  nameWithType: Int4.SumComponents()
  fullName: Vim.Math3d.Int4.SumComponents()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SumComponents
    path: ../src/Structs.cs
    startLine: 1589
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly int SumComponents()
    return:
      type: System.Int32
    content.vb: Public Function SumComponents As Integer
  overload: Vim.Math3d.Int4.SumComponents*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Int4.SumSqrComponents
  commentId: M:Vim.Math3d.Int4.SumSqrComponents
  id: SumSqrComponents
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: SumSqrComponents()
  nameWithType: Int4.SumSqrComponents()
  fullName: Vim.Math3d.Int4.SumSqrComponents()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SumSqrComponents
    path: ../src/Structs.cs
    startLine: 1590
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly int SumSqrComponents()
    return:
      type: System.Int32
    content.vb: Public Function SumSqrComponents As Integer
  overload: Vim.Math3d.Int4.SumSqrComponents*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Int4.ProductComponents
  commentId: M:Vim.Math3d.Int4.ProductComponents
  id: ProductComponents
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: ProductComponents()
  nameWithType: Int4.ProductComponents()
  fullName: Vim.Math3d.Int4.ProductComponents()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ProductComponents
    path: ../src/Structs.cs
    startLine: 1591
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly int ProductComponents()
    return:
      type: System.Int32
    content.vb: Public Function ProductComponents As Integer
  overload: Vim.Math3d.Int4.ProductComponents*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Int4.GetComponent(System.Int32)
  commentId: M:Vim.Math3d.Int4.GetComponent(System.Int32)
  id: GetComponent(System.Int32)
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: GetComponent(Int32)
  nameWithType: Int4.GetComponent(Int32)
  fullName: Vim.Math3d.Int4.GetComponent(System.Int32)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: GetComponent
    path: ../src/Structs.cs
    startLine: 1592
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly int GetComponent(int n)
    parameters:
    - id: n
      type: System.Int32
    return:
      type: System.Int32
    content.vb: Public Function GetComponent(n As Integer) As Integer
  overload: Vim.Math3d.Int4.GetComponent*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Int4.MagnitudeSquared
  commentId: M:Vim.Math3d.Int4.MagnitudeSquared
  id: MagnitudeSquared
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: MagnitudeSquared()
  nameWithType: Int4.MagnitudeSquared()
  fullName: Vim.Math3d.Int4.MagnitudeSquared()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MagnitudeSquared
    path: ../src/Structs.cs
    startLine: 1593
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly double MagnitudeSquared()
    return:
      type: System.Double
    content.vb: Public Function MagnitudeSquared As Double
  overload: Vim.Math3d.Int4.MagnitudeSquared*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Int4.Magnitude
  commentId: M:Vim.Math3d.Int4.Magnitude
  id: Magnitude
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: Magnitude()
  nameWithType: Int4.Magnitude()
  fullName: Vim.Math3d.Int4.Magnitude()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Magnitude
    path: ../src/Structs.cs
    startLine: 1594
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly double Magnitude()
    return:
      type: System.Double
    content.vb: Public Function Magnitude As Double
  overload: Vim.Math3d.Int4.Magnitude*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Int4.NumComponents
  commentId: F:Vim.Math3d.Int4.NumComponents
  id: NumComponents
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: NumComponents
  nameWithType: Int4.NumComponents
  fullName: Vim.Math3d.Int4.NumComponents
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: NumComponents
    path: ../src/Structs.cs
    startLine: 1595
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public const int NumComponents = 4
    return:
      type: System.Int32
    content.vb: Public Const NumComponents As Integer = 4
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Vim.Math3d.Int4.IsNaN
  commentId: M:Vim.Math3d.Int4.IsNaN
  id: IsNaN
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: IsNaN()
  nameWithType: Int4.IsNaN()
  fullName: Vim.Math3d.Int4.IsNaN()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: IsNaN
    path: ../src/Structs.cs
    startLine: 1597
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool IsNaN()
    return:
      type: System.Boolean
    content.vb: Public Function IsNaN As Boolean
  overload: Vim.Math3d.Int4.IsNaN*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Int4.IsInfinity
  commentId: M:Vim.Math3d.Int4.IsInfinity
  id: IsInfinity
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: IsInfinity()
  nameWithType: Int4.IsInfinity()
  fullName: Vim.Math3d.Int4.IsInfinity()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: IsInfinity
    path: ../src/Structs.cs
    startLine: 1598
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool IsInfinity()
    return:
      type: System.Boolean
    content.vb: Public Function IsInfinity As Boolean
  overload: Vim.Math3d.Int4.IsInfinity*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Int4.CompareTo(Vim.Math3d.Int4)
  commentId: M:Vim.Math3d.Int4.CompareTo(Vim.Math3d.Int4)
  id: CompareTo(Vim.Math3d.Int4)
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: CompareTo(Int4)
  nameWithType: Int4.CompareTo(Int4)
  fullName: Vim.Math3d.Int4.CompareTo(Vim.Math3d.Int4)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: CompareTo
    path: ../src/Structs.cs
    startLine: 1599
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly int CompareTo(Int4 x)
    parameters:
    - id: x
      type: Vim.Math3d.Int4
    return:
      type: System.Int32
    content.vb: Public Function CompareTo(x As Int4) As Integer
  overload: Vim.Math3d.Int4.CompareTo*
  implements:
  - System.IComparable{Vim.Math3d.Int4}.CompareTo(Vim.Math3d.Int4)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Int4.op_LessThan(Vim.Math3d.Int4,Vim.Math3d.Int4)
  commentId: M:Vim.Math3d.Int4.op_LessThan(Vim.Math3d.Int4,Vim.Math3d.Int4)
  id: op_LessThan(Vim.Math3d.Int4,Vim.Math3d.Int4)
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: LessThan(Int4, Int4)
  nameWithType: Int4.LessThan(Int4, Int4)
  fullName: Vim.Math3d.Int4.LessThan(Vim.Math3d.Int4, Vim.Math3d.Int4)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_LessThan
    path: ../src/Structs.cs
    startLine: 1600
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator <(Int4 x0, Int4 x1)
    parameters:
    - id: x0
      type: Vim.Math3d.Int4
    - id: x1
      type: Vim.Math3d.Int4
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <(x0 As Int4, x1 As Int4) As Boolean
  overload: Vim.Math3d.Int4.op_LessThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Int4.op_LessThanOrEqual(Vim.Math3d.Int4,Vim.Math3d.Int4)
  commentId: M:Vim.Math3d.Int4.op_LessThanOrEqual(Vim.Math3d.Int4,Vim.Math3d.Int4)
  id: op_LessThanOrEqual(Vim.Math3d.Int4,Vim.Math3d.Int4)
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(Int4, Int4)
  nameWithType: Int4.LessThanOrEqual(Int4, Int4)
  fullName: Vim.Math3d.Int4.LessThanOrEqual(Vim.Math3d.Int4, Vim.Math3d.Int4)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_LessThanOrEqual
    path: ../src/Structs.cs
    startLine: 1601
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator <=(Int4 x0, Int4 x1)
    parameters:
    - id: x0
      type: Vim.Math3d.Int4
    - id: x1
      type: Vim.Math3d.Int4
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <=(x0 As Int4, x1 As Int4) As Boolean
  overload: Vim.Math3d.Int4.op_LessThanOrEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Int4.op_GreaterThan(Vim.Math3d.Int4,Vim.Math3d.Int4)
  commentId: M:Vim.Math3d.Int4.op_GreaterThan(Vim.Math3d.Int4,Vim.Math3d.Int4)
  id: op_GreaterThan(Vim.Math3d.Int4,Vim.Math3d.Int4)
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: GreaterThan(Int4, Int4)
  nameWithType: Int4.GreaterThan(Int4, Int4)
  fullName: Vim.Math3d.Int4.GreaterThan(Vim.Math3d.Int4, Vim.Math3d.Int4)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_GreaterThan
    path: ../src/Structs.cs
    startLine: 1602
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator>(Int4 x0, Int4 x1)
    parameters:
    - id: x0
      type: Vim.Math3d.Int4
    - id: x1
      type: Vim.Math3d.Int4
    return:
      type: System.Boolean
    content.vb: Public Shared Operator>(x0 As Int4, x1 As Int4) As Boolean
  overload: Vim.Math3d.Int4.op_GreaterThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Int4.op_GreaterThanOrEqual(Vim.Math3d.Int4,Vim.Math3d.Int4)
  commentId: M:Vim.Math3d.Int4.op_GreaterThanOrEqual(Vim.Math3d.Int4,Vim.Math3d.Int4)
  id: op_GreaterThanOrEqual(Vim.Math3d.Int4,Vim.Math3d.Int4)
  parent: Vim.Math3d.Int4
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(Int4, Int4)
  nameWithType: Int4.GreaterThanOrEqual(Int4, Int4)
  fullName: Vim.Math3d.Int4.GreaterThanOrEqual(Vim.Math3d.Int4, Vim.Math3d.Int4)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_GreaterThanOrEqual
    path: ../src/Structs.cs
    startLine: 1603
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator >=(Int4 x0, Int4 x1)
    parameters:
    - id: x0
      type: Vim.Math3d.Int4
    - id: x1
      type: Vim.Math3d.Int4
    return:
      type: System.Boolean
    content.vb: Public Shared Operator >=(x0 As Int4, x1 As Int4) As Boolean
  overload: Vim.Math3d.Int4.op_GreaterThanOrEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Vim.Math3d
  commentId: N:Vim.Math3d
  name: Vim.Math3d
  nameWithType: Vim.Math3d
  fullName: Vim.Math3d
- uid: System.IEquatable{Vim.Math3d.Int4}
  commentId: T:System.IEquatable{Vim.Math3d.Int4}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Int4>
  nameWithType: IEquatable<Int4>
  fullName: System.IEquatable<Vim.Math3d.Int4>
  nameWithType.vb: IEquatable(Of Int4)
  fullName.vb: System.IEquatable(Of Vim.Math3d.Int4)
  name.vb: IEquatable(Of Int4)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.Int4
    name: Int4
    nameWithType: Int4
    fullName: Vim.Math3d.Int4
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.Int4
    name: Int4
    nameWithType: Int4
    fullName: Vim.Math3d.Int4
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable{Vim.Math3d.Int4}
  commentId: T:System.IComparable{Vim.Math3d.Int4}
  parent: System
  definition: System.IComparable`1
  name: IComparable<Int4>
  nameWithType: IComparable<Int4>
  fullName: System.IComparable<Vim.Math3d.Int4>
  nameWithType.vb: IComparable(Of Int4)
  fullName.vb: System.IComparable(Of Vim.Math3d.Int4)
  name.vb: IComparable(Of Int4)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.Int4
    name: Int4
    nameWithType: Int4
    fullName: Vim.Math3d.Int4
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.Int4
    name: Int4
    nameWithType: Int4
    fullName: Vim.Math3d.Int4
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Vim.Math3d.Int4.#ctor*
  commentId: Overload:Vim.Math3d.Int4.#ctor
  name: Int4
  nameWithType: Int4.Int4
  fullName: Vim.Math3d.Int4.Int4
- uid: System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32}
  commentId: T:System.ValueTuple{System.Int32,System.Int32,System.Int32,System.Int32}
  parent: System
  definition: System.ValueTuple`4
  name: (T1, T2, T3, T4)<Int32, Int32, Int32, Int32>
  nameWithType: (T1, T2, T3, T4)<Int32, Int32, Int32, Int32>
  fullName: System.ValueTuple<System.Int32, System.Int32, System.Int32, System.Int32>
  nameWithType.vb: (T1, T2, T3, T4)(Of Int32, Int32, Int32, Int32)
  fullName.vb: System.ValueTuple(Of System.Int32, System.Int32, System.Int32, System.Int32)
  name.vb: (T1, T2, T3, T4)(Of Int32, Int32, Int32, Int32)
  spec.csharp:
  - uid: System.ValueTuple`4
    name: (T1, T2, T3, T4)
    nameWithType: (T1, T2, T3, T4)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`4
    name: (T1, T2, T3, T4)
    nameWithType: (T1, T2, T3, T4)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple`4
  commentId: T:System.ValueTuple`4
  isExternal: true
  name: (T1, T2, T3, T4)<T1, T2, T3, T4>
  nameWithType: (T1, T2, T3, T4)<T1, T2, T3, T4>
  fullName: System.ValueTuple<T1, T2, T3, T4>
  nameWithType.vb: (T1, T2, T3, T4)(Of T1, T2, T3, T4)
  fullName.vb: System.ValueTuple(Of T1, T2, T3, T4)
  name.vb: (T1, T2, T3, T4)(Of T1, T2, T3, T4)
  spec.csharp:
  - uid: System.ValueTuple`4
    name: (T1, T2, T3, T4)
    nameWithType: (T1, T2, T3, T4)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`4
    name: (T1, T2, T3, T4)
    nameWithType: (T1, T2, T3, T4)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Int4.Create*
  commentId: Overload:Vim.Math3d.Int4.Create
  name: Create
  nameWithType: Int4.Create
  fullName: Vim.Math3d.Int4.Create
- uid: Vim.Math3d.Int4
  commentId: T:Vim.Math3d.Int4
  parent: Vim.Math3d
  name: Int4
  nameWithType: Int4
  fullName: Vim.Math3d.Int4
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Int4.Equals*
  commentId: Overload:Vim.Math3d.Int4.Equals
  name: Equals
  nameWithType: Int4.Equals
  fullName: Vim.Math3d.Int4.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Int4.GetHashCode*
  commentId: Overload:Vim.Math3d.Int4.GetHashCode
  name: GetHashCode
  nameWithType: Int4.GetHashCode
  fullName: Vim.Math3d.Int4.GetHashCode
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Int4.ToString*
  commentId: Overload:Vim.Math3d.Int4.ToString
  name: ToString
  nameWithType: Int4.ToString
  fullName: Vim.Math3d.Int4.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Vim.Math3d.Int4.Deconstruct*
  commentId: Overload:Vim.Math3d.Int4.Deconstruct
  name: Deconstruct
  nameWithType: Int4.Deconstruct
  fullName: Vim.Math3d.Int4.Deconstruct
- uid: System.IEquatable{Vim.Math3d.Int4}.Equals(Vim.Math3d.Int4)
  commentId: M:System.IEquatable{Vim.Math3d.Int4}.Equals(Vim.Math3d.Int4)
  parent: System.IEquatable{Vim.Math3d.Int4}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(Int4)
  nameWithType: IEquatable<Int4>.Equals(Int4)
  fullName: System.IEquatable<Vim.Math3d.Int4>.Equals(Vim.Math3d.Int4)
  nameWithType.vb: IEquatable(Of Int4).Equals(Int4)
  fullName.vb: System.IEquatable(Of Vim.Math3d.Int4).Equals(Vim.Math3d.Int4)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<Int4>.Equals
    fullName: System.IEquatable<Vim.Math3d.Int4>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Int4
    name: Int4
    nameWithType: Int4
    fullName: Vim.Math3d.Int4
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of Int4).Equals
    fullName: System.IEquatable(Of Vim.Math3d.Int4).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Int4
    name: Int4
    nameWithType: Int4
    fullName: Vim.Math3d.Int4
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Int4.op_Equality*
  commentId: Overload:Vim.Math3d.Int4.op_Equality
  name: Equality
  nameWithType: Int4.Equality
  fullName: Vim.Math3d.Int4.Equality
- uid: Vim.Math3d.Int4.op_Inequality*
  commentId: Overload:Vim.Math3d.Int4.op_Inequality
  name: Inequality
  nameWithType: Int4.Inequality
  fullName: Vim.Math3d.Int4.Inequality
- uid: Vim.Math3d.Int4.op_Implicit*
  commentId: Overload:Vim.Math3d.Int4.op_Implicit
  name: Implicit
  nameWithType: Int4.Implicit
  fullName: Vim.Math3d.Int4.Implicit
  nameWithType.vb: Int4.Widening
  fullName.vb: Vim.Math3d.Int4.Widening
  name.vb: Widening
- uid: Vim.Math3d.Int4.SetX*
  commentId: Overload:Vim.Math3d.Int4.SetX
  name: SetX
  nameWithType: Int4.SetX
  fullName: Vim.Math3d.Int4.SetX
- uid: Vim.Math3d.Int4.SetY*
  commentId: Overload:Vim.Math3d.Int4.SetY
  name: SetY
  nameWithType: Int4.SetY
  fullName: Vim.Math3d.Int4.SetY
- uid: Vim.Math3d.Int4.SetZ*
  commentId: Overload:Vim.Math3d.Int4.SetZ
  name: SetZ
  nameWithType: Int4.SetZ
  fullName: Vim.Math3d.Int4.SetZ
- uid: Vim.Math3d.Int4.SetW*
  commentId: Overload:Vim.Math3d.Int4.SetW
  name: SetW
  nameWithType: Int4.SetW
  fullName: Vim.Math3d.Int4.SetW
- uid: Vim.Math3d.Int4.op_Addition*
  commentId: Overload:Vim.Math3d.Int4.op_Addition
  name: Addition
  nameWithType: Int4.Addition
  fullName: Vim.Math3d.Int4.Addition
- uid: Vim.Math3d.Int4.op_Subtraction*
  commentId: Overload:Vim.Math3d.Int4.op_Subtraction
  name: Subtraction
  nameWithType: Int4.Subtraction
  fullName: Vim.Math3d.Int4.Subtraction
- uid: Vim.Math3d.Int4.op_Multiply*
  commentId: Overload:Vim.Math3d.Int4.op_Multiply
  name: Multiply
  nameWithType: Int4.Multiply
  fullName: Vim.Math3d.Int4.Multiply
- uid: Vim.Math3d.Int4.op_Division*
  commentId: Overload:Vim.Math3d.Int4.op_Division
  name: Division
  nameWithType: Int4.Division
  fullName: Vim.Math3d.Int4.Division
- uid: Vim.Math3d.Int4.op_UnaryNegation*
  commentId: Overload:Vim.Math3d.Int4.op_UnaryNegation
  name: UnaryNegation
  nameWithType: Int4.UnaryNegation
  fullName: Vim.Math3d.Int4.UnaryNegation
- uid: Vim.Math3d.Int4.Dot*
  commentId: Overload:Vim.Math3d.Int4.Dot
  name: Dot
  nameWithType: Int4.Dot
  fullName: Vim.Math3d.Int4.Dot
- uid: Vim.Math3d.Int4.AlmostZero*
  commentId: Overload:Vim.Math3d.Int4.AlmostZero
  name: AlmostZero
  nameWithType: Int4.AlmostZero
  fullName: Vim.Math3d.Int4.AlmostZero
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Vim.Math3d.Int4.AnyComponentNegative*
  commentId: Overload:Vim.Math3d.Int4.AnyComponentNegative
  name: AnyComponentNegative
  nameWithType: Int4.AnyComponentNegative
  fullName: Vim.Math3d.Int4.AnyComponentNegative
- uid: Vim.Math3d.Int4.MinComponent*
  commentId: Overload:Vim.Math3d.Int4.MinComponent
  name: MinComponent
  nameWithType: Int4.MinComponent
  fullName: Vim.Math3d.Int4.MinComponent
- uid: Vim.Math3d.Int4.MaxComponent*
  commentId: Overload:Vim.Math3d.Int4.MaxComponent
  name: MaxComponent
  nameWithType: Int4.MaxComponent
  fullName: Vim.Math3d.Int4.MaxComponent
- uid: Vim.Math3d.Int4.SumComponents*
  commentId: Overload:Vim.Math3d.Int4.SumComponents
  name: SumComponents
  nameWithType: Int4.SumComponents
  fullName: Vim.Math3d.Int4.SumComponents
- uid: Vim.Math3d.Int4.SumSqrComponents*
  commentId: Overload:Vim.Math3d.Int4.SumSqrComponents
  name: SumSqrComponents
  nameWithType: Int4.SumSqrComponents
  fullName: Vim.Math3d.Int4.SumSqrComponents
- uid: Vim.Math3d.Int4.ProductComponents*
  commentId: Overload:Vim.Math3d.Int4.ProductComponents
  name: ProductComponents
  nameWithType: Int4.ProductComponents
  fullName: Vim.Math3d.Int4.ProductComponents
- uid: Vim.Math3d.Int4.GetComponent*
  commentId: Overload:Vim.Math3d.Int4.GetComponent
  name: GetComponent
  nameWithType: Int4.GetComponent
  fullName: Vim.Math3d.Int4.GetComponent
- uid: Vim.Math3d.Int4.MagnitudeSquared*
  commentId: Overload:Vim.Math3d.Int4.MagnitudeSquared
  name: MagnitudeSquared
  nameWithType: Int4.MagnitudeSquared
  fullName: Vim.Math3d.Int4.MagnitudeSquared
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Vim.Math3d.Int4.Magnitude*
  commentId: Overload:Vim.Math3d.Int4.Magnitude
  name: Magnitude
  nameWithType: Int4.Magnitude
  fullName: Vim.Math3d.Int4.Magnitude
- uid: Vim.Math3d.Int4.IsNaN*
  commentId: Overload:Vim.Math3d.Int4.IsNaN
  name: IsNaN
  nameWithType: Int4.IsNaN
  fullName: Vim.Math3d.Int4.IsNaN
- uid: Vim.Math3d.Int4.IsInfinity*
  commentId: Overload:Vim.Math3d.Int4.IsInfinity
  name: IsInfinity
  nameWithType: Int4.IsInfinity
  fullName: Vim.Math3d.Int4.IsInfinity
- uid: Vim.Math3d.Int4.CompareTo*
  commentId: Overload:Vim.Math3d.Int4.CompareTo
  name: CompareTo
  nameWithType: Int4.CompareTo
  fullName: Vim.Math3d.Int4.CompareTo
- uid: System.IComparable{Vim.Math3d.Int4}.CompareTo(Vim.Math3d.Int4)
  commentId: M:System.IComparable{Vim.Math3d.Int4}.CompareTo(Vim.Math3d.Int4)
  parent: System.IComparable{Vim.Math3d.Int4}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(Int4)
  nameWithType: IComparable<Int4>.CompareTo(Int4)
  fullName: System.IComparable<Vim.Math3d.Int4>.CompareTo(Vim.Math3d.Int4)
  nameWithType.vb: IComparable(Of Int4).CompareTo(Int4)
  fullName.vb: System.IComparable(Of Vim.Math3d.Int4).CompareTo(Vim.Math3d.Int4)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<Int4>.CompareTo
    fullName: System.IComparable<Vim.Math3d.Int4>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Int4
    name: Int4
    nameWithType: Int4
    fullName: Vim.Math3d.Int4
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of Int4).CompareTo
    fullName: System.IComparable(Of Vim.Math3d.Int4).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Int4
    name: Int4
    nameWithType: Int4
    fullName: Vim.Math3d.Int4
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable`1.CompareTo(`0)
  commentId: M:System.IComparable`1.CompareTo(`0)
  isExternal: true
  name: CompareTo(T)
  nameWithType: IComparable<T>.CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
  fullName.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<T>.CompareTo
    fullName: System.IComparable<T>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of T).CompareTo
    fullName: System.IComparable(Of T).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Int4.op_LessThan*
  commentId: Overload:Vim.Math3d.Int4.op_LessThan
  name: LessThan
  nameWithType: Int4.LessThan
  fullName: Vim.Math3d.Int4.LessThan
- uid: Vim.Math3d.Int4.op_LessThanOrEqual*
  commentId: Overload:Vim.Math3d.Int4.op_LessThanOrEqual
  name: LessThanOrEqual
  nameWithType: Int4.LessThanOrEqual
  fullName: Vim.Math3d.Int4.LessThanOrEqual
- uid: Vim.Math3d.Int4.op_GreaterThan*
  commentId: Overload:Vim.Math3d.Int4.op_GreaterThan
  name: GreaterThan
  nameWithType: Int4.GreaterThan
  fullName: Vim.Math3d.Int4.GreaterThan
- uid: Vim.Math3d.Int4.op_GreaterThanOrEqual*
  commentId: Overload:Vim.Math3d.Int4.op_GreaterThanOrEqual
  name: GreaterThanOrEqual
  nameWithType: Int4.GreaterThanOrEqual
  fullName: Vim.Math3d.Int4.GreaterThanOrEqual

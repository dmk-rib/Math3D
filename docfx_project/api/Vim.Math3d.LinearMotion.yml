### YamlMime:ManagedReference
items:
- uid: Vim.Math3d.LinearMotion
  commentId: T:Vim.Math3d.LinearMotion
  id: LinearMotion
  parent: Vim.Math3d
  children:
  - Vim.Math3d.LinearMotion.#ctor(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single})
  - Vim.Math3d.LinearMotion.#ctor(Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single)
  - Vim.Math3d.LinearMotion.Acceleration
  - Vim.Math3d.LinearMotion.AlmostEquals(Vim.Math3d.LinearMotion,System.Single)
  - Vim.Math3d.LinearMotion.Create(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single})
  - Vim.Math3d.LinearMotion.Create(Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single)
  - Vim.Math3d.LinearMotion.Deconstruct(Vim.Math3d.Vector3@,Vim.Math3d.Vector3@,System.Single@)
  - Vim.Math3d.LinearMotion.Equals(System.Object)
  - Vim.Math3d.LinearMotion.Equals(Vim.Math3d.LinearMotion)
  - Vim.Math3d.LinearMotion.Friction
  - Vim.Math3d.LinearMotion.GetHashCode
  - Vim.Math3d.LinearMotion.MaxValue
  - Vim.Math3d.LinearMotion.MinValue
  - Vim.Math3d.LinearMotion.op_Equality(Vim.Math3d.LinearMotion,Vim.Math3d.LinearMotion)
  - Vim.Math3d.LinearMotion.op_Implicit(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single})~Vim.Math3d.LinearMotion
  - Vim.Math3d.LinearMotion.op_Implicit(Vim.Math3d.LinearMotion)~System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single}
  - Vim.Math3d.LinearMotion.op_Inequality(Vim.Math3d.LinearMotion,Vim.Math3d.LinearMotion)
  - Vim.Math3d.LinearMotion.SetAcceleration(Vim.Math3d.Vector3)
  - Vim.Math3d.LinearMotion.SetFriction(System.Single)
  - Vim.Math3d.LinearMotion.SetVelocity(Vim.Math3d.Vector3)
  - Vim.Math3d.LinearMotion.ToString
  - Vim.Math3d.LinearMotion.Velocity
  - Vim.Math3d.LinearMotion.Zero
  langs:
  - csharp
  - vb
  name: LinearMotion
  nameWithType: LinearMotion
  fullName: Vim.Math3d.LinearMotion
  type: Struct
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: LinearMotion
    path: ../src/Structs.cs
    startLine: 2171
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataContract]

      public readonly struct LinearMotion : IEquatable<LinearMotion>
    content.vb: >-
      <DataContract>

      Public Structure LinearMotion
          Implements IEquatable(Of LinearMotion)
  implements:
  - System.IEquatable{Vim.Math3d.LinearMotion}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Vim.Math3d.LinearMotion.Velocity
  commentId: F:Vim.Math3d.LinearMotion.Velocity
  id: Velocity
  parent: Vim.Math3d.LinearMotion
  langs:
  - csharp
  - vb
  name: Velocity
  nameWithType: LinearMotion.Velocity
  fullName: Vim.Math3d.LinearMotion.Velocity
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Velocity
    path: ../src/Structs.cs
    startLine: 2177
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataMember]

      public readonly Vector3 Velocity
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <DataMember>

      Public ReadOnly Velocity As Vector3
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.LinearMotion.Acceleration
  commentId: F:Vim.Math3d.LinearMotion.Acceleration
  id: Acceleration
  parent: Vim.Math3d.LinearMotion
  langs:
  - csharp
  - vb
  name: Acceleration
  nameWithType: LinearMotion.Acceleration
  fullName: Vim.Math3d.LinearMotion.Acceleration
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Acceleration
    path: ../src/Structs.cs
    startLine: 2179
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataMember]

      public readonly Vector3 Acceleration
    return:
      type: Vim.Math3d.Vector3
    content.vb: >-
      <DataMember>

      Public ReadOnly Acceleration As Vector3
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.LinearMotion.Friction
  commentId: F:Vim.Math3d.LinearMotion.Friction
  id: Friction
  parent: Vim.Math3d.LinearMotion
  langs:
  - csharp
  - vb
  name: Friction
  nameWithType: LinearMotion.Friction
  fullName: Vim.Math3d.LinearMotion.Friction
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Friction
    path: ../src/Structs.cs
    startLine: 2181
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataMember]

      public readonly float Friction
    return:
      type: System.Single
    content.vb: >-
      <DataMember>

      Public ReadOnly Friction As Single
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.LinearMotion.#ctor(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single})
  commentId: M:Vim.Math3d.LinearMotion.#ctor(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single})
  id: '#ctor(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single})'
  parent: Vim.Math3d.LinearMotion
  langs:
  - csharp
  - vb
  name: LinearMotion((Vector3 velocity, Vector3 acceleration, Single friction))
  nameWithType: LinearMotion.LinearMotion((Vector3 velocity, Vector3 acceleration, Single friction))
  fullName: Vim.Math3d.LinearMotion.LinearMotion(System.ValueTuple<Vim.Math3d.Vector3, Vim.Math3d.Vector3, System.Single>)
  type: Constructor
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: .ctor
    path: ../src/Structs.cs
    startLine: 2182
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public LinearMotion((Vector3 velocity, Vector3 acceleration, float friction) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single}
    content.vb: Public Sub New(tuple As(velocity As Vector3, acceleration As Vector3, friction As Single)(Of Vector3 , Vector3, Single))
  overload: Vim.Math3d.LinearMotion.#ctor*
  nameWithType.vb: LinearMotion.LinearMotion((velocity As Vector3, acceleration As Vector3, friction As Single)(Of Vector3, Vector3, Single))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Vim.Math3d.LinearMotion.LinearMotion(System.ValueTuple(Of Vim.Math3d.Vector3, Vim.Math3d.Vector3, System.Single))
  name.vb: LinearMotion((velocity As Vector3, acceleration As Vector3, friction As Single)(Of Vector3, Vector3, Single))
- uid: Vim.Math3d.LinearMotion.#ctor(Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single)
  commentId: M:Vim.Math3d.LinearMotion.#ctor(Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single)
  id: '#ctor(Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single)'
  parent: Vim.Math3d.LinearMotion
  langs:
  - csharp
  - vb
  name: LinearMotion(Vector3, Vector3, Single)
  nameWithType: LinearMotion.LinearMotion(Vector3, Vector3, Single)
  fullName: Vim.Math3d.LinearMotion.LinearMotion(Vim.Math3d.Vector3, Vim.Math3d.Vector3, System.Single)
  type: Constructor
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: .ctor
    path: ../src/Structs.cs
    startLine: 2183
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public LinearMotion(Vector3 velocity, Vector3 acceleration, float friction)
    parameters:
    - id: velocity
      type: Vim.Math3d.Vector3
    - id: acceleration
      type: Vim.Math3d.Vector3
    - id: friction
      type: System.Single
    content.vb: Public Sub New(velocity As Vector3, acceleration As Vector3, friction As Single)
  overload: Vim.Math3d.LinearMotion.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Vim.Math3d.LinearMotion.Create(Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single)
  commentId: M:Vim.Math3d.LinearMotion.Create(Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single)
  id: Create(Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single)
  parent: Vim.Math3d.LinearMotion
  langs:
  - csharp
  - vb
  name: Create(Vector3, Vector3, Single)
  nameWithType: LinearMotion.Create(Vector3, Vector3, Single)
  fullName: Vim.Math3d.LinearMotion.Create(Vim.Math3d.Vector3, Vim.Math3d.Vector3, System.Single)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Create
    path: ../src/Structs.cs
    startLine: 2184
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static LinearMotion Create(Vector3 velocity, Vector3 acceleration, float friction)
    parameters:
    - id: velocity
      type: Vim.Math3d.Vector3
    - id: acceleration
      type: Vim.Math3d.Vector3
    - id: friction
      type: System.Single
    return:
      type: Vim.Math3d.LinearMotion
    content.vb: Public Shared Function Create(velocity As Vector3, acceleration As Vector3, friction As Single) As LinearMotion
  overload: Vim.Math3d.LinearMotion.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.LinearMotion.Create(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single})
  commentId: M:Vim.Math3d.LinearMotion.Create(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single})
  id: Create(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single})
  parent: Vim.Math3d.LinearMotion
  langs:
  - csharp
  - vb
  name: Create((Vector3 velocity, Vector3 acceleration, Single friction))
  nameWithType: LinearMotion.Create((Vector3 velocity, Vector3 acceleration, Single friction))
  fullName: Vim.Math3d.LinearMotion.Create(System.ValueTuple<Vim.Math3d.Vector3, Vim.Math3d.Vector3, System.Single>)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Create
    path: ../src/Structs.cs
    startLine: 2185
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static LinearMotion Create((Vector3 velocity, Vector3 acceleration, float friction) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single}
    return:
      type: Vim.Math3d.LinearMotion
    content.vb: Public Shared Function Create(tuple As(velocity As Vector3, acceleration As Vector3, friction As Single)(Of Vector3 , Vector3, Single)) As LinearMotion
  overload: Vim.Math3d.LinearMotion.Create*
  nameWithType.vb: LinearMotion.Create((velocity As Vector3, acceleration As Vector3, friction As Single)(Of Vector3, Vector3, Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.LinearMotion.Create(System.ValueTuple(Of Vim.Math3d.Vector3, Vim.Math3d.Vector3, System.Single))
  name.vb: Create((velocity As Vector3, acceleration As Vector3, friction As Single)(Of Vector3, Vector3, Single))
- uid: Vim.Math3d.LinearMotion.Equals(System.Object)
  commentId: M:Vim.Math3d.LinearMotion.Equals(System.Object)
  id: Equals(System.Object)
  parent: Vim.Math3d.LinearMotion
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: LinearMotion.Equals(Object)
  fullName: Vim.Math3d.LinearMotion.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Equals
    path: ../src/Structs.cs
    startLine: 2186
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: Vim.Math3d.LinearMotion.Equals*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.LinearMotion.GetHashCode
  commentId: M:Vim.Math3d.LinearMotion.GetHashCode
  id: GetHashCode
  parent: Vim.Math3d.LinearMotion
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: LinearMotion.GetHashCode()
  fullName: Vim.Math3d.LinearMotion.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: GetHashCode
    path: ../src/Structs.cs
    startLine: 2187
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: Vim.Math3d.LinearMotion.GetHashCode*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.LinearMotion.ToString
  commentId: M:Vim.Math3d.LinearMotion.ToString
  id: ToString
  parent: Vim.Math3d.LinearMotion
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: LinearMotion.ToString()
  fullName: Vim.Math3d.LinearMotion.ToString()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToString
    path: ../src/Structs.cs
    startLine: 2188
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: Vim.Math3d.LinearMotion.ToString*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.LinearMotion.Deconstruct(Vim.Math3d.Vector3@,Vim.Math3d.Vector3@,System.Single@)
  commentId: M:Vim.Math3d.LinearMotion.Deconstruct(Vim.Math3d.Vector3@,Vim.Math3d.Vector3@,System.Single@)
  id: Deconstruct(Vim.Math3d.Vector3@,Vim.Math3d.Vector3@,System.Single@)
  parent: Vim.Math3d.LinearMotion
  langs:
  - csharp
  - vb
  name: Deconstruct(out Vector3, out Vector3, out Single)
  nameWithType: LinearMotion.Deconstruct(out Vector3, out Vector3, out Single)
  fullName: Vim.Math3d.LinearMotion.Deconstruct(out Vim.Math3d.Vector3, out Vim.Math3d.Vector3, out System.Single)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Deconstruct
    path: ../src/Structs.cs
    startLine: 2189
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly void Deconstruct(out Vector3 velocity, out Vector3 acceleration, out float friction)
    parameters:
    - id: velocity
      type: Vim.Math3d.Vector3
    - id: acceleration
      type: Vim.Math3d.Vector3
    - id: friction
      type: System.Single
    content.vb: Public Sub Deconstruct(ByRef velocity As Vector3, ByRef acceleration As Vector3, ByRef friction As Single)
  overload: Vim.Math3d.LinearMotion.Deconstruct*
  nameWithType.vb: LinearMotion.Deconstruct(ByRef Vector3, ByRef Vector3, ByRef Single)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  fullName.vb: Vim.Math3d.LinearMotion.Deconstruct(ByRef Vim.Math3d.Vector3, ByRef Vim.Math3d.Vector3, ByRef System.Single)
  name.vb: Deconstruct(ByRef Vector3, ByRef Vector3, ByRef Single)
- uid: Vim.Math3d.LinearMotion.Equals(Vim.Math3d.LinearMotion)
  commentId: M:Vim.Math3d.LinearMotion.Equals(Vim.Math3d.LinearMotion)
  id: Equals(Vim.Math3d.LinearMotion)
  parent: Vim.Math3d.LinearMotion
  langs:
  - csharp
  - vb
  name: Equals(LinearMotion)
  nameWithType: LinearMotion.Equals(LinearMotion)
  fullName: Vim.Math3d.LinearMotion.Equals(Vim.Math3d.LinearMotion)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Equals
    path: ../src/Structs.cs
    startLine: 2190
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool Equals(LinearMotion x)
    parameters:
    - id: x
      type: Vim.Math3d.LinearMotion
    return:
      type: System.Boolean
    content.vb: Public Function Equals(x As LinearMotion) As Boolean
  overload: Vim.Math3d.LinearMotion.Equals*
  implements:
  - System.IEquatable{Vim.Math3d.LinearMotion}.Equals(Vim.Math3d.LinearMotion)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.LinearMotion.op_Equality(Vim.Math3d.LinearMotion,Vim.Math3d.LinearMotion)
  commentId: M:Vim.Math3d.LinearMotion.op_Equality(Vim.Math3d.LinearMotion,Vim.Math3d.LinearMotion)
  id: op_Equality(Vim.Math3d.LinearMotion,Vim.Math3d.LinearMotion)
  parent: Vim.Math3d.LinearMotion
  langs:
  - csharp
  - vb
  name: Equality(LinearMotion, LinearMotion)
  nameWithType: LinearMotion.Equality(LinearMotion, LinearMotion)
  fullName: Vim.Math3d.LinearMotion.Equality(Vim.Math3d.LinearMotion, Vim.Math3d.LinearMotion)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Equality
    path: ../src/Structs.cs
    startLine: 2191
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator ==(LinearMotion x0, LinearMotion x1)
    parameters:
    - id: x0
      type: Vim.Math3d.LinearMotion
    - id: x1
      type: Vim.Math3d.LinearMotion
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(x0 As LinearMotion, x1 As LinearMotion) As Boolean
  overload: Vim.Math3d.LinearMotion.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.LinearMotion.op_Inequality(Vim.Math3d.LinearMotion,Vim.Math3d.LinearMotion)
  commentId: M:Vim.Math3d.LinearMotion.op_Inequality(Vim.Math3d.LinearMotion,Vim.Math3d.LinearMotion)
  id: op_Inequality(Vim.Math3d.LinearMotion,Vim.Math3d.LinearMotion)
  parent: Vim.Math3d.LinearMotion
  langs:
  - csharp
  - vb
  name: Inequality(LinearMotion, LinearMotion)
  nameWithType: LinearMotion.Inequality(LinearMotion, LinearMotion)
  fullName: Vim.Math3d.LinearMotion.Inequality(Vim.Math3d.LinearMotion, Vim.Math3d.LinearMotion)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Inequality
    path: ../src/Structs.cs
    startLine: 2192
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator !=(LinearMotion x0, LinearMotion x1)
    parameters:
    - id: x0
      type: Vim.Math3d.LinearMotion
    - id: x1
      type: Vim.Math3d.LinearMotion
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(x0 As LinearMotion, x1 As LinearMotion) As Boolean
  overload: Vim.Math3d.LinearMotion.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.LinearMotion.op_Implicit(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single})~Vim.Math3d.LinearMotion
  commentId: M:Vim.Math3d.LinearMotion.op_Implicit(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single})~Vim.Math3d.LinearMotion
  id: op_Implicit(System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single})~Vim.Math3d.LinearMotion
  parent: Vim.Math3d.LinearMotion
  langs:
  - csharp
  - vb
  name: Implicit((Vector3 velocity, Vector3 acceleration, Single friction) to LinearMotion)
  nameWithType: LinearMotion.Implicit((Vector3 velocity, Vector3 acceleration, Single friction) to LinearMotion)
  fullName: Vim.Math3d.LinearMotion.Implicit(System.ValueTuple<Vim.Math3d.Vector3, Vim.Math3d.Vector3, System.Single> to Vim.Math3d.LinearMotion)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Implicit
    path: ../src/Structs.cs
    startLine: 2193
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static implicit operator LinearMotion((Vector3 velocity, Vector3 acceleration, float friction) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single}
    return:
      type: Vim.Math3d.LinearMotion
    content.vb: Public Shared Widening Operator CType(tuple As(velocity As Vector3, acceleration As Vector3, friction As Single)(Of Vector3 , Vector3, Single)) As LinearMotion
  overload: Vim.Math3d.LinearMotion.op_Implicit*
  nameWithType.vb: LinearMotion.Widening((velocity As Vector3, acceleration As Vector3, friction As Single)(Of Vector3, Vector3, Single) to LinearMotion)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.LinearMotion.Widening(System.ValueTuple(Of Vim.Math3d.Vector3, Vim.Math3d.Vector3, System.Single) to Vim.Math3d.LinearMotion)
  name.vb: Widening((velocity As Vector3, acceleration As Vector3, friction As Single)(Of Vector3, Vector3, Single) to LinearMotion)
- uid: Vim.Math3d.LinearMotion.op_Implicit(Vim.Math3d.LinearMotion)~System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single}
  commentId: M:Vim.Math3d.LinearMotion.op_Implicit(Vim.Math3d.LinearMotion)~System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single}
  id: op_Implicit(Vim.Math3d.LinearMotion)~System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single}
  parent: Vim.Math3d.LinearMotion
  langs:
  - csharp
  - vb
  name: Implicit(LinearMotion to (Vector3 velocity, Vector3 acceleration, Single friction))
  nameWithType: LinearMotion.Implicit(LinearMotion to (Vector3 velocity, Vector3 acceleration, Single friction))
  fullName: Vim.Math3d.LinearMotion.Implicit(Vim.Math3d.LinearMotion to System.ValueTuple<Vim.Math3d.Vector3, Vim.Math3d.Vector3, System.Single>)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Implicit
    path: ../src/Structs.cs
    startLine: 2194
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static implicit operator (Vector3 velocity, Vector3 acceleration, float friction)(LinearMotion self)
    parameters:
    - id: self
      type: Vim.Math3d.LinearMotion
    return:
      type: System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single}
    content.vb: Public Shared Widening Operator CType(self As LinearMotion) As(velocity As Vector3, acceleration As Vector3, friction As Single)(Of Vector3 , Vector3, Single)
  overload: Vim.Math3d.LinearMotion.op_Implicit*
  nameWithType.vb: LinearMotion.Widening(LinearMotion to (velocity As Vector3, acceleration As Vector3, friction As Single)(Of Vector3, Vector3, Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.LinearMotion.Widening(Vim.Math3d.LinearMotion to System.ValueTuple(Of Vim.Math3d.Vector3, Vim.Math3d.Vector3, System.Single))
  name.vb: Widening(LinearMotion to (velocity As Vector3, acceleration As Vector3, friction As Single)(Of Vector3, Vector3, Single))
- uid: Vim.Math3d.LinearMotion.AlmostEquals(Vim.Math3d.LinearMotion,System.Single)
  commentId: M:Vim.Math3d.LinearMotion.AlmostEquals(Vim.Math3d.LinearMotion,System.Single)
  id: AlmostEquals(Vim.Math3d.LinearMotion,System.Single)
  parent: Vim.Math3d.LinearMotion
  langs:
  - csharp
  - vb
  name: AlmostEquals(LinearMotion, Single)
  nameWithType: LinearMotion.AlmostEquals(LinearMotion, Single)
  fullName: Vim.Math3d.LinearMotion.AlmostEquals(Vim.Math3d.LinearMotion, System.Single)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: AlmostEquals
    path: ../src/Structs.cs
    startLine: 2196
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool AlmostEquals(LinearMotion x, float tolerance = 1E-07F)
    parameters:
    - id: x
      type: Vim.Math3d.LinearMotion
    - id: tolerance
      type: System.Single
    return:
      type: System.Boolean
    content.vb: Public Function AlmostEquals(x As LinearMotion, tolerance As Single = 1E-07F) As Boolean
  overload: Vim.Math3d.LinearMotion.AlmostEquals*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.LinearMotion.Zero
  commentId: F:Vim.Math3d.LinearMotion.Zero
  id: Zero
  parent: Vim.Math3d.LinearMotion
  langs:
  - csharp
  - vb
  name: Zero
  nameWithType: LinearMotion.Zero
  fullName: Vim.Math3d.LinearMotion.Zero
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Zero
    path: ../src/Structs.cs
    startLine: 2197
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static LinearMotion Zero
    return:
      type: Vim.Math3d.LinearMotion
    content.vb: Public Shared Zero As LinearMotion
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.LinearMotion.MinValue
  commentId: F:Vim.Math3d.LinearMotion.MinValue
  id: MinValue
  parent: Vim.Math3d.LinearMotion
  langs:
  - csharp
  - vb
  name: MinValue
  nameWithType: LinearMotion.MinValue
  fullName: Vim.Math3d.LinearMotion.MinValue
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MinValue
    path: ../src/Structs.cs
    startLine: 2198
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static LinearMotion MinValue
    return:
      type: Vim.Math3d.LinearMotion
    content.vb: Public Shared MinValue As LinearMotion
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.LinearMotion.MaxValue
  commentId: F:Vim.Math3d.LinearMotion.MaxValue
  id: MaxValue
  parent: Vim.Math3d.LinearMotion
  langs:
  - csharp
  - vb
  name: MaxValue
  nameWithType: LinearMotion.MaxValue
  fullName: Vim.Math3d.LinearMotion.MaxValue
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MaxValue
    path: ../src/Structs.cs
    startLine: 2199
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static LinearMotion MaxValue
    return:
      type: Vim.Math3d.LinearMotion
    content.vb: Public Shared MaxValue As LinearMotion
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.LinearMotion.SetVelocity(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.LinearMotion.SetVelocity(Vim.Math3d.Vector3)
  id: SetVelocity(Vim.Math3d.Vector3)
  parent: Vim.Math3d.LinearMotion
  langs:
  - csharp
  - vb
  name: SetVelocity(Vector3)
  nameWithType: LinearMotion.SetVelocity(Vector3)
  fullName: Vim.Math3d.LinearMotion.SetVelocity(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SetVelocity
    path: ../src/Structs.cs
    startLine: 2200
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly LinearMotion SetVelocity(Vector3 x)
    parameters:
    - id: x
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.LinearMotion
    content.vb: Public Function SetVelocity(x As Vector3) As LinearMotion
  overload: Vim.Math3d.LinearMotion.SetVelocity*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.LinearMotion.SetAcceleration(Vim.Math3d.Vector3)
  commentId: M:Vim.Math3d.LinearMotion.SetAcceleration(Vim.Math3d.Vector3)
  id: SetAcceleration(Vim.Math3d.Vector3)
  parent: Vim.Math3d.LinearMotion
  langs:
  - csharp
  - vb
  name: SetAcceleration(Vector3)
  nameWithType: LinearMotion.SetAcceleration(Vector3)
  fullName: Vim.Math3d.LinearMotion.SetAcceleration(Vim.Math3d.Vector3)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SetAcceleration
    path: ../src/Structs.cs
    startLine: 2201
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly LinearMotion SetAcceleration(Vector3 x)
    parameters:
    - id: x
      type: Vim.Math3d.Vector3
    return:
      type: Vim.Math3d.LinearMotion
    content.vb: Public Function SetAcceleration(x As Vector3) As LinearMotion
  overload: Vim.Math3d.LinearMotion.SetAcceleration*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.LinearMotion.SetFriction(System.Single)
  commentId: M:Vim.Math3d.LinearMotion.SetFriction(System.Single)
  id: SetFriction(System.Single)
  parent: Vim.Math3d.LinearMotion
  langs:
  - csharp
  - vb
  name: SetFriction(Single)
  nameWithType: LinearMotion.SetFriction(Single)
  fullName: Vim.Math3d.LinearMotion.SetFriction(System.Single)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SetFriction
    path: ../src/Structs.cs
    startLine: 2202
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly LinearMotion SetFriction(float x)
    parameters:
    - id: x
      type: System.Single
    return:
      type: Vim.Math3d.LinearMotion
    content.vb: Public Function SetFriction(x As Single) As LinearMotion
  overload: Vim.Math3d.LinearMotion.SetFriction*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
references:
- uid: Vim.Math3d
  commentId: N:Vim.Math3d
  name: Vim.Math3d
  nameWithType: Vim.Math3d
  fullName: Vim.Math3d
- uid: System.IEquatable{Vim.Math3d.LinearMotion}
  commentId: T:System.IEquatable{Vim.Math3d.LinearMotion}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<LinearMotion>
  nameWithType: IEquatable<LinearMotion>
  fullName: System.IEquatable<Vim.Math3d.LinearMotion>
  nameWithType.vb: IEquatable(Of LinearMotion)
  fullName.vb: System.IEquatable(Of Vim.Math3d.LinearMotion)
  name.vb: IEquatable(Of LinearMotion)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.LinearMotion
    name: LinearMotion
    nameWithType: LinearMotion
    fullName: Vim.Math3d.LinearMotion
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.LinearMotion
    name: LinearMotion
    nameWithType: LinearMotion
    fullName: Vim.Math3d.LinearMotion
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Vim.Math3d.Vector3
  commentId: T:Vim.Math3d.Vector3
  parent: Vim.Math3d
  name: Vector3
  nameWithType: Vector3
  fullName: Vim.Math3d.Vector3
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Vim.Math3d.LinearMotion.#ctor*
  commentId: Overload:Vim.Math3d.LinearMotion.#ctor
  name: LinearMotion
  nameWithType: LinearMotion.LinearMotion
  fullName: Vim.Math3d.LinearMotion.LinearMotion
- uid: System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single}
  commentId: T:System.ValueTuple{Vim.Math3d.Vector3,Vim.Math3d.Vector3,System.Single}
  parent: System
  definition: System.ValueTuple`3
  name: (T1, T2, T3)<Vector3, Vector3, Single>
  nameWithType: (T1, T2, T3)<Vector3, Vector3, Single>
  fullName: System.ValueTuple<Vim.Math3d.Vector3, Vim.Math3d.Vector3, System.Single>
  nameWithType.vb: (T1, T2, T3)(Of Vector3, Vector3, Single)
  fullName.vb: System.ValueTuple(Of Vim.Math3d.Vector3, Vim.Math3d.Vector3, System.Single)
  name.vb: (T1, T2, T3)(Of Vector3, Vector3, Single)
  spec.csharp:
  - uid: System.ValueTuple`3
    name: (T1, T2, T3)
    nameWithType: (T1, T2, T3)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`3
    name: (T1, T2, T3)
    nameWithType: (T1, T2, T3)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Vim.Math3d.Vector3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple`3
  commentId: T:System.ValueTuple`3
  isExternal: true
  name: (T1, T2, T3)<T1, T2, T3>
  nameWithType: (T1, T2, T3)<T1, T2, T3>
  fullName: System.ValueTuple<T1, T2, T3>
  nameWithType.vb: (T1, T2, T3)(Of T1, T2, T3)
  fullName.vb: System.ValueTuple(Of T1, T2, T3)
  name.vb: (T1, T2, T3)(Of T1, T2, T3)
  spec.csharp:
  - uid: System.ValueTuple`3
    name: (T1, T2, T3)
    nameWithType: (T1, T2, T3)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`3
    name: (T1, T2, T3)
    nameWithType: (T1, T2, T3)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.LinearMotion.Create*
  commentId: Overload:Vim.Math3d.LinearMotion.Create
  name: Create
  nameWithType: LinearMotion.Create
  fullName: Vim.Math3d.LinearMotion.Create
- uid: Vim.Math3d.LinearMotion
  commentId: T:Vim.Math3d.LinearMotion
  parent: Vim.Math3d
  name: LinearMotion
  nameWithType: LinearMotion
  fullName: Vim.Math3d.LinearMotion
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.LinearMotion.Equals*
  commentId: Overload:Vim.Math3d.LinearMotion.Equals
  name: Equals
  nameWithType: LinearMotion.Equals
  fullName: Vim.Math3d.LinearMotion.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.LinearMotion.GetHashCode*
  commentId: Overload:Vim.Math3d.LinearMotion.GetHashCode
  name: GetHashCode
  nameWithType: LinearMotion.GetHashCode
  fullName: Vim.Math3d.LinearMotion.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.LinearMotion.ToString*
  commentId: Overload:Vim.Math3d.LinearMotion.ToString
  name: ToString
  nameWithType: LinearMotion.ToString
  fullName: Vim.Math3d.LinearMotion.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Vim.Math3d.LinearMotion.Deconstruct*
  commentId: Overload:Vim.Math3d.LinearMotion.Deconstruct
  name: Deconstruct
  nameWithType: LinearMotion.Deconstruct
  fullName: Vim.Math3d.LinearMotion.Deconstruct
- uid: System.IEquatable{Vim.Math3d.LinearMotion}.Equals(Vim.Math3d.LinearMotion)
  commentId: M:System.IEquatable{Vim.Math3d.LinearMotion}.Equals(Vim.Math3d.LinearMotion)
  parent: System.IEquatable{Vim.Math3d.LinearMotion}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(LinearMotion)
  nameWithType: IEquatable<LinearMotion>.Equals(LinearMotion)
  fullName: System.IEquatable<Vim.Math3d.LinearMotion>.Equals(Vim.Math3d.LinearMotion)
  nameWithType.vb: IEquatable(Of LinearMotion).Equals(LinearMotion)
  fullName.vb: System.IEquatable(Of Vim.Math3d.LinearMotion).Equals(Vim.Math3d.LinearMotion)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<LinearMotion>.Equals
    fullName: System.IEquatable<Vim.Math3d.LinearMotion>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.LinearMotion
    name: LinearMotion
    nameWithType: LinearMotion
    fullName: Vim.Math3d.LinearMotion
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of LinearMotion).Equals
    fullName: System.IEquatable(Of Vim.Math3d.LinearMotion).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.LinearMotion
    name: LinearMotion
    nameWithType: LinearMotion
    fullName: Vim.Math3d.LinearMotion
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.LinearMotion.op_Equality*
  commentId: Overload:Vim.Math3d.LinearMotion.op_Equality
  name: Equality
  nameWithType: LinearMotion.Equality
  fullName: Vim.Math3d.LinearMotion.Equality
- uid: Vim.Math3d.LinearMotion.op_Inequality*
  commentId: Overload:Vim.Math3d.LinearMotion.op_Inequality
  name: Inequality
  nameWithType: LinearMotion.Inequality
  fullName: Vim.Math3d.LinearMotion.Inequality
- uid: Vim.Math3d.LinearMotion.op_Implicit*
  commentId: Overload:Vim.Math3d.LinearMotion.op_Implicit
  name: Implicit
  nameWithType: LinearMotion.Implicit
  fullName: Vim.Math3d.LinearMotion.Implicit
  nameWithType.vb: LinearMotion.Widening
  fullName.vb: Vim.Math3d.LinearMotion.Widening
  name.vb: Widening
- uid: Vim.Math3d.LinearMotion.AlmostEquals*
  commentId: Overload:Vim.Math3d.LinearMotion.AlmostEquals
  name: AlmostEquals
  nameWithType: LinearMotion.AlmostEquals
  fullName: Vim.Math3d.LinearMotion.AlmostEquals
- uid: Vim.Math3d.LinearMotion.SetVelocity*
  commentId: Overload:Vim.Math3d.LinearMotion.SetVelocity
  name: SetVelocity
  nameWithType: LinearMotion.SetVelocity
  fullName: Vim.Math3d.LinearMotion.SetVelocity
- uid: Vim.Math3d.LinearMotion.SetAcceleration*
  commentId: Overload:Vim.Math3d.LinearMotion.SetAcceleration
  name: SetAcceleration
  nameWithType: LinearMotion.SetAcceleration
  fullName: Vim.Math3d.LinearMotion.SetAcceleration
- uid: Vim.Math3d.LinearMotion.SetFriction*
  commentId: Overload:Vim.Math3d.LinearMotion.SetFriction
  name: SetFriction
  nameWithType: LinearMotion.SetFriction
  fullName: Vim.Math3d.LinearMotion.SetFriction

### YamlMime:ManagedReference
items:
- uid: Vim.Math3d.AngularMotion
  commentId: T:Vim.Math3d.AngularMotion
  id: AngularMotion
  parent: Vim.Math3d
  children:
  - Vim.Math3d.AngularMotion.#ctor(System.ValueTuple{Vim.Math3d.Quaternion,Vim.Math3d.Quaternion,System.Single})
  - Vim.Math3d.AngularMotion.#ctor(Vim.Math3d.Quaternion,Vim.Math3d.Quaternion,System.Single)
  - Vim.Math3d.AngularMotion.Acceleration
  - Vim.Math3d.AngularMotion.AlmostEquals(Vim.Math3d.AngularMotion,System.Single)
  - Vim.Math3d.AngularMotion.Create(System.ValueTuple{Vim.Math3d.Quaternion,Vim.Math3d.Quaternion,System.Single})
  - Vim.Math3d.AngularMotion.Create(Vim.Math3d.Quaternion,Vim.Math3d.Quaternion,System.Single)
  - Vim.Math3d.AngularMotion.Deconstruct(Vim.Math3d.Quaternion@,Vim.Math3d.Quaternion@,System.Single@)
  - Vim.Math3d.AngularMotion.Equals(System.Object)
  - Vim.Math3d.AngularMotion.Equals(Vim.Math3d.AngularMotion)
  - Vim.Math3d.AngularMotion.Friction
  - Vim.Math3d.AngularMotion.GetHashCode
  - Vim.Math3d.AngularMotion.MaxValue
  - Vim.Math3d.AngularMotion.MinValue
  - Vim.Math3d.AngularMotion.op_Equality(Vim.Math3d.AngularMotion,Vim.Math3d.AngularMotion)
  - Vim.Math3d.AngularMotion.op_Implicit(System.ValueTuple{Vim.Math3d.Quaternion,Vim.Math3d.Quaternion,System.Single})~Vim.Math3d.AngularMotion
  - Vim.Math3d.AngularMotion.op_Implicit(Vim.Math3d.AngularMotion)~System.ValueTuple{Vim.Math3d.Quaternion,Vim.Math3d.Quaternion,System.Single}
  - Vim.Math3d.AngularMotion.op_Inequality(Vim.Math3d.AngularMotion,Vim.Math3d.AngularMotion)
  - Vim.Math3d.AngularMotion.SetAcceleration(Vim.Math3d.Quaternion)
  - Vim.Math3d.AngularMotion.SetFriction(System.Single)
  - Vim.Math3d.AngularMotion.SetVelocity(Vim.Math3d.Quaternion)
  - Vim.Math3d.AngularMotion.ToString
  - Vim.Math3d.AngularMotion.Velocity
  - Vim.Math3d.AngularMotion.Zero
  langs:
  - csharp
  - vb
  name: AngularMotion
  nameWithType: AngularMotion
  fullName: Vim.Math3d.AngularMotion
  type: Struct
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: AngularMotion
    path: ../src/Structs.cs
    startLine: 2204
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataContract]

      public readonly struct AngularMotion : IEquatable<AngularMotion>
    content.vb: >-
      <DataContract>

      Public Structure AngularMotion
          Implements IEquatable(Of AngularMotion)
  implements:
  - System.IEquatable{Vim.Math3d.AngularMotion}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Vim.Math3d.AngularMotion.Velocity
  commentId: F:Vim.Math3d.AngularMotion.Velocity
  id: Velocity
  parent: Vim.Math3d.AngularMotion
  langs:
  - csharp
  - vb
  name: Velocity
  nameWithType: AngularMotion.Velocity
  fullName: Vim.Math3d.AngularMotion.Velocity
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Velocity
    path: ../src/Structs.cs
    startLine: 2210
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataMember]

      public readonly Quaternion Velocity
    return:
      type: Vim.Math3d.Quaternion
    content.vb: >-
      <DataMember>

      Public ReadOnly Velocity As Quaternion
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.AngularMotion.Acceleration
  commentId: F:Vim.Math3d.AngularMotion.Acceleration
  id: Acceleration
  parent: Vim.Math3d.AngularMotion
  langs:
  - csharp
  - vb
  name: Acceleration
  nameWithType: AngularMotion.Acceleration
  fullName: Vim.Math3d.AngularMotion.Acceleration
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Acceleration
    path: ../src/Structs.cs
    startLine: 2212
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataMember]

      public readonly Quaternion Acceleration
    return:
      type: Vim.Math3d.Quaternion
    content.vb: >-
      <DataMember>

      Public ReadOnly Acceleration As Quaternion
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.AngularMotion.Friction
  commentId: F:Vim.Math3d.AngularMotion.Friction
  id: Friction
  parent: Vim.Math3d.AngularMotion
  langs:
  - csharp
  - vb
  name: Friction
  nameWithType: AngularMotion.Friction
  fullName: Vim.Math3d.AngularMotion.Friction
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Friction
    path: ../src/Structs.cs
    startLine: 2214
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataMember]

      public readonly float Friction
    return:
      type: System.Single
    content.vb: >-
      <DataMember>

      Public ReadOnly Friction As Single
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.AngularMotion.#ctor(System.ValueTuple{Vim.Math3d.Quaternion,Vim.Math3d.Quaternion,System.Single})
  commentId: M:Vim.Math3d.AngularMotion.#ctor(System.ValueTuple{Vim.Math3d.Quaternion,Vim.Math3d.Quaternion,System.Single})
  id: '#ctor(System.ValueTuple{Vim.Math3d.Quaternion,Vim.Math3d.Quaternion,System.Single})'
  parent: Vim.Math3d.AngularMotion
  langs:
  - csharp
  - vb
  name: AngularMotion((Quaternion velocity, Quaternion acceleration, Single friction))
  nameWithType: AngularMotion.AngularMotion((Quaternion velocity, Quaternion acceleration, Single friction))
  fullName: Vim.Math3d.AngularMotion.AngularMotion(System.ValueTuple<Vim.Math3d.Quaternion, Vim.Math3d.Quaternion, System.Single>)
  type: Constructor
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: .ctor
    path: ../src/Structs.cs
    startLine: 2215
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public AngularMotion((Quaternion velocity, Quaternion acceleration, float friction) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{Vim.Math3d.Quaternion,Vim.Math3d.Quaternion,System.Single}
    content.vb: Public Sub New(tuple As(velocity As Quaternion, acceleration As Quaternion, friction As Single)(Of Quaternion , Quaternion, Single))
  overload: Vim.Math3d.AngularMotion.#ctor*
  nameWithType.vb: AngularMotion.AngularMotion((velocity As Quaternion, acceleration As Quaternion, friction As Single)(Of Quaternion, Quaternion, Single))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Vim.Math3d.AngularMotion.AngularMotion(System.ValueTuple(Of Vim.Math3d.Quaternion, Vim.Math3d.Quaternion, System.Single))
  name.vb: AngularMotion((velocity As Quaternion, acceleration As Quaternion, friction As Single)(Of Quaternion, Quaternion, Single))
- uid: Vim.Math3d.AngularMotion.#ctor(Vim.Math3d.Quaternion,Vim.Math3d.Quaternion,System.Single)
  commentId: M:Vim.Math3d.AngularMotion.#ctor(Vim.Math3d.Quaternion,Vim.Math3d.Quaternion,System.Single)
  id: '#ctor(Vim.Math3d.Quaternion,Vim.Math3d.Quaternion,System.Single)'
  parent: Vim.Math3d.AngularMotion
  langs:
  - csharp
  - vb
  name: AngularMotion(Quaternion, Quaternion, Single)
  nameWithType: AngularMotion.AngularMotion(Quaternion, Quaternion, Single)
  fullName: Vim.Math3d.AngularMotion.AngularMotion(Vim.Math3d.Quaternion, Vim.Math3d.Quaternion, System.Single)
  type: Constructor
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: .ctor
    path: ../src/Structs.cs
    startLine: 2216
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public AngularMotion(Quaternion velocity, Quaternion acceleration, float friction)
    parameters:
    - id: velocity
      type: Vim.Math3d.Quaternion
    - id: acceleration
      type: Vim.Math3d.Quaternion
    - id: friction
      type: System.Single
    content.vb: Public Sub New(velocity As Quaternion, acceleration As Quaternion, friction As Single)
  overload: Vim.Math3d.AngularMotion.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AngularMotion.Create(Vim.Math3d.Quaternion,Vim.Math3d.Quaternion,System.Single)
  commentId: M:Vim.Math3d.AngularMotion.Create(Vim.Math3d.Quaternion,Vim.Math3d.Quaternion,System.Single)
  id: Create(Vim.Math3d.Quaternion,Vim.Math3d.Quaternion,System.Single)
  parent: Vim.Math3d.AngularMotion
  langs:
  - csharp
  - vb
  name: Create(Quaternion, Quaternion, Single)
  nameWithType: AngularMotion.Create(Quaternion, Quaternion, Single)
  fullName: Vim.Math3d.AngularMotion.Create(Vim.Math3d.Quaternion, Vim.Math3d.Quaternion, System.Single)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Create
    path: ../src/Structs.cs
    startLine: 2217
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static AngularMotion Create(Quaternion velocity, Quaternion acceleration, float friction)
    parameters:
    - id: velocity
      type: Vim.Math3d.Quaternion
    - id: acceleration
      type: Vim.Math3d.Quaternion
    - id: friction
      type: System.Single
    return:
      type: Vim.Math3d.AngularMotion
    content.vb: Public Shared Function Create(velocity As Quaternion, acceleration As Quaternion, friction As Single) As AngularMotion
  overload: Vim.Math3d.AngularMotion.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.AngularMotion.Create(System.ValueTuple{Vim.Math3d.Quaternion,Vim.Math3d.Quaternion,System.Single})
  commentId: M:Vim.Math3d.AngularMotion.Create(System.ValueTuple{Vim.Math3d.Quaternion,Vim.Math3d.Quaternion,System.Single})
  id: Create(System.ValueTuple{Vim.Math3d.Quaternion,Vim.Math3d.Quaternion,System.Single})
  parent: Vim.Math3d.AngularMotion
  langs:
  - csharp
  - vb
  name: Create((Quaternion velocity, Quaternion acceleration, Single friction))
  nameWithType: AngularMotion.Create((Quaternion velocity, Quaternion acceleration, Single friction))
  fullName: Vim.Math3d.AngularMotion.Create(System.ValueTuple<Vim.Math3d.Quaternion, Vim.Math3d.Quaternion, System.Single>)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Create
    path: ../src/Structs.cs
    startLine: 2218
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static AngularMotion Create((Quaternion velocity, Quaternion acceleration, float friction) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{Vim.Math3d.Quaternion,Vim.Math3d.Quaternion,System.Single}
    return:
      type: Vim.Math3d.AngularMotion
    content.vb: Public Shared Function Create(tuple As(velocity As Quaternion, acceleration As Quaternion, friction As Single)(Of Quaternion , Quaternion, Single)) As AngularMotion
  overload: Vim.Math3d.AngularMotion.Create*
  nameWithType.vb: AngularMotion.Create((velocity As Quaternion, acceleration As Quaternion, friction As Single)(Of Quaternion, Quaternion, Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.AngularMotion.Create(System.ValueTuple(Of Vim.Math3d.Quaternion, Vim.Math3d.Quaternion, System.Single))
  name.vb: Create((velocity As Quaternion, acceleration As Quaternion, friction As Single)(Of Quaternion, Quaternion, Single))
- uid: Vim.Math3d.AngularMotion.Equals(System.Object)
  commentId: M:Vim.Math3d.AngularMotion.Equals(System.Object)
  id: Equals(System.Object)
  parent: Vim.Math3d.AngularMotion
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: AngularMotion.Equals(Object)
  fullName: Vim.Math3d.AngularMotion.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Equals
    path: ../src/Structs.cs
    startLine: 2219
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: Vim.Math3d.AngularMotion.Equals*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.AngularMotion.GetHashCode
  commentId: M:Vim.Math3d.AngularMotion.GetHashCode
  id: GetHashCode
  parent: Vim.Math3d.AngularMotion
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: AngularMotion.GetHashCode()
  fullName: Vim.Math3d.AngularMotion.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: GetHashCode
    path: ../src/Structs.cs
    startLine: 2220
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: Vim.Math3d.AngularMotion.GetHashCode*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.AngularMotion.ToString
  commentId: M:Vim.Math3d.AngularMotion.ToString
  id: ToString
  parent: Vim.Math3d.AngularMotion
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: AngularMotion.ToString()
  fullName: Vim.Math3d.AngularMotion.ToString()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToString
    path: ../src/Structs.cs
    startLine: 2221
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: Vim.Math3d.AngularMotion.ToString*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.AngularMotion.Deconstruct(Vim.Math3d.Quaternion@,Vim.Math3d.Quaternion@,System.Single@)
  commentId: M:Vim.Math3d.AngularMotion.Deconstruct(Vim.Math3d.Quaternion@,Vim.Math3d.Quaternion@,System.Single@)
  id: Deconstruct(Vim.Math3d.Quaternion@,Vim.Math3d.Quaternion@,System.Single@)
  parent: Vim.Math3d.AngularMotion
  langs:
  - csharp
  - vb
  name: Deconstruct(out Quaternion, out Quaternion, out Single)
  nameWithType: AngularMotion.Deconstruct(out Quaternion, out Quaternion, out Single)
  fullName: Vim.Math3d.AngularMotion.Deconstruct(out Vim.Math3d.Quaternion, out Vim.Math3d.Quaternion, out System.Single)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Deconstruct
    path: ../src/Structs.cs
    startLine: 2222
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly void Deconstruct(out Quaternion velocity, out Quaternion acceleration, out float friction)
    parameters:
    - id: velocity
      type: Vim.Math3d.Quaternion
    - id: acceleration
      type: Vim.Math3d.Quaternion
    - id: friction
      type: System.Single
    content.vb: Public Sub Deconstruct(ByRef velocity As Quaternion, ByRef acceleration As Quaternion, ByRef friction As Single)
  overload: Vim.Math3d.AngularMotion.Deconstruct*
  nameWithType.vb: AngularMotion.Deconstruct(ByRef Quaternion, ByRef Quaternion, ByRef Single)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  fullName.vb: Vim.Math3d.AngularMotion.Deconstruct(ByRef Vim.Math3d.Quaternion, ByRef Vim.Math3d.Quaternion, ByRef System.Single)
  name.vb: Deconstruct(ByRef Quaternion, ByRef Quaternion, ByRef Single)
- uid: Vim.Math3d.AngularMotion.Equals(Vim.Math3d.AngularMotion)
  commentId: M:Vim.Math3d.AngularMotion.Equals(Vim.Math3d.AngularMotion)
  id: Equals(Vim.Math3d.AngularMotion)
  parent: Vim.Math3d.AngularMotion
  langs:
  - csharp
  - vb
  name: Equals(AngularMotion)
  nameWithType: AngularMotion.Equals(AngularMotion)
  fullName: Vim.Math3d.AngularMotion.Equals(Vim.Math3d.AngularMotion)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Equals
    path: ../src/Structs.cs
    startLine: 2223
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool Equals(AngularMotion x)
    parameters:
    - id: x
      type: Vim.Math3d.AngularMotion
    return:
      type: System.Boolean
    content.vb: Public Function Equals(x As AngularMotion) As Boolean
  overload: Vim.Math3d.AngularMotion.Equals*
  implements:
  - System.IEquatable{Vim.Math3d.AngularMotion}.Equals(Vim.Math3d.AngularMotion)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AngularMotion.op_Equality(Vim.Math3d.AngularMotion,Vim.Math3d.AngularMotion)
  commentId: M:Vim.Math3d.AngularMotion.op_Equality(Vim.Math3d.AngularMotion,Vim.Math3d.AngularMotion)
  id: op_Equality(Vim.Math3d.AngularMotion,Vim.Math3d.AngularMotion)
  parent: Vim.Math3d.AngularMotion
  langs:
  - csharp
  - vb
  name: Equality(AngularMotion, AngularMotion)
  nameWithType: AngularMotion.Equality(AngularMotion, AngularMotion)
  fullName: Vim.Math3d.AngularMotion.Equality(Vim.Math3d.AngularMotion, Vim.Math3d.AngularMotion)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Equality
    path: ../src/Structs.cs
    startLine: 2224
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator ==(AngularMotion x0, AngularMotion x1)
    parameters:
    - id: x0
      type: Vim.Math3d.AngularMotion
    - id: x1
      type: Vim.Math3d.AngularMotion
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(x0 As AngularMotion, x1 As AngularMotion) As Boolean
  overload: Vim.Math3d.AngularMotion.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.AngularMotion.op_Inequality(Vim.Math3d.AngularMotion,Vim.Math3d.AngularMotion)
  commentId: M:Vim.Math3d.AngularMotion.op_Inequality(Vim.Math3d.AngularMotion,Vim.Math3d.AngularMotion)
  id: op_Inequality(Vim.Math3d.AngularMotion,Vim.Math3d.AngularMotion)
  parent: Vim.Math3d.AngularMotion
  langs:
  - csharp
  - vb
  name: Inequality(AngularMotion, AngularMotion)
  nameWithType: AngularMotion.Inequality(AngularMotion, AngularMotion)
  fullName: Vim.Math3d.AngularMotion.Inequality(Vim.Math3d.AngularMotion, Vim.Math3d.AngularMotion)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Inequality
    path: ../src/Structs.cs
    startLine: 2225
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator !=(AngularMotion x0, AngularMotion x1)
    parameters:
    - id: x0
      type: Vim.Math3d.AngularMotion
    - id: x1
      type: Vim.Math3d.AngularMotion
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(x0 As AngularMotion, x1 As AngularMotion) As Boolean
  overload: Vim.Math3d.AngularMotion.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.AngularMotion.op_Implicit(System.ValueTuple{Vim.Math3d.Quaternion,Vim.Math3d.Quaternion,System.Single})~Vim.Math3d.AngularMotion
  commentId: M:Vim.Math3d.AngularMotion.op_Implicit(System.ValueTuple{Vim.Math3d.Quaternion,Vim.Math3d.Quaternion,System.Single})~Vim.Math3d.AngularMotion
  id: op_Implicit(System.ValueTuple{Vim.Math3d.Quaternion,Vim.Math3d.Quaternion,System.Single})~Vim.Math3d.AngularMotion
  parent: Vim.Math3d.AngularMotion
  langs:
  - csharp
  - vb
  name: Implicit((Quaternion velocity, Quaternion acceleration, Single friction) to AngularMotion)
  nameWithType: AngularMotion.Implicit((Quaternion velocity, Quaternion acceleration, Single friction) to AngularMotion)
  fullName: Vim.Math3d.AngularMotion.Implicit(System.ValueTuple<Vim.Math3d.Quaternion, Vim.Math3d.Quaternion, System.Single> to Vim.Math3d.AngularMotion)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Implicit
    path: ../src/Structs.cs
    startLine: 2226
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static implicit operator AngularMotion((Quaternion velocity, Quaternion acceleration, float friction) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{Vim.Math3d.Quaternion,Vim.Math3d.Quaternion,System.Single}
    return:
      type: Vim.Math3d.AngularMotion
    content.vb: Public Shared Widening Operator CType(tuple As(velocity As Quaternion, acceleration As Quaternion, friction As Single)(Of Quaternion , Quaternion, Single)) As AngularMotion
  overload: Vim.Math3d.AngularMotion.op_Implicit*
  nameWithType.vb: AngularMotion.Widening((velocity As Quaternion, acceleration As Quaternion, friction As Single)(Of Quaternion, Quaternion, Single) to AngularMotion)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.AngularMotion.Widening(System.ValueTuple(Of Vim.Math3d.Quaternion, Vim.Math3d.Quaternion, System.Single) to Vim.Math3d.AngularMotion)
  name.vb: Widening((velocity As Quaternion, acceleration As Quaternion, friction As Single)(Of Quaternion, Quaternion, Single) to AngularMotion)
- uid: Vim.Math3d.AngularMotion.op_Implicit(Vim.Math3d.AngularMotion)~System.ValueTuple{Vim.Math3d.Quaternion,Vim.Math3d.Quaternion,System.Single}
  commentId: M:Vim.Math3d.AngularMotion.op_Implicit(Vim.Math3d.AngularMotion)~System.ValueTuple{Vim.Math3d.Quaternion,Vim.Math3d.Quaternion,System.Single}
  id: op_Implicit(Vim.Math3d.AngularMotion)~System.ValueTuple{Vim.Math3d.Quaternion,Vim.Math3d.Quaternion,System.Single}
  parent: Vim.Math3d.AngularMotion
  langs:
  - csharp
  - vb
  name: Implicit(AngularMotion to (Quaternion velocity, Quaternion acceleration, Single friction))
  nameWithType: AngularMotion.Implicit(AngularMotion to (Quaternion velocity, Quaternion acceleration, Single friction))
  fullName: Vim.Math3d.AngularMotion.Implicit(Vim.Math3d.AngularMotion to System.ValueTuple<Vim.Math3d.Quaternion, Vim.Math3d.Quaternion, System.Single>)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Implicit
    path: ../src/Structs.cs
    startLine: 2227
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static implicit operator (Quaternion velocity, Quaternion acceleration, float friction)(AngularMotion self)
    parameters:
    - id: self
      type: Vim.Math3d.AngularMotion
    return:
      type: System.ValueTuple{Vim.Math3d.Quaternion,Vim.Math3d.Quaternion,System.Single}
    content.vb: Public Shared Widening Operator CType(self As AngularMotion) As(velocity As Quaternion, acceleration As Quaternion, friction As Single)(Of Quaternion , Quaternion, Single)
  overload: Vim.Math3d.AngularMotion.op_Implicit*
  nameWithType.vb: AngularMotion.Widening(AngularMotion to (velocity As Quaternion, acceleration As Quaternion, friction As Single)(Of Quaternion, Quaternion, Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.AngularMotion.Widening(Vim.Math3d.AngularMotion to System.ValueTuple(Of Vim.Math3d.Quaternion, Vim.Math3d.Quaternion, System.Single))
  name.vb: Widening(AngularMotion to (velocity As Quaternion, acceleration As Quaternion, friction As Single)(Of Quaternion, Quaternion, Single))
- uid: Vim.Math3d.AngularMotion.AlmostEquals(Vim.Math3d.AngularMotion,System.Single)
  commentId: M:Vim.Math3d.AngularMotion.AlmostEquals(Vim.Math3d.AngularMotion,System.Single)
  id: AlmostEquals(Vim.Math3d.AngularMotion,System.Single)
  parent: Vim.Math3d.AngularMotion
  langs:
  - csharp
  - vb
  name: AlmostEquals(AngularMotion, Single)
  nameWithType: AngularMotion.AlmostEquals(AngularMotion, Single)
  fullName: Vim.Math3d.AngularMotion.AlmostEquals(Vim.Math3d.AngularMotion, System.Single)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: AlmostEquals
    path: ../src/Structs.cs
    startLine: 2229
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool AlmostEquals(AngularMotion x, float tolerance = 1E-07F)
    parameters:
    - id: x
      type: Vim.Math3d.AngularMotion
    - id: tolerance
      type: System.Single
    return:
      type: System.Boolean
    content.vb: Public Function AlmostEquals(x As AngularMotion, tolerance As Single = 1E-07F) As Boolean
  overload: Vim.Math3d.AngularMotion.AlmostEquals*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AngularMotion.Zero
  commentId: F:Vim.Math3d.AngularMotion.Zero
  id: Zero
  parent: Vim.Math3d.AngularMotion
  langs:
  - csharp
  - vb
  name: Zero
  nameWithType: AngularMotion.Zero
  fullName: Vim.Math3d.AngularMotion.Zero
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Zero
    path: ../src/Structs.cs
    startLine: 2230
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static AngularMotion Zero
    return:
      type: Vim.Math3d.AngularMotion
    content.vb: Public Shared Zero As AngularMotion
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.AngularMotion.MinValue
  commentId: F:Vim.Math3d.AngularMotion.MinValue
  id: MinValue
  parent: Vim.Math3d.AngularMotion
  langs:
  - csharp
  - vb
  name: MinValue
  nameWithType: AngularMotion.MinValue
  fullName: Vim.Math3d.AngularMotion.MinValue
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MinValue
    path: ../src/Structs.cs
    startLine: 2231
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static AngularMotion MinValue
    return:
      type: Vim.Math3d.AngularMotion
    content.vb: Public Shared MinValue As AngularMotion
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.AngularMotion.MaxValue
  commentId: F:Vim.Math3d.AngularMotion.MaxValue
  id: MaxValue
  parent: Vim.Math3d.AngularMotion
  langs:
  - csharp
  - vb
  name: MaxValue
  nameWithType: AngularMotion.MaxValue
  fullName: Vim.Math3d.AngularMotion.MaxValue
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MaxValue
    path: ../src/Structs.cs
    startLine: 2232
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static AngularMotion MaxValue
    return:
      type: Vim.Math3d.AngularMotion
    content.vb: Public Shared MaxValue As AngularMotion
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.AngularMotion.SetVelocity(Vim.Math3d.Quaternion)
  commentId: M:Vim.Math3d.AngularMotion.SetVelocity(Vim.Math3d.Quaternion)
  id: SetVelocity(Vim.Math3d.Quaternion)
  parent: Vim.Math3d.AngularMotion
  langs:
  - csharp
  - vb
  name: SetVelocity(Quaternion)
  nameWithType: AngularMotion.SetVelocity(Quaternion)
  fullName: Vim.Math3d.AngularMotion.SetVelocity(Vim.Math3d.Quaternion)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SetVelocity
    path: ../src/Structs.cs
    startLine: 2233
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly AngularMotion SetVelocity(Quaternion x)
    parameters:
    - id: x
      type: Vim.Math3d.Quaternion
    return:
      type: Vim.Math3d.AngularMotion
    content.vb: Public Function SetVelocity(x As Quaternion) As AngularMotion
  overload: Vim.Math3d.AngularMotion.SetVelocity*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AngularMotion.SetAcceleration(Vim.Math3d.Quaternion)
  commentId: M:Vim.Math3d.AngularMotion.SetAcceleration(Vim.Math3d.Quaternion)
  id: SetAcceleration(Vim.Math3d.Quaternion)
  parent: Vim.Math3d.AngularMotion
  langs:
  - csharp
  - vb
  name: SetAcceleration(Quaternion)
  nameWithType: AngularMotion.SetAcceleration(Quaternion)
  fullName: Vim.Math3d.AngularMotion.SetAcceleration(Vim.Math3d.Quaternion)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SetAcceleration
    path: ../src/Structs.cs
    startLine: 2234
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly AngularMotion SetAcceleration(Quaternion x)
    parameters:
    - id: x
      type: Vim.Math3d.Quaternion
    return:
      type: Vim.Math3d.AngularMotion
    content.vb: Public Function SetAcceleration(x As Quaternion) As AngularMotion
  overload: Vim.Math3d.AngularMotion.SetAcceleration*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.AngularMotion.SetFriction(System.Single)
  commentId: M:Vim.Math3d.AngularMotion.SetFriction(System.Single)
  id: SetFriction(System.Single)
  parent: Vim.Math3d.AngularMotion
  langs:
  - csharp
  - vb
  name: SetFriction(Single)
  nameWithType: AngularMotion.SetFriction(Single)
  fullName: Vim.Math3d.AngularMotion.SetFriction(System.Single)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SetFriction
    path: ../src/Structs.cs
    startLine: 2235
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly AngularMotion SetFriction(float x)
    parameters:
    - id: x
      type: System.Single
    return:
      type: Vim.Math3d.AngularMotion
    content.vb: Public Function SetFriction(x As Single) As AngularMotion
  overload: Vim.Math3d.AngularMotion.SetFriction*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
references:
- uid: Vim.Math3d
  commentId: N:Vim.Math3d
  name: Vim.Math3d
  nameWithType: Vim.Math3d
  fullName: Vim.Math3d
- uid: System.IEquatable{Vim.Math3d.AngularMotion}
  commentId: T:System.IEquatable{Vim.Math3d.AngularMotion}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<AngularMotion>
  nameWithType: IEquatable<AngularMotion>
  fullName: System.IEquatable<Vim.Math3d.AngularMotion>
  nameWithType.vb: IEquatable(Of AngularMotion)
  fullName.vb: System.IEquatable(Of Vim.Math3d.AngularMotion)
  name.vb: IEquatable(Of AngularMotion)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.AngularMotion
    name: AngularMotion
    nameWithType: AngularMotion
    fullName: Vim.Math3d.AngularMotion
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.AngularMotion
    name: AngularMotion
    nameWithType: AngularMotion
    fullName: Vim.Math3d.AngularMotion
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Vim.Math3d.Quaternion
  commentId: T:Vim.Math3d.Quaternion
  parent: Vim.Math3d
  name: Quaternion
  nameWithType: Quaternion
  fullName: Vim.Math3d.Quaternion
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Vim.Math3d.AngularMotion.#ctor*
  commentId: Overload:Vim.Math3d.AngularMotion.#ctor
  name: AngularMotion
  nameWithType: AngularMotion.AngularMotion
  fullName: Vim.Math3d.AngularMotion.AngularMotion
- uid: System.ValueTuple{Vim.Math3d.Quaternion,Vim.Math3d.Quaternion,System.Single}
  commentId: T:System.ValueTuple{Vim.Math3d.Quaternion,Vim.Math3d.Quaternion,System.Single}
  parent: System
  definition: System.ValueTuple`3
  name: (T1, T2, T3)<Quaternion, Quaternion, Single>
  nameWithType: (T1, T2, T3)<Quaternion, Quaternion, Single>
  fullName: System.ValueTuple<Vim.Math3d.Quaternion, Vim.Math3d.Quaternion, System.Single>
  nameWithType.vb: (T1, T2, T3)(Of Quaternion, Quaternion, Single)
  fullName.vb: System.ValueTuple(Of Vim.Math3d.Quaternion, Vim.Math3d.Quaternion, System.Single)
  name.vb: (T1, T2, T3)(Of Quaternion, Quaternion, Single)
  spec.csharp:
  - uid: System.ValueTuple`3
    name: (T1, T2, T3)
    nameWithType: (T1, T2, T3)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.Quaternion
    name: Quaternion
    nameWithType: Quaternion
    fullName: Vim.Math3d.Quaternion
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Quaternion
    name: Quaternion
    nameWithType: Quaternion
    fullName: Vim.Math3d.Quaternion
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`3
    name: (T1, T2, T3)
    nameWithType: (T1, T2, T3)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.Quaternion
    name: Quaternion
    nameWithType: Quaternion
    fullName: Vim.Math3d.Quaternion
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Vim.Math3d.Quaternion
    name: Quaternion
    nameWithType: Quaternion
    fullName: Vim.Math3d.Quaternion
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple`3
  commentId: T:System.ValueTuple`3
  isExternal: true
  name: (T1, T2, T3)<T1, T2, T3>
  nameWithType: (T1, T2, T3)<T1, T2, T3>
  fullName: System.ValueTuple<T1, T2, T3>
  nameWithType.vb: (T1, T2, T3)(Of T1, T2, T3)
  fullName.vb: System.ValueTuple(Of T1, T2, T3)
  name.vb: (T1, T2, T3)(Of T1, T2, T3)
  spec.csharp:
  - uid: System.ValueTuple`3
    name: (T1, T2, T3)
    nameWithType: (T1, T2, T3)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`3
    name: (T1, T2, T3)
    nameWithType: (T1, T2, T3)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.AngularMotion.Create*
  commentId: Overload:Vim.Math3d.AngularMotion.Create
  name: Create
  nameWithType: AngularMotion.Create
  fullName: Vim.Math3d.AngularMotion.Create
- uid: Vim.Math3d.AngularMotion
  commentId: T:Vim.Math3d.AngularMotion
  parent: Vim.Math3d
  name: AngularMotion
  nameWithType: AngularMotion
  fullName: Vim.Math3d.AngularMotion
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.AngularMotion.Equals*
  commentId: Overload:Vim.Math3d.AngularMotion.Equals
  name: Equals
  nameWithType: AngularMotion.Equals
  fullName: Vim.Math3d.AngularMotion.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.AngularMotion.GetHashCode*
  commentId: Overload:Vim.Math3d.AngularMotion.GetHashCode
  name: GetHashCode
  nameWithType: AngularMotion.GetHashCode
  fullName: Vim.Math3d.AngularMotion.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.AngularMotion.ToString*
  commentId: Overload:Vim.Math3d.AngularMotion.ToString
  name: ToString
  nameWithType: AngularMotion.ToString
  fullName: Vim.Math3d.AngularMotion.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Vim.Math3d.AngularMotion.Deconstruct*
  commentId: Overload:Vim.Math3d.AngularMotion.Deconstruct
  name: Deconstruct
  nameWithType: AngularMotion.Deconstruct
  fullName: Vim.Math3d.AngularMotion.Deconstruct
- uid: System.IEquatable{Vim.Math3d.AngularMotion}.Equals(Vim.Math3d.AngularMotion)
  commentId: M:System.IEquatable{Vim.Math3d.AngularMotion}.Equals(Vim.Math3d.AngularMotion)
  parent: System.IEquatable{Vim.Math3d.AngularMotion}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(AngularMotion)
  nameWithType: IEquatable<AngularMotion>.Equals(AngularMotion)
  fullName: System.IEquatable<Vim.Math3d.AngularMotion>.Equals(Vim.Math3d.AngularMotion)
  nameWithType.vb: IEquatable(Of AngularMotion).Equals(AngularMotion)
  fullName.vb: System.IEquatable(Of Vim.Math3d.AngularMotion).Equals(Vim.Math3d.AngularMotion)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<AngularMotion>.Equals
    fullName: System.IEquatable<Vim.Math3d.AngularMotion>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.AngularMotion
    name: AngularMotion
    nameWithType: AngularMotion
    fullName: Vim.Math3d.AngularMotion
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of AngularMotion).Equals
    fullName: System.IEquatable(Of Vim.Math3d.AngularMotion).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.AngularMotion
    name: AngularMotion
    nameWithType: AngularMotion
    fullName: Vim.Math3d.AngularMotion
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.AngularMotion.op_Equality*
  commentId: Overload:Vim.Math3d.AngularMotion.op_Equality
  name: Equality
  nameWithType: AngularMotion.Equality
  fullName: Vim.Math3d.AngularMotion.Equality
- uid: Vim.Math3d.AngularMotion.op_Inequality*
  commentId: Overload:Vim.Math3d.AngularMotion.op_Inequality
  name: Inequality
  nameWithType: AngularMotion.Inequality
  fullName: Vim.Math3d.AngularMotion.Inequality
- uid: Vim.Math3d.AngularMotion.op_Implicit*
  commentId: Overload:Vim.Math3d.AngularMotion.op_Implicit
  name: Implicit
  nameWithType: AngularMotion.Implicit
  fullName: Vim.Math3d.AngularMotion.Implicit
  nameWithType.vb: AngularMotion.Widening
  fullName.vb: Vim.Math3d.AngularMotion.Widening
  name.vb: Widening
- uid: Vim.Math3d.AngularMotion.AlmostEquals*
  commentId: Overload:Vim.Math3d.AngularMotion.AlmostEquals
  name: AlmostEquals
  nameWithType: AngularMotion.AlmostEquals
  fullName: Vim.Math3d.AngularMotion.AlmostEquals
- uid: Vim.Math3d.AngularMotion.SetVelocity*
  commentId: Overload:Vim.Math3d.AngularMotion.SetVelocity
  name: SetVelocity
  nameWithType: AngularMotion.SetVelocity
  fullName: Vim.Math3d.AngularMotion.SetVelocity
- uid: Vim.Math3d.AngularMotion.SetAcceleration*
  commentId: Overload:Vim.Math3d.AngularMotion.SetAcceleration
  name: SetAcceleration
  nameWithType: AngularMotion.SetAcceleration
  fullName: Vim.Math3d.AngularMotion.SetAcceleration
- uid: Vim.Math3d.AngularMotion.SetFriction*
  commentId: Overload:Vim.Math3d.AngularMotion.SetFriction
  name: SetFriction
  nameWithType: AngularMotion.SetFriction
  fullName: Vim.Math3d.AngularMotion.SetFriction

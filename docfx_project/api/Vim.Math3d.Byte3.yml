### YamlMime:ManagedReference
items:
- uid: Vim.Math3d.Byte3
  commentId: T:Vim.Math3d.Byte3
  id: Byte3
  parent: Vim.Math3d
  children:
  - Vim.Math3d.Byte3.#ctor(System.Byte,System.Byte,System.Byte)
  - Vim.Math3d.Byte3.#ctor(System.ValueTuple{System.Byte,System.Byte,System.Byte})
  - Vim.Math3d.Byte3.Create(System.Byte,System.Byte,System.Byte)
  - Vim.Math3d.Byte3.Create(System.ValueTuple{System.Byte,System.Byte,System.Byte})
  - Vim.Math3d.Byte3.Deconstruct(System.Byte@,System.Byte@,System.Byte@)
  - Vim.Math3d.Byte3.Equals(System.Object)
  - Vim.Math3d.Byte3.Equals(Vim.Math3d.Byte3)
  - Vim.Math3d.Byte3.GetHashCode
  - Vim.Math3d.Byte3.MaxValue
  - Vim.Math3d.Byte3.MinValue
  - Vim.Math3d.Byte3.op_Equality(Vim.Math3d.Byte3,Vim.Math3d.Byte3)
  - Vim.Math3d.Byte3.op_Implicit(System.ValueTuple{System.Byte,System.Byte,System.Byte})~Vim.Math3d.Byte3
  - Vim.Math3d.Byte3.op_Implicit(Vim.Math3d.Byte3)~System.ValueTuple{System.Byte,System.Byte,System.Byte}
  - Vim.Math3d.Byte3.op_Inequality(Vim.Math3d.Byte3,Vim.Math3d.Byte3)
  - Vim.Math3d.Byte3.SetX(System.Byte)
  - Vim.Math3d.Byte3.SetY(System.Byte)
  - Vim.Math3d.Byte3.SetZ(System.Byte)
  - Vim.Math3d.Byte3.ToString
  - Vim.Math3d.Byte3.X
  - Vim.Math3d.Byte3.Y
  - Vim.Math3d.Byte3.Z
  - Vim.Math3d.Byte3.Zero
  langs:
  - csharp
  - vb
  name: Byte3
  nameWithType: Byte3
  fullName: Vim.Math3d.Byte3
  type: Struct
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Byte3
    path: ../src/Structs.cs
    startLine: 1634
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataContract]

      public readonly struct Byte3 : IEquatable<Byte3>
    content.vb: >-
      <DataContract>

      Public Structure Byte3
          Implements IEquatable(Of Byte3)
  implements:
  - System.IEquatable{Vim.Math3d.Byte3}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Vim.Math3d.Byte3.X
  commentId: F:Vim.Math3d.Byte3.X
  id: X
  parent: Vim.Math3d.Byte3
  langs:
  - csharp
  - vb
  name: X
  nameWithType: Byte3.X
  fullName: Vim.Math3d.Byte3.X
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: X
    path: ../src/Structs.cs
    startLine: 1640
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataMember]

      public readonly byte X
    return:
      type: System.Byte
    content.vb: >-
      <DataMember>

      Public ReadOnly X As Byte
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.Byte3.Y
  commentId: F:Vim.Math3d.Byte3.Y
  id: Y
  parent: Vim.Math3d.Byte3
  langs:
  - csharp
  - vb
  name: Y
  nameWithType: Byte3.Y
  fullName: Vim.Math3d.Byte3.Y
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Y
    path: ../src/Structs.cs
    startLine: 1642
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataMember]

      public readonly byte Y
    return:
      type: System.Byte
    content.vb: >-
      <DataMember>

      Public ReadOnly Y As Byte
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.Byte3.Z
  commentId: F:Vim.Math3d.Byte3.Z
  id: Z
  parent: Vim.Math3d.Byte3
  langs:
  - csharp
  - vb
  name: Z
  nameWithType: Byte3.Z
  fullName: Vim.Math3d.Byte3.Z
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Z
    path: ../src/Structs.cs
    startLine: 1644
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: >-
      [DataMember]

      public readonly byte Z
    return:
      type: System.Byte
    content.vb: >-
      <DataMember>

      Public ReadOnly Z As Byte
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Vim.Math3d.Byte3.#ctor(System.ValueTuple{System.Byte,System.Byte,System.Byte})
  commentId: M:Vim.Math3d.Byte3.#ctor(System.ValueTuple{System.Byte,System.Byte,System.Byte})
  id: '#ctor(System.ValueTuple{System.Byte,System.Byte,System.Byte})'
  parent: Vim.Math3d.Byte3
  langs:
  - csharp
  - vb
  name: Byte3((Byte x, Byte y, Byte z))
  nameWithType: Byte3.Byte3((Byte x, Byte y, Byte z))
  fullName: Vim.Math3d.Byte3.Byte3(System.ValueTuple<System.Byte, System.Byte, System.Byte>)
  type: Constructor
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: .ctor
    path: ../src/Structs.cs
    startLine: 1645
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public Byte3((byte x, byte y, byte z) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{System.Byte,System.Byte,System.Byte}
    content.vb: Public Sub New(tuple As(x As Byte, y As Byte, z As Byte)(Of Byte , Byte, Byte))
  overload: Vim.Math3d.Byte3.#ctor*
  nameWithType.vb: Byte3.Byte3((x As Byte, y As Byte, z As Byte)(Of Byte, Byte, Byte))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Vim.Math3d.Byte3.Byte3(System.ValueTuple(Of System.Byte, System.Byte, System.Byte))
  name.vb: Byte3((x As Byte, y As Byte, z As Byte)(Of Byte, Byte, Byte))
- uid: Vim.Math3d.Byte3.#ctor(System.Byte,System.Byte,System.Byte)
  commentId: M:Vim.Math3d.Byte3.#ctor(System.Byte,System.Byte,System.Byte)
  id: '#ctor(System.Byte,System.Byte,System.Byte)'
  parent: Vim.Math3d.Byte3
  langs:
  - csharp
  - vb
  name: Byte3(Byte, Byte, Byte)
  nameWithType: Byte3.Byte3(Byte, Byte, Byte)
  fullName: Vim.Math3d.Byte3.Byte3(System.Byte, System.Byte, System.Byte)
  type: Constructor
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: .ctor
    path: ../src/Structs.cs
    startLine: 1646
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public Byte3(byte x, byte y, byte z)
    parameters:
    - id: x
      type: System.Byte
    - id: y
      type: System.Byte
    - id: z
      type: System.Byte
    content.vb: Public Sub New(x As Byte, y As Byte, z As Byte)
  overload: Vim.Math3d.Byte3.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Byte3.Create(System.Byte,System.Byte,System.Byte)
  commentId: M:Vim.Math3d.Byte3.Create(System.Byte,System.Byte,System.Byte)
  id: Create(System.Byte,System.Byte,System.Byte)
  parent: Vim.Math3d.Byte3
  langs:
  - csharp
  - vb
  name: Create(Byte, Byte, Byte)
  nameWithType: Byte3.Create(Byte, Byte, Byte)
  fullName: Vim.Math3d.Byte3.Create(System.Byte, System.Byte, System.Byte)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Create
    path: ../src/Structs.cs
    startLine: 1647
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Byte3 Create(byte x, byte y, byte z)
    parameters:
    - id: x
      type: System.Byte
    - id: y
      type: System.Byte
    - id: z
      type: System.Byte
    return:
      type: Vim.Math3d.Byte3
    content.vb: Public Shared Function Create(x As Byte, y As Byte, z As Byte) As Byte3
  overload: Vim.Math3d.Byte3.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Byte3.Create(System.ValueTuple{System.Byte,System.Byte,System.Byte})
  commentId: M:Vim.Math3d.Byte3.Create(System.ValueTuple{System.Byte,System.Byte,System.Byte})
  id: Create(System.ValueTuple{System.Byte,System.Byte,System.Byte})
  parent: Vim.Math3d.Byte3
  langs:
  - csharp
  - vb
  name: Create((Byte x, Byte y, Byte z))
  nameWithType: Byte3.Create((Byte x, Byte y, Byte z))
  fullName: Vim.Math3d.Byte3.Create(System.ValueTuple<System.Byte, System.Byte, System.Byte>)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Create
    path: ../src/Structs.cs
    startLine: 1648
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Byte3 Create((byte x, byte y, byte z) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{System.Byte,System.Byte,System.Byte}
    return:
      type: Vim.Math3d.Byte3
    content.vb: Public Shared Function Create(tuple As(x As Byte, y As Byte, z As Byte)(Of Byte , Byte, Byte)) As Byte3
  overload: Vim.Math3d.Byte3.Create*
  nameWithType.vb: Byte3.Create((x As Byte, y As Byte, z As Byte)(Of Byte, Byte, Byte))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.Byte3.Create(System.ValueTuple(Of System.Byte, System.Byte, System.Byte))
  name.vb: Create((x As Byte, y As Byte, z As Byte)(Of Byte, Byte, Byte))
- uid: Vim.Math3d.Byte3.Equals(System.Object)
  commentId: M:Vim.Math3d.Byte3.Equals(System.Object)
  id: Equals(System.Object)
  parent: Vim.Math3d.Byte3
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Byte3.Equals(Object)
  fullName: Vim.Math3d.Byte3.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Equals
    path: ../src/Structs.cs
    startLine: 1649
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: Vim.Math3d.Byte3.Equals*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.Byte3.GetHashCode
  commentId: M:Vim.Math3d.Byte3.GetHashCode
  id: GetHashCode
  parent: Vim.Math3d.Byte3
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Byte3.GetHashCode()
  fullName: Vim.Math3d.Byte3.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: GetHashCode
    path: ../src/Structs.cs
    startLine: 1650
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: Vim.Math3d.Byte3.GetHashCode*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.Byte3.ToString
  commentId: M:Vim.Math3d.Byte3.ToString
  id: ToString
  parent: Vim.Math3d.Byte3
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Byte3.ToString()
  fullName: Vim.Math3d.Byte3.ToString()
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: ToString
    path: ../src/Structs.cs
    startLine: 1651
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public override readonly string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: Vim.Math3d.Byte3.ToString*
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
- uid: Vim.Math3d.Byte3.Deconstruct(System.Byte@,System.Byte@,System.Byte@)
  commentId: M:Vim.Math3d.Byte3.Deconstruct(System.Byte@,System.Byte@,System.Byte@)
  id: Deconstruct(System.Byte@,System.Byte@,System.Byte@)
  parent: Vim.Math3d.Byte3
  langs:
  - csharp
  - vb
  name: Deconstruct(out Byte, out Byte, out Byte)
  nameWithType: Byte3.Deconstruct(out Byte, out Byte, out Byte)
  fullName: Vim.Math3d.Byte3.Deconstruct(out System.Byte, out System.Byte, out System.Byte)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Deconstruct
    path: ../src/Structs.cs
    startLine: 1652
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly void Deconstruct(out byte x, out byte y, out byte z)
    parameters:
    - id: x
      type: System.Byte
    - id: y
      type: System.Byte
    - id: z
      type: System.Byte
    content.vb: Public Sub Deconstruct(ByRef x As Byte, ByRef y As Byte, ByRef z As Byte)
  overload: Vim.Math3d.Byte3.Deconstruct*
  nameWithType.vb: Byte3.Deconstruct(ByRef Byte, ByRef Byte, ByRef Byte)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  fullName.vb: Vim.Math3d.Byte3.Deconstruct(ByRef System.Byte, ByRef System.Byte, ByRef System.Byte)
  name.vb: Deconstruct(ByRef Byte, ByRef Byte, ByRef Byte)
- uid: Vim.Math3d.Byte3.Equals(Vim.Math3d.Byte3)
  commentId: M:Vim.Math3d.Byte3.Equals(Vim.Math3d.Byte3)
  id: Equals(Vim.Math3d.Byte3)
  parent: Vim.Math3d.Byte3
  langs:
  - csharp
  - vb
  name: Equals(Byte3)
  nameWithType: Byte3.Equals(Byte3)
  fullName: Vim.Math3d.Byte3.Equals(Vim.Math3d.Byte3)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Equals
    path: ../src/Structs.cs
    startLine: 1653
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly bool Equals(Byte3 x)
    parameters:
    - id: x
      type: Vim.Math3d.Byte3
    return:
      type: System.Boolean
    content.vb: Public Function Equals(x As Byte3) As Boolean
  overload: Vim.Math3d.Byte3.Equals*
  implements:
  - System.IEquatable{Vim.Math3d.Byte3}.Equals(Vim.Math3d.Byte3)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Byte3.op_Equality(Vim.Math3d.Byte3,Vim.Math3d.Byte3)
  commentId: M:Vim.Math3d.Byte3.op_Equality(Vim.Math3d.Byte3,Vim.Math3d.Byte3)
  id: op_Equality(Vim.Math3d.Byte3,Vim.Math3d.Byte3)
  parent: Vim.Math3d.Byte3
  langs:
  - csharp
  - vb
  name: Equality(Byte3, Byte3)
  nameWithType: Byte3.Equality(Byte3, Byte3)
  fullName: Vim.Math3d.Byte3.Equality(Vim.Math3d.Byte3, Vim.Math3d.Byte3)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Equality
    path: ../src/Structs.cs
    startLine: 1654
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator ==(Byte3 x0, Byte3 x1)
    parameters:
    - id: x0
      type: Vim.Math3d.Byte3
    - id: x1
      type: Vim.Math3d.Byte3
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(x0 As Byte3, x1 As Byte3) As Boolean
  overload: Vim.Math3d.Byte3.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Byte3.op_Inequality(Vim.Math3d.Byte3,Vim.Math3d.Byte3)
  commentId: M:Vim.Math3d.Byte3.op_Inequality(Vim.Math3d.Byte3,Vim.Math3d.Byte3)
  id: op_Inequality(Vim.Math3d.Byte3,Vim.Math3d.Byte3)
  parent: Vim.Math3d.Byte3
  langs:
  - csharp
  - vb
  name: Inequality(Byte3, Byte3)
  nameWithType: Byte3.Inequality(Byte3, Byte3)
  fullName: Vim.Math3d.Byte3.Inequality(Vim.Math3d.Byte3, Vim.Math3d.Byte3)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Inequality
    path: ../src/Structs.cs
    startLine: 1655
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static bool operator !=(Byte3 x0, Byte3 x1)
    parameters:
    - id: x0
      type: Vim.Math3d.Byte3
    - id: x1
      type: Vim.Math3d.Byte3
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(x0 As Byte3, x1 As Byte3) As Boolean
  overload: Vim.Math3d.Byte3.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Byte3.op_Implicit(System.ValueTuple{System.Byte,System.Byte,System.Byte})~Vim.Math3d.Byte3
  commentId: M:Vim.Math3d.Byte3.op_Implicit(System.ValueTuple{System.Byte,System.Byte,System.Byte})~Vim.Math3d.Byte3
  id: op_Implicit(System.ValueTuple{System.Byte,System.Byte,System.Byte})~Vim.Math3d.Byte3
  parent: Vim.Math3d.Byte3
  langs:
  - csharp
  - vb
  name: Implicit((Byte x, Byte y, Byte z) to Byte3)
  nameWithType: Byte3.Implicit((Byte x, Byte y, Byte z) to Byte3)
  fullName: Vim.Math3d.Byte3.Implicit(System.ValueTuple<System.Byte, System.Byte, System.Byte> to Vim.Math3d.Byte3)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Implicit
    path: ../src/Structs.cs
    startLine: 1656
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static implicit operator Byte3((byte x, byte y, byte z) tuple)
    parameters:
    - id: tuple
      type: System.ValueTuple{System.Byte,System.Byte,System.Byte}
    return:
      type: Vim.Math3d.Byte3
    content.vb: Public Shared Widening Operator CType(tuple As(x As Byte, y As Byte, z As Byte)(Of Byte , Byte, Byte)) As Byte3
  overload: Vim.Math3d.Byte3.op_Implicit*
  nameWithType.vb: Byte3.Widening((x As Byte, y As Byte, z As Byte)(Of Byte, Byte, Byte) to Byte3)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.Byte3.Widening(System.ValueTuple(Of System.Byte, System.Byte, System.Byte) to Vim.Math3d.Byte3)
  name.vb: Widening((x As Byte, y As Byte, z As Byte)(Of Byte, Byte, Byte) to Byte3)
- uid: Vim.Math3d.Byte3.op_Implicit(Vim.Math3d.Byte3)~System.ValueTuple{System.Byte,System.Byte,System.Byte}
  commentId: M:Vim.Math3d.Byte3.op_Implicit(Vim.Math3d.Byte3)~System.ValueTuple{System.Byte,System.Byte,System.Byte}
  id: op_Implicit(Vim.Math3d.Byte3)~System.ValueTuple{System.Byte,System.Byte,System.Byte}
  parent: Vim.Math3d.Byte3
  langs:
  - csharp
  - vb
  name: Implicit(Byte3 to (Byte x, Byte y, Byte z))
  nameWithType: Byte3.Implicit(Byte3 to (Byte x, Byte y, Byte z))
  fullName: Vim.Math3d.Byte3.Implicit(Vim.Math3d.Byte3 to System.ValueTuple<System.Byte, System.Byte, System.Byte>)
  type: Operator
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: op_Implicit
    path: ../src/Structs.cs
    startLine: 1657
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static implicit operator (byte x, byte y, byte z)(Byte3 self)
    parameters:
    - id: self
      type: Vim.Math3d.Byte3
    return:
      type: System.ValueTuple{System.Byte,System.Byte,System.Byte}
    content.vb: Public Shared Widening Operator CType(self As Byte3) As(x As Byte, y As Byte, z As Byte)(Of Byte , Byte, Byte)
  overload: Vim.Math3d.Byte3.op_Implicit*
  nameWithType.vb: Byte3.Widening(Byte3 to (x As Byte, y As Byte, z As Byte)(Of Byte, Byte, Byte))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Vim.Math3d.Byte3.Widening(Vim.Math3d.Byte3 to System.ValueTuple(Of System.Byte, System.Byte, System.Byte))
  name.vb: Widening(Byte3 to (x As Byte, y As Byte, z As Byte)(Of Byte, Byte, Byte))
- uid: Vim.Math3d.Byte3.Zero
  commentId: F:Vim.Math3d.Byte3.Zero
  id: Zero
  parent: Vim.Math3d.Byte3
  langs:
  - csharp
  - vb
  name: Zero
  nameWithType: Byte3.Zero
  fullName: Vim.Math3d.Byte3.Zero
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: Zero
    path: ../src/Structs.cs
    startLine: 1659
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Byte3 Zero
    return:
      type: Vim.Math3d.Byte3
    content.vb: Public Shared Zero As Byte3
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Byte3.MinValue
  commentId: F:Vim.Math3d.Byte3.MinValue
  id: MinValue
  parent: Vim.Math3d.Byte3
  langs:
  - csharp
  - vb
  name: MinValue
  nameWithType: Byte3.MinValue
  fullName: Vim.Math3d.Byte3.MinValue
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MinValue
    path: ../src/Structs.cs
    startLine: 1660
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Byte3 MinValue
    return:
      type: Vim.Math3d.Byte3
    content.vb: Public Shared MinValue As Byte3
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Byte3.MaxValue
  commentId: F:Vim.Math3d.Byte3.MaxValue
  id: MaxValue
  parent: Vim.Math3d.Byte3
  langs:
  - csharp
  - vb
  name: MaxValue
  nameWithType: Byte3.MaxValue
  fullName: Vim.Math3d.Byte3.MaxValue
  type: Field
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: MaxValue
    path: ../src/Structs.cs
    startLine: 1661
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public static Byte3 MaxValue
    return:
      type: Vim.Math3d.Byte3
    content.vb: Public Shared MaxValue As Byte3
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Vim.Math3d.Byte3.SetX(System.Byte)
  commentId: M:Vim.Math3d.Byte3.SetX(System.Byte)
  id: SetX(System.Byte)
  parent: Vim.Math3d.Byte3
  langs:
  - csharp
  - vb
  name: SetX(Byte)
  nameWithType: Byte3.SetX(Byte)
  fullName: Vim.Math3d.Byte3.SetX(System.Byte)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SetX
    path: ../src/Structs.cs
    startLine: 1662
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly Byte3 SetX(byte x)
    parameters:
    - id: x
      type: System.Byte
    return:
      type: Vim.Math3d.Byte3
    content.vb: Public Function SetX(x As Byte) As Byte3
  overload: Vim.Math3d.Byte3.SetX*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Byte3.SetY(System.Byte)
  commentId: M:Vim.Math3d.Byte3.SetY(System.Byte)
  id: SetY(System.Byte)
  parent: Vim.Math3d.Byte3
  langs:
  - csharp
  - vb
  name: SetY(Byte)
  nameWithType: Byte3.SetY(Byte)
  fullName: Vim.Math3d.Byte3.SetY(System.Byte)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SetY
    path: ../src/Structs.cs
    startLine: 1663
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly Byte3 SetY(byte x)
    parameters:
    - id: x
      type: System.Byte
    return:
      type: Vim.Math3d.Byte3
    content.vb: Public Function SetY(x As Byte) As Byte3
  overload: Vim.Math3d.Byte3.SetY*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
- uid: Vim.Math3d.Byte3.SetZ(System.Byte)
  commentId: M:Vim.Math3d.Byte3.SetZ(System.Byte)
  id: SetZ(System.Byte)
  parent: Vim.Math3d.Byte3
  langs:
  - csharp
  - vb
  name: SetZ(Byte)
  nameWithType: Byte3.SetZ(Byte)
  fullName: Vim.Math3d.Byte3.SetZ(System.Byte)
  type: Method
  source:
    remote:
      path: src/Structs.cs
      branch: dev
      repo: https://github.com/vimaec/Math3D.git
    id: SetZ
    path: ../src/Structs.cs
    startLine: 1664
  assemblies:
  - Vim.Math3D
  namespace: Vim.Math3d
  syntax:
    content: public readonly Byte3 SetZ(byte x)
    parameters:
    - id: x
      type: System.Byte
    return:
      type: Vim.Math3d.Byte3
    content.vb: Public Function SetZ(x As Byte) As Byte3
  overload: Vim.Math3d.Byte3.SetZ*
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
references:
- uid: Vim.Math3d
  commentId: N:Vim.Math3d
  name: Vim.Math3d
  nameWithType: Vim.Math3d
  fullName: Vim.Math3d
- uid: System.IEquatable{Vim.Math3d.Byte3}
  commentId: T:System.IEquatable{Vim.Math3d.Byte3}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Byte3>
  nameWithType: IEquatable<Byte3>
  fullName: System.IEquatable<Vim.Math3d.Byte3>
  nameWithType.vb: IEquatable(Of Byte3)
  fullName.vb: System.IEquatable(Of Vim.Math3d.Byte3)
  name.vb: IEquatable(Of Byte3)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vim.Math3d.Byte3
    name: Byte3
    nameWithType: Byte3
    fullName: Vim.Math3d.Byte3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vim.Math3d.Byte3
    name: Byte3
    nameWithType: Byte3
    fullName: Vim.Math3d.Byte3
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: Vim.Math3d.Byte3.#ctor*
  commentId: Overload:Vim.Math3d.Byte3.#ctor
  name: Byte3
  nameWithType: Byte3.Byte3
  fullName: Vim.Math3d.Byte3.Byte3
- uid: System.ValueTuple{System.Byte,System.Byte,System.Byte}
  commentId: T:System.ValueTuple{System.Byte,System.Byte,System.Byte}
  parent: System
  definition: System.ValueTuple`3
  name: (T1, T2, T3)<Byte, Byte, Byte>
  nameWithType: (T1, T2, T3)<Byte, Byte, Byte>
  fullName: System.ValueTuple<System.Byte, System.Byte, System.Byte>
  nameWithType.vb: (T1, T2, T3)(Of Byte, Byte, Byte)
  fullName.vb: System.ValueTuple(Of System.Byte, System.Byte, System.Byte)
  name.vb: (T1, T2, T3)(Of Byte, Byte, Byte)
  spec.csharp:
  - uid: System.ValueTuple`3
    name: (T1, T2, T3)
    nameWithType: (T1, T2, T3)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`3
    name: (T1, T2, T3)
    nameWithType: (T1, T2, T3)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple`3
  commentId: T:System.ValueTuple`3
  isExternal: true
  name: (T1, T2, T3)<T1, T2, T3>
  nameWithType: (T1, T2, T3)<T1, T2, T3>
  fullName: System.ValueTuple<T1, T2, T3>
  nameWithType.vb: (T1, T2, T3)(Of T1, T2, T3)
  fullName.vb: System.ValueTuple(Of T1, T2, T3)
  name.vb: (T1, T2, T3)(Of T1, T2, T3)
  spec.csharp:
  - uid: System.ValueTuple`3
    name: (T1, T2, T3)
    nameWithType: (T1, T2, T3)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`3
    name: (T1, T2, T3)
    nameWithType: (T1, T2, T3)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Byte3.Create*
  commentId: Overload:Vim.Math3d.Byte3.Create
  name: Create
  nameWithType: Byte3.Create
  fullName: Vim.Math3d.Byte3.Create
- uid: Vim.Math3d.Byte3
  commentId: T:Vim.Math3d.Byte3
  parent: Vim.Math3d
  name: Byte3
  nameWithType: Byte3
  fullName: Vim.Math3d.Byte3
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Byte3.Equals*
  commentId: Overload:Vim.Math3d.Byte3.Equals
  name: Equals
  nameWithType: Byte3.Equals
  fullName: Vim.Math3d.Byte3.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Byte3.GetHashCode*
  commentId: Overload:Vim.Math3d.Byte3.GetHashCode
  name: GetHashCode
  nameWithType: Byte3.GetHashCode
  fullName: Vim.Math3d.Byte3.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Byte3.ToString*
  commentId: Overload:Vim.Math3d.Byte3.ToString
  name: ToString
  nameWithType: Byte3.ToString
  fullName: Vim.Math3d.Byte3.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Vim.Math3d.Byte3.Deconstruct*
  commentId: Overload:Vim.Math3d.Byte3.Deconstruct
  name: Deconstruct
  nameWithType: Byte3.Deconstruct
  fullName: Vim.Math3d.Byte3.Deconstruct
- uid: System.IEquatable{Vim.Math3d.Byte3}.Equals(Vim.Math3d.Byte3)
  commentId: M:System.IEquatable{Vim.Math3d.Byte3}.Equals(Vim.Math3d.Byte3)
  parent: System.IEquatable{Vim.Math3d.Byte3}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(Byte3)
  nameWithType: IEquatable<Byte3>.Equals(Byte3)
  fullName: System.IEquatable<Vim.Math3d.Byte3>.Equals(Vim.Math3d.Byte3)
  nameWithType.vb: IEquatable(Of Byte3).Equals(Byte3)
  fullName.vb: System.IEquatable(Of Vim.Math3d.Byte3).Equals(Vim.Math3d.Byte3)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<Byte3>.Equals
    fullName: System.IEquatable<Vim.Math3d.Byte3>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Byte3
    name: Byte3
    nameWithType: Byte3
    fullName: Vim.Math3d.Byte3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of Byte3).Equals
    fullName: System.IEquatable(Of Vim.Math3d.Byte3).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Vim.Math3d.Byte3
    name: Byte3
    nameWithType: Byte3
    fullName: Vim.Math3d.Byte3
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Vim.Math3d.Byte3.op_Equality*
  commentId: Overload:Vim.Math3d.Byte3.op_Equality
  name: Equality
  nameWithType: Byte3.Equality
  fullName: Vim.Math3d.Byte3.Equality
- uid: Vim.Math3d.Byte3.op_Inequality*
  commentId: Overload:Vim.Math3d.Byte3.op_Inequality
  name: Inequality
  nameWithType: Byte3.Inequality
  fullName: Vim.Math3d.Byte3.Inequality
- uid: Vim.Math3d.Byte3.op_Implicit*
  commentId: Overload:Vim.Math3d.Byte3.op_Implicit
  name: Implicit
  nameWithType: Byte3.Implicit
  fullName: Vim.Math3d.Byte3.Implicit
  nameWithType.vb: Byte3.Widening
  fullName.vb: Vim.Math3d.Byte3.Widening
  name.vb: Widening
- uid: Vim.Math3d.Byte3.SetX*
  commentId: Overload:Vim.Math3d.Byte3.SetX
  name: SetX
  nameWithType: Byte3.SetX
  fullName: Vim.Math3d.Byte3.SetX
- uid: Vim.Math3d.Byte3.SetY*
  commentId: Overload:Vim.Math3d.Byte3.SetY
  name: SetY
  nameWithType: Byte3.SetY
  fullName: Vim.Math3d.Byte3.SetY
- uid: Vim.Math3d.Byte3.SetZ*
  commentId: Overload:Vim.Math3d.Byte3.SetZ
  name: SetZ
  nameWithType: Byte3.SetZ
  fullName: Vim.Math3d.Byte3.SetZ
